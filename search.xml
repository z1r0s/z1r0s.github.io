<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CeasarCipher</title>
      <link href="/2020/08/22/ceasarcipher/"/>
      <url>/2020/08/22/ceasarcipher/</url>
      
        <content type="html"><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><p>​        根据罗马早期纪传体作者<strong>盖乌斯·苏维托尼乌斯</strong>的记载，<strong>凯撒大帝</strong>曾用一种移位的方式对军事信息进行加密，后人称这种加密方式为凯撒加密。<strong>凯撒密码</strong>是一种<strong>替换加密</strong>的方案，<strong>明文</strong>中所有字母都在<strong>字母表</strong>上向后(或向前)按照一个固定数目进行偏移后被替换成<strong>密文</strong>。</p><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>​        <strong>凯撒加密</strong>：</p><p>​        将<strong>26个字母</strong>按顺序进行排列并形成环，将每一位英文字母用其前面(或后面)的第k位字母来表示，替换之后形成新的字符串即为密文。</p><p>​        <strong>举个栗子</strong>：</p><p>​        当明文为：T，偏移量为：3时，使用CeasarCipher如下图所示。</p><p><img src="CeasarCipher.png" alt="CeasarCipher"></p><p>​        以单表替换的角度来解释即为：</p><p>​        明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ</p><p>​        密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC</p><p>​        明文字母表与密文字母表存在上下的一一对应。当明文为T时，对应密文字母表中的W；解密时也按照一一对应的关系找到每个密文对应的明文即可。</p><p>​        <strong>数学语言描述</strong>：</p><ol><li>首先将字母用数字代替，即：A=0，B=1，C=2，…，Z=25。</li><li>明文空间记为：M</li><li>密文空间记为：C</li><li>密钥空间记为：K<del>m</del></li><li>将偏移量记为：k</li><li>加密操作记为：E<del>(m)</del></li><li>解密操作记为：D<del>(c)</del></li></ol><p>则有：</p><p><strong>加密变换</strong>：<br>$$<br>E_(m_) = (m + k) \ mod \ 26 \ \   ,(m∈M，k∈K)<br>$$<br><strong>解密变换</strong>：<br>$$<br>D_(c_) = (c - k) \ mod \ 26  ,\ \ \  (c∈C，k∈K)<br>$$<br><font color="red">其中：明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合</font></p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>程序流程图</strong>：</p><p><img src="CeasarCipherFlowchart.png" alt="CeasarCipherFlowchart"></p><p>注：</p><ul><li><p>第一次输入一个int型数据op，若<code>op==1</code>则执行加密操作，若<code>op==0</code>则执行解密操作，否则结束程序。</p></li><li><p>第二次输入一个字符串，进行加密或解密操作。</p></li><li><p>操作结果后显示加密或解密的结果。</p></li></ul><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p><strong>Ceasar类</strong>：</p><pre class="line-numbers language-C#"><code class="language-C#">namespace DemoCeasar{    public class Ceasar    {        #region 加密操作        /// <summary>        /// Ceasar加密操作        /// </summary>        /// <param name="plaintext">明文)</param>        /// <param name="key">密钥(1-25)</param>        /// <returns>密文</returns>        internal string EnCrypt(string plaintext, int key)        {            string ciphertext = null;            string str;            str = plaintext.ToUpper();            foreach(char ch in str)            {                if(ch >= 'A' && ch <= 'Z')                {                    ciphertext += (char)('A' + (ch - 'A' + key + 26) % 26);                }                else                {                    ciphertext += ch;                }            }            return ciphertext;        }        /// <summary>        /// Avocat加密（密钥为10）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string AvocatEnCrypt(string plaintext)        {            return EnCrypt(plaintext, 10);        }        /// <summary>        /// ROT13加密（密钥为13）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string ROT13EnCrypt(string plaintext)        {            return EnCrypt(plaintext, 13);        }        /// <summary>        /// Cassis加密（密钥为-5）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string CassisEnCrypt(string plaintext)        {            return EnCrypt(plaintext, -5);        }        /// <summary>        /// Cassette加密（密钥为-6）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string CassetteEnCrypt(string plaintext)        {            return EnCrypt(plaintext, -6);        }        #endregion        #region 解密操作        /// <summary>        /// Ceasar解密操作        /// </summary>        /// <param name="ciphertext">密文</param>        /// <param name="key">密钥(1-25)</param>        /// <returns>明文</returns>        internal string DeCrypt(string ciphertext, int key)        {            string plaintext = null;            string str;            str = ciphertext.ToUpper();            foreach (char ch in str)            {                if(ch >= 'A' && ch <= 'Z')                {                    plaintext += (char)('A' + (ch - 'A' - key + 26) % 26);                }                else                {                    plaintext += ch;                }            }            return plaintext;        }        /// <summary>        /// Avocat解密（密钥为10）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string AvocatDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, 10);        }        /// <summary>        /// ROT13解密（密钥为13）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string ROT13DeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, 13);        }        /// <summary>        /// Cassis解密（密钥为-5）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string CassisDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, -5);        }        /// <summary>        /// Cassette解密（密钥为-6）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string CassetteDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, -6);        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ceasar类核心解读：</p><p>​        在ceasar中理解的字母表是一个转轮的形式，但在实际的存储中而是以线性方式存储，所有在本代码中通过使用《初等数论》中的<strong>模运算</strong>来得到移位后的字母。（全部以<strong>“A”</strong>为基准）</p><ol><li>得到<strong>给定字母</strong>与“A”的偏移量</li><li>计算<strong>移位后</strong>对“A”的偏移量</li><li><font color="red">在取模之前先加上一个基数，使之前的计算结果全部以转化为正数</font></li><li><strong>取模运算</strong>得到目标字母相对于“A”的偏移量</li><li>得到相对于“A”偏移字母的ASCII码并将其<strong>强制转化为字母</strong></li></ol><p><strong>Program测试类：</strong></p><pre class="line-numbers language-C#"><code class="language-C#">using System;namespace DemoCeasar{    class Program    {        static void Main(string[] args)        {            Console.Title = "欢迎使用Ceasar";            Console.WriteLine("请输入您期望的操作：(1:加密,0:解密)");            string str = Console.ReadLine();            int op;            if(int.TryParse(str,out op))            {                Ceasar ceasar = new Ceasar();                if (op == 1)                {                    Console.WriteLine("请输入明文：(字母串)");                    string plaintext = Console.ReadLine();                    Console.WriteLine("请输入密钥:(整数)");                    int key = Console.Read() - '0';                    string ciphertext = ceasar.EnCrypt(plaintext, key);                    Console.WriteLine("{0}加密之后的密文为:{1}",plaintext,ciphertext);                }                else if(op == 0)                {                    Console.WriteLine("请输入密文：(字母串)");                    string ciphertext = Console.ReadLine();                    Console.WriteLine("请输入密钥:(整数)");                    int key = Console.Read() - '0';                    string plaintext = ceasar.DeCrypt(ciphertext, key);                    Console.WriteLine(plaintext);                }                else                {                    Console.WriteLine("输入错误程序终止!!!");                }            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果显示"><a href="#结果显示" class="headerlink" title="结果显示"></a>结果显示</h1><p><strong>加密操作</strong>：</p><p><img src="EnCrypt.png" alt="EnCrypt"></p><p><strong>解密操作</strong>：</p><p><img src="DeCrypt.png" alt="DeCrypt"></p><h1 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h1><p>​        Ceasar密码作为经典的加密算法，在罗马时期有很好的应用。其明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合，也即其加密的密钥有25种情况(<font color="blue">0不计算在内</font>)，通过枚举密钥的方式揣测明文。</p><h2 id="穷举搜索"><a href="#穷举搜索" class="headerlink" title="穷举搜索"></a>穷举搜索</h2><p><strong>CrackSeasar类</strong>：</p><pre class="line-numbers language-C#"><code class="language-C#">namespace Crack_Seasar{    public class CrackSeasar    {        #region 枚举检索        /// <summary>        /// 枚举搜索        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>返回可能的明文字符串组</returns>        internal string[] EnumerativeSearch(string ciphertext)        {            string[] plaintext = new string[26];            string str = ciphertext.ToUpper();            // 枚举解密            for (int key = 1; key < 26; key++)            {                foreach (char ch in str)                {                    if (ch >= 'A' && ch <= 'Z')                    {                        plaintext[key - 1] += (char)('A' + (ch - 'A' - key + 26) % 26);                    }                    else                    {                        plaintext[key - 1] += ch;                    }                }            }            return plaintext;        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Program测试类</strong>：</p><pre class="line-numbers language-csahrp"><code class="language-csahrp">using System;namespace Crack_Seasar{    class Program    {        static void Main(string[] args)        {            Console.Title = "CrackSear";            Console.WriteLine("请输入待破解密文：");            string ciphertext = Console.ReadLine();            // 枚举搜索            CrackSeasar crackSeasar = new CrackSeasar();            string[] plaintext = crackSeasar.EnumerativeSearch(ciphertext);            // Display            for(int i = 0;i < 25;i++)            {                Console.WriteLine("key:{0} \t -> \t {1}", i + 1, plaintext[i]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><p><img src="EnumerativeSearch1.png" alt="EnumerativeSearch"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://baike.baidu.com/item/恺撒密码/4905284?fromtitle=%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81&fromid=1336345&fr=aladdin" target="_blank" rel="noopener">凯撒密码-百度百科</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8639300.html" target="_blank" rel="noopener">凯撒密码加解密即破解实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ceasar </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
