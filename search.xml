<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>批处理笔记</title>
      <link href="/2020/08/22/pi-chu-li-bi-ji/"/>
      <url>/2020/08/22/pi-chu-li-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="批处理文件"><a href="#批处理文件" class="headerlink" title="批处理文件"></a>批处理文件</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>批处理文件也称<strong>批处理程序</strong>或<strong>脚本</strong>，使用它可以<strong>简化日常或重复性任务</strong></li><li>批处理文件中常见是<strong>DOS批处理</strong>和<strong>PS批处理等</strong>（文中的批处理指的的DOS批处理）</li><li>DOS批处理文件是<strong>DOS命令</strong>的批量和技巧性的应用，体现了DOS的精华</li><li>批处理文件是无格式的<strong>文本文件</strong>，包含<strong>一条或多条命令</strong>，文件扩展名为<strong>.bat或.cmd</strong></li><li>批处理文件在被<strong>DOS</strong>或<strong>cmd</strong>执行时，会按照该文件中各个命令出现的<strong>顺序</strong>来逐个<strong>运行</strong></li></ul><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><h3 id="copy命令"><a href="#copy命令" class="headerlink" title="copy命令"></a>copy命令</h3><p>​        copy命令是实现<strong>文件复制</strong>的命令，它可以将文件从某个目录复制到另外的目录。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">copy con 批处理文件名称.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>con：是指字符输入设备，通常指键盘</li></ul><p><strong>步骤</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/copy命令编写批处理文件.png" alt="copy命令编写批处理文件"></center><p>注：</p><ul><li>以<strong>【Ctrl + Z】</strong>组合键完成批处理文件的创建</li></ul><p><strong>结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/copy命令编写批处理文件展示结果.png" alt="copy命令编写批处理文件展示结果"></center><h3 id="edit命令"><a href="#edit命令" class="headerlink" title="edit命令"></a>edit命令</h3><p>​        Edit是<strong>DOS系统</strong>中的文本文件编辑程序，可以快速编辑批处理文件。</p><h3 id="记事本程序"><a href="#记事本程序" class="headerlink" title="记事本程序"></a>记事本程序</h3><ul><li>新建一个文本文件</li><li>用记事本打开文本文件，并在其中编写批处理命令</li><li>以<strong>.bat</strong>的后缀名的形式保存此文件</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>其他批处理命令编辑器主要指的是其他文本编辑器，如<strong>notepad++</strong>、<strong>EditPlus</strong>等等，他们类似于记事本程序，可以直接以文本的形式编辑批处理命令。如下图所示：</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/文本编辑器编写批处理文件.png" alt="文本编辑器编写批处理文件"></center><h1 id="批处理命令"><a href="#批处理命令" class="headerlink" title="批处理命令"></a>批处理命令</h1><h2 id="批处理基础命令"><a href="#批处理基础命令" class="headerlink" title="批处理基础命令"></a>批处理基础命令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>​        打开或关闭<strong>命令回显</strong>功能或<strong>显示消息</strong></p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">echo [{on | off}] [message]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>{ on | off }：指定是否打开命令回显功能</li><li>message：指定要在屏幕上显示的文本信息</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 关闭回显功能@echo off:: 在命令提示符窗口显示"Pleione_Plus"echo By Pleione_Plus:: 显示一个空行echo.:: 显示一个变量echo %windir%:: 显示重定向到文件中echo "this is a demo!" > tmp.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/echo-display.png" alt="echo-display"></center><h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>​        <strong>暂停</strong>批处理程序，直到有一个按键<strong>被触发</strong></p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">pause<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/pause-display.png" alt="pause-display"></center><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>​        注释该行，可回显，但不执行<a href ::"执行时直接跳过该行">^1</a>:</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">rem [comment]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>comment：指定要作为注释的任何字符串</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">rem 这是一个内容注释:: 这也是一个内容注释，但该行执行时相当于不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/注释-display.png" alt="注释-display"></center><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>​        从一个批处理程序<strong>调用</strong>另一个批处理程序，而<strong>不终止父批处理程序</strong></p><ul><li>调用子函数</li><li>调用子批处理</li><li><font color="red">以命令行方式解析字符串变量</font></li></ul><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">call [[Drive:] [Path] Filename [BatchParameters]] [:Label [Arguments]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>[Drive:] [Path] Filename：指定要调用的批处理程序的位置和名称。<ul><li>Filename参数必须有.bat或.cmd扩展名</li></ul></li><li>BatchParameters：指定批处理程序所需的任何命令行信息，包括命令行选项、文件名、批处理参数或变量</li><li>:Label：调用文本文件内命令段，以:Label开头，以goto :eof结尾</li><li>Arguments：指定要传递给其新实例的所有命令行信息</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 调用另一个批处理程序call 1.bat:: 以命令方式解析变量值set aa=123456set cmdstr=echo %aa%call %cmdstr%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/call-以命令行方式解析字符串-display.png" alt="call-以命令行方式解析字符串-display"></center><h3 id="cls"><a href="#cls" class="headerlink" title="cls"></a>cls</h3><p>​        <strong>清屏</strong>命令，但不清除历史记录</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>​        <strong>调用外部程序</strong>，所有的<strong>DOS命令</strong>和<strong>命令行程序</strong>都可以由<code>start</code>命令来调用</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">start [/min | /max] [parameters]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/min：以最小化方式启动窗口（必须在parameters之前）</li><li>/max：以最大化方式启动窗口（必须在parameters之前）</li><li>parameter：传递给程序的参数，（为空时默认打开一个新的命令提示符窗口）</li></ul><p><strong>eg1</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">start /max calc.exe:: 调用计算器程序，以最大状态展示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/start-calc-display.png" alt="start-calc-display"></center><p><strong>eg2</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">start "" "C:\Program Files (x86)\Tencent\TIM\Bin\TIM.exe":: 中间的引号不能省略，否则将以CUI方式打开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/start-TIM-display.png" alt="start-TIM-display"></center><h2 id="批处理高级命令"><a href="#批处理高级命令" class="headerlink" title="批处理高级命令"></a>批处理高级命令</h2><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>​        指定跳转到标签，找到标签后，程序将处理从下一行开始的命令</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">goto label<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>label：指定所要转向的批处理程序中的行</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo off:startrem 如果var值小于3则输出set /a var+=1echo %var%if %var% leq 3 goto startpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/goto-display.png" alt="goto-display"></center><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>​        在批处理程序中执行条件处理</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">if [not] errorlevel Number Command [else Expression]if [not] String1==String2 Command [else Expression]if [not] exist FileName Command [else Expression]if [/i] String1 ComoareOp String2 Command [else Expression]if defined Variable Command [else Expression]if cmdextversion Number Command [else Expression]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>not：指定只有当条件为假时才执行该命令</li><li><span name="iferrorlevel">errorlevel Number</span>：只有当有cmd运行的前一个程序返回等于或大于Number的退出码时，才能指定真条件</li><li>Command：指定只有满足当前的条件时才应执行的命令</li><li>Expression：指定将传递给else子句中命令的命令行命令和任何参数</li><li>String1==String2：只有当String1和String2相同时才能指定真条件</li><li>exist FileName：如果FileName文件存在，则指定条件真</li><li><a href="#ComoareOp">ComoareOp</a>：指定三个字母的比较运算符来做串比较</li><li>/i：强制字符串忽略大小写</li><li>cmdextversion Number：只有当与cmd的“命令扩展”功能相关的内部版本号等于或大于Number时，才指定真条件</li><li>defined Variable：如果定义了Variable，则指定条件为真</li></ul><p><strong>注</strong>：</p><ul><li>if语句多行书写的要求<ul><li>Command的左括号必须和if在同行</li><li>else必须和Command的右括号在同行</li><li>Expression的左括号必须和else在同行</li><li>Command和Expression可以是命令集</li></ul></li></ul><p><strong>eg</strong>：<span name="strCompare"> </span></p><pre class="line-numbers language-bat"><code class="language-bat">:: 字符串比较@echo offset str1=abcd1234set str2=ABCD1234set str3=abcd1233:: 是否忽略大小写if %str1%==%str2% (echo %str1%与%str2%相同!) else (echo %str1%与%str2%不同!)if /i %str1% EQU %str2% (echo %str1%与%str2%相同!) else (echo %str1%与%str2%不同!)echo.:: 字符串中数值大小比较if %str1% LSS %str2% (echo %str1% ^< %str2%) else (echo %str1% ^> %str2%)if %str1% LSS %str3% (echo %str1% ^< %str3%) else (echo %str1% ^> %str3%)echo.:: 选择是否显示当前系统时间set /p choice=是否显示当前系统时间?(y/n)if /i not %choice% EQU n (echo 当前系统的时间是: %data% %time%)echo.pause>nul:: 存在判断（判断文件或文件夹是否存在）@echo off:: 判断文件是否存在if exist %0 echo 文件%0是存在的！echo.:: 判断文件夹是否存在if not exist %~df0 (    echo 文件夹%~df0不存在！)else (    echo 文件夹%~df0存在！)pause>nul:: 定义判断@echo off:: 定义变量set var=111;:: 判断变量是否被定义if defined var (echo var=%var%) else (echo var尚未定义！):: 删除变量set var=:: 判断变量是否被定义if defined var (echo var=%var%) else (echo var尚未定义！)pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/if-display.png" alt="if-display"></center><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>​        在批处理程序中，通过显示提示信息并暂停批处理程序，用户可以从一组选项键中进行选择</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">choice [/c [Choices]] [/n] [/cs] [/t Timeout /d Choice] [/m text]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/c Choices：指定用户选项键。显示时，选项键用逗号分隔，出现在【】内，后面跟着问号。默认情况下只有【Y,N】</li><li>/n：</li><li>/cs：指定用户选项键必须区分大小写。默认情况不区分大小写</li><li>/t Timeout：指定在默认为指定键之前choice暂停指定的秒数</li><li>/d Choice：指定默认选择，必须和/t一起使用</li><li>/m text：指定要在提示符之前显示的文字</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offchoice /c dme /m "dir,mem,end"if errorlevel 3 goto endif errorlevel 2 goto memif errorlevel 1 goto dir:dirdirgoto end:memmemgoto end:endecho goodbyepause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/choice-display.png" alt="choice-display"></center><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​        对一组文件中的每个文件运行指定的命令</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">for {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]for /l {%Variable | %%Variable} in (start,step,end) do Command [CommandLineOptions]for /f ["options"] {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]for {/d | /r} {%Variable | %%Variable} in (Set) do Command [CommandLineOptions]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>%Variable | %%Variable：代表可替换的参数，%Variable通过命令提示符执行for命令；%%Variable在批处理文件中执行for命令。（必须，变量区分大小写）</li><li>(Set)：指定要用指定命令处理的一个或多个文件、目录、数值范围以及文本字符串。（必须，需要括号）</li><li>Command：指定要对包括在指定的（set）中每个文件、目录、数值范围或文本字符串所执行的命令</li><li>CommandLineOptions：指定要与所执行命令一起使用的任何命令行选项</li><li>/l：设置计数循环</li><li>/f：能对字符串进行操作，也能对命令的返回值进行操作，还可以访问磁盘中的ASCII文件。<ul><li>options：eol=c、skip=n、delims=xxx、tokens=x,y,m-n、usebackq<ul><li>delims：指定字符串的分隔符</li><li>tokens：提取分隔后的块，默认只提取第一块</li></ul></li><li>set：”string”、’command’、file-set</li></ul></li><li>/d | /r：与文件和目录有关</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">rem 循环结构:: 基础循环结构@echo offecho 对集合遍历有：for %%i in (1,2,3,4,5,6) do echo %%ipause>nulcls:: /l开关:: 计数循环echo 计算1-100的和：set sum=set sum=0for /l %%i in (1,1,100) do (set /a sum += %%i)echo 之和为:%sum%pause>nulecho 计算1-100的和：setlocal enabledelayedexpansionset sum=set sum=0for /l %%i in (1,1,100) do (set /a sum = !sum! + %%i)echo 之和为:%sum%pause>nulcls:: /a 等号右边的字符串做数值计算:: setlocal enabledelayedexpansion 与 !sum!的组合使用:: /f开关:: (delims、tokens、skip、eol、userbackq、变量延迟):: 字符串@echo offecho No options::: 展示文本文件内容for /f %%a in (demo.txt) do echo a=%%a:: 展示字符串内容for /f %%a in ("1,2,10") do echo a=%%aecho.echo Options tokens ^& delimsfor /f "tokens=1-3 delims=," %%a in ("1,2,10") do echo a=%%a b=%%b c=%%cpause>nulcls:: 命令@echo offecho 本文件夹里面的文件有：for /f "skip=5 tokens=4-5 delims= " %%a in ('dir') do (    if not "%%a"=="<DIR>" if not "%%a"=="字节" if not "%%a"=="可用字节" echo %%b)pause>nulcls:: /D 或 /r开关:: 遍历出D盘下的所有文件夹（完整路径信息）@echo offsetlocal enabledelayedexpansionFOR /R d: %%i IN (.) DO (set dd=%%iset "dd=!dd:~0,-1!"echo !dd!)pauseexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-1.png" alt="for-display-1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-2.png" alt="for-display-2"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-3.png" alt="for-display-3"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-4.png" alt="for-display-4"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/for-display-5.png" alt="for-display-5"></center><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>​        用于显示、设置或删除变量、做数值计算、获取用户输入、字符串截取、字符串替换</p><p><strong>eg1</strong>：<span name="varDisplay">显示变量</span></p><pre class="line-numbers language-bat"><code class="language-bat">:: 显示变量set                    //显示所有定义的变量set s                //显示定义的以"s"开头的变量(无效)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-显示变量-display.png" alt="set-显示变量-display"></center><p><strong>eg2</strong>：<span name="varSet">设置变量</span></p><pre class="line-numbers language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 设置和调用变量set aa="123"        //bat中变量不区分类型echo %aa%            //调用变量时前后需要加上"%"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-设置和调用变量-display.png" alt="set-设置和调用变量-display"></center><p><strong>eg3</strong>：<span name="varDel">删除变量</span></p><pre class="line-numbers language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 删除变量，在设置变量之前先删除一下，若之前没有定义，则此句无任何意义@echo offtitle 删除变量set aa=if defined aa (     echo aa未被删除) else (     echo aa已被删除 )  pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-删除变量-display.png" alt="set-删除变量-display"></center><p><strong>eg4</strong>：<span name="varCalculate">数值计算</span></p><pre class="line-numbers language-bat"><code class="language-bat">:: 算数运算set aa=1set bb=0set /a aa=%aa% + 1,bb+=%aa%echo %aa%echo %bb%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>/a：等号右边按数值计算</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-数值计算-display.png" alt="set-数值计算-display"></center><p><strong>eg5</strong>：<span name="varInput">获取用户输入</span></p><pre class="line-numbers language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 获取用户输入set /p msg=请输入信息:echo %msg%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>/p：获取用户输入</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-获取用户输入-display.png" alt="set-获取用户输入-display"></center><p><strong>eg6</strong>：<span name="strSplit">字符串截取</span></p><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 字符串截取:: 字符串截取set var=%str:~偏移量,长度%rem 截取字符串@echo offset str=1234567890echo %str%set var=%str:~1,1%echo 偏移为：1，长度为1：%var%set var=%str:~1,4%echo 偏移为：1，长度为4：%var%set var=%str:~-3%echo 截取后三位：%var%set var=%str:~3%echo 偏移为3，截取剩余：%var%set var=%str:~-5,4%echo 偏移为：-5，长度为4：%var%set var=%str:~0,-4%echo 弃掉后四位：%var%set var=%str:~-0,1%echo %var%set var=%str:~+0,1%echo %var%:: -0 = +0 = 0set var=%str:~-5,-8%echo 偏移为：-5，长度为-8：%var%pause>nulcls:: 格式化显示时间@echo offecho 当前时间是：%time% 即 %time:~0,2%点%time:~3,2%分%time:~6,2%秒%time:~9,2%厘秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>截取串获取：<code>%str:~偏移量,长度%</code><ul><li>偏移量和长度可正可负。<ul><li>偏移量为正，相对左端第一位偏移；偏移量为负，相对于右端第0位偏移。(<font color="red">-0=+0=0</font>)</li><li>长度为正，表示截取字符个数；长度为负，表示从右端抛弃字符个数。</li></ul></li><li>如果只有一个数字，则其表示偏移量，<font color="red">长度为偏移量之后所有位的个数</font></li></ul></li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-字符串截取-display.png" alt="set-字符串截取-display"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-格式化显示时间-display.png" alt="set-格式化显示时间-display"></center><p><strong>eg7</strong>：<span name="strReplace">字符串替换</span></p><pre class="line-numbers language-bat"><code class="language-bat">::::::::::::::::::::::::::::::::::::::::::::::: 替换字符串@echo offset aa=伟大的中国！我为你自豪！echo 替换前：%aa%echo 替换后：%aa:中国=中华人民共和国%:: 获取第一次赋的值echo aa=%aa%set "aa=%aa:中国=中华人民共和国%"echo aa=%aa%pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/set-替换字符串-display.png" alt="set-替换字符串-display"></center><h3 id="setx"><a href="#setx" class="headerlink" title="setx"></a>setx</h3><p>​        设置永久变量</p><pre class="line-numbers language-bash"><code class="language-bash">:: 将D:\添加到PATH变量中setx PATH "%path%<span class="token punctuation">;</span>D:\"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="setlocal"><a href="#setlocal" class="headerlink" title="setlocal"></a>setlocal</h3><p>​        启动批处理文件中环境变量的本地化，本地化将持续到出现匹配的endlocal命令活着到达批处理文件结尾为止。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">setlocal {enableextension | disableextension} {enabledelayedexpansion | disabledelayedexpansion}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>enableextension：启用命令扩展，直到出现endlocal命令</li><li>disableextension：禁用命令扩展，直到出现endlocal命令</li><li>enabledelayedexpansion：<span name="enabledelayedexpansion">启用延迟的环境变量扩展</span>，直到出现endlocal命令</li><li>disabledelayedexpansion：<span name="disabledelayedexpansion">禁用延迟的环境变量扩展</span>，直到出现endlocal命令</li></ul><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">setlocal enableextensionsetlocal disableextensionsetlocal enabledelayedexpansionsetlocal disabledelayedexpansion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h3><p>​        可以在批处理文件内任何的地方使用批处理参数，以提取有关环境设置的信息。</p><p>​        cmd提供批处理参数扩展变量（%0~%9）,%0将批处理文件名替换，而%1-%9将由命令行键入的参数替换。</p><p><strong>eg</strong>:</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offrem 将echo回显重定向到tep.txt文件中Echo 产生一个临时文件 > tmp.txtRem 下行先保存当前目录，再将c:\windows设为当前目录pushd c:\windows@rem 调用文件内部的子程序Call :sub tmp.txtRem 下行恢复前次的当前目录Popdrem 再次调用Call :sub tmp.txtpauserem 删除创建的临时文件Del tmp.txtexit:subEcho 删除引号： %~1Echo 扩充到路径： %~f1Echo 扩充到一个驱动器号： %~d1Echo 扩充到一个路径： %~p1 Echo 扩充到一个文件名： %~n1Echo 扩充到一个文件扩展名： %~x1Echo 扩充的路径指含有短名： %~s1 Echo 扩充到文件属性： %~a1 Echo 扩充到文件的日期/时间： %~t1 Echo 扩充到文件的大小： %~z1 Echo 扩展到驱动器号和路径：%~dp1Echo 扩展到文件名和扩展名：%~nx1Echo 扩展到类似 DIR 的输出行：%~ftza1Echo.Goto :eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用参数-display.png" alt="使用参数-display"></center><p><strong>注</strong>：</p><ul><li>批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 …)</li><li>批参数(%n)的替代已被增强。您可以使用以下语法:<pre><code>%~1           - 删除引号(&quot;)，扩充 %1%~f1          - 将 %1 扩充到一个完全合格的路径名%~d1         - 仅将 %1 扩充到一个驱动器号%~p1         - 仅将 %1 扩充到一个路径%~n1         - 仅将 %1 扩充到一个文件名%~x1         - 仅将 %1 扩充到一个文件扩展名%~s1         - 扩充的路径指含有短名%~a1         - 将 %1 扩充到文件属性%~t1          - 将 %1 扩充到文件的日期/时间%~z1         - 将 %1 扩充到文件的大小%~path:1  -查找列在**PATH环境变量**的目录里查找 %1，并扩展到找到的第一个文件的驱动器号和路径%~ftza1     - 将 %1 扩展到类似 DIR 的输出行。</code></pre></li><li>在上面的例子中，%1 和 PATH 可以被其他有效数值替换。%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用注意：<pre><code>参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展要理解上面的知识，上面的例子很关键。</code></pre></li></ul><h4 id="直接传递参数"><a href="#直接传递参数" class="headerlink" title="直接传递参数"></a>直接传递参数</h4><p>​        直接传递参数，即在使用<code>call</code>命令时，不使用任何参数，在<strong>子函数</strong>或<strong>子批处理</strong>里面<strong>直接对父批处理里面的变量进行修改</strong>。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 乱序重排@echo offsetlocal enabledelayedexpansionset var=aCdehiM,?mnrstW yecho %var%:: 调用子函数call :dealsetlocal disabledelayedexpansion:: 串替换set var=%var:?=!%echo %var%pause>nulexit:dealset tm=!var!set var=:: 串截取与拼接for %%i in (6,3,11,11,16,15,1,4,11,5,12,13,9,0,12,7,15,14,5,10,2,16,18,8) do (set var=!var!!tm:~%%i,1!)goto :eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>goto :eof为子程序返回命令，若子函数本身就在批处理文件的末尾的话，此命令可省略</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/直接传递参数-display.png" alt="直接传递参数-display"></center><h4 id="间接传递参数"><a href="#间接传递参数" class="headerlink" title="间接传递参数"></a>间接传递参数</h4><p>​        间接传递参数，即在使用call命令时，在其后面添加参数。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">call {[:label] | [ChildBatch]} Parameter1 Parameter2 ... ParameterN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>调用可是子函数，也可以是子批处理</li><li>子函数或子批处理中不需要定义形参及其个数</li><li>子函数或子批处理接受的参数依次存储在%1-%9中</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offcall :deal aaa bbb "c c" ddd eeepause>nulexit:dealecho %%0 = %0echo %%1 = %1echo %%2 = %2echo %%3 = %3echo %%4 = %4echo %%5 = %5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>%0显示的是子函数的标号，而不是父批处理的文件名全程</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/间接传递参数-display.png" alt="间接传递参数-display"></center><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>​        编写批处理程序时，用户根据需要自己定义的变量称为用户变量。    用户变量使用set命令来设置。    </p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p>​        系统变量是<strong>操作系统提前定义</strong>好的一组变量，可以适用于任何批处理，主要包括：硬件类、操作系统类、文件路径类、系统时间类等。</p><p><strong>常用系统变量</strong>：</p><table><thead><tr><th align="center">系统变量</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ComputerName</td><td align="center">计算机名</td></tr><tr><td align="center">ComSpec</td><td align="center">cmd.exe完整路径名</td></tr><tr><td align="center">HomeDrive</td><td align="center">系统分区盘符(一般为C)</td></tr><tr><td align="center">Path</td><td align="center">可执行文件默认搜索路径</td></tr><tr><td align="center">ProgramFiles</td><td align="center">软件默认安装路径</td></tr><tr><td align="center">Prompt</td><td align="center">个性化设置cmd的必备武器</td></tr><tr><td align="center">SystemDrive</td><td align="center">包含系统根目录的分区</td></tr><tr><td align="center">SystemRoot</td><td align="center">系统根目录路径(默认C:\Windows)</td></tr><tr><td align="center">Temp、Tmp</td><td align="center">程序等可使用的临时目录(可修改)</td></tr><tr><td align="center">UserName</td><td align="center">当前用户名</td></tr><tr><td align="center">UserProfile</td><td align="center">当前用户的配置目录</td></tr><tr><td align="center">WinDir</td><td align="center">操作系统路径</td></tr><tr><td align="center">date</td><td align="center">日期</td></tr><tr><td align="center">time</td><td align="center">时间</td></tr></tbody></table><ul><li>系统变量可以使用<code>set</code>命令来显示</li></ul><h4 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h4><p>​        变量应用指直接用变量名来操作变量。</p><ul><li>通常使用”%”和”!”来获取变量的值。</li><li>在<strong>for循环</strong>中重复对同一变量多次赋值时需要使用”!”，使用”!”调用变量时，要首先“<a href="#enabledelayedexpansion">启用延迟环境变量扩充</a>”</li><li>开启延时环境变量扩充之后，所有的”!”都被视为特殊符号，即使使用”^!”也不可以输出”!”，要输出”!”必须要“<a href="#disabledelayedexpansion">停用延迟环境变量扩充</a>”</li></ul><h3 id="使用筛选器"><a href="#使用筛选器" class="headerlink" title="使用筛选器"></a>使用筛选器</h3><p>​        命令筛选器与命令重定向竖线(|)联合使用，它实际上是一个命令，包含在可读取命令的输入、可转换输入并写入输出的命令中，筛选器命令可以帮助排序、查看和选择部分命令输出。</p><p><strong>eg</strong>:</p><pre class="line-numbers language-bat"><code class="language-bat">@echo off:: more查看C中目录tree C:\ | more:: 查找指定文件中的指定字符串，并将结果显示find "more" < demo.bat:: 查找指定文件中的指定字符串，并将存储在demo.txt文件中find "more" < demo.bat > demo.txtpausedel demo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用筛选器-display-1.png" alt="使用筛选器-display-1"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/使用筛选器-display-2.png" alt="使用筛选器-display-2"></center><h3 id="使用命令重定向操作符"><a href="#使用命令重定向操作符" class="headerlink" title="使用命令重定向操作符"></a>使用命令重定向操作符</h3><p>​        使用重定向操作符将命令输入和输出的数据流从默认位置重定向到其他位置。输入或输出数据流的位置被称为句柄。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 重定向输入sort < demo.txt:: 重定向输出dir > demo.txt:: 重定向附加输出dir >> demo.txt:: 使用管道操作符dir | sort:: 自动格式化A盘(无效)echo y|format a: /s /q /v:system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/重定向输入-display.png" alt="重定向输入-display"></center><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/重定向输出.png" alt="重定向输出"></center><p><img src="../../../../Administrator/Fodder/Blogs/MarkdownImgs/%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/%E6%89%B9%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/%E9%87%8D%E5%AE%9A%E5%90%91%E9%99%84%E5%8A%A0%E8%BE%93%E5%87%BA.png" alt="重定向附加输出"></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/管道重定向排序输出.png" alt="管道重定向排序输出"></center><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>​        对字符串的操作。包括：串拷贝、串拼接、串比较、串替换、串截取等。</p><h3 id="串拷贝"><a href="#串拷贝" class="headerlink" title="串拷贝"></a>串拷贝</h3><p>​        在DOS批处理中，串拷贝可以通过set的赋值操作来实现。（批处理中变量不区分类型）</p><h3 id="串拼接"><a href="#串拼接" class="headerlink" title="串拼接"></a>串拼接</h3><p>​        DOS批处理中，串拼接的操作也很简单，可以使用如下的语法来实现：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offset aa=伟大的中国！set bb=我为你自豪！:: 连续输出echo %aa%%bb%echo aa=%aa%echo bb=%bb%:: 拼接后赋给变量set aa=%aa%%bb%echo aa=%aa%pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串拼接.png" alt="串拼接"></center><h3 id="串比较"><a href="#串比较" class="headerlink" title="串比较"></a>串比较</h3><p>​        DOS批处理中没有专门命令来组织串操作，所以串的比较需要通过<a href="#strCompare"><strong>条件语句</strong></a>来实现</p><h3 id="串替换"><a href="#串替换" class="headerlink" title="串替换"></a>串替换</h3><p>​        DOS批处理中的<a href="#strReplace">串替换</a>是通过set命令来实现的</p><h3 id="串截取"><a href="#串截取" class="headerlink" title="串截取"></a>串截取</h3><p>​        DOS批处理中的<a href="#strSplit">串截取</a>是通过set命令来实现的</p><h3 id="串扩充"><a href="#串扩充" class="headerlink" title="串扩充"></a>串扩充</h3><p>​        DOS批处理中独有。</p><p>​        “扩充”这个词来自于Microsoft自己的翻译，意思就是对表示文件路径的字符串进行特殊的处理，具体功能罗列如下：</p><table><thead><tr><th align="center">字符串</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">~I(大写i)</td><td align="center">s删除任何引号，扩充%I</td></tr><tr><td align="center">%~fI</td><td align="center">将%I扩充到一个完全合格的路径名</td></tr><tr><td align="center">%~dI</td><td align="center">仅将%I扩充到一个驱动器号</td></tr><tr><td align="center">%~pI</td><td align="center">仅将%I扩充到一个路径</td></tr><tr><td align="center">%~nI</td><td align="center">仅将%I扩充到一个文件名</td></tr><tr><td align="center">%~xI</td><td align="center">仅将%I扩充到一个文件扩展名</td></tr><tr><td align="center">%~sI</td><td align="center">扩充的路径只含有短名</td></tr><tr><td align="center">%~aI</td><td align="center">将%I扩充到文件的文件属性</td></tr><tr><td align="center">%~tI</td><td align="center">将%I扩充到文件的日期/时间</td></tr><tr><td align="center">%~zI</td><td align="center">将%I扩充到文件的大小</td></tr><tr><td align="center">%~PATH:I</td><td align="center">查找列在路径环境变量的目录，并将%I扩充到找到的第一个驱动器号和路径</td></tr><tr><td align="center">%~tfzaI</td><td align="center">将%I扩充到类似输出线路的DIR</td></tr></tbody></table><ul><li>字符串扩充的条件<ul><li>该字符串代表一个文件路径</li><li>变量要用% x来表示，x可取a-zA-Z0-9共62个字符中的任意一个</li></ul></li></ul><p><strong>eg1</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offecho 正在运行的这个批处理：echo 完全路径：%0echo 去掉引号：%~0echo 所在分区：%~d0echo 所处路径：%~p0echo 文件名：%~n0echo 扩展名：%~x0echo 文件属性：%~a0echo 修改时间：%~t0echo 文件大小：%~z0pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串扩充-display-1.png" alt="串扩充-display-1"></center><p><strong>eg2</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offset aa=C:\Windows\PPP\a.btxcall :deal aaa %aa% "c c" ddd eeepause>nulexit:dealecho %%0 = %0echo %%1 = %1echo %%2 = %2echo %%3 = %3echo %%4 = %4echo %%5 = %5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中，变量aa在之前是不可以扩充的，通过call命令并将aa作为参数传递给子函数:deal，将aa变量转换成了变量%1，即符合%x格式，从而可以进行字符串扩充。</li><li>至于%x中x取a-z A-Z的形式，可以复习一下for语句，for语句里面的变量就是用%x来表示的，因而可以直接进行扩充。</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/串扩充-display-2.png" alt="串扩充-display-2"></center><h2 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h2><p>​        批处理里面的数值计算功能较弱，只能进行整型计算，忽略浮点数的小数部分；同时数值计算的范围也受限于系统位数，对于目前较为常见的32位机来说，数值计算能处理的数值范围为0x80000000h-0x7FFFFFFFh，即-2147483648-+2147483647。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">set /a expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>expressio：代表计算的表达式，可以跟多个需要用逗号(“,”)隔开</li></ul><p><strong>数值运算符</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">()</td><td align="center">分组</td></tr><tr><td align="center">! ~ -</td><td align="center">一元运算符(逻辑非、按位非、取负)</td></tr><tr><td align="center">* / %</td><td align="center">算数运算符(乘、取商、取余)</td></tr><tr><td align="center">+ -</td><td align="center">算数运算符(加、减)</td></tr><tr><td align="center">&lt;&lt; &gt;&gt;</td><td align="center">逻辑移位(左移一位、右移一位)</td></tr><tr><td align="center">&amp;</td><td align="center">按位与</td></tr><tr><td align="center">^</td><td align="center">按位非</td></tr><tr><td align="center">|</td><td align="center">按位或</td></tr><tr><td align="center">= *= /= %= += -= &amp;= ^= |= &lt;&lt;= &gt;&gt;=</td><td align="center">赋值</td></tr><tr><td align="center">,</td><td align="center">表达式分隔符</td></tr></tbody></table><p><strong>eg</strong>：</p><p><a href="#varCalculate">详细实例</a></p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><thead><tr><th align="center">特殊符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@</td><td align="center"><font color="red">不回显当前行</font>中的命令</td></tr><tr><td align="center"><code>&gt; filename</code></td><td align="center">重定向输出，覆盖</td></tr><tr><td align="center"><code>&gt;&gt; filename</code></td><td align="center">重定向输出但<font color="red">不覆盖</font>(在末尾追加)</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">重定向输入</td></tr><tr><td align="center">|</td><td align="center"><font color="red">管道</font>传输命令</td></tr><tr><td align="center">^</td><td align="center"><font color="red">转义字符</font></td></tr><tr><td align="center">&amp;</td><td align="center">允许在一行中使用两个以上不同命令(<font color="red">命令之间独立</font>)</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">允许在一行中使用两个以上不同命令<br>(<font color="red">前面命令执行的结果将影响到后边的命令是否执行</font>)</td></tr><tr><td align="center">“”</td><td align="center">双引号允许在字符串中<font color="red">可包含空格</font></td></tr><tr><td align="center">,</td><td align="center">某些情况下可以<font color="red">当作空格来用</font></td></tr><tr><td align="center">;</td><td align="center">命令相同时，<font color="red">参数</font>之间可以使用分号隔开</td></tr><tr><td align="center">::</td><td align="center">注释该行(直接跳过该行)</td></tr></tbody></table><p><span name="ComoareOp"><strong>比较运算符</strong></span></p><table><thead><tr><th align="center">比较运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">EQU</td><td align="center">等于</td></tr><tr><td align="center">NEQ</td><td align="center">不等于</td></tr><tr><td align="center">LSS</td><td align="center">小于</td></tr><tr><td align="center">LEQ</td><td align="center">小于或等于</td></tr><tr><td align="center">GTR</td><td align="center">大于</td></tr><tr><td align="center">GEQ</td><td align="center">大于或等于</td></tr></tbody></table><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>​        有些命令在执行之后将会返回一定的错误值(errorlevel)，可以通过errorlevel的值<a href="#iferrorlevel">判断命令</a>执行的情况。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offreg add HKCU /v try /f>nulreg delete HKCU /v try /fif errorlevel 0 (echo 删除成功！ ) else (echo 删除失败！)reg delete HKCU /v try /fif %errorlevel%==0 (echo 删除成功！ ) else (echo 删除失败！)pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般情况下，程序或命令成功执行时，返回的errorlevel是0，错误时返回1或更高的值。</li><li>逻辑判断也是根据命令的返回值(errorlevel)进行判断的</li></ul><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/返回值-display.png" alt="返回值-display"></center><h2 id="视窗设置"><a href="#视窗设置" class="headerlink" title="视窗设置"></a>视窗设置</h2><p>​        DOS中提供对视窗进行设置的一些命令，如：title、color、mode、msg等</p><ul><li>title：设置窗体显示的标题</li><li>color：设置窗口背景颜色和字体颜色(xx)</li><li>mode：设置窗体大小。<strong>cols设置宽度，lines设置高度</strong>。</li><li>msg：GUI交互窗口</li></ul><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 设置颜色color [xx]:: 设置宽度和高度mode con [cols=c] [lines=n]:: 信息交互msg username /w /time:seconds message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[xx]：x为一个十六进制数值，第一个x应用于背景，第二个x应用于前景<ul><li>0 = 黑色      </li><li>1 = 蓝色      </li><li>2 = 绿色      </li><li>3 = 浅绿色     </li><li>4 = 红色       </li><li>5 = 紫色       </li><li>6 = 黄色       </li><li>7 = 白色       </li><li>8 = 灰色</li><li>9 = 淡蓝色</li><li>A = 淡绿色</li><li>B = 淡浅绿色</li><li>C = 淡红色</li><li>D = 淡紫色</li><li>E = 淡黄色</li><li>F = 亮白色</li></ul></li><li>clos：设置宽度</li><li>lines：设置高度</li><li>username：设置用户名</li><li>/w：等待用户响应</li><li>/time:seconds：等待接收器确认消息的时间延迟</li><li>message：要发送的信息</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offset a=10set b=0:texset /a a+=3set /a b+=1:: 设置窗体大小mode con cols=%a% lines=%b%if %a% lss 60 goto :texecho O(∩_∩)O 圣诞快乐 O(∩_∩)Oset a=15,a6,2e,d0,34,8b,4f,9d,5e:: 改变窗口颜色for %%i in (%a%) do (:: ping自己ping -n 2 127.1>nulcolor %%i)::for %%i in (%a%,%a%) do (::ping -n 1 127.1>nul::color %%i::):: 重定向>>ms.txt echo          */.    .   .    *      .>>ms.txt echo          .\*    .    []           * __>>ms.txt echo          */ .   ./\~~~~~~~~~~~~'\. ^|◆>>ms.txt echo           \*   ,/,..,\,...........,\.◆>>ms.txt echo           ^|^| ..▎# ▎田 田 ▎ ^| ▎◆>>ms.txt echo           ^|^| ^&^&▎   ▎       ▎'^|'▎ o>>ms.txt echo           ^|^| ##■■■■■■■■■■〓:: msgmsg %username% /w /time:3600 <ms.txtdel ms.txtpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/视窗设置-display.png" alt="视窗设置-display"></center><h2 id="声音设置"><a href="#声音设置" class="headerlink" title="声音设置"></a>声音设置</h2><p>​        批处理中还能以语音的形式展示信息。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offecho 做好准备，响了啊！！pausecls:: 强大，支持英文、中文，不支持日语mshta vbscript:createobject("sapi.spvoice").speak("Merry Christmas and Happy New Year! 新年快乐!すみません!")(window.close)pauseclsecho.echo 怎么样？呵呵，刺激吧~pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo off&mode con cols=80:beginclsset/p file=请输入要处理的文件(Q 键直接退出此脚本):        if /i "%file%"=="Q" goto :eof        if "%file%"=="" goto errorset new=%random%for %%a in (%file%) do set size=%%~za        if "%size%"=="0" goto errorcls&fsutil file createnew %new% %size% >nulecho=&&echo=文件内容所对应的ASCII码的十六进制形式依次为:&echo==========================================================for /f "skip=1 tokens=3" %%a in ('fc /B %new% %file%') do (        set /p=%%a <nul)echo=&echo==========================================================&echo=&echo=&echo=文件内容所对应的ASCII码的十进制形式依次为:&echo==========================================================setlocal EnableDelayedExpansionfor /f "skip=1 tokens=3" %%a in ('fc /B %new% %file%') do (        set num=%%a        set /a num=0x!num!        set /p=!num! <nul)del %new%endlocal&echo;&echo==========================================================&echo;&pauseexit /b 0:error        cls&echo;&echo;        echo         “输入错误” OR “文件大小为零”，请重新输入……        del %new% >nul 2>nul        set file=        set new=        pause>nul&goto :beginl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/Batch/批处理笔记/ASCII-display.png" alt="ASCII-display"></center><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><h3 id="文件夹管理"><a href="#文件夹管理" class="headerlink" title="文件夹管理"></a>文件夹管理</h3><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>​    (<font color="blue">change directory</font>)跳转到指定目录下</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">cd [绝对路径]::跳转到指定的绝对路径下cd ..::跳转到当前目录的父目录cd \::跳转到根目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="md"><a href="#md" class="headerlink" title="md"></a>md</h4><p>​    (<font color="blue">make directory</font>)创建目录</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">md [绝对路径] | [相对路径]::在指定位置创建文件夹md [文件夹名称]:: 在当前路径下创建文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>路径中的文件夹不存在时会自动创建该文件夹</li></ul><h4 id="rd"><a href="#rd" class="headerlink" title="rd"></a>rd</h4><p>​    (<font color="blue">remove directory</font>)删除目录</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">rd [相对路径] | [绝对路径] | [文件夹名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>删除的目录不能有子文件夹</li><li>要删除的目录下不能有文件</li><li>不能删除当前目录</li><li>根目录不能被删除</li><li><font color="red">创建容易删除很难</font></li></ul><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>​    (<font color="blue">directory</font>)展示当前目录下的文件和文件夹</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">::展示目录下的文件和文件夹dir [目录] [/p] [/w] [/ad] [/a] [/s]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>/p：分屏显示文件夹内容</li><li>/w：宽屏显示文件夹内容（文件夹以[<em>dirName</em>]形式显示，文件以文件名显示）</li><li>/ad：只显示文件夹而不显示文件</li><li>/a：显示隐藏文件</li><li>/s：显示指定目录和所有子目录中的文件</li></ul><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><p>​    展示指定启动器的目录子树</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">tree [盘符] [/f] [/a]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>盘符：显示所有的目录子树</li><li>/f：显示目录同时显示文件名（默认只显示目录）</li><li>/a：以ASCII码显示目录树</li></ul><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><h4 id="xcopy"><a href="#xcopy" class="headerlink" title="xcopy"></a>xcopy</h4><p>​        复制文件或目录到指定目录下</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 拷贝文件xcopy [源目录] [目的目录]:: 拷贝目录xcopy [源文件名] [目的目录]:: 拷贝文件和目录xcopy *.* [目的目录] {/s | /e} /v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>/s：拷贝非空子目录</li><li>/e：拷贝所有目录</li><li>/v：拷贝后检验，会影响速度</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>​        复制源文件到到指定位置</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">copy [源文件] [目的文件]copy con 目标文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>源文件与目标文件不能相同</li><li>目标文件省略时，复制到当前文件夹下</li><li>不能复制只读属性的文件</li><li>结合通配符可复制多个文件</li></ul><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>​        在命令行中显示<strong>文本文件</strong>的内容</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">type [文本文件名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>​        删除一个或数个文件</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">del {[文件名] | [*.后缀名]} [/p] [/q] [/f] [/s]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/p：删除每个文件之前提示确认信息</li><li>/q：<font color="red">安静模式</font>，删除全局通配符时，不要求确认</li><li>/f：强制删除只读文件</li><li>/s：从所有子目录删除指定文件</li></ul><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><p>​        移动文件或更改目录名</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 将文件移动到新的目录下move [文件名] [目的目录]:: 更改目录的名称move [目录名] [目录名] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ren"><a href="#ren" class="headerlink" title="ren"></a>ren</h4><p>​        重命名文件</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ren [源文件名] [新的文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>​        替换文件</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>​        搜索文件内容</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">find "string" filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>string：待查找的字符串</li><li>filename：文件名(或文件路径)</li><li>当找到时，回显字符串所在行的全部内容；否则，回显空行</li></ul><h4 id="fc"><a href="#fc" class="headerlink" title="fc"></a>fc</h4><p>​        比较两个文件或文件集并展示它们之间的不同</p><h4 id="attrib"><a href="#attrib" class="headerlink" title="attrib"></a>attrib</h4><p>​        显示或更改文件属性</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ATTRIB [+R | -R] [+A | -A] [+S | -S] [+H | -H] [+O | -O] [+I | -I] [+X | -X] [+P | -P] [+U | -U]       [drive:][path][filename] [/S [/D]] [/L]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>+/-R：设置或清除文件的只读属性</li><li>+/-A：设置或清除文件的存档属性</li><li>+/-S：设置或清除文件的系统属性</li><li>+/-H：设置或清除文件的隐藏属性</li><li>drive:path filename:指示文件的位置</li><li>/s：处理当前文件夹及其所有子文件夹中的匹配文件</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 将D盘下demo文件夹中的1.txt文件设置为只读attrib +r D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“存档”attrib +a D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“系统”属性attrib +s D:\demo\1.txt /s:: 将D盘下demo文件夹中的1.txt文件的属性设置为“隐藏”attrib +h D:\demo\1.txt /s:: 清除D盘下demo文件夹中的1.txt文件的“隐藏”属性attrib -h D:\demo\1.txt /s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="openfiles"><a href="#openfiles" class="headerlink" title="openfiles"></a>openfiles</h4><p>​        允许管理员列出系统上已打开的文件和文件夹或与其断开连接。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">openfiles /parameter [arguments]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>parameter：<ul><li>disconnect：中断至少一个打开的文件的连接</li><li>query：显示所有从本地或从共享文件夹打开的文件</li><li>local：启用/禁用本地打开文件的显示</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 断开IP地址为192.168.1.12的远程计算机中所有被打开的共享文件openfiles /disconnect /s 192.168.1.12 /id *:: 断开用户名为Guest、IP为192.168.1.12的远程计算机中所有被打开的文件openfiles /disconnect /s 192.168.1.12 /a Guest:: 断开IP为192.168.1.12的远程计算机中所有以“读/写”方式打开的文件openfiles /disconnect /s 192.168.1.12 /o read/write:: 显示IP为192.168.1.12的计算机的已经打开的远程文件openfiles /query /s 192.168.1.12:: 以Table格式显示IP为192.168.1.12的远程计算机中被打开的文件的基本信息openfiles /query /s 192.168.1.12 /fo table /v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="takeown"><a href="#takeown" class="headerlink" title="takeown"></a>takeown</h4><p>​        该工具以重新分配文件所有权的方式允许管理员重新获取先前被拒绝访问的文件访问权。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">TAKEOWN [/S system [/U username [/P [password]]]]        /F filename [/A] [/R [/D prompt]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>/f：指定文件或目录名模式</li><li>/a：将所有权给予管理员组，而不是当前用户</li><li>/r：递归，指示工具运行于指定的目录和子目录的文件上</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 设置IP为192.168.1.12远程计算机为demo文件夹中的1.txt的访问权限由计算机的管理员所拥有takeown /f \\192.168.1.12\d:\demo\1.txt:: 设置本地管理员组拥有IP为192.168.1.12的远程计算机的demo文件或文件夹的访问权限takeown /f \\192.168.1.12\d:\demo\1.txt /a:: 设置管理员拥有IP为192.168.1.12远程计算机的demo文件夹（包括其子文件）的访问权限:: takeown /f \\192.168.1.12\d:\demo /r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="assoc"><a href="#assoc" class="headerlink" title="assoc"></a>assoc</h4><p>​        显示或修改文件扩展名关联</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ASSOC [.ext[=[fileType]]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不带参数时，显示当前文件关联</li><li>.ext：指定跟文件类型关联的文件扩展名</li><li>fileType：指定跟文件扩展名关联的文件类型</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 显示当前文件关联assoc:: 修改扩展名为.wsz的关联类型为wszfileassoc .wsz=wszfile:: 显示文件扩展名为.txt的关联assoc .txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bootcfg"><a href="#bootcfg" class="headerlink" title="bootcfg"></a>bootcfg</h4><p>​        用来在 BOOT.INI 文件中配置、查询、更改或删除启动项目设置。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">BOOTCFG /parameter [arguments]BOOTCFG /Copy [/S system [/U user [/P [password]]]] [/D description] /ID bootidBOOTCFG /Delete [/S system [/U user [/P [password]]]] /ID bootidBOOTCFG /Query [/S system [/U user [/P [password]]]]BOOTCFG /Raw osoptions [/S system [/U user [/P [password]]]] /ID bootid [/A]BOOTCFG /Timeout value [/S system [/U user [/P [password]]]]BOOTCFG /Default [/S system [/U user [/P [password]]]] /ID bootidBOOTCFG /Addsw [/S system [/U user [/P [password]]]]                   { [/MM val] [/BV] [/SO] [/NG] } /ID bootidBOOTCFG /Rmsw [/S system [/U user [/P [password]]]]                  { [/MM] [/BV] [/SO] [/NG] } /ID bootid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>parameter：<ul><li>copy：生成一个现有启动项目的副本</li><li>delete：从BOOT.INI文件中删除现有的启动项</li><li>query：显示当前启动项目和它们的设置</li><li>/raw：允许用户指定要添加的任务任何开关</li><li>/timeout：允许用户更改超时值</li><li>/default：允许用户更改默认启动项目</li><li>/addsw：允许用户添加预定义开关</li><li>/rmsw：允许用户删除预定义开关</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 生成启动项目为“1”的副本bootcfg /copy /d "Windows With Debug" /ID 1:: 删除启动项目“1”bootcfg /delete /id 1:: 显示所有当前启动项目和设置bootcfg /query:: 在boot.ini文件中的操作系统目录"2"添加开关bootcfg /raw "/debug/sos" /a /id /2:: 将boot.ini文件中的超时值更改为“36”bootcfg /timeout 36:: 将boot.ini文件中的启动项目“2”设置为默认的启动项目bootcfg /default /id 2:: 为boot.ini文件中的启动项目“2”添加开关bootcfg /addsw /so /id 2:: 从boot.ini文件中删除启动项目“2”的开关bootcfg /rmsw /so /id 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cacls"><a href="#cacls" class="headerlink" title="cacls"></a>cacls</h4><p>​        显示或者修改文件的访问控制列表(ACL)</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">CACLS filename [/T] [/M] [/L] [/S[:SDDL]] [/E] [/C] [/G user:perm]        [/R user [...]] [/P user:perm [...]] [/D user [...]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>/e：编辑 ACL 而不替换。</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 显示D:\demo\1.txt文件的访问控制列表cacls D:\demo\1.txt:: 编辑D:\demo\1.txt文件的ACLcacls D:\demo\1.txt /e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h4><p>​        显示或改变 NTFS 分区上文件的压缩。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">COMPACT [/C | /U] [/S[:dir]] [/A] [/I] [/F] [/Q] [/EXE[:algorithm]]        [/CompactOs[:option] [/WinDir:dir]] [filename [...]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 将D:\demo\1.txt文件压缩compact /c D:\demo\1.txt:: 将D:\demo\1.txt文件解压缩compact /u D:\demo\1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><p>​        格式化磁盘</p><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><p>​        用于创建、修改或删除磁盘卷标</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">label [f:备份分区]:: 将F驱动器设置为“备份分区”卷标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="chkdsk"><a href="#chkdsk" class="headerlink" title="chkdsk"></a>chkdsk</h4><p>​        检查磁盘并显示状态报告</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">chkdsk [盘符] [文件路径] [/f] [/r] [/x] [/c]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>/f：修复磁盘上的错误（必须锁定磁盘）</li><li>/r：找到坏扇区并恢复可读取的信息（必须锁定磁盘）</li><li>/x：仅在NTFS上使用。如果必要，首先强制卸载卷。</li><li>/c：仅随NTFS使用。跳过文件夹结构中的周期检查，减少运行chkdsk所需的时间量</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">chkdsk D: /f:: 检查驱动器D，并修复错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h4><p>​        从损坏的磁盘中恢复可读取的信息。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">recover [盘符] [文件路径][文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">recover D:/readme.txt:: 恢复驱动器D中的文件readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>​        进行网络连接测试、名称解析</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ping [-t] [-a] [-n count] [-l length] [-f] [-i ttl] [-v tos] [-r count] [-s count] [-j -Host-list] | [-k Host-list] [-w timeout] destination-list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-t：向目的主机持续发送ICMP包，知道按下【Ctrl+C】才停止</li><li>-a：解析主机的NETBIOS主机名</li><li>-n count：定义用来测试所发出的ICMP包的个数，缺省值为4，其常被用来衡量网速</li><li>-l length：定义所发送缓冲区的数据包的大小，在默认情况下Windows的ping发送的数据包的大小为32Byte，使用该参数可以自己定义数据包的大小，但其最大限制为65500Byte，超出这个数时，接受方可能因为接受的数据包太大了死机，所以Microsoft为解决该安全漏洞限制了ping的数据包大小</li><li>-f：在数据包中设置“不要分段标识”，通常发送的数据包都会由路由分段再发送给接受方，使用该参数后路由不会进行分段操作</li><li>-i ttl：指定TTL值在对方系统里停留的时间</li><li>-v tos：将“服务类型”字段设置为“tos”指定的值</li><li>-r count：在“记录路由”字段中记录传出和返回数据包的路由。一般情况下你发送的数据包是通过一个个路由才到达对方的，但到底是经过了哪些路由呢？通过此参数就可以设定你想探测经过的路由的个数，不过限制在了9个，也就是说你只能跟踪到9个路由。</li><li>-s count：指定“count” 指定的跃点数的时间戳，此参数和-r差不多，只是这个参数不记录数据包返回所经过的路由，最多也只记录4个。</li><li>-j Host-list：利用“ computer-list” 指定的计算机列表路由数据包。连续计算机可以被中间网关分隔IP 允许的最大数量为 9。</li><li>-k Host-list：利用 “computer-list” 指定的计算机列表路由数据包。连续计算机不能被中间网关分隔IP 允许的最大数量为 9。</li><li>-w timeout：指定超时间隔，单位为毫秒。 </li><li>destination-list：是指要测试的主机名或IP地址或网址</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 连通测试ping 192.168.1.105:: 测试hosts文件ping localhost:: ping攻击(自定义数据的大小)ping -l 65500 -t 192.168.1.1:: 获取局域网计算机名称ping -a 192.168.1.1:: 获取网站的IP地址ping www.baidu.com:: 自定义检测数据包的数量ping -n 20 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h4><p>​        追踪ICMP包到达目标的路径</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout]               [-R] [-S srcaddr] [-4] [-6] target_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>target_name：追踪的目标（可以时IP地址也可以是网站）</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 检测到达百度服务器的路由是否存在故障tracert www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="pathping"><a href="#pathping" class="headerlink" title="pathping"></a>pathping</h4><p>​        提供有关在来源和目标之间的中间跃点处的网络滞后和网络丢失的信息。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">pathping [-g host-list] [-h maximum_hops] [-i address] [-n]                [-p period] [-q num_queries] [-w timeout]                [-4] [-6] target_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>-n：不将地址解析成主机名</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 检测本机计算机到本地网关之间的路径pathping 192.168.1.1:: 检测远程计算机的路径pathping -n www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h4><p>​        显示/修改TCP/IP设置</p><p><strong>语法</strong>:</p><pre class="line-numbers language-bat"><code class="language-bat">ipconfig [/all] [/renew [Adapter]] [/release [Adapter]] [/flushdns] [/displaydns] [/registerdns] [/showclassid Adapter] [/setclassid Adapter [ClassID]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/all：显示所有适配器的完整 TCP/IP 配置信息。</li><li>/renew [Adapter]：更新所有适配器（如果未指定适配器），或特定适配器（如果包含了 Adapter 参数）的 DHCP 配置信息。</li><li>/release [Adapter]：发送 DHCPRELEASE 消息到 DHCP 服务器，以释放所有适配器（如果未指定适配器）或特定适配器（如果包含了 Adapter 参数）的当前 DHCP 配置并丢弃 IP 地址配置。该参数可以禁用配置为自动获取 IP 地址的适配器的 TCP/IP。</li><li>/registerdns：对 DNS 名称和 IP 地址的手工动态注册进行初始化。</li><li>/displaydns：显示 DNS 客户解析器缓存的内容，包括从本地主机文件预装载的记录以及由计算机解析的名称查询而最近获得的任何资源记录。DNS 客户服务在查询配置的 DNS 服务器之前使用这些信息快速解析被频繁查询的名称。</li><li>/flushdns：清理并重设 DNS 客户解析器缓存的内容。如有必要，在 DNS 疑难解答期间，可以使用本过程从缓存中丢弃否定性缓存记录和任何其他动态添加的记录。</li><li>/showclassid Adapter：显示指定适配器的 DHCP 类别 ID。要查看所有适配器的 DHCP 类别 ID，可以使用星号 (*) 通配符代替 Adapter。该参数仅在具有配置为自动获取 IP 地址的网卡的计算机上可用。</li><li>/setclassid Adapter [ClassID]：配置特定适配器的 DHCP 类别 ID。要设置所有适配器的 DHCP 类别 ID，可以使用星号 (*) 通配符代替 Adapter。该参数仅在具有配置为自动获取 IP 地址的网卡的计算机上可用。如果未指定 DHCP 类别 ID，则会删除当前类别 ID。 </li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ipconfig /all:: 显示详细的网络协议配置信息ipconfig /renew:: 更新IP地址ipconfig /registerdns:: 初始化网络配置ipconfig /displaydns:: 显示本地DNS信息ipconfig /flushdns:: 清除本地DNS缓存内容ipconfig /release:: 取消IP地址租用ipconfig /all > D:\ipconfigBak.txt:: 备份网络配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getmac"><a href="#getmac" class="headerlink" title="getmac"></a>getmac</h4><p>​        显示计算机中网卡的媒体访问控制地址，即MAC地址</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">getmac [/S system]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>/s <em>system</em>：查看局域网内主机的MAC地址及网络协议</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">getmac:: 显示本地网卡地址getmac /s 10.85.0.88 -u Administrator -p password:: 查看局域网内计算机网卡地址信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>​        显示活动的TCP连接、计算机侦听的端口、以太网统计信息、IP路由表等。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">netstat [-a] [-e] [-n] [-o] [-p proto] [-r] [-s]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a：显示所有连接和侦听端口</li><li>-e：可以用来统计一些基本的网络流量</li><li>-n：显示数字化主机名，并且仅显示TCP连接</li><li>-r：显示关于路由表的信息，除了显示有效路由外还可显示当前有效的连接</li><li>-o：显示当前已建立的TCP连接状态的详细信息</li><li>-s：显示每个协议的统计信息</li><li>-p proto：显示proto指定的协议的连接，与-s一起使用时可显示每个协议的统计信息</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">netstat:: 显示网络连接情况netstat -n:: 显示数字化主机名，即IP地址；并且只显示TCP连接netstat -e:: 统计网络流量netstat -r:: 显示路由表信息netstat -o:: 查看当前活动的TCP连接信息netstat -a:: 查看当前所有活动的TCP连接以及侦听端口netstat -s -p tcp:: 查看本机所有TCP连接情况netstat -s -p udp:: 查看本机所有UDP连接情况netstat -s -p icmp:: 查看本机所有ICMP连接情况netstat -s -p ip:: 查看本机所有IP连接情况netstat -o 8:: 显示当前活动的TCP连接和进行ID，以后每隔8s会自动显示当前活动的TCP连接的PID进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h4><p>​        显示、修改IP-MAC映射列表</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ARP -s inet_addr eth_addr [if_addr]ARP -d inet_addr [if_addr]ARP -a [inet_addr] [-N if_addr] [-v]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>a：显示本地计算机上所有接口的ARP缓存表信息</li><li>-s inet_addr eth_addr：将IP地址与网卡地址绑定</li><li>-d inet_addr：解除IP地址与网卡的绑定</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">arp -a:: 显示本地计算机所有接口的ARP缓存表arp -s 192.168.1.105 00-26-18-27-4A-8A:: 将IP地址192.168.1.105与MAC地址00-26-18-27-4A-8A绑定arp -d 192.168.1.105:: 解除IP地址192.168.1.105与网卡的绑定arp -d:: 解除所有IP地址与网卡的绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><p>​        操作网络路由表</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">ROUTE [-f] [-p] [-4|-6] command [destination]                  [MASK netmask]  [gateway] [METRIC metric]  [IF interface]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><em>command</em>：对路由表的操作命令<ul><li>print：打印路由</li><li>add：添加路由</li><li>delete：删除路由</li><li>change：修改现有路由</li></ul></li><li>-p：添加永久路由</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">route print:: 显示完整的IP路由表route print 192.*:: 显示IP路由表以“192.”开始的路由信息route add 0.0.0.0 mask 0.0.0.0 192.168.1.1:: 添加192.168.1.1所在的网关为默认路由项route -p add 192.168.1.12 mask 255.255.255.255 192.168.2.1:: 添加一条到192.168.1.12的永久路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><p>​        显示可用来诊断域名系统（DNS）基础结构的信息。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">nslookup [-opt ...]             # 使用默认服务器的交互模式nslookup [-opt ...] - server    # 使用 "server" 的交互模式nslookup [-opt ...] host        # 仅查找使用默认服务器的 "host"nslookup [-opt ...] host server # 仅查找使用 "server" 的 "host"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 检测DNS服务器nslookup www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="nbtstat"><a href="#nbtstat" class="headerlink" title="nbtstat"></a>nbtstat</h4><p>​        显示协议统计和当前使用 NBI 的 TCP/IP 连接</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">NBTSTAT [ [-a RemoteName] [-A IP address] [-c] [-n]        [-r] [-R] [-RR] [-s] [-S] [interval] ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-a：列出指定名称的远程机器的名称表</li><li>-A：列出指定IP的远程机器的名称表</li><li>-R：清除和重新加载远程缓存名称表</li><li>-RR：将名称释放包发送到WINS，然后启动刷新</li><li>-S：列出具有目标IP地址的会话表</li></ul><p><strong>eg</strong>:</p><pre class="line-numbers language-bat"><code class="language-bat">:: 探测对方计算机名称nbtstat -a 192.168.1.1:: 清除NetBIOS名称缓存信息，重新加载Lmhosts文件nbtstat -R:: 重新注册NetBIOS名称nbtstat -RR:: 统计NetBIOS会话信息,(每5秒统计一次)nbtstat -S 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><p>​        网络命令集及用户管理</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">NET    [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP |      HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START |      STATISTICS | STOP | TIME | USE | USER | VIEW ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>view：查看局域网中运行的客户端</li><li>share：用于共享资源的管理、添加、删除以及查看局域网中的共享资源等</li><li>user：用于用户账户的管理、添加、删除等</li><li>statistics：主要用于显示本地工作站或服务器的统计记录</li><li>config：查看本地计算机上可配置的服务</li><li>localgroup：用于本地组的查看、管理等</li><li>session：计算机的会话操作</li><li>accounts：用户账户设置</li><li>time：用于查询、设定计算机的时间服务器</li><li>start：主要用于启动服务</li><li>stop：主要用于停止服务</li><li>pause：主要用于暂停服务</li><li>continue：主要用于重新激活当前暂停的服务</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 查看指定计算机的共享资源net view 192.168.1.105:: 查看局域网中正在运行的客户端net view:: 查看所有共享net share:: 设置ipc共享net share ipc:: 删除ipc共享net share ipc /del:: 设置C盘为共享net share C$=C::: 共享资源设置共享名注释net share 重要内部资源=D:\download /remark:'未经允许不得将资源外传':: 设置资源访问人数（最大访问人数为：8）net share 重要内部资源 /user:8:: 设置自动缓存方式net share 重要内部资料 /cache:automatic:: 禁止共享目录使用自动缓存net share 重要内部资料 /cache:no:: 查看本地的用户列表net user:: 添加一个用户net user 用户名 密码 /add:: 添加一个密码为空的用户net user 用户名 [""] /add:: 删除某个用户net user 用户名 /del:: 设置某个用户的状态为启用(禁用)net user 用户名 active:yes(no):: 禁止用户自行更改密码net user 用户名 /passwordchg:no:: 设置账户的主目录net user 用户名 /homedir:D\用户名:: 设置用户账户密码的最少字符数为：6net accounts /minpwlen:6:: 强制用户在4天内更改密码，且不允许8天内不更改密码net accounts /minpwage:4 /maxpwage:8:: 避免用户使用旧密码(强制用户不能使用8个历史记录内的密码)net accounts /uniquepw:8:: 查看计算机本地组列表net localgroup :: 查看管理员组里的用户net localgroup administrators:: 把某个用户添加到管理员组net localgroup administrators 用户名 /add:: 从管理员组中删除某个用户net localgroup administrators 用户名 /del- 添加到某个组里的用户必须时已经被创建过的用户- 添加的组必须为已存在的组:: 查看本地计算机上的统计服务net statistics:: 查看本地服务器服务的统计信息net statistics server:: 查看本地工作站服务统计信息net statistics workstation:: 查看本地计算机上可配置的服务net config:: 查看本机服务器上可配置的服务net config server:: 查看本地工作站上的配置服务net config workstation:: 在局域网中隐藏本地计算机net config server /hidden:yes:: 设置空闲会话时间(默认为15分钟，设置为-1则表示永远不中断用户连接)net config server /autodisconnect:8:: 设置本地计算机与网络中名为jackson-pc的计算机时间同步net time \\jackson-pc /set:: 断开计算机的会话操作net session /delete:: 查看已经启动的服务列表net start:: 开启某个服务（开启成功的前提时服务被停用而不是禁用）net start 服务名:: 停止某个服务（停止的服务必须是已经启动的）net stop 服务名:: 启动自动更新服务net start wuauserv:: 启动迟后打印服务net start spooler:: 启动时间管理服务net start "windows time":: 暂停服务器服务net pause server:: 激活服务器服务net continue server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h4><p>​        文件传输</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">FTP [-v] [-d] [-i] [-n] [-g] [-s:filename] [-a] [-A] [-x:sendbuffer] [-r:recvbuffer] [-b:asyncbuffers] [-w:windowsize] [host]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-A：匿名登录</li><li>-v：禁止显示远程服务器响应</li><li>-w:windowsize：覆盖默认的传输缓冲区大小</li><li>-a：在绑字数据连接时使用所有本地接口</li><li>-n：禁止在初始连接时自动登录</li><li>-g： 禁用文件名通配</li><li>-i：关闭多文件传输过程中的交互提示</li><li>-d：启动调试</li><li>-s:filename：指定包含 FTP 命令的文本文件；命令在 FTP 启动后自动运行</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 登录远程的FTP服务器fpt 192.168.1.12:: 匿名登录远程的FTP服务器ftp -A 192.168.1.12:: 屏蔽FTP服务器信息ftp -v 192.168.1.12:: 设置文件传输缓存大小为8092Bftp -w:8092 192.168.1.12:: 设置数据连接使用任何网络接口ftp -a 192.168.1.12:: 设置连接后禁止自动登录ftp -n 192.168.1.12:: 禁止使用文件通配符(默认ftp命令操作本地文件时允许使用通配符)ftp -g -A 192.168.1.12:: 屏蔽文件传输时的交互提示信息（默认在多个文件传输时会提示每个文件的传输信息）ftp -i -A 192.168.1.12:: 查看命令执行的详细信息(默认不显示执行命令的详细信息)ftp -d -A 192.168.1.12:: 登录后自动执行指定的(command.txt文件内的ftp命令)命令ftp -s:D:\command.txt -A 192.168.1.12------------------------------------------------------FTP子命令:: 使用该用户建立与192.168.1.12:21服务器的连接open 192.168.1.12 21:: 断开与远程服务器的连接close:: 断开与远程服务器的连接disconnect:: 退出FTP程序quit:: 退出FTP程序bye:: 切换命令行状态ftp         ::进入FTP程序!           ::切换到DOS模式下exit / ftp  :: 再次返回FTP程序中:: 设置文件传输模式(二进制 / ASCII文本)type binary / ascii:: 设置传输结束提示音bell:: 禁用通配符glob:: 查看命令执行状态status:: 创建远程文件夹demomkdir demo:: 更改服务器的当前目录(进入demo目录下)cd demo:: 设置FTP工作目录lcd D:\demo:: 查看远程目录列表dir :: 将远程目录列表保存到文件dir . dirlist.txt:: 显示远程目录列表mls - -:: 上传文件put 1.jpg:: 重命名远程文件rename 1.jpg one.jpg:: 下载服务器文件get one.jpg:: 删除远程文件delete one.jpg:: 删除远程文件夹rmdir demo:: 关闭文件传输询问方式prompt:: 禁止显示服务器响应信息verbose:: 切换用户登录user:: 显示函数调用序列(一次命令执行一次跟踪)trace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><p>​        远程登录</p><h4 id="msg"><a href="#msg" class="headerlink" title="msg"></a>msg</h4><p>​        给用户发送消息</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">MSG {username | sessionname | sessionid | @filename | *}    [/SERVER:servername] [/TIME:seconds] [/V] [/W] [message]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>username：标识指定的用户名</li><li>sessionname：会话名称</li><li>sessionid：会话ID</li><li>@filename：识别这样一个文件，该文件含有将所有消息发送到用户名、会话名和会话标识号的列表</li><li>*：给指定服务器上的所有会话发送消息</li><li>/SERVER:servername：要联系的服务器（默认是当前值）</li><li>/TIME:seconds：等待接收器确认消息的时间延迟</li><li>/V：显示有关执行的操作的信息</li><li>/W：等待用户的响应，跟/V一起使用</li><li>message：要发送的消息。如果没有指定会发出提示或者冲stdin读取</li></ul><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>​        显示或修改系统日期</p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>​        显示或修改系统时间</p><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>​        安排在特定日期和时间运行命令和程序</p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>​        立即或定时关闭或重启计算机</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">shutdown [-i]{[-s] | [-r] | [-I]} [-f] [-t time] [-c "消息内容"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-i：显示图形用户界面，但必须是shutdown的第一项</li><li>-s：关闭计算机</li><li>-r：重新启动计算机</li><li>-I：注销当前用户</li><li>-f：强制关闭正在运行的应用程序，不在前台警告用户</li><li>-t time：后跟等待秒数，为0则表示马上重启</li><li>-c “消息内容”：输入关机对话框中的消息内容（不能超过127个字符）</li></ul><h4 id="taskkill"><a href="#taskkill" class="headerlink" title="taskkill"></a>taskkill</h4><p>​        结束进程</p><h4 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h4><p>​        显示进程列表</p><h4 id="reg"><a href="#reg" class="headerlink" title="reg"></a>reg</h4><p>​        对注册表子项信息和注册表项值中的值执行添加、更改、导入、导出以及其他操作</p><h5 id="reg-add"><a href="#reg-add" class="headerlink" title="reg add"></a>reg add</h5><p>​        将新的子项或项添加到注册表中</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg Add KeyName [{/v ValueName | /ve}] [/t DataType] [/s Separator] [/d Data] [/f]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定要添加的子项或项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：指定要添加到指定子项下的注册表项名称。</li><li>/ve：指定添加到注册表中的注册表项为空值。</li><li>/t DataType： 指定注册表项的类型。Type 必须是以下几种类型之一：<ul><li>Reg_SZ</li><li>Reg_MULTI_SZ</li><li>Reg_DWORD_BIG_ENDIAN</li><li>Reg_DWORD</li><li>Reg_BINARY</li><li>Reg_DWORD_LITTLE_ENDIAN</li><li>Reg_LINK</li><li>Reg_FULL_RESOURCE_DESCRIPTOR</li><li>Reg_EXPAND_SZ</li></ul></li><li>/s Separator：  当指定了 Reg_MULTI_SZ 数据类型并且需要列出多个项时，指定用来分隔数据的多个实例的字符。如果没有指定，将使用默认分隔符“\0”。</li><li>/d Data： 指定新注册表项的数据。</li><li>/f：添加注册表项而不要求确认。</li></ul><p><strong>注</strong>：</p><ul><li>该操作不能添加子树。该版本的 Reg 在添加子项时无需请求确认。</li><li>Reg Add 操作的返回值是0代表成功，是1代表失败。</li><li>对于 Reg_EXPAND_SZ 项类型，在 /d 参数内将插入符号 ( ^ ) 与“%”一起使用。</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要在远程计算机 ABC 上添加 HKLM\Software\MyCo 项，请键入：Reg ADD \\ABC\HKLM\Software\MyCo:: 要将一个注册表项添加到 HKLM\Software\MyCo，选项为值名：Data；类型：Reg_BINARY；数值数据：fe340ead；请键入：Reg ADD HKLM\Software\MyCo /v Data /t Reg_BINARY /d fe340ead:: 要将一个多值注册表项添加到 HKLM\Software\MyCo，选项为值名：MRU；数据类型：Reg_MULTI_SZ；数值数据：fax\0mail\0\0；请键入： Reg ADD HKLM\Software\MyCo /v MRU /t Reg_MULTI_SZ /d fax\0mail\0\0:: 要将一个扩展的注册表项添加到 HKLM\Software\MyCo，选项为值名：Path；数据类型：Reg_EXPAND_SZ；数值数据：%systemroot%；请键入：Reg ADD HKLM\Software\MyCo /v Path /t Reg_EXPAND_SZ /d ^%systemroot^%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reg-compare"><a href="#reg-compare" class="headerlink" title="reg compare"></a>reg compare</h5><p>​        比较指定的注册表子项或项</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg Compare KeyName1 KeyName2 [{/v ValueName | /ve}] [{/oa | /od | /os | /on}] [/s]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName1：指定要比较的第一个子项的完整路径。要指定远程计算机，请包括计算机名（以\\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>KeyName2：指定要比较的第二个子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。只在 KeyName2 中指定计算机名会导致该操作使用到 KeyName1 中指定的子项的路径。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是HKLM和HKU。</li><li>/v ValueName：指定要比较的子项下的值名称。</li><li>/ve： 指定只比较值名称为 null 的项。</li><li>/oa：指定显示所有不同点和匹配点。默认情况下，仅列出不同点。</li><li>/od：指定仅显示不同点。这是默认操作。</li><li>/os：指定仅显示匹配点。默认情况下，仅列出不同点。</li><li>/on：指定不显示任何内容。默认情况下，仅列出不同点。</li><li>/s：递归地比较所有子项和项。</li></ul><p><strong>注</strong>：</p><ul><li>reg compare操作的返回值<ul><li>0：比较成功且结果相同</li><li>1：比较失败</li><li>2：比较成功并找到不同点</li></ul></li><li>结果中显示的符号<ul><li><code>=</code>：KeyName1数据等于KeyName2数据</li><li><code>&lt;</code>：KeyName1数据小于KeyName2数据</li><li><code>&gt;</code>：KeyName1数据大于于KeyName2数据</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要将 MyApp 项下的所有值与 SaveMyApp 项下的所有值进行比较，请键入：Reg COMPARE HKLM\Software\MyCo\MyApp HKLM\Software\MyCo\SaveMyApp:: 要比较 MyCo 项下的 Version 的值和 MyCo1 项下的 Version 的值，请键入：Reg COMPARE HKLM\Software\MyCo HKLM\Software\MyCo1 /v Version:: 要将计算机 ZODIAC 上 HKLM\Software\MyCo 下的所有子项和值与当前计算机上 HKLM\Software\MyCo 下的所有子项和值进行比较，请键入： Reg COMPARE \\ZODIAC\HKLM\Software\MyCo \\. /s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reg-copy"><a href="#reg-copy" class="headerlink" title="reg copy"></a>reg copy</h5><p>​        将一个注册表项复制到本地或远程计算机的指定位置</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg Copy KeyName1 KeyName2 [/s] [/f] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName1：指定要复制子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略\\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>KeyName2：指定子项目的地的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>/s：复制指定子项下的所有子项和项。 </li><li>/f：不要求确认而直接复制子项。 </li></ul><p><strong>注</strong>：</p><ul><li>在复制时reg不请求确认</li><li>reg copy操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要将 MyApp 项下的所有子项和值复制到 SaveMyApp 项，请键入：Reg COPY HKLM\Software\MyCo\MyApp HKLM\Software\MyCo\SaveMyApp /s :: 要将计算机 ZODIAC 上的 MyCo 项下的所有值复制到当前计算机上的 MyCo1 项，请键入：Reg COPY \\ZODIAC\HKLM\Software\MyCo HKLM\Software\MyCo1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reg-delete"><a href="#reg-delete" class="headerlink" title="reg delete"></a>reg delete</h5><p>​        从注册表删除子项或项</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg Delete KeyName [{/v ValueName | /ve | /va}] [/f]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定要删除的子项或项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：删除子项下的特定项。如果未指定项，则将删除子项下的所有项和子项。</li><li>/ve：指定只可以删除为空值的项。</li><li>/va：删除指定子项下的所有项。使用本参数不能删除指定子项下的子项。</li><li>/f：无需请求确认而删除现有的注册表子项或项。</li></ul><p><strong>注</strong>：</p><ul><li>reg delete的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要删除注册表项 Timeout 以及其所有子项和值，请键入：Reg DELETE HKLM\Software\MyCo\MyApp\Timeout :: 要删除计算机 ZODIAC 上 HKLM\Software\MyCo 下的注册表值 MTU，请键入：Reg DELETE \\ZODIAC\HKLM\Software\MyCo /v MTU<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reg-export"><a href="#reg-export" class="headerlink" title="reg export"></a>reg export</h5><p>​         将本地计算机的指定子项、项和值复制到一个文件中，以便传输到其他服务器。 </p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg export KeyName FileName [/y]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定子项的完全路径。Export 操作仅可在本地计算机上工作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。 </li><li>FileName： 指定在操作期间创建的文件的名称和路径。该文件必须具有 .Reg 扩展名。 </li><li>/y：不要求确认即覆盖任何现有的名称为 FileName 的文件。 </li></ul><p><strong>注</strong>：</p><ul><li>reg export操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要将 MyApp 项的所有子项和值的内容导出到文件 AppBkUp.Reg，请键入：Reg Export HKLM\Software\MyCo\MyApp AppBkUp.Reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="reg-import"><a href="#reg-import" class="headerlink" title="reg import"></a>reg import</h5><p>​        将包含已导出的注册表子项、项和值的文件的内容复制到本地计算机的注册表中。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">reg import FileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FileName：指定其内容将复制到本地计算机注册表中的文件的名称和路径。此文件必须使用 Reg export 预先创建。 </li></ul><p><strong>注</strong>：</p><ul><li>reg import操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要从名为 AppBkUp.Reg 的文件导入注册表项，请键入：Reg Import AppBkUp.Reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="reg-load"><a href="#reg-load" class="headerlink" title="reg load"></a>reg load</h5><p>​        将保存的子项和项写回到注册表的不同子项中。与用于进行疑难解答或编辑注册表项的临时文件一起使用。 </p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg load KeyName FileName <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定要加载的子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。 </li><li>FileName：指定要加载的文件的名称和路径。必须使用 .hiv 作为扩展名的 Reg Save 操作预先创建该文件。 </li></ul><p><strong>注</strong>：</p><ul><li>reg load操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">::要将名为 TempHive.hiv 的文件加载到 HKLM\TempHive 项，请键入：Reg LOAD HKLM\TempHive TempHive.hiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="reg-query"><a href="#reg-query" class="headerlink" title="reg query"></a>reg query</h5><p>​        返回位于注册表中指定的子项下的下一层子项和项的列表。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg query KeyName [{/v ValueName | /ve}] [/s] [/se Separator] [/f Data] [{/k | /d}] [/c] [/e] [/t Type] [/z]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定子项的完全路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>/v ValueName：指定要查询的注册表值名称。如果省略，则返回 KeyName 的所有值名称。如果还使用了 /f 选项，则此参数的 ValueName 是可选的。 </li><li>/ve：查询空白的值名称。</li><li>/s：指定该参数递归查询所有子项和值名称。</li><li>/se Separator：指定单值分隔符，以搜索 Reg_MULTI_SZ 类型的值名称。如果没有指定 Separator，则使用“\0”。</li><li>/f Data：指定要搜索的数据或模式。如果字符串包含空格，则使用双引号。如果未指定，则使用通配符 (“*”) 作为搜索模式。</li><li>/k：指定只在项名称中搜索。</li><li>/d：指定只在数据中搜索。</li><li>/c：指定查询是区分大小写的。默认情况下，查询是不区分大小写的。</li><li>/e：指定只返回完全匹配项。默认情况下，返回所有匹配项。</li><li>/t Type：指定要搜索的注册表类型。有效的类型包括：Reg_SZ、Reg_MULTI_SZ、Reg_EXPAND_SZ、Reg_DWORD、Reg_BINARY、Reg_NONE。如果未指定，则搜索所有类型。</li><li>/z：指定在搜索结果中包括注册表类型的数字同等物。</li></ul><p><strong>注</strong>：</p><ul><li>reg query操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要显示 HKLM\Software\Microsoft\ResKit 项中的名称值 Version 的值，请键入：Reg QUERY HKLM\Software\Microsoft\ResKit /v Version:: 要显示远程计算机 ABC 上的 HKLM\Software\Microsoft\ResKit\Nt\Setup 项下的所有子项和值，请键入：Reg QUERY \\ABC\HKLM\Software\Microsoft\ResKit\Nt\Setup /s:: 要使用“#”作为分隔符显示 Reg_MULTI_SZ 类型的所有子项和值，请键入：Reg QUERY HKLM\Software\Microsoft\ResKit\Nt\Setup /se #:: 要显示数据类型 Reg_SZ 的 HKLM 根下的“SYSTEM”的完全匹配并且区分大小写的匹配项的项、值和数据，请键入：Reg QUERY HKLM /f SYSTEM /t Reg_SZ /c /e:: 要显示数据类型 Reg_BINARY 的根键 HKCU 下的数据中的“0F”的匹配项的项、值和数据，请键入：Reg QUERY HKCU /f 0F /d /t Reg_BINARY:: 要显示 HKLM\SOFTWARE 下的值名称 null（默认值）的值和数据，请键入：Reg QUERY HKLM\SOFTWARE /ve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reg-restore"><a href="#reg-restore" class="headerlink" title="reg restore"></a>reg restore</h5><p>​        将保存的子项和项写回到注册表。 </p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg restore KeyName FileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定要还原的子项的完整路径。Restore 操作仅在本地计算机上工作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。</li><li>FileName： 指定其内容将写回到注册表中的文件的名称和路径。必须使用 .hiv 作为扩展名的 Reg save 操作预先创建该文件。</li></ul><p><strong>注</strong>：</p><ul><li>编辑任何注册表项之前，请使用 Reg Save 操作保存父子项。如果编辑失败，则可以使用 Reg Restore 操作还原原来的子项。 </li><li>reg restore操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要将名为 NTRKBkUp.hiv 的文件还原到 HKLM\Software\Microsoft\ResKit 项，并覆盖该项的现有内容，请键入：Reg RESTORE HKLM\Software\Microsoft\ResKit NTRKBkUp.hiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="reg-save"><a href="#reg-save" class="headerlink" title="reg save"></a>reg save</h5><p>​        将指定的子项、项和注册表值的副本保存到指定文件中。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg save KeyName FileName [/y]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName： 指定子项的完全路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\ 格式表示），并将其作为 KeyName 的一部分。省略\\ComputerName\会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li><li>FileName：指定所创建的文件的名称和路径。如果未指定路径，则使用当前路径。</li><li>/y：不要求确认即覆盖任何现有的名称为 FileName 的文件。</li></ul><p><strong>注</strong>：</p><ul><li>reg save操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li><li>编辑任何注册表项之前，请使用 Reg Save 操作保存父子项。如果编辑失败，则可以使用 Reg Restore 操作还原原来的子项。</li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要将配置单元 MyApp 作为名为 AppBkUp.hiv 的文件保存到当前文件夹中，请键入：Reg SAVE HKLM\Software\MyCo\MyApp AppBkUp.hiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="reg-unload"><a href="#reg-unload" class="headerlink" title="reg unload"></a>reg unload</h5><p>​        使用 Reg Load 操作删除已加载的部分注册表。</p><p><strong>语法</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">Reg Unload KeyName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>KeyName：指定要卸载的子项的完整路径。要指定远程计算机，请包括计算机名（以 \\ComputerName\格式表示），并将其作为 KeyName 的一部分。省略 \\ComputerName\ 会导致默认对本地计算机的操作。KeyName 必须包括一个有效的根键。有效根键包括 HKLM、HKCU、HKCR、HKU 以及 HKCC。如果指定了远程计算机，则有效根键是 HKLM 和 HKU。</li></ul><p><strong>注</strong>：</p><ul><li>reg unload操作的返回值<ul><li>0：成功</li><li>1：失败</li></ul></li></ul><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 要卸载 HKLM 中的配置单元 TempHive，请键入：Reg UNLOAD HKLM\TempHive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>​        Netsh(Network Shell)是Windows系统提供的功能强大的网络配置命令行工具。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>​        添加防火墙配置</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 添加通过防火墙的程序：add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM":: 添加禁止通过防火墙的程序：add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=disable:: 添加禁止通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM":: 禁止程序访问外部网络add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable scope=subnet:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM",但该程序只能访问本地网络，禁止访问外部网络:: 定制程序网络访问范围add allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" name="TIM" mode=enable scope=custom address=192.168.1.12,192.168.1.13:: 添加通过防火墙的C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe程序，并将防火墙中对应程序的名称改为”TIM",但程序只能访问IP为”192.168.1.12“和”192.168.1.13“的网络:: 添加允许使用TCP协议的端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable:: 添加远程程序访问本地计算机（建立TCP连接）时的端口（端口为”8888“，端口名称为”重要服务“):: 添加UDP协议使用的端口add portopening protocol=udp port=8888 name=重要服务 mode=enable:: 添加远程程序访问本地计算机（建立UDP连接）时的端口（端口为”8888“，端口名称为”重要服务“):: 添加所有协议都可以使用的端口add portopening protocol=all port=8888 name=重要服务 mode=enable:: 允许防火墙的所有协议可通过的端口（端口为”8888“，端口名称为”重要服务“):: 限制外部连接使用端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable SCOP=Subnet:: 限制外部网络通过TCP连接方式与本地计算机的”8888“端口进行通信的计算机:: 定制访问端口的连接add portopening protocol=tcp port=8888 name=重要服务 mode=enable scop=custom address=192.168.1.12,192.168.2.0:: 定制访问端口的连接方式为TCP连接，并且设定IP为“192.168.1.12”的计算机和网路号为“192.168.2”的网络可以通过端口"8888"以TCP连接方式访问本地计算机:: 为指定的网络连接添加可用端口add portopening protocol=tcp port=8888 name=重要服务 mode=enable interface=本地连接:: 为名为“本地连接”的网络连接添加一个以TCP方式连接的端口(8888)，并且将该端口的名称命名为“重要服务”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>​        删除防火墙配置</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">delete allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe":: 删除防火墙允许的程序delete portopening protocol=tcp port=8888 interface=本地连接:: 删除通过网络连接名为“本地连接”的TCP连接端口“8888"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h4><p>​        设置防火墙配置</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">:: 编辑已添加的程序设置set allowedprogram program="C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin\QQProtect.exe" scop=custom address=192.168.1.12:: 将QQProtect程序设置为只能访问IP为”192.168.1.12“的计算机:: 编辑防火墙中已添加的端口set portopening protocol=tcp port=8888 name=重要服务 mode=enable:: 将TCP连接端口"8888"的名称设置为“重要服务”，类型为“可用”set icmpsetting type=8 mode=enable:： 启用ICMP报文回显请求set icmpsetting type=8 mode=disable:: 关闭ICMP报文回显请求set icmpsetting type=8 mode=disable interface:: 设置指定网络接口ICMP报文功能:: 指定防火墙日志文件set logging filelocation=D:\fhq.log maxfile=400:: 将防火墙的日志文件fhq.log建立在D盘，并且日志文件的最大容量为400KBset logging droppedpcket=enable:: 让防火墙记录被丢弃的数据包set logging droppedpcket=disable:: 让防火墙不记录被丢弃的数据包set logging connections=enable:: 让防火墙记录成功连接set logging connections=disable:: 让防火墙记录不成功连接set notifications mode=disable:: 禁止防火墙弹出通知对话框set notifications mode=enable:: 允许防火墙弹出通知对话框set opmode mode=enable:: 开启Windows防火墙功能set opmode mode=disable:: 关闭Windows防火墙功能set opmode mode=enable interface=本地连接:: 为指定网络接口开启防火墙set opmode mode=enable exceptions=enable:: 开启防火墙例外功能set service type=fileandprint mode=enable:: 允许文件和打印机共享服务通过防火墙set service type=remotedesktop mode=enable:: 允许远程管理服务通过防火墙set service type=remoteadmin mode=enable:: 允许远程协助和远程桌面服务通过防火墙set service type=upnp mode=enable:: 允许UPnP框架服务通过防火墙set service type=all mode=enable:: 允许所有服务类型通过防火墙set service type=fileandprint mode=enable scope=subnet:: 显示外部网络使用指定类型的服务set service type=fileanprint mode enable scope=custom address=192.168.1.12:: 限制访问指定类型服务的连接reset:: 恢复防火墙默认设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>​        显示防火墙配置</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">show allowedprogram verbose=enable:: 查看允许通过防火墙的程序show config verbose=enable:: 查看防火墙的详细配置信息show icmpsetting verbose=enable:: 查看ICMP报文设置信息show logging :: 显示防火墙配置文件设置信息show opmode:: 查看当前防火墙的工作状态show portopening cerbose=enable:: 查看防火墙端口设置信息show service verbose=enable:: 查看防火墙服务设置信息show state verbose=enable:: 查看当前防火墙工作状态信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="批处理应用"><a href="#批处理应用" class="headerlink" title="批处理应用"></a>批处理应用</h1><h2 id="程序的启动与关闭"><a href="#程序的启动与关闭" class="headerlink" title="程序的启动与关闭"></a>程序的启动与关闭</h2><p>​        start命令行可以用来启动程序，同时也可以使用start命令通过任务管理器来关闭程序。</p><p><strong>步骤</strong>：</p><ol><li>确定文件位置</li><li>建立批处理文件</li></ol><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">rem -------start--------rem TIMstart.batrem --------end---------@echo offstart "" "C:\Program Files (x86)\Tencent\TIM\Bin\TIM.exe"::等价于：::cd "C:\Program Files (x86)\Tencent\TIM\Bin\"::start TIM.exerem 如果不加中间的""，那么会进入cmd模式。。rem -------start--------rem TIMstop.batrem --------end---------@echo offstart taskkill /f /im TIM.exestart taskkill /f /im TXPlatform.exestart taskkill /f /im QQProtect.exe::实际上是通过“任务管理器”终止的进程来实现的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除临时文件夹中的文件"><a href="#删除临时文件夹中的文件" class="headerlink" title="删除临时文件夹中的文件"></a>删除临时文件夹中的文件</h2><p>​        使用del命令快速删除指定文件夹中的文件。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 删除临时文件夹中文件color B0echo -----------------------------------------echo 开始进行文件删除操作...pausecd \c:cd \cd windows\tempdel *.* /ppause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动清除系统垃圾文件"><a href="#自动清除系统垃圾文件" class="headerlink" title="自动清除系统垃圾文件"></a>自动清除系统垃圾文件</h2><p>​        Windows操作系统在安装和使用过程中会产生很多垃圾，包括临时文件(<code>*.tmp</code>、<code>*._mp</code>)、日志文件(<code>*.log</code>)、临时帮助文件(<code>*.gid</code>)、磁盘检查文件(<code>*.chk</code>)、临时备份文件(<code>*.old、*.bak</code>)以及其他临时文件。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 自动清除系统垃文件color B0echo -----------------------------------------echo 开始清除文件...pausecls@echo off:: 依次清除系统根目录中的临时文件、临时帮助文件、磁盘检查文件、临时备份文件del /f /s /q %systemdrive%\*.tmpdel /f /s /q %systemdrive%\*._mpdel /f /s /q %systemdrive%\*.giddel /f /s /q %systemdrive%\*.chkdel /f /s /q %systemdrive%\*.old:: 依次清除Windows目录中的临时备份文件、预读文件、临时文件del /f /s /q %windir%\*.bakdel /f /s /q %windir%\prefetch\*.*rd /s /q %windir%\temp & mk %windir%\temp:: 依次清除用户目录下的临时文件del /f /s /q "%userprofile%\Local Settings\Temporary Internet Files\*.*"del /f /s /q "%userprofile%\Local Setting\Temp\*.*"rd /s /q "%userprofile%\Local Setting\Temp\" & md "%userprofile%\Local Setting\Temp\":: 依次清除用户安装目录下的cookie文件、临时文件del /f /s /q "%appdata%\Microsoft\Windows\cookies\*.*"del /f /s /q "%appdata%\Microsoft\Windows\Recent\*.*"@echo offclscolor 2Eecho ---------------------系统垃清理完成！！！-----------------------echo ----------------------------------------------------------------echo ----------------------------退出--------------------------------pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量转移同一类型的文件"><a href="#批量转移同一类型的文件" class="headerlink" title="批量转移同一类型的文件"></a>批量转移同一类型的文件</h2><p>​        转移指定目录下同一类型的文件到一个指定的目录下(存在)。</p><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 批量转移同一类型的文件color B0echo -----------------------------------------echo 开始转移文件...pauseclsmove c:\download\*.jpg d:\images:: 目的路径必须存在pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用批处理批量移动、删除文件"><a href="#用批处理批量移动、删除文件" class="headerlink" title="用批处理批量移动、删除文件"></a>用批处理批量移动、删除文件</h2><p>​        使用批处理可以很方便地进行文件的批量移动或删除，出错时也很容易修改</p><p><strong>eg</strong>：</p><ul><li>将D盘.htm文件移动到E盘，再格式化D盘，然后将文件移回D盘，并将后缀改为.html。</li></ul><pre class="line-numbers language-bat"><code class="language-bat">rem --------------------------rem 1.batrem --------------------------@echo offe:md dd:copy *.htm e:\d@if exist e:\d\*.htm call 2.batrm e:\d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bat"><code class="language-bat">rem ---------------------------rem 2.batrem ---------------------------@echo offformat d: /qcopy e:\d\*.htm d:d:ren *.htm *.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除大小和类型一样的重复文件-没见效果"><a href="#删除大小和类型一样的重复文件-没见效果" class="headerlink" title="删除大小和类型一样的重复文件(没见效果)"></a>删除大小和类型一样的重复文件(没见效果)</h2><p>​        大小和类型一样的文件基本上都是重复文件，可以使用批处理文件将其删除。</p><h2 id="删除某盘内的所有空目录"><a href="#删除某盘内的所有空目录" class="headerlink" title="删除某盘内的所有空目录"></a>删除某盘内的所有空目录</h2><p><strong>eg</strong>：</p><ul><li>删除H盘中所有的空目录</li></ul><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 删除某盘内的所有空目录color B0echo -----------------------------------------echo 开始删除所有空目录...pausedir h:\ /ad /b /s | sort /r > h:\kill.txtfor /f "delims=;" %%i in (h:\kill.txt) do rd "%%i"echo y | del h:\kill.txt:: 如需对其他磁盘进行操作，请将h磁盘替换为其他盘符clscolor 2Eecho --------------------删除某盘所有空目录操作结束-----------------echo ---------------------------------------------------------------echo ----------------------------关闭-------------------------------pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换磁盘为NTFS格式"><a href="#转换磁盘为NTFS格式" class="headerlink" title="转换磁盘为NTFS格式"></a>转换磁盘为NTFS格式</h2><p><strong>eg</strong>：</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 转换磁盘为NTFS格式color B0echo -----------------------------------------echo 开始磁盘格式转换...pause@echo off@echo.convert h:/fs:ntfs:: 对其他磁盘进行格式化的时候，可将H磁盘修改为对应盘符:: 优点：->不会删除原来存在的文件clscolor 2Eecho --------------------磁盘格式转换结束-----------------echo -----------------------------------------------------echo --------------------------关闭-----------------------pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>NTFS格式的分区在DOS/Windows 9X下均不支持，Windows 2000之后的系统才支持</li><li>使用该方式转换不会删除磁盘中原来存在的文件</li></ul><h2 id="显示或隐藏文件扩展名"><a href="#显示或隐藏文件扩展名" class="headerlink" title="显示或隐藏文件扩展名"></a>显示或隐藏文件扩展名</h2><p><strong>eg</strong>：</p><ul><li>使用批处理程序通过修改注册表来实现扩展名的显示与隐藏</li></ul><pre class="line-numbers language-bat"><code class="language-bat">@echo offtitle 显示或隐藏文件扩展名color B0echo -----------------------------------------echo 开始执行操作...pausereg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t reg_dword /d 00000000 /f:: 键值为1隐藏；键值为0显示clscolor 2Eecho --------------------操作结束-----------------echo ---------------------------------------------echo ----------------------关闭-------------------pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考链接：</p><p><a href="https://www.cnblogs.com/DswCnblog/category/820715.html" target="_blank" rel="noopener">dsw846</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/category/1081980.html" target="_blank" rel="noopener">Angel_Kitty</a></p><p>相关材料：</p><p><a href="../BatchFiles">批处理库</a></p><p><a href="../XMind/批处理思维导图.xmind">批处理思维导图</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/08/22/yuan-xing-mo-shi/"/>
      <url>/2020/08/22/yuan-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        原型模式(Prototype)是一种创建型设计模式，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>​        <font color="blue">原型模式其实就是从一个对象再创建一个可定制的对象，而且不需知道任何创建的细节。</font></p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><strong>客户端(Client)</strong>：通过调用原型类的克隆操作创建一个新对象。</li><li><strong>原型类(Prototype)</strong>：声明一个接口用于克隆自己。</li><li><strong>具体原型类(ConcretePrototype)</strong>：实现克隆自己的操作。</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/原型模式经典结构.png" alt="原型模式经典结构"></center><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>创建一个原型类，并定义一个克隆自己的接口(或抽象方法)</li><li>实现一个具体原型类，在类体中实现原型类中克隆自己的操作</li><li>在客户端调用具体原型类的Clone()方法完成对象的克隆操作</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>Prototype抽象原型类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 抽象原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">string</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">Prototype</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Property </span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Id    <span class="token punctuation">{</span>         <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 提供的克隆接口</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>返回值类型是原型类类型&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConcretePrototype1具体原型类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 具体原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">ConcretePrototype1</span> <span class="token punctuation">:</span> Prototype<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">ConcretePrototype1</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>         <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 实现原型类中的继承而来的虚方法</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">override</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Shallow copy </span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConcretePrototype2具体原型类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 具体原型类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">ConcretePrototype2</span> <span class="token punctuation">:</span> Prototype<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Constructor </span>    <span class="token keyword">public</span> <span class="token function">ConcretePrototype2</span><span class="token punctuation">(</span><span class="token keyword">string</span> id<span class="token punctuation">)</span>         <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>     <span class="token comment" spellcheck="true">/// 实现原型类中的继承而来的虚方法</span>     <span class="token comment" spellcheck="true">/// &lt;/summary></span>     <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>     <span class="token keyword">public</span> <span class="token keyword">override</span> Prototype <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Shallow copy </span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Program客户类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 客户端</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       ConcretePrototype1 p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype1</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype1 c1 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Cloned: {0}"</span><span class="token punctuation">,</span> c1<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype2 p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype2</span><span class="token punctuation">(</span><span class="token string">"II"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ConcretePrototype2 c2 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype2<span class="token punctuation">)</span>p2<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Cloned: {0}"</span><span class="token punctuation">,</span> c2<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Wait for user </span>       Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果展示：</p><blockquote><p>Cloned：$\mathbf I$</p><p>Cloned：$\mathbf I$$\mathbf I$</p></blockquote><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ul><li><p>隐藏对象创建的细节</p></li><li><p>大大提高程序的性能</p></li></ul><p><strong>缺点：</strong></p><ul><li>使用时较复杂，需要区分<strong>浅复制</strong>和<strong>深复制</strong></li></ul><p>注：</p><ul><li><p>浅复制与深复制：</p><ul><li><p><strong>浅复制</strong>只将类中的值类型进行复制，不会对引用类型进行复制，所有对象的引用类型指向最后一个对象对引用类型的赋值。</p></li><li><p><strong>深复制</strong>可以将类中的引用类型也完成复制。</p></li></ul></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>​        创建的对象十分耗费空间资源，就创建一个相似的对象，在需要时对其进行克隆操作来创建一个新的对象。</p><h2 id="投简历引发的思考"><a href="#投简历引发的思考" class="headerlink" title="投简历引发的思考"></a>投简历引发的思考</h2><p>​        对于一个普通的应届毕业生来说多投简历可能就意味着有更多被选择的机会，但简历也不能千篇一律，投不同公司或职位都用同一个简历，最好对应不同的职位设计不同的简历。<font color="red">以此为需求编程实现简历复印的功能</font>。</p><h3 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/普通实现.png" alt="普通实现"></center><p><strong>代码实现：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> timeArea<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> timeArea<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> timeArea<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2019 XX公司<br>小王 男 29<br>工作经历：2010-2019 XX公司<br>小王 男 29<br>工作经历：2010-2019 XX公司</p></blockquote><p>​        使用这个方式进行简历复制时会产生三个Resume对象，而且这三个对象存储的字面值完全相同，下面代码也能产生一致的效果但是占用的存储空间仅为上述代码实现的三分之一。</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2019"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> a            Resume c <span class="token operator">=</span> a            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        上述两种代码都实现了简历复制的需求，但就占用存储空间来说的话，第二种实现更加节省空间。而就其扩展性来说，两种实现都没有满足很好的扩展，如：<font color="red">要投递不同职位的简历时，毕业生的基本信息是不会发生变化的，但是各个简历所侧重的工作经历是不同的。</font>要实现这样的需求，对于上面的实现就需要修改代码才能实现。而原型模式则可以在原有对象的基础上进行拷贝得到一个新的对象（<font color="blue">在这个可修改新对象的信息</font>）。</p><h3 id="原型实现"><a href="#原型实现" class="headerlink" title="原型实现"></a>原型实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/原型实现.png" alt="原型实现"></center><p><strong>代码实现：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2014"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2015-2018"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> timeArea<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> timeArea<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> timeArea<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现接口中的方法</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2014 XX公司<br>小王 男 29<br>工作经历：2015-2018 YY企业<br>小王 男 24<br>工作经历：2010-2014 XX公司</p></blockquote><p>​        上述代码实现了一个人不同工作经历的拷贝，同时也可以对人员的信息进行修改（方便拷贝一波，大家懂的😜）。但上述情况中存在一个问题，原型中字段全部为值类型。<font color="red">MemberwiseClone方法对值类型的字段执行逐位复制，对引用类型字段进行引用复制，也即浅复制。</font>下面的实现方式可能帮助您更好的理解。</p><h3 id="浅复制实现"><a href="#浅复制实现" class="headerlink" title="浅复制实现"></a>浅复制实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/浅复制.png" alt="浅复制"></center><p><strong>代码实现：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2010-2014"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2015-2018"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2003"</span><span class="token punctuation">,</span> <span class="token string">"ZZ企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历            --真实原型类</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable               <span class="token comment" spellcheck="true">//直接实现系统提供的ICloneable接口</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> WorkExperience work<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> workDate<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>            work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>WorkDate<span class="token punctuation">,</span> work<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工作经历</span>    <span class="token keyword">class</span> <span class="token class-name">WorkExperience</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> workDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> WorkDate        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> workDate<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> workDate <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Company        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> company<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：1998-2003 ZZ企业<br>小王 男 29<br>工作经历：1998-2003 ZZ企业<br>小王 男 24<br>工作经历：1998-2003 ZZ企业</p></blockquote><p>​        三个简历输出工作经历是最后一次修改的结果，显然不是我们想要得到的效果。<font color="red">原因：三个Resume对象的work字段都指向最初实例化WorkExperience对象的地址，任何一次修改都会影响到其他两个对象中的work字段</font>。</p><h3 id="深复制实现"><a href="#深复制实现" class="headerlink" title="深复制实现"></a>深复制实现</h3><p><strong>程序类图：</strong></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/原型模式/深复制.png" alt="深复制"></center><p><strong>代码实现：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 原型模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Resume a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token string">"大鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2000"</span><span class="token punctuation">,</span> <span class="token string">"XX公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume b <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2006"</span><span class="token punctuation">,</span> <span class="token string">"YY企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resume c <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">"1998-2003"</span><span class="token punctuation">,</span> <span class="token string">"ZZ企业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简历</span>    <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> sex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> WorkExperience work<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 对应用的克隆</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="work">&lt;/param></span>        <span class="token keyword">private</span> <span class="token function">Resume</span><span class="token punctuation">(</span>WorkExperience work<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token punctuation">(</span>WorkExperience<span class="token punctuation">)</span>work<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置个人信息</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">string</span> sex<span class="token punctuation">,</span> <span class="token keyword">string</span> age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置工作经历</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> workDate<span class="token punctuation">,</span> <span class="token keyword">string</span> company<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>            work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//显示</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} {1} {2}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"工作经历：{0} {1}"</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>WorkDate<span class="token punctuation">,</span> work<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用Resume的构造函数完成对引用对象的克隆</span>            Resume obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工作经历</span>    <span class="token keyword">class</span> <span class="token class-name">WorkExperience</span> <span class="token punctuation">:</span> ICloneable    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> workDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> WorkDate        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> workDate<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> workDate <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> company<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Company        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> company<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示：</strong></p><blockquote><p>小王 男 29<br>工作经历：2010-2014 XX公司<br>小王 男 29<br>工作经历：2015-2018 YY企业<br>小王 男 24<br>工作经历：1998-2003 ZZ企业</p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/08/22/dai-li-mo-shi/"/>
      <url>/2020/08/22/dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        代理模式为其他对象提供一种代理以控制对这个对象的访问。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象角色(Subject)</strong>：</p><p>代理角色和真实角色必须要继承实现的共同抽象接口</p></li><li><p><strong>代理角色(Proxy)</strong>：</p><p>维护一个相应的真实角色，并可以代替真实角色执行其具有的功能</p></li><li><p><strong>真实角色(Real Subject)</strong>：</p><p>不方便出面而由代理角色代替的实际对象</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>分析并创建抽象角色接口</li><li>真实角色实现抽象接口</li><li>代理角色需要指向雇佣其的真实对象，实现抽象接口并隐式调用真实对象的方法</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>使用代理追女孩：</p><p><strong>被追求者</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//被追求者</span>    <span class="token keyword">class</span> <span class="token class-name">SchoolGirl</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>送礼物的接口</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//送礼物的接口</span>    <span class="token keyword">interface</span> <span class="token class-name">GiveGift</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>雇主</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//追求者---（雇主）</span>    <span class="token keyword">class</span> <span class="token class-name">Pursuit</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//雇主心意的女孩对象</span>        SchoolGirl mm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pursuit</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//追求者与被追求者之间的联系</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你洋娃娃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你鲜花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代理者</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//代理者实现接口</span>    <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个雇主变量，用来存储聘用代理者的雇主对象</span>        Pursuit gg<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立追求者与本追求者之间的关系</span>            gg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pursuit</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用雇主对象自身的方法</span>            gg<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SchoolGirl jiaojiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jiaojiao<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"李娇娇"</span><span class="token punctuation">;</span>            Proxy daili <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>jiaojiao<span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>代理使用的方法实际是雇主实现的方法</li><li>代理维护一个与雇主相关的对象</li><li>雇主维护一个与追求者相关的对象</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>1).    <strong>远程代理</strong>：也就是为对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。<br>2).    <strong>虚拟代理</strong>：是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真是对象。<br>3).    <strong>安全代理</strong>：用来控制真实对象访问时的权限。<br>4).    <strong>智能指引</strong>：是指当调用真实的对象时，代理处理另外一些事。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 代理模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SchoolGirl jiaojiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jiaojiao<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"李娇娇"</span><span class="token punctuation">;</span>            Proxy daili <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>jiaojiao<span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            daili<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//送礼物的接口</span>    <span class="token keyword">interface</span> <span class="token class-name">GiveGift</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理者实现接口</span>    <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个雇主变量，用来存储聘用代理者的雇主对象</span>        Pursuit gg<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立追求者与本追求者之间的关系</span>            gg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pursuit</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用雇主对象自身的方法</span>            gg<span class="token punctuation">.</span><span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            gg<span class="token punctuation">.</span><span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//追求者---（雇主）</span>    <span class="token keyword">class</span> <span class="token class-name">Pursuit</span> <span class="token punctuation">:</span> GiveGift    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//雇主心意的女孩对象</span>        SchoolGirl mm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pursuit</span><span class="token punctuation">(</span>SchoolGirl mm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//追求者与被追求者之间的联系</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveDolls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你洋娃娃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你鲜花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">GiveChocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 送你巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//被追求者</span>    <span class="token keyword">class</span> <span class="token class-name">SchoolGirl</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/2020/08/22/zhuang-shi-mo-shi/"/>
      <url>/2020/08/22/zhuang-shi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        装饰模式，动态地给一个对象添加一些额外的职责，就添加功能来说，装饰模式比生成子类更为灵活。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象组件(Component)</strong>：</p><p>​        定义一个对象接口，可以给这些对象动态地添加职责。</p></li><li><p><strong>具体组件(ConcreteComponent)</strong>：</p><p>​        定义一个实现组件接口的对象。这是实际需要加以装饰的对象，但其对装饰的过程一无所知。</p></li><li><p><strong>装饰器(Decorator)</strong>：</p><p>​        维护对组件对象的引用，并定义了与组件对象形式一致的接口。</p></li><li><p><strong>具体装饰器(ConcreteDecorator)</strong>：</p><p>​        实际上由其负责为抽象组件添加功能。它是从装饰器继承的类，并通过以新的公共方法的形式来添加一些额外的特定功能。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>创建原始的抽象组件和装饰器之间的继承关系；</li><li>在装饰器类中，将抽象组件作为一个字段添加；</li><li>将抽象组件传递到装饰器的构造函数中，并初始化抽象组件对象；</li><li>在装饰器类中，重定向所有抽象组件的方法到抽象组件对象；</li><li>在具体装饰器类中，重写所有抽象组件中需要扩展或修改的方法。</li></ol><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式结构图.jpg" alt="装饰模式结构图"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式UML.jpg" alt="装饰模式UML"></center><p><strong>ConcreteComponent角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Person类(ConcreteComponent)</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"装扮的{0}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Decorator角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 服饰类(Decorator)</span>    <span class="token keyword">class</span> <span class="token class-name">Finery</span> <span class="token punctuation">:</span> Person    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Person component<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打扮</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Decorate</span><span class="token punctuation">(</span>Person component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用的是父类中的方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ConcreteDecorator角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体服饰类(ConcreteDecorator)</span>    <span class="token keyword">class</span> <span class="token class-name">TShirts</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"大T恤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">BigTrouser</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"垮裤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Sneakers</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"破球鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Suit</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"西装 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Tie</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"领带 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">LeatherShoes</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"皮鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Person xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第一种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TShirts dtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TShirts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程          ---里氏替换原则</span>            pqx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//破球鞋装扮</span>            kk<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//跨库装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//大T衫装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//回调方法直至最底层</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第二种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Tie ld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        Suit xz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Suit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//装饰过程</span>            px<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//皮鞋装扮 </span>            ld<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//领带装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//西装装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第三种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Tie ld2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程</span>            pqx2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>            px2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>            kk2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/装饰模式/装饰模式测试结果展示.png" alt="装饰模式测试结果展示"></center><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ul><li>扩展对象功能，比继承灵活，不会导致类个数的急剧增加</li><li>可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象。</li><li>具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构建子类和具体装饰子类。</li></ul><p><strong>缺点</strong>：</p><ul><li>产生很多小对象。大量小对象占据内存，一定程度上影响性能。</li><li>装饰模式容易出错，调试排查比较麻烦。</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li>IO中输入流和输出流的设计</li><li>Swing包中图形界面的构件功能</li><li>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper, HttpServletRequestWrapper类，增强了request对象的功能。</li><li>Struts2 中，request，response，session对象的处理</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h2><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 装饰模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Person xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第一种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TShirts dtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TShirts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程          ---里氏替换原则</span>            pqx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//破球鞋装扮</span>            kk<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//跨库装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//大T衫装扮</span>            dtx<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//回调方法直至最底层</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第二种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Tie ld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        Suit xz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Suit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//装饰过程</span>            px<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//皮鞋装扮 </span>            ld<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//领带装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//西装装扮</span>            xz<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"\n第三种装扮："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Sneakers pqx2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sneakers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LeatherShoes px2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeatherShoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigTrouser kk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigTrouser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Tie ld2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//装饰过程</span>            pqx2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token punctuation">;</span>            px2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>pqx<span class="token punctuation">)</span><span class="token punctuation">;</span>            kk2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>px2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span>kk2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ld2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Person类(ConcreteComponent)</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"装扮的{0}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 服饰类(Decorator)</span>    <span class="token keyword">class</span> <span class="token class-name">Finery</span> <span class="token punctuation">:</span> Person    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Person component<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打扮</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Decorate</span><span class="token punctuation">(</span>Person component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用的是父类中的方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体服饰类(ConcreteDecorator)</span>    <span class="token keyword">class</span> <span class="token class-name">TShirts</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"大T恤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">BigTrouser</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"垮裤 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Sneakers</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"破球鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Suit</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"西装 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Tie</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"领带 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">LeatherShoes</span> <span class="token punctuation">:</span> Finery    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"皮鞋 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="装饰模式-基本代码"><a href="#装饰模式-基本代码" class="headerlink" title="装饰模式-基本代码"></a>装饰模式-基本代码</h2><p><strong>抽象组件对象</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//对象的接口</span>    <span class="token comment" spellcheck="true">//可以为对象动态添加职责</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体组件对象</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//定义一个具体的对象</span>    <span class="token comment" spellcheck="true">//可以为该对象添加一些职责</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token punctuation">:</span> Component    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体对象的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>装饰器对象</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//装饰抽象类</span>    <span class="token comment" spellcheck="true">//从外部扩展Component类对象的功能</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">:</span> Component    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> Component component<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体装饰器对象</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">//具体的装饰对象</span>    <span class="token comment" spellcheck="true">//为Component添加职责的功能</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token punctuation">:</span> Decorator    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> addedState<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addedState <span class="token operator">=</span> <span class="token string">"New State"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体装饰对象A的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//具体的装饰对象</span>    <span class="token comment" spellcheck="true">//为Component添加职责的功能</span>    <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token punctuation">:</span> Decorator    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">AddedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"具体装饰对象B的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AddedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ConcreteComponent c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConcreteDecoratorA d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConcreteDecoratorB d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d1<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            d2<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>            d2<span class="token punctuation">.</span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 装饰模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/08/22/ce-lue-mo-shi/"/>
      <url>/2020/08/22/ce-lue-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        策略模式时一种<strong>行为型模式</strong>，主要用于需要使用不同的算法来处理不同的数据（对象）时。策略模式是一种定义一系列算法的的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少各种算法类与使用算法类之间的耦合，即<strong>在运行时选择算法</strong>。</p><p>​        <font color="blue">定义算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户 。</font></p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p><strong>抽象策略角色（Strategy）</strong>：策略类，通常由一个<strong>接口</strong>或者<strong>抽象类</strong>来实现</p><p>​        定义一个公共接口，各种不同的算法以不同的方式实现这个接口，Context使用这个接口调用不同的算法，一般用接口或抽象类来实现。</p></li><li><p><strong>具体策略角色（ConcreteStrategy）</strong>：包装了相关的<strong>算法和行为</strong></p><p>​        实现Strategy定义的接口，提供具体的算法实现。</p></li><li><p><strong>环境角色（Context）</strong>：持有一个<strong>策略类的引用</strong>最终给客户端调用</p><ul><li>需要使用ConcreteStrategy提供的算法</li><li>内部维护一个Strategy的实例</li><li>负责动态设置运行时Strategy具体的实现算法</li><li>负责跟Strategy之间的交互和数据传递</li></ul></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>识别客户端可能需要的各种算法（即功能）（<strong>抽象策略角色</strong>）</li><li>在接口中指定该算法的签名（原型）（<strong>具体策略角色</strong>）</li><li>在派生类中提供可选择的实现细节（<strong>环境角色</strong>）</li><li>将客户端的算法和接口耦合</li></ol><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>代码结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式结构图.jpg" alt="策略模式结构图"></center><p><strong>抽象策略角色</strong>：</p><p><strong>CashSuper类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//算法的公共接口</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象出来的接口方法</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体策略角色</strong>：</p><p><strong>CashNormal类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不折扣算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashRebate类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//折扣算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 几折（默认为1折）</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 带参构造函数-设置打折力度</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 带参构造函数-设置打折力度</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyRebate">几折&lt;/param></span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 重写acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 重写acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="money">原始钱数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回折后钱数&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashReturn类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返利算法</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 金额限度</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返还力度</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数-设置金额限度和返还力度</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 构造函数-设置金额限度和返还力度</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyCondition">金额限度&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="moneyReturn">返还力度&lt;/param></span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span> <span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 重构acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 重构acceptCash方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="money">原始金额&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回实际应付金额&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result <span class="token operator">=</span> money <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>环境角色</strong>：</p><p><strong>CashContext类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//收费策略Context</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明一个现金收费父类对象</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置策略行为，参数为具体的现金收费子类（正常，打折或返利）</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//得到现金促销计算结果（利用了多态机制，不同的策略行为导致不同的结果）</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><p><strong>测试界面</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式测试界面.png" alt="策略模式测试界面"></center><p><strong>测试类代码</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//直接传策略对象参数进行上下文对象的创建</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略模式测试结果展示.png" alt="策略模式测试结果展示"></center><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>策略模式提供了<strong>管理</strong>相关<strong>算法族</strong>的办法。</li><li>策略模式提供了可以<strong>替换继承关系</strong>的办法。</li><li>使用策略模式可以<strong>避免使用多重条件转移语句</strong>。</li></ol><p><strong>缺点</strong>：</p><ol><li><strong>客户端</strong>必须<strong>知道所有的策略类</strong>，并且<strong>自行决定</strong>使用哪一个策略类</li><li>策略模式造成<strong>很多的策略类</strong>，每一个具体的策略类都会产生一个新类</li></ol><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li>多个类<strong>只区别在表现行为不同</strong>，可以使用Strategy模式，在运行时动态选择具体要执行的行为；</li><li>需要在不同情况下使用不同的策略(算法),或者策略还可能在未来用其他方式来实现；</li><li>对客户隐藏具体的策略(算法)的实现细节，彼此完全独立。</li></ol><h1 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h1><h2 id="策略与简单工厂集合"><a href="#策略与简单工厂集合" class="headerlink" title="策略与简单工厂集合"></a>策略与简单工厂集合</h2><p>改造后的环境类：(CashContext.cs)</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取工厂</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        CashSuper cs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据条件返回相应的对象</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    CashNormal cs0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cs0<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    CashReturn cr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    CashRebate cr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端测试代码</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//策略对象的的创建在上下文类中完成，即策略对象的创建是对用户保密的</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//客户端窗体程序（主要部分）</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//利用简单工厂模式根据下拉选择框，生成相应的对象</span>            CashContext csuper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过多态，可以得到收取费用的结果</span>            totalPrices <span class="token operator">=</span> csuper<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//展示计价结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>策略模式客户端需要认识<strong>CashSuper类</strong>、<strong>CashNormal类</strong>、<strong>CashReturn类</strong>、<strong>CashRebate类</strong>、<strong>CashContext类</strong>；</li><li>简单工厂模式客户端需要认识<strong>CashSuper类</strong>、<strong>工厂类</strong>；</li><li>策略与简单工厂集合之后，客户端只需要认识一个<strong>CashContext类</strong>即可，耦合度更加低。</li></ul><h2 id="策略-反射"><a href="#策略-反射" class="headerlink" title="策略 + 反射"></a>策略 + 反射</h2><p>改造后的环境类：(CashContext.cs)</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置上下文中的策略实例对象</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBehavior</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端测试代码</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/********************************** *  * 程序说明：使用反射 + 策略模式  来实现 *  *          反射：下拉列表中的文件数据直接从配置.xml文件中获取，即在程序运行时程序才知道下拉框中会有什么内容 *          策略：使用能统一调用所有策略对象的上下文对象 *  *  */</span> <span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DataSet ds<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放配置文件信息</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在程序加载时，读取指定文件中的所有内容</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读配置文件                     --在程序运行的路径下</span>            ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">ReadXml</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>StartupPath <span class="token operator">+</span> <span class="token string">"\\CashAcceptType.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的记录绑定到下拉列表框中</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>DataRowView dr <span class="token keyword">in</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DefaultView<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cbxType<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cbxType<span class="token punctuation">.</span>SelectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化一个上下文对象</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据用户的选项，查询用户选择项的相关行</span>            DataRow dr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DataRow<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//声明一个参数的对象数组</span>            <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若有参数，则将其分割成字符串数组，用于实例化时所用的参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>                args <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过反射实例化出相应的算法对象</span>            cc<span class="token punctuation">.</span><span class="token function">setBehavior</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CashSuper<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"商场管理软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"商场管理软件."</span> <span class="token operator">+</span> dr<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Default<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashAcceptType.xml</strong>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CashAcceptType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>正常收费<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashNormal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满300返100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>300,100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满200返50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>200,50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打8折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打7折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CashAcceptType</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/策略模式/策略+反射测试结果展示.png" alt="策略+反射测试结果展示"></center><h1 id="策略模式与简单工厂模式的区别"><a href="#策略模式与简单工厂模式的区别" class="headerlink" title="策略模式与简单工厂模式的区别"></a>策略模式与简单工厂模式的区别</h1><p><strong>从组成对象来说</strong>：</p><ul><li><p>简单工厂模式：抽象商品角色、具体商品角色、简单工厂角色</p></li><li><p>策略模式：抽象策略角色、具体策略角色、上下文角色(环境角色)</p></li></ul><p><strong>从角色之间得关系来说</strong>：</p><ul><li>抽象策略角色与上下文角色的关系是<strong>聚合关系</strong></li><li>抽象商品角色与简单工厂角色之间是<strong>依赖关系</strong></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《大话设计模式》</li><li>《设计模式精解及面试攻略》</li></ul><h2 id="策略与简单工厂集合完整源码"><a href="#策略与简单工厂集合完整源码" class="headerlink" title="策略与简单工厂集合完整源码"></a>策略与简单工厂集合完整源码</h2><p><strong>CashContext.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取工厂</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        CashSuper cs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据条件返回相应的对象</span>        <span class="token keyword">public</span> <span class="token function">CashContext</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"正常收费"</span><span class="token punctuation">:</span>                    CashNormal cs0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cs0<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"满300返100"</span><span class="token punctuation">:</span>                    CashReturn cr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashReturn</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"打8折"</span><span class="token punctuation">:</span>                    CashRebate cr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashRebate</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cs <span class="token operator">=</span> cr2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashNormal.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//正常收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashRebate.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打折收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化时，必需要输入折扣率,如八折，就是0.8</span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashReturn.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返利收费，继承CashSuper</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化时必须要输入返利条件和返利值，比如满300返100，则moneyCondition为300，moneyReturn为100</span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span> <span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若大于返利条件，则需要减去返利值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result <span class="token operator">=</span> money <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashSuper.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//现金收取父类</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象方法：收取现金，参数为原价，返回为当前价</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Form1.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//策略对象的的创建在上下文类中完成，即策略对象的创建是对用户保密的</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//客户端窗体程序（主要部分）</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//利用简单工厂模式根据下拉选择框，生成相应的对象</span>            CashContext csuper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过多态，可以得到收取费用的结果</span>            totalPrices <span class="token operator">=</span> csuper<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//展示计价结果</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem <span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashAcceptType.xml</strong>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CashAcceptType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>正常收费<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashNormal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满300返100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>300,100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>满200返50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashReturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>200,50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打8折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>打7折<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>CashRebate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">></span></span>0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CashAcceptType</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="策略-反射完整源码"><a href="#策略-反射完整源码" class="headerlink" title="策略+反射完整源码"></a>策略+反射完整源码</h2><p><strong>CashSuper.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CashSuper</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashNormal.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashNormal</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashRebate.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashRebate</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyRebate <span class="token operator">=</span> 1d<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CashRebate</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyRebate<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyRebate <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyRebate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> money <span class="token operator">*</span> moneyRebate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashReturn.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashReturn</span> <span class="token punctuation">:</span> CashSuper    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyCondition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> moneyReturn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CashReturn</span><span class="token punctuation">(</span><span class="token keyword">string</span> moneyCondition<span class="token punctuation">,</span><span class="token keyword">string</span> moneyReturn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyCondition <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyReturn <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>moneyReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">double</span> <span class="token function">acceptCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> money<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> moneyCondition<span class="token punctuation">)</span>                result<span class="token operator">=</span>money<span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyCondition<span class="token punctuation">)</span> <span class="token operator">*</span> moneyReturn<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CashContext.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CashContext</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> CashSuper cs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置上下文中的策略实例对象</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBehavior</span><span class="token punctuation">(</span>CashSuper csuper<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cs <span class="token operator">=</span> csuper<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">acceptCash</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Form1.cs</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span><span class="token keyword">namespace</span> 商场管理软件<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> Form    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DataSet ds<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放配置文件信息</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于总计</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 在程序加载时，读取指定文件中的所有内容</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读配置文件                     --在程序运行的路径下</span>            ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">ReadXml</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>StartupPath <span class="token operator">+</span> <span class="token string">"\\CashAcceptType.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的记录绑定到下拉列表框中</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span>DataRowView dr <span class="token keyword">in</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DefaultView<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cbxType<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cbxType<span class="token punctuation">.</span>SelectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnOk_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化一个上下文对象</span>            CashContext cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据用户的选项，查询用户选择项的相关行</span>            DataRow dr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DataRow<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> cbxType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//声明一个参数的对象数组</span>            <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若有参数，则将其分割成字符串数组，用于实例化时所用的参数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>                args <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"para"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过反射实例化出相应的算法对象</span>            cc<span class="token punctuation">.</span><span class="token function">setBehavior</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CashSuper<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"商场管理软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"商场管理软件."</span> <span class="token operator">+</span> dr<span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Default<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> totalPrices <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            totalPrices <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtPrice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>txtNum<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> total <span class="token operator">+</span> totalPrices<span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"单价："</span> <span class="token operator">+</span> txtPrice<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" 数量："</span> <span class="token operator">+</span> txtNum<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span>cbxType<span class="token punctuation">.</span>SelectedItem<span class="token operator">+</span> <span class="token string">" 合计："</span> <span class="token operator">+</span> totalPrices<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> total<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btnClear_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">=</span> 0d<span class="token punctuation">;</span>            txtPrice<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>            txtNum<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            lbxList<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lblResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2020/08/22/chou-xiang-gong-han-mo-shi/"/>
      <url>/2020/08/22/chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        抽象工厂模式（Abstract Factory Pattern）属于<strong>类的创建型模式</strong>，是对工厂方法模式的升级。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p>​        工厂方法模式是为了克服简单工厂模式随着产品类的增加需要增加额外的代码的缺点而诞生的，而抽象工厂针对工厂方法只能针对一个产品等级结构而扩展延伸的。</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><ul><li><p>抽象产品(AbstractProduct)：</p><p>定义部分具体产品的轮廓，在创建具体产品时使用多态性实现对具体产品的动态声明。</p></li><li><p>具体产品(ConcreteProduct)：</p><p>抽象产品的具体实现，可扩展但在该模式下扩展无效。</p></li><li><p>抽象工厂接口(AbstractFactory)</p><p>定义部分工厂的轮廓，在运行中实现对工厂的动态创建。</p></li><li><p>具体工厂接口(ConcreteFactory)：</p><p>创建某个具体产品的实例，但以抽象产品引用返回实例。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ul><li>创建抽象产品类/接口（定义产品的特性、动作等）</li><li>创建具体产品类（继承自抽象产品，并实现抽象产品中定义的方法）</li><li>创建抽象工厂类/接口（定义工厂的特性、动作等）</li><li>创建具体工厂类（继承自抽象工厂，并实现抽象工厂中定义的方法）</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/经典抽象工厂.png" alt="经典抽象工厂"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p><strong>抽象工厂模式</strong>：</p><p>​        屏蔽掉具体类的创建方法。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用抽象工厂模式的数据库访问程序.jpg" alt="用抽象工厂模式的数据库访问程序"></center><p><strong>实体类</strong>：</p><p>User:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Department:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽象产品</strong>：</p><p>IUser:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IDepartment:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品</strong>：</p><p>AccessUser：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlserverUser:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AccessDepartment:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlserverDepartment:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽象工厂</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IFactory</span>    <span class="token punctuation">{</span>        IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体工厂</strong>：</p><p>AccessFactory:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AccessFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccessUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccessDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlServerFactory:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SqlServerFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 测试类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// User实体</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Department实体</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体工厂的抽象父工厂的对象</span>            IFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体类的抽象父类对象</span>            IUser iu <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 具体商品对象的操作</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 抽象父工厂重新赋值</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IDepartment id <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/经典抽象工厂测试.png" alt="经典抽象工厂测试"></center><p><strong>业务扩展</strong>：</p><p>将程序使用数据库全部换成Mysql数据库。</p><p><strong>具体产品</strong>：</p><p>添加MysqlUser类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加MysqlDepartment类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Mysql中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体工厂</strong>：</p><p>添加MysqlFactory类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MysqlFactory</span> <span class="token punctuation">:</span> IFactory    <span class="token punctuation">{</span>        <span class="token keyword">public</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MysqlUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> AbstractFactory<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 测试类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// User实体</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Department实体</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体工厂的抽象父工厂的对象</span>            <span class="token comment" spellcheck="true">//IFactory factory = new AccessFactory();</span>            IFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化一个具体类的抽象父类对象</span>            IUser iu <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 具体商品对象的操作</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/抽象工厂-业务扩展测试.png" alt="抽象工厂-业务扩展测试"></center><p><strong>注</strong>：</p><ul><li>进行业务扩展时，需要添加新的具体产品和具体工厂</li><li>具体产品和具体工厂必须实现抽象产品和抽象工厂</li></ul><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点：</p><ul><li>客户端与具体类解耦；</li><li>添加具体类更加方便</li></ul><p>缺点：</p><ul><li>增加代码量和负责程度</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>​        通过定义可以了解到，抽象工厂模式就为解决具有相同（或者相似）等级结构的多个产品族中的产品对象的创建问题。所以抽象工厂模式一般用于具有产品树和产品族的场景下。</p><h1 id="进一步改进"><a href="#进一步改进" class="headerlink" title="进一步改进"></a>进一步改进</h1><p>​        虽然抽象工厂模式将<strong>开放-封闭原则</strong>，<strong>依赖倒置原则</strong>发挥到极致，使得在<strong>切换接口</strong>的情况下非常方便，但是当系统中需要<strong>增加功能</strong>时，因功能分散导致需要添加多个新类才能实现。</p><p>比如：在上面的代码实例中添加项目表<strong>Project</strong>，至少要增加<strong>IProject、SqlServerProject、AccessProject</strong>，还需要更改<strong>IFactory、SqlServerFactory、AccessFactory</strong>才能完全实现。</p><h2 id="用简单工厂来改进抽象工厂"><a href="#用简单工厂来改进抽象工厂" class="headerlink" title="用简单工厂来改进抽象工厂"></a>用简单工厂来改进抽象工厂</h2><p>​        去除IFactory、SqlServerFactory和AccessFactory三个工厂类，取而代之的是DataAccess类，用一个简单工厂模式来实现。</p><p><strong>代码结构图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用简单工厂来改进抽象工厂程序.jpg" alt="用简单工厂来改进抽象工厂程序"></center><p><strong>实体类</strong>：</p><p><strong>User类</strong>:</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Department类</strong>:</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽象产品</strong>：</p><p><strong>IUser类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>IDepartment类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品</strong>：</p><p><strong>SqlserverUser类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AccessUser类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SqlserverDepartment类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AccessDepartment类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工厂类</strong>：</p><p><strong>DataAccess类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//private static readonly string db = "Access";</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IUser result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>db<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Access"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IDepartment result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>db<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"Sqlserver"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlserverDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Access"</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/抽象工厂模式/用简单工厂来改进抽象工厂测试结果.png" alt="用简单工厂来改进抽象工厂测试结果"></center><p><strong>注</strong>：</p><ul><li>客户端完全不知道后端使用的数据库接口</li><li>但当增加数据库接口时，就需要在DataAccess类中修改每个方法</li></ul><h2 id="绝佳改进方案"><a href="#绝佳改进方案" class="headerlink" title="绝佳改进方案"></a>绝佳改进方案</h2><p>​        使用简单工厂改进的抽象工厂中，引入switch导致程序耦合，添加后修改程序时需要修改一连串的类，通过某种方式避免这种耦合就可以达到绝佳的改进效果。下面引入：<strong>反射 + 配置文件 + 抽象工厂</strong></p><p><strong>实体类</strong>：（User 、 Department）</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试基类</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抽象产品</strong>：（IUser、IDepartment）</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> User类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Department类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品</strong>：（SqlserverUser、AccessUser、SqlserverDepartment、AccessDepartment）</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverUser类在SQL Server中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessUser类在Access中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverDepartment类在SQL Server中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessDepartment类在Access中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工厂类</strong>：（DataAccess）</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 使用反射创建操作数据的接口</span>    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//程序集名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> AssemblyName <span class="token operator">=</span> <span class="token string">"抽象工厂模式"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置文件中链接的数据名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"DB"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"User"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用发射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IUser<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"Department"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用反射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IDepartment<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>app.config</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>appSettings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">add</span> key<span class="token operator">=</span><span class="token string">"DB"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"Sqlserver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appSettings<span class="token operator">></span><span class="token operator">&lt;</span>startup<span class="token operator">></span><span class="token operator">&lt;</span>supportedRuntime version<span class="token operator">=</span><span class="token string">"v4.0"</span> sku<span class="token operator">=</span><span class="token string">".NETFramework,Version=v4.6.1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IUser对象，对User执行相关操作</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IDepartment对象，对Department执行相关操作</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>using System.Reflection;                        //使用反射必须要引入的命名空间</li><li>using System.Configuration;                     //拿到配置文件中的字符变量必须要引入的命名空间</li><li>客户端与后端完全解耦</li><li>其他类与工厂类解耦</li><li>添加商品时，只要按模板添加商品类，修改工厂类中的方法即可</li><li>切换数据库接口时，只需修改app.config配置文件即可</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>反射 + 配置文件 + 抽象工厂</strong>完整代码：</p><p><strong>Program.cs</strong>:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/******************************************************** * 设计模式：抽象工厂模式，（反射+配置文件+抽象工厂） *  * 反射： *       return (IUser)Assembly.Load(AssemblyName).CreateInstance(className); *       AssemblyName：为本程序集名称 *       className：为程序集中要实例化的类的名称（完整路径） *       (IUser)：将创建的对象强制转化为IUser对象 *  * 配置文件信息： *       使用&lt;appStrings>节点来设置链接的数据库名称 *  */</span><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//使用反射必须要引入的命名空间</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//拿到配置文件中的字符变量必须要引入的命名空间</span><span class="token keyword">namespace</span> 抽象工厂模式<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IUser对象，对User执行相关操作</span>            IUser iu <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            iu<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建IDepartment对象，对Department执行相关操作</span>            IDepartment id <span class="token operator">=</span> DataAccess<span class="token punctuation">.</span><span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            id<span class="token punctuation">.</span><span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试基类</span>    <span class="token keyword">class</span> <span class="token class-name">User</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Department</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> _id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> ID        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _id <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> _deptName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> DeptName        <span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _deptName<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _deptName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> User类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverUser类在SQL Server中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessUser类在Access中对User执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessUser</span> <span class="token punctuation">:</span> IUser    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给User表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到User表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Department类的数据操作接口</span>    <span class="token keyword">interface</span> <span class="token class-name">IDepartment</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>        Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> SqlserverDepartment类在SQL Server中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">SqlserverDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Sqlserver中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> AccessDepartment类在Access中对Department执行相关操作</span>    <span class="token keyword">class</span> <span class="token class-name">AccessDepartment</span> <span class="token punctuation">:</span> IDepartment    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中给Department表增加一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Department <span class="token function">GetDepartment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"在Access中根据ID得到Department表一条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 使用反射创建操作数据的接口</span>    <span class="token keyword">class</span> <span class="token class-name">DataAccess</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//程序集名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> AssemblyName <span class="token operator">=</span> <span class="token string">"抽象工厂模式"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置文件中链接的数据名称</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> db <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"DB"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IUser <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"User"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用发射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IUser<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IDepartment <span class="token function">CreateDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> className <span class="token operator">=</span> AssemblyName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> db <span class="token operator">+</span> <span class="token string">"Department"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用反射创建指定类的实例</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>IDepartment<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>App.config</strong>文件：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>appSettings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">add</span> key<span class="token operator">=</span><span class="token string">"DB"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"Sqlserver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appSettings<span class="token operator">></span><span class="token operator">&lt;</span>startup<span class="token operator">></span><span class="token operator">&lt;</span>supportedRuntime version<span class="token operator">=</span><span class="token string">"v4.0"</span> sku<span class="token operator">=</span><span class="token string">".NETFramework,Version=v4.6.1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2020/08/22/gong-han-fang-fa-mo-shi/"/>
      <url>/2020/08/22/gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="定义理解"><a href="#定义理解" class="headerlink" title="定义理解"></a>定义理解</h1><p>​        工厂方法模式（Factory Method Pattern）属于<strong>类的创建型模式</strong>，是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。包含<strong>简单工厂模式</strong>、<strong>多工厂方法模式</strong>、<strong>静态工厂方法模式</strong>三种模式。（<font color="blue">通俗一点：就是定义一个工厂类(接口)专门来生产商品对象。</font>）</p><h1 id="角色与职责"><a href="#角色与职责" class="headerlink" title="角色与职责"></a>角色与职责</h1><p>该模式由三种角色组成：</p><ul><li><p><strong>工厂角色</strong>(Creator)：</p><p>​        简单工厂模式的核心，它负责实现创建所有实例的<strong>内部逻辑</strong>。工厂类的创建产品类的方法<strong>可以被外界直接调用</strong>，创建所需的产品对象。</p></li><li><p><strong>抽象产品角色</strong>(Product)：</p><p>​        简单工厂模式所创建的所有对象的父类，它负责描述所有实例所<strong>共有的公共接口</strong>。</p></li><li><p><strong>具体产品角色</strong>(Concrete Product)：</p><p>​        是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</p></li></ul><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ul><li>将指定的参数送入工厂类中，</li><li>按一定的条件产出一个实例对象，</li><li>并通过多态返回实例化的对象</li></ul><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/工厂方法.png" alt="工厂方法"></center><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a><strong>简单工厂模式</strong></h2><p>​        简单工厂模式的工厂类中<strong>只有一个创建商品的方法</strong>。</p><p><strong>简单工厂模式UML类图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/简单工厂方法模式类图.png" alt="简单工厂方法模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 用于实例化工厂方法模式的基类（其一般为接口）</span>    <span class="token comment" spellcheck="true">/// 1、若为接口，则只能定义商品所具有的行为，且继承于该接口的类必须对其进行实现</span>    <span class="token comment" spellcheck="true">/// 2、若为类，一般将其定义为抽象类，</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类的创建</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token comment" spellcheck="true">// 本实例中使用的基类</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--抽象类形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须声明为抽象方法</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">string</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 实例化商品的工厂</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 工厂类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetFactory</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 工厂类中创建对象的方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="petType">用来创建指定对象的参数&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>返回创建的Pet对象&lt;/returns></span>        <span class="token keyword">public</span> Pet <span class="token function">getPet</span><span class="token punctuation">(</span><span class="token keyword">string</span> petType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Bow"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>petType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Meaw"</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>petType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">SimpleFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.实例化工厂对象</span>            PetFactory petFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryMethod_Demo1<span class="token punctuation">.</span>PetFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.使用工厂对象创建指定的商品实例</span>            Pet pet <span class="token operator">=</span> petFactory<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token string">"Bow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.使用商品实例</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多工厂方法模式"><a href="#多工厂方法模式" class="headerlink" title="多工厂方法模式"></a><strong>多工厂方法模式</strong></h2><p>​        在多个工厂方法模式中，工厂类中每一个商品都有与其相对应的创建实例对象的方法。</p><p><strong>多工厂方法模式UML类图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/多方法工厂模式类图.png" alt="多方法工厂模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 工厂角色</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 创建Pet的工厂类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplePetFactory</span>    <span class="token punctuation">{</span>        Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Pet <span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Pet <span class="token function">CreateCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">MultipleFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、创建工厂类对象</span>            MultiplePetFactory petFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiplePetFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2、使用工厂类对象得到商品对象</span>            Pet pet <span class="token operator">=</span> petFactory<span class="token punctuation">.</span><span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3、对商品对象进行操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a><strong>静态工厂方法模式</strong></h2><p>​        在静态工厂方法模式中，工厂类中每一个商品都有与其相对应的创建实例对象的静态方法</p><p><strong>静态工厂方法模式</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/GOFDesignPattern/工厂方法模式/静态方法工厂模式类图.png" alt="静态方法工厂模式类图"></center><p><strong>抽象产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 基类--接口形式展示</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//商品的行为（方法）   --只有方法体</span>        <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体产品角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 具体商品类对基类的继承与扩展</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对接口中方法的实现</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Bow Bow..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 具体商品类的扩展</span>        <span class="token keyword">private</span> <span class="token keyword">string</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Pet    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Meaw Meaw..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工厂角色</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 工厂角色</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 静态工厂</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticMultiPetFactory</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> Pet pet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Pet <span class="token function">CreateCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp">    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 测试类</span>    <span class="token keyword">class</span> <span class="token class-name">StaticMultiFactoryMethod</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、得到商品对象</span>            Pet pet <span class="token operator">=</span> StaticMultiPetFactory<span class="token punctuation">.</span><span class="token function">CreateDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2、使用商品对象</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">petSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="三种工厂方法模式的比较"><a href="#三种工厂方法模式的比较" class="headerlink" title="三种工厂方法模式的比较"></a>三种工厂方法模式的比较</h2><p><strong>相同点</strong>：</p><ul><li>都存在三种角色：(工厂角色、抽象产品角色(抽象类或接口)、具体产品角色)；</li><li>主要是<strong>依靠继承关系</strong>来实现的。</li></ul><p><strong>不同点</strong>：</p><ul><li>普通工厂模式：<strong>工厂</strong>类需要先<strong>实例化</strong>；工厂类中只有一个生产商品的方法且该方法必须指定的相应的<strong>参数</strong>之后才能进行生产；</li><li>多个工厂方法模式：<strong>工厂</strong>类需要先<strong>实例化</strong>；<strong>每一个实体类</strong>在工厂类中<strong>都有一个</strong>生产其对应<strong>实例的方法</strong>，无需额外的参数进行传递；</li><li>静态工厂方法模式：<strong>工厂</strong>类可以<strong>直接使用</strong>；<strong>每一个实体类</strong>在工厂类中<strong>都有一个</strong>生产其对应<strong>实例的方法</strong>，无需额外的参数进行传递。</li></ul><h2 id="优点与缺点"><a href="#优点与缺点" class="headerlink" title="优点与缺点"></a>优点与缺点</h2><p><strong>简单工厂模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见</li><li>缺点:使用工厂类创建对象时，需要传入一个参数才能进行对象的创建   –&gt;多个工厂方法模式(不用传入参数)</li></ul><p><strong>多工厂方法模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见；不用传入参数类创建</li><li>缺点：工厂负荷变大</li></ul><p><strong>静态工厂方法模式</strong>：</p><ul><li>优点：封装对象的创建过程，使之不可见；不用传入参数类创建；不用实例化工厂对象</li><li>缺点：一经启动工厂类中的静态方法就就占据一定量的内存空间       –（慎用）</li></ul><p><strong>致命缺点</strong>：</p><ul><li><font color="red">创建的商品对象<strong>无法访问</strong>到子类对其的<strong>扩展</strong>（使用了多态）。</font></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>当需要创建一个类，而在编程时不能确定这个类的类型时（需要运行时确定）</li><li>当一个类希望由其子类来指定所创建对象的具体类型时</li><li>当我们想要定位被创建类，并获取相关消息时</li></ul><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><ul><li>日志记录功能（文件日志记录、数据库日志记录、控制台日志记录等）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp巧用移位运算符获取汉字编码值</title>
      <link href="/2020/08/22/csharp-qiao-yong-yi-wei-yun-suan-fu-huo-qu-han-zi-bian-ma-zhi/"/>
      <url>/2020/08/22/csharp-qiao-yong-yi-wei-yun-suan-fu-huo-qu-han-zi-bian-ma-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h2><ul><li><p>移位运算符在程序设计中，是<strong>位操作运算符</strong>的一种</p></li><li><p>移位运算符分为<strong>左移位运算符</strong>“&lt;&lt;”和<strong>右移位运算符</strong>“&gt;&gt;”，形如：<strong>X &lt;&lt; N</strong> 或 <strong>X &gt;&gt; N</strong></p></li><li><p>在C#中<strong>X</strong>可以是：int、uint、long、ulong、byte、sbyte、short、ushort，其中<strong>byte、sbyte、short、ushort</strong>类型的值在进行移位操作后的类型将<strong>自动转换成int类型</strong></p></li><li><p>其他类型数据的移位运算其本质还是对<strong>二进制的移位运算</strong></p></li><li><p><span style="color:red">二进制每次向左移1位就相当于乘以2，每次向右移1位就相当于除以2</span></p></li><li><p>举例如下：</p><blockquote><p>问题：</p><ul><li>3(O) &lt;&lt; 2</li></ul><p>计算过程：</p><ol><li>3(O)转换为二进制为:<strong>0011</strong></li><li>二进制数值各个位整体左移两位（<span style="color:red">左端溢出丢弃，右端补”0”</span>）后得到：<strong>1100</strong></li><li>再将移位后的二进制数值转换为十进制数值为：12(O)</li><li>也即：<span style="color:red">3 &lt;&lt; 2 = 12</span></li></ol></blockquote></li></ul><h2 id="汉字编码"><a href="#汉字编码" class="headerlink" title="汉字编码"></a>汉字编码</h2><p>​        汉字编码(Chinese character encoding)是为汉字设计的一种便于输入计算机的代码。</p><h3 id="编码分类"><a href="#编码分类" class="headerlink" title="编码分类"></a>编码分类</h3><p>​        计算机中汉字的表示也是用二进制，根据<strong>应用目的</strong>的不同，汉字编码分为<strong>外码</strong>、<strong>交换码</strong>、<strong>机内码</strong>和<strong>字形码</strong>。</p><h4 id="外码-输入码"><a href="#外码-输入码" class="headerlink" title="外码(输入码)"></a>外码(输入码)</h4><p>​        外码也叫输入码，是用来将汉字输入到计算机中的一组键盘符号。常用的输入码有拼音码、五笔字型码、区位码、电报码等</p><p><strong>特点</strong>：</p><ul><li>编码规则简单</li><li>易学好记</li><li>操作方便</li><li>重码率低</li><li>输入速度快</li></ul><h4 id="交换码-国际码"><a href="#交换码-国际码" class="headerlink" title="交换码(国际码)"></a>交换码(国际码)</h4><p>​        计算机内部处理的信息都是<strong>二进制代码</strong>表示的，汉字也不例外。而二进制代码使用起来很不方便，于是需要采用<strong>信息交换码</strong>。GB2312即为国际码。</p><ul><li><strong>GB2312编码</strong>：1981年5月1日发布的简体中文汉字编码国家标准。GB2312对汉字采用双字节编码，收录7445个图形字符，其中包括6763个汉字。</li><li><strong>BIG5编码</strong>：台湾地区繁体中文标准字符集，采用双字节编码，共收录13053个中文字，1984年实施。</li><li><strong>GBK编码</strong>：1995年12月发布的汉字编码国家标准，是对GB2312编码的扩充，对汉字采用双字节编码。GBK字符集共收录21003个汉字，包含国家标准GB13000-1中的全部中日韩汉字，和BIG5编码中的所有汉字。</li><li><strong>GB18030编码</strong>：2000年3月17日发布的汉字编码国家标准，是对GBK编码的扩充，覆盖中文、日文、朝鲜语和中国少数民族文字，其中收录27484个汉字。GB18030字符集采用单字节、双字节和四字节三种方式对字符编码。兼容GBK和GB2312字符集。</li><li><strong>Unicode编码</strong>：国际标准字符集，它将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换。</li></ul><h4 id="机内码"><a href="#机内码" class="headerlink" title="机内码"></a>机内码</h4><p>​        根据国际码的规定，每个汉字都有确定的<strong>二进制代码</strong>，在微机内部汉字代码都用机内码，在键盘上记录汉字代码也使用机内码。</p><h4 id="字形码"><a href="#字形码" class="headerlink" title="字形码"></a>字形码</h4><p>​        字形码是汉字的<strong>输出码</strong>，输出汉字时都采用<strong>图形方式</strong>，无论汉字的笔画多少，每个汉字都可以卸载同样大小的<strong>方块</strong>中。通常用16×16点阵来显示汉字。</p><h4 id="地址码"><a href="#地址码" class="headerlink" title="地址码"></a>地址码</h4><p>​        汉字地址码是指汉字库中存<strong>储汉字字形信息的逻辑地址码</strong>。它与汉字机内码有着简单的对应关系，以简单内码到地址码的转换。</p><h3 id="汉字编码之间的关系"><a href="#汉字编码之间的关系" class="headerlink" title="汉字编码之间的关系"></a>汉字编码之间的关系</h3><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/汉字编码之间的关系.png" alt="汉字编码之间的关系"></center><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/界面.png" alt="界面"></center><p><strong>代码设计</strong>:</p><pre class="line-numbers language-c#"><code class="language-c#">using System;using System.Text;using System.Windows.Forms;namespace GetCode{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }        private void btn_Get_Click(object sender, EventArgs e)        {            try            {                //获得一个汉字字符                char ch = txt_ch.Text[0];                //使用gb2312编码方式获得字节序列                byte[] gb2312_bt = Encoding.GetEncoding("gb2312").GetBytes(new Char[] { ch });                //将字节序列的第一个字节向左移8位                int n = (int)gb2312_bt[0] << 8;                //第一个字节移8位后与第二个字节相加得到汉字编码                n += (int)gb2312_bt[1];                //显示汉字编码(十六进制)                txt_Num.Text = Convert.ToString(n, 16);            }            catch (Exception)            {                //异常提示信息                MessageBox.Show("请输入汉字字符！", "出现错误！");            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp巧用移位运算符获取汉字编码值/结果.png" alt="结果"></center><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><ul><li>char ch = txt_ch.Text[0];<font color="blue">//ch变量存储“位”的Unicode编码</font>&gt;</li><li>byte[] gb2312_bt = Encoding.GetEncoding(“gb2312”).GetBytes(new Char[] { ch });<font color="blue">//gb2312_bt变量数组中存储由ch编码得到的GB2312字节</font></li><li>int n = (int)gb2312_bt[0] &lt;&lt; 8;<font color="blue"> //将字节左移八位(一个字节)</font></li><li>n += (int)gb2312_bt[1];<font color="blue">//两个数值相加得到“位”的GB2312编码(十进制)</font></li><li>txt_Num.Text = Convert.ToString(n, 16);<font color="blue">//编码转十六进制并显示</font></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><ul><li><a href="https://baike.baidu.com/item/汉字编码/7123465?fr=aladdin" target="_blank" rel="noopener">汉字编码(百度百科)</a></li><li><a href="https://www.qqxiuzi.cn/bianma/zifuji.php" target="_blank" rel="noopener">千千秀字(汉字字符集编码查询)</a></li></ul><p><strong>有关字体编码/查询/加解密网站推荐</strong>：</p><p><a href="https://www.qqxiuzi.cn/daohang.htm" target="_blank" rel="noopener">千千秀字</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 编码 </tag>
            
            <tag> 程序实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp多线程猜数字游戏</title>
      <link href="/2020/08/22/csharp-duo-xian-cheng-cai-shu-zi-you-xi/"/>
      <url>/2020/08/22/csharp-duo-xian-cheng-cai-shu-zi-you-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h2><p><strong>程序</strong>：</p><ul><li>程序是<strong>指令</strong>和<strong>数据</strong>的<strong>有序集合</strong>。</li><li>程序是静态的。</li></ul><p><strong>进程</strong>：</p><ul><li>进程是一段程序的执行过程。</li><li>进程是动态的，具有生命周期。</li><li>进程是一个活动实体。</li><li>进程有三种基本状态（就绪态、运行态、阻塞态）。</li><li>进程是资源分配的基本单位。</li></ul><p><strong>线程</strong>：</p><ul><li>线程作为独立运行和独立调度的基本单位。</li><li>一个进程中可以包含若干个线程。</li></ul><p><strong>多线程</strong>：</p><p>&emsp;&emsp;在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p><blockquote><p>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。<a href="https://www.cnblogs.com/fuchongjundream/p/3829508.html" target="_blank" rel="noopener">“外引”</a></p></blockquote><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/设计界面.png" alt="设计界面"></center><p><strong>代码设计</strong>:</p><pre class="line-numbers language-C#"><code class="language-C#">using System;using System.Drawing;using System.Windows.Forms;namespace NumGame{    public partial class Frm_Main : Form    {        public Frm_Main()        {            InitializeComponent();        }        #region 声明全局变量        /// <summary>        /// 定义一个计时器线程        /// </summary>        System.Threading.Thread G_th;        /// <summary>        /// 定义一个随机数对象        /// </summary>        Random G_random = new Random();        /// <summary>        /// 定义一个int型全局变量，用于存放产生的随机变量        /// </summary>        int G_int_num;        #endregion        #region 开始按钮的Click事件        /// <summary>        /// 开始按钮的Click事件        /// </summary>        /// <param name="sender"></param>        /// <param name="e"></param>        private void btn_begin_Click(object sender, EventArgs e)        {            RemoveControl();                                        //调用自定义的RemoveControl()方法清空自定义的按钮            int p_int_x = 10;                                       //X坐标初始值为10            int p_int_y = 60;                                       //Y坐标初始值为60            //向窗体添加按钮            for (int i = 0; i < 100; i++)                           //添加100个按钮            {                Button bt = new Button();                           //创建button按钮                bt.Text = (i + 1).ToString();                       //设置button按钮的文本值                bt.Name = (i + 1).ToString();                       //设置button按钮的Name属性                bt.Width = 35;                                      //设置button按钮的宽                bt.Height = 35;                                     //设置button按钮的高                bt.Location = new Point(p_int_x, p_int_y);          //设置button按钮的位置                bt.Click += new EventHandler(bt_Click);             //定义button按钮的Click事件                p_int_x += 36;                                      //设置下一个按钮的位置                if ((i + 1) % 10 == 0)                            //设定每行有10个按钮                {                    p_int_x = 10;                                   //换行后重新设置X坐标  --X坐标不变                    p_int_y += 36;                                  //换行后重新设置Y坐标  --Y坐标将变化为原来的+距离                }                Controls.Add(bt);                                   //使用Controls.Add()方法将button按钮放入窗体控件集合中            }            //创建线程            //跨线程调用控件            G_th = new System.Threading.Thread(                 //新建一条线程                delegate ()                              //使用匿名方法创建一个委托                {                    int P_int_count = 0;                            //初始化计数器                    while (true)                                //开始无限循环                    {                        P_int_count = ++P_int_count > 100000000 ? 0 : P_int_count;      //计数器累加                        this.Invoke(                            //将代码交给主线程执行                            (MethodInvoker)delegate         //使用匿名方法                            {                                lb_time.Text = P_int_count.ToString();          //窗体中显示计数                            });                        System.Threading.Thread.Sleep(1000);                    //线程睡眠1秒                    }                });            G_th.IsBackground = true;                                   //设置线程为后台线程            G_th.Start();                                           //开始执行线程            //生成一个随机数            G_int_num = G_random.Next(1, 100);                          //生成一个1-100之间的随机数            btn_begin.Enabled = false;                              //停用开始按钮        }        #endregion        #region 注册生成按钮的Click事件的方法        //注册按钮的Click事件的方法        void bt_Click(object sender, EventArgs e)        {            Control P_control = sender as Control;                          //将sender转换为control类型对象            if (int.Parse(P_control.Name) > G_int_num)                  //强制转化并判断猜测数值与随机产生的数值之间的差距            {                P_control.BackColor = Color.Red;                        //设置按钮背景为红色                P_control.Enabled = false;                              //设置按钮停用                P_control.Text = "大";                                   //更改按钮文本--猜测数值偏大                return;            }            if (int.Parse(P_control.Name) < G_int_num)            {                P_control.BackColor = Color.Red;                        //设置按钮背景为红色                P_control.Enabled = false;                              //设置按钮停用                P_control.Text = "小";                                       //更改按钮文本--猜测数偏小                return;            }            if (int.Parse(P_control.Name) == G_int_num)                 //当猜测数值与随机产生的数值相等时            {                G_th.Abort();                                                   //终止计数线程                //显示游戏信息                MessageBox.Show(string.Format("恭喜你猜对了！共猜了{0}次 用时{1}秒", GetCount(), lb_time.Text), "恭喜！");                btn_begin.Enabled = true;                           //启用开始按钮                return;            }        }        #endregion        #region 计数方法        /// <summary>        /// 用于查找窗体中Enable属性为False控件的数量    --遍历窗体中的控件        /// 用于计算玩家有多少次没有猜中        /// </summary>        /// <returns>返回没有猜中数量</returns>        string GetCount()        {            int P_int_temp = 0;                                             //初始化计数器            foreach (Control c in Controls)                                     //遍历控件集合            {                if (!c.Enabled) P_int_temp++;                               //计数器累加            }            return P_int_temp.ToString();                               //返回计数器信息        }        #endregion        #region 清除控件方法        /// <summary>        /// 用于清空窗体中动态生成的按钮        /// </summary>        void RemoveControl()                                            //自定义的清除方法        {            for (int i = 0; i < 100; i++)                               //开始遍历100个按钮            {                if (Controls.ContainsKey((i + 1).ToString()))             //窗体中是否有此按钮                {                    for (int j = 0; j < Controls.Count; j++)                //遍历窗体控件集合                    {                        if (Controls[j].Name == (i + 1).ToString())         //是否查找到按钮                        {                            Controls.RemoveAt(j);                           //删除指定按钮                            break;                        }                    }                }            }        }        #endregion        #region 窗体的FormClosing事件        //窗体的FormClosing事件        private void Frm_Main_FormClosing(object sender, FormClosingEventArgs e)        {            if (G_th != null)            {                G_th.Abort();            }            Environment.Exit(0);                                //强行关闭窗体        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/测试结果.png" alt="测试结果"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>程序流程分析</strong>:</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp多线程猜数字游戏/NumGame.png" alt="NumGame"></center><p><strong>参考资料</strong>：</p><p><a href="https://www.cnblogs.com/fuchongjundream/p/3829508.html" target="_blank" rel="noopener">进程、线程、多线程相关总结</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 程序实现 </tag>
            
            <tag> 小游戏 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#递归算法计算斐波那契数列</title>
      <link href="/2020/08/22/csharp-di-gui-suan-fa-ji-suan-fei-bo-na-qi-shu-lie/"/>
      <url>/2020/08/22/csharp-di-gui-suan-fa-ji-suan-fei-bo-na-qi-shu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="兔子数列"><a href="#兔子数列" class="headerlink" title="兔子数列"></a>兔子数列</h2><p>斐波那契(Fibonacci)在《计算之术》中提出一个问题：</p><p>&emsp;&emsp;在第一个月有一对刚出生的小兔子，在第二个月小兔子变成大兔子并开始怀孕，第三个月大兔子会生下一对小兔子，并且以后每个月都会生下一对小兔子。 如果每对兔子都经历这样的出生、成熟、生育的过程，并且兔子永远不死，那么兔子的总数是如何变化的？</p><p><strong>关键点</strong>：</p><ul><li>兔子成对出生</li><li>兔子的成长周期和生育周期都为1个月</li><li>所有的兔子都不会死亡，并且可以一直保持生育</li></ul><p><strong>问题解析</strong>：</p><p>第一个月只有一对兔宝宝，1对兔子</p><p>第二个月兔宝宝变成大兔子，1对兔子</p><p>第三个月大兔子生了一对兔宝宝，2对兔子</p><p>第四个月大兔子继续生一对兔宝宝，小兔子变成大兔子，3对兔子</p><p>……</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/数列列表.jpg" alt="数列列表"></center><p><strong>发现规律</strong>：</p><ul><li>前一个月的大兔子对数就是下一个月的小兔子对数</li><li>前一个月的大兔子和小兔子对数的和就是下个月大兔子的对数</li></ul><p>$$<br>f(n)=<br>\begin{cases}<br>1 &amp; n=1\<br>1 &amp; n=2\<br>f(n-1) + f(n-2) &amp;n&gt;2<br>\end{cases}<br>$$</p><p>此为兔子数列（斐波那契数列）</p><p><font color="red"><strong>使用程序怎样来实现斐波那契数列呐？</strong></font></p><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p><strong>编程环境</strong>：</p><ul><li>VS2017</li><li>.Net Framework 4.5</li></ul><p><strong>运行环境</strong>：</p><ul><li>Win10</li></ul><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><p><strong>界面设计</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/界面设计.png" alt="界面设计"></center><p><strong>代码设计</strong>：</p><pre class="line-numbers language-C#"><code class="language-C#">using System;using System.Windows.Forms;namespace Arithmetic{    public partial class Frm_Main : Form    {        public Frm_Main()        {            InitializeComponent();        }        #region 计算按钮的Click事件        //计算按钮的Click事件        private void btn_Get_Click(object sender, EventArgs e)        {            int P_int_temp;                                         //定义一个用于存储的整型变量            if (int.TryParse(txt_value.Text, out P_int_temp))       //为变量赋值            {                lb_result.Text = "计算结果为：" + Get(P_int_temp).ToString();     //输出计算结果            }            else                                    //当数据转化失败时            {                MessageBox.Show("请输入正确的数值！", "提示！");                      //提示输入正确数值            }        }        #endregion        #region 斐波那契数列的计算        /// <summary>        /// 递归算法                //斐波那契数列的计算问题        /// </summary>        /// <param name="i">参与计算的数值</param>        /// <returns>计算结果</returns>        int Get(int i)        {            if (i <= 0)                            //判断数值是否小于0                return 0;                        //返回数值0            else if (i >= 0 && i <= 2)            //判断数值是否大于等于0并且小于等于2                return 1;                        //返回数值1            else                                //如果不满足上述条件执行下面语句                return Get(i - 1) + Get(i - 2);    //返回指定位数前两位数的和        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：</p><ul><li>程序以int类型存储结果，当计算的数值超出int时，程序将会报错。</li></ul><h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/ProgrammingLanguages/CSharp/CSharp递归算法计算斐波那契数列/实现结果.png" alt="实现结果"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://baijiahao.baidu.com/s?id=1606651492697783298&wfr=spi" target="_blank" rel="noopener">什么叫斐波那契数列</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 算法 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> This host is not allowed to connect to MySQL server</title>
      <link href="/2020/08/22/this-host-is-not-allowed-to-connect-to-mysql-server/"/>
      <url>/2020/08/22/this-host-is-not-allowed-to-connect-to-mysql-server/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>​        在使用<strong>Bruter</strong>对靶机中的MySQL数据库的账号和密码进行爆破时，Message框中出现如下图所示的提示信息。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/错误提示信息.png" alt="错误提示信息"></center><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>​    PhpStudy 2016集成 环境安装：</p><ul><li>MySQL版本：5.5.53</li><li>服务端口：3306</li></ul><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ol><li><p>首先排除 IP地址、端口错误或MySQL服务未开启等问题，因为对于尝试登录登录数次不成功将显示如下的错误提示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/登录尝试超时提示信息.png" alt="登录尝试超时提示信息"></center></li><li><p><font color="red">This host is not allowed to connect to MySQL server</font>可能是MySQL数据库<strong>拒绝远程连接</strong>。</p><p>在另一台机器上远程连接改MySQL数据库，也显示类似的错误提示信息：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/远程连接mysql数据库错误提示.png" alt="远程连接mysql数据库错误提示"></center><ul><li><font color="blue">默认情况下，MySQL只允许本地连接，若要进行远程连接就需要先对其进行设置。</font></li></ul></li></ol><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><p>百度一下：“远程访问 MySQL数据库”</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/百度一下.png" alt="百度一下"></center></li><li><p><a href="https://www.cnblogs.com/wq-9/articles/11062770.html" target="_blank" rel="noopener">MySQL远程连接数据库</a></p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/mysql远程连接数据库的方法.png" alt="mysql远程连接数据库的方法"></center></li><li><p>修改mysql数据库中user表中root对应得host字段的值为%，来允许远程用户连接MySQL。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/修改表信息.png" alt="修改表信息"></center><pre class="line-numbers language-mysql"><code class="language-mysql">use mysql;select host,user from user where user='root';update user set host='%' where user='root';select host,user from user where user='root';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><font color="blue">重启MySQL服务</font>后，再进行远程连接测试。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/重启MySQL后的连接测试.png" alt="重启MySQL后的连接测试"></center></li><li><p>Bruter爆破。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/Bruter爆破成功.png" alt="Bruter爆破成功"></center></li></ol><h1 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h1><p>​        Bruter是使用类似于<code>mysql -h 192.168.19.136 -P 3306 -u root -p 123456</code>这样的命令不断地尝试来爆破MySQL数据库的密码的。</p><ul><li><font color="red">This host is not allowed to connect to MySQL server</font>：表示MySQL拒绝主机连接，因为MySQL默认是不允许远程连接的。</li><li><font color="red">Login errors MAXRETRY times consecutively</font>：表示MySQL的连接得不到回应，自动停止连接。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>[MySQL远程连接数据库](</li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 爆破 </tag>
            
            <tag> Bruter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VigenereCipher</title>
      <link href="/2020/08/22/vigenerecipher/"/>
      <url>/2020/08/22/vigenerecipher/</url>
      
        <content type="html"><![CDATA[<h1 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h1><p><strong>介绍</strong>：</p><p>​        <strong>维吉尼亚密码</strong>（又译 <strong>维热纳尔密码</strong>）是使用一系列<strong>凯撒密码</strong>组成密码字母表的加密算法，属于<strong>多表密码</strong>的一种简单形式。</p><p>​        维吉尼亚密码曾多次被发明。该方法最早记录在吉奥万·巴蒂斯塔·贝拉索（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》中。然而，后来在19世纪时被误传为是法国外交官布莱斯·德·维吉尼亚所创造，因此现在被称为“维吉尼亚密码”。</p><p>​        维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。</p><p><strong>历史</strong>：</p><p>​        多表密码最早在1467年左右由莱昂·巴蒂斯塔·阿尔伯蒂提出，他使用了一个金属<strong>密码盘</strong>来切换密码表，只是这个系统只能做些有限的转换。后来1508年时，约翰尼斯·特里特米乌斯《<strong>隐写术</strong>》（Steganographia）中发明的表格法（tabula recta）成为了维吉尼亚密码的关键部分。然而当时此方法只能对密码表做一些简单的、可预测的切换。这一加密技术也称为<strong>特里特米乌斯密码</strong>。  </p><p>​        这一方法真正出现是在吉奥万·巴蒂斯塔·贝拉索于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的算术》中。他以特里特米乌斯的表格法为基础，同时引入了密钥的概念。</p><p>​        布莱斯·德·维吉尼亚于1586年亨利三世时期发明了更为简单却又更有效的自动密钥密码（autokey cipher）。之后，19世纪时贝拉索的方法被误认为是由维吉尼亚首先发明的。大卫·卡恩在《破译者（The Codebreakers）》中对此表示遗憾，他写道“历史忽略了这一重要贡献，将其归功于维吉尼亚，虽然他对此并不知道”。</p><p>​        由于破译的难度很高，维吉尼亚密码也因此获得了很高的声望。知名作家、数学家查尔斯·路特维奇·道奇森（笔名路易斯·卡罗）在其1868年所编、收于一儿童杂志的《字母表密码（The Alphabet Cipher）》中称其是不可破译的。1917年，《科学美国人》将维吉尼亚密码称为“无法被转化的”。然而，维吉尼亚密码却配不上这样的称号。查尔斯·巴贝奇完成了破译的工作，但他没有将此发表。之后，弗里德里希·卡西斯基（Friedrich Kasiski）于19世纪完全破解并发表了他的方法。甚至在此之前，一些资深密码分析家在16世纪就能偶尔将其破解。</p><p>​        维吉尼亚密码足够地易于使用使其能够作为战地密码。例如，美国南北战争期间南军就使用黄铜密码盘生成维吉尼亚密码。北军则经常能够破译南军的密码。战争自始至终，南军主要使用三个密钥，分别为“Manchester Bluff（曼彻斯特的虚张声势）”、“Complete Victory（完全的胜利）”以及战争后期的“Come Retribution（报应来临）”。</p><p>​        吉尔伯特·维尔南（Gilbert Vernam）曾试图对已被破译的密码进行修补（于1918年创造了维尔南-维尼吉亚密码），然而这终究无济于事。不过维尔南的发明最终促成了一次性密码本的诞生，这是一种理论上不可破译的密码。</p><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>​        维吉尼亚密码可以说是凯撒密码的升级版，在凯撒密码中，字母表中的每一字母会做一定的偏移，而维吉尼亚密码可以看作是由一些偏移量不同的凯撒密码组成。</p><p>​        为了生成密码，需要使用<strong>表格法</strong>。这一表格（如图1所示）包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。</p><p><strong>举个栗子</strong>：</p><p>使用的维吉尼亚密码表如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereCipherTable.png" alt="VigenereCipherTable"></center><p><strong>加密</strong>：</p><ul><li><p>假设明文为：</p><p><font color="blue">ATTACKATDAWN</font></p></li><li><p>LEMON为选定关键词，则密钥为：</p><p><font color="blue">LEMONLEMONLE</font></p></li><li><p>将密钥作为<strong>行标识</strong>，明文作为<strong>列标识</strong>，对明文中的字母依次替换为行列相交处的字母，则得到密文：</p><p><font color="blue">LXFOPVEFRNHR</font></p></li></ul><p>明文字符串首字母的加密过程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereEncrypt.png" alt="VigenereEncrypt"></center><p><strong>解密</strong>：</p><ul><li><p>假设密文为：</p><p><font color="blue">LXFOPVEFRNHR</font></p></li><li><p>LEMON为选定关键词，则密钥为：</p><p><font color="blue">LEMONLEMONLE</font></p></li><li><p>将密钥作为<strong>行标识</strong>，在该行内查找与其密文一样的字母，该字母对应的列值即为明文，则得到明文：</p><p><font color="blue">ATTACKATDAWN</font></p></li></ul><p>密文字符串首字母的解密过程如下图所示：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereDecrypt.png" alt="VigenereDecrypt"></center><p><strong>数学语言描述</strong>：</p><ol><li>首先将字母用数字代替，即：A=0，B=1，C=2，…，Z=25。</li><li>明文空间记为：M</li><li>密文空间记为：C</li><li>密钥空间记为：K<del>m</del></li><li>将偏移量记为：k<del>n</del></li><li>加密操作记为：E<del>(m)</del></li><li>解密操作记为：D<del>(c)</del></li></ol><p>则有：</p><p><strong>加密变换</strong>：<br>$$<br>E(m_1,m_2,…,m_n) = (m_1+k_1 \ mod \ 26,m_2+k_2 \ mod \ 26,..,m_n+k_n \ mod \ 26),(m_i∈M，k_i∈K,n∈N)<br>$$<br><strong>解密变换</strong>：<br>$$<br>E(m_1,m_2,…,m_n) = (m_1-k_1 \ mod \ 26,m_2-k_2 \ mod \ 26,..,m_n-k_n \ mod \ 26),(m_i∈M，k_i∈K,n∈N)<br>$$</p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>程序流程图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/VigenereCipherFlowchart.png" alt="VigenereCipherFlowchart"></center><p>注：</p><ul><li>第一次输入一个int型数据op，若<code>op==1</code>则执行加密操作，若<code>op==0</code>则执行解密操作，否则结束程序。</li><li>第二次输入一个字符串，进行加密或解密操作。</li><li>操作结果后显示加密或解密的结果。</li></ul><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p><strong>Vigenere类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">namespace</span> Cryptology_Vigenere<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Vigenere</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 定义全局变量</span>        <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> codeMatrix<span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Vigenere</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化对象时也初始化密码矩阵</span>            <span class="token function">Vigenere_InitCodeMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 展示密码表</span>            <span class="token function">DisplayCipherTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 初始化Vigenere密码矩阵</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Vigenere_InitCodeMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            codeMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩阵</span>            <span class="token keyword">char</span> temp<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 展示维吉尼亚密码表</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DisplayCipherTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>codeMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> Vigenere加密</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Vigenere加密</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="plaintext">明文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> plaintext<span class="token punctuation">,</span> <span class="token keyword">string</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k:密钥计数器</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> plaintext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min_mod <span class="token operator">=</span> str<span class="token punctuation">.</span>Length <span class="token operator">></span> key<span class="token punctuation">.</span>Length <span class="token operator">?</span> key<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            StringBuilder strBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    y <span class="token operator">=</span> key<span class="token punctuation">[</span>k<span class="token operator">++</span> <span class="token operator">%</span> min_mod<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>codeMatrix<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> strBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>        <span class="token preprocessor property">#<span class="token directive keyword">region</span> Vigenere解密</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Vigenere解密</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="ciphertext">密文&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="key">密钥&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>明文&lt;/returns></span>        <span class="token keyword">internal</span> <span class="token keyword">string</span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token keyword">string</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">string</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k:密钥计数器</span>            <span class="token keyword">string</span> str <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min_mod <span class="token operator">=</span> str<span class="token punctuation">.</span>Length <span class="token operator">></span> key<span class="token punctuation">.</span>Length <span class="token operator">?</span> key<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            StringBuilder strBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    y <span class="token operator">=</span> key<span class="token punctuation">[</span>k<span class="token operator">++</span> <span class="token operator">%</span> min_mod<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否发生回环</span>                    <span class="token punctuation">{</span>                        x <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">-</span> y<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        x <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">-</span> y<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    strBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> strBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li>先构造一张密码表，并显示加(解)密时使用的表</li><li>加密时<strong>查表</strong>，解密时也<strong>查表</strong></li></ul><p><strong>Program测试类</strong>：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> Cryptology_Vigenere<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Vigenere"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> op<span class="token punctuation">;</span>            <span class="token keyword">string</span> plaintext<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ciphytext<span class="token punctuation">,</span>str<span class="token punctuation">;</span>            Vigenere vig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vigenere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入您想要进行的操作：(1:加密,0:解密) ->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">out</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入明文："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    plaintext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密钥："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ciphytext <span class="token operator">=</span> vig<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ciphytext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ciphytext <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"请输入密钥："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    plaintext <span class="token operator">=</span> vig<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>ciphytext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输入错误程序停止!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输入错误程序停止!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果显示"><a href="#结果显示" class="headerlink" title="结果显示"></a>结果显示</h1><p><strong>加密结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/EnCrypt.png" alt="EnCrypt"></center><p><strong>解密结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/VigenereCipher/DeCrypt.png" alt="DeCrypt"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考链接：</p><p><a href="http://www.baike.com/wiki/维吉尼亚密码" target="_blank" rel="noopener">维吉尼亚密码</a></p><p>[简单的加密算法——维吉尼亚密码](</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vigenere </tag>
            
            <tag> 维吉尼亚密码 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 古典密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CeasarCipher</title>
      <link href="/2020/08/22/ceasarcipher/"/>
      <url>/2020/08/22/ceasarcipher/</url>
      
        <content type="html"><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><p>​        根据罗马早期纪传体作者<strong>盖乌斯·苏维托尼乌斯</strong>的记载，<strong>凯撒大帝</strong>曾用一种移位的方式对军事信息进行加密，后人称这种加密方式为凯撒加密。<strong>凯撒密码</strong>是一种<strong>替换加密</strong>的方案，<strong>明文</strong>中所有字母都在<strong>字母表</strong>上向后(或向前)按照一个固定数目进行偏移后被替换成<strong>密文</strong>。</p><h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>​        <strong>凯撒加密</strong>：</p><p>​        将<strong>26个字母</strong>按顺序进行排列并形成环，将每一位英文字母用其前面(或后面)的第k位字母来表示，替换之后形成新的字符串即为密文。</p><p>​        <strong>举个栗子</strong>：</p><p>​        当明文为：T，偏移量为：3时，使用CeasarCipher如下图所示。</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/CeasarCipher.png" alt="CeasarCipher"></center><p>​        以单表替换的角度来解释即为：</p><p>​        明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ</p><p>​        密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC</p><p>​        明文字母表与密文字母表存在上下的一一对应。当明文为T时，对应密文字母表中的W；解密时也按照一一对应的关系找到每个密文对应的明文即可。</p><p>​        <strong>数学语言描述</strong>：</p><ol><li>首先将字母用数字代替，即：A=0，B=1，C=2，…，Z=25。</li><li>明文空间记为：M</li><li>密文空间记为：C</li><li>密钥空间记为：K<del>m</del></li><li>将偏移量记为：k</li><li>加密操作记为：E<del>(m)</del></li><li>解密操作记为：D<del>(c)</del></li></ol><p>则有：</p><p><strong>加密变换</strong>：<br>$$<br>E_(m_) = (m + k) \ mod \ 26 \ \   ,(m∈M，k∈K)<br>$$<br><strong>解密变换</strong>：<br>$$<br>D_(c_) = (c - k) \ mod \ 26  ,\ \ \  (c∈C，k∈K)<br>$$<br><font color="red">其中：明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合</font></p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p><strong>程序流程图</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/CeasarCipherFlowchart.png" alt="CeasarCipherFlowchart"></center><p>注：</p><ul><li><p>第一次输入一个int型数据op，若<code>op==1</code>则执行加密操作，若<code>op==0</code>则执行解密操作，否则结束程序。</p></li><li><p>第二次输入一个字符串，进行加密或解密操作。</p></li><li><p>操作结果后显示加密或解密的结果。</p></li></ul><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p><strong>Ceasar类</strong>：</p><pre class="line-numbers language-C#"><code class="language-C#">namespace DemoCeasar{    public class Ceasar    {        #region 加密操作        /// <summary>        /// Ceasar加密操作        /// </summary>        /// <param name="plaintext">明文)</param>        /// <param name="key">密钥(1-25)</param>        /// <returns>密文</returns>        internal string EnCrypt(string plaintext, int key)        {            string ciphertext = null;            string str;            str = plaintext.ToUpper();            foreach(char ch in str)            {                if(ch >= 'A' && ch <= 'Z')                {                    ciphertext += (char)('A' + (ch - 'A' + key + 26) % 26);                }                else                {                    ciphertext += ch;                }            }            return ciphertext;        }        /// <summary>        /// Avocat加密（密钥为10）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string AvocatEnCrypt(string plaintext)        {            return EnCrypt(plaintext, 10);        }        /// <summary>        /// ROT13加密（密钥为13）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string ROT13EnCrypt(string plaintext)        {            return EnCrypt(plaintext, 13);        }        /// <summary>        /// Cassis加密（密钥为-5）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string CassisEnCrypt(string plaintext)        {            return EnCrypt(plaintext, -5);        }        /// <summary>        /// Cassette加密（密钥为-6）        /// </summary>        /// <param name="plaintext">明文</param>        /// <returns>密文</returns>        internal string CassetteEnCrypt(string plaintext)        {            return EnCrypt(plaintext, -6);        }        #endregion        #region 解密操作        /// <summary>        /// Ceasar解密操作        /// </summary>        /// <param name="ciphertext">密文</param>        /// <param name="key">密钥(1-25)</param>        /// <returns>明文</returns>        internal string DeCrypt(string ciphertext, int key)        {            string plaintext = null;            string str;            str = ciphertext.ToUpper();            foreach (char ch in str)            {                if(ch >= 'A' && ch <= 'Z')                {                    plaintext += (char)('A' + (ch - 'A' - key + 26) % 26);                }                else                {                    plaintext += ch;                }            }            return plaintext;        }        /// <summary>        /// Avocat解密（密钥为10）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string AvocatDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, 10);        }        /// <summary>        /// ROT13解密（密钥为13）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string ROT13DeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, 13);        }        /// <summary>        /// Cassis解密（密钥为-5）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string CassisDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, -5);        }        /// <summary>        /// Cassette解密（密钥为-6）        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>明文</returns>        internal string CassetteDeCrypt(string ciphertext)        {            return DeCrypt(ciphertext, -6);        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ceasar类核心解读：</p><p>​        在ceasar中理解的字母表是一个转轮的形式，但在实际的存储中而是以线性方式存储，所有在本代码中通过使用《初等数论》中的<strong>模运算</strong>来得到移位后的字母。（全部以<strong>“A”</strong>为基准）</p><ol><li>得到<strong>给定字母</strong>与“A”的偏移量</li><li>计算<strong>移位后</strong>对“A”的偏移量</li><li><font color="red">在取模之前先加上一个基数，使之前的计算结果全部以转化为正数</font></li><li><strong>取模运算</strong>得到目标字母相对于“A”的偏移量</li><li>得到相对于“A”偏移字母的ASCII码并将其<strong>强制转化为字母</strong></li></ol><p><strong>Program测试类：</strong></p><pre class="line-numbers language-C#"><code class="language-C#">using System;namespace DemoCeasar{    class Program    {        static void Main(string[] args)        {            Console.Title = "欢迎使用Ceasar";            Console.WriteLine("请输入您期望的操作：(1:加密,0:解密)");            string str = Console.ReadLine();            int op;            if(int.TryParse(str,out op))            {                Ceasar ceasar = new Ceasar();                if (op == 1)                {                    Console.WriteLine("请输入明文：(字母串)");                    string plaintext = Console.ReadLine();                    Console.WriteLine("请输入密钥:(整数)");                    int key = Console.Read() - '0';                    string ciphertext = ceasar.EnCrypt(plaintext, key);                    Console.WriteLine("{0}加密之后的密文为:{1}",plaintext,ciphertext);                }                else if(op == 0)                {                    Console.WriteLine("请输入密文：(字母串)");                    string ciphertext = Console.ReadLine();                    Console.WriteLine("请输入密钥:(整数)");                    int key = Console.Read() - '0';                    string plaintext = ceasar.DeCrypt(ciphertext, key);                    Console.WriteLine(plaintext);                }                else                {                    Console.WriteLine("输入错误程序终止!!!");                }            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果显示"><a href="#结果显示" class="headerlink" title="结果显示"></a>结果显示</h1><p><strong>加密操作</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/EnCrypt.png" alt="EnCrypt"></center><p><strong>解密操作</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/DeCrypt.png" alt="DeCrypt"></center><h1 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h1><p>​        Ceasar密码作为经典的加密算法，在罗马时期有很好的应用。其明文空间M、密文空间C、密钥空间K<del>m</del>相同都为模26的余数集合，也即其加密的密钥有25种情况(<font color="blue">0不计算在内</font>)，通过枚举密钥的方式揣测明文。</p><h2 id="穷举搜索"><a href="#穷举搜索" class="headerlink" title="穷举搜索"></a>穷举搜索</h2><p><strong>CrackSeasar类</strong>：</p><pre class="line-numbers language-C#"><code class="language-C#">namespace Crack_Seasar{    public class CrackSeasar    {        #region 枚举检索        /// <summary>        /// 枚举搜索        /// </summary>        /// <param name="ciphertext">密文</param>        /// <returns>返回可能的明文字符串组</returns>        internal string[] EnumerativeSearch(string ciphertext)        {            string[] plaintext = new string[26];            string str = ciphertext.ToUpper();            // 枚举解密            for (int key = 1; key < 26; key++)            {                foreach (char ch in str)                {                    if (ch >= 'A' && ch <= 'Z')                    {                        plaintext[key - 1] += (char)('A' + (ch - 'A' - key + 26) % 26);                    }                    else                    {                        plaintext[key - 1] += ch;                    }                }            }            return plaintext;        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Program测试类</strong>：</p><pre class="line-numbers language-csahrp"><code class="language-csahrp">using System;namespace Crack_Seasar{    class Program    {        static void Main(string[] args)        {            Console.Title = "CrackSear";            Console.WriteLine("请输入待破解密文：");            string ciphertext = Console.ReadLine();            // 枚举搜索            CrackSeasar crackSeasar = new CrackSeasar();            string[] plaintext = crackSeasar.EnumerativeSearch(ciphertext);            // Display            for(int i = 0;i < 25;i++)            {                Console.WriteLine("key:{0} \t -> \t {1}", i + 1, plaintext[i]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong>：</p><center><img src="https://gitee.com/jixiansiwei/ImagesBed/raw/master/Security/Cryptography/CeasarCipher/EnumerativeSearch1.png" alt="EnumerativeSearch1"></center><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>参考链接</strong>：</p><p><a href="https://baike.baidu.com/item/恺撒密码/4905284?fromtitle=%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81&fromid=1336345&fr=aladdin" target="_blank" rel="noopener">凯撒密码-百度百科</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8639300.html" target="_blank" rel="noopener">凯撒密码加解密即破解实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 古典密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 古典密码 </tag>
            
            <tag> Ceasar </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
